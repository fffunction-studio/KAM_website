/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./theme/src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@barba/core/dist/barba.umd.js":
/*!****************************************************!*\
  !*** ./node_modules/@barba/core/dist/barba.umd.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

!function (t, n) {
  "object" == ( false ? undefined : _typeof(exports)) && "undefined" != typeof module ? module.exports = n() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (n),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(this, function () {
  var t = function () {
    function t() {}

    return t.prototype.then = function (r, i) {
      var e = new t(),
          o = this.s;

      if (o) {
        var u = 1 & o ? r : i;

        if (u) {
          try {
            n(e, 1, u(this.v));
          } catch (t) {
            n(e, 2, t);
          }

          return e;
        }

        return this;
      }

      return this.o = function (t) {
        try {
          var o = t.v;
          1 & t.s ? n(e, 1, r ? r(o) : o) : i ? n(e, 1, i(o)) : n(e, 2, o);
        } catch (t) {
          n(e, 2, t);
        }
      }, e;
    }, t;
  }();

  function n(r, i, e) {
    if (!r.s) {
      if (e instanceof t) {
        if (!e.s) return void (e.o = n.bind(null, r, i));
        1 & i && (i = e.s), e = e.v;
      }

      if (e && e.then) return void e.then(n.bind(null, r, i), n.bind(null, r, 2));
      r.s = i, r.v = e;
      var o = r.o;
      o && o(r);
    }
  }

  function r(t, n) {
    try {
      var r = t();
    } catch (t) {
      return n(t);
    }

    return r && r.then ? r.then(void 0, n) : r;
  }

  var i = {};
  !function () {
    function r(t) {
      this.t = t, this.i = null, this.u = null, this.h = null, this.l = null;
    }

    function e(t) {
      return {
        value: t,
        done: !0
      };
    }

    function o(t) {
      return {
        value: t,
        done: !1
      };
    }

    r.prototype[Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator"))] = function () {
      return this;
    }, r.prototype.p = function (n) {
      return this.u(n && n.then ? n.then(o) : o(n)), this.i = new t();
    }, r.prototype.next = function (r) {
      var o = this;
      return o.l = new Promise(function (u) {
        var f = o.i;

        if (null === f) {
          var _c = function _c(t) {
            o.u(t && t.then ? t.then(e) : e(t)), o.i = null, o.u = null;
          };

          var s = o.t;
          if (null === s) return u(o.l);
          o.t = null, o.u = u, s(o).then(_c, function (n) {
            if (n === i) _c(o.h);else {
              var r = new t();
              o.u(r), o.i = null, o.u = null, _resolve(r, 2, n);
            }
          });
        } else o.i = null, o.u = u, n(f, 1, r);
      });
    }, r.prototype["return"] = function (t) {
      var r = this;
      return r.l = new Promise(function (o) {
        var u = r.i;
        if (null === u) return null === r.t ? o(r.l) : (r.t = null, o(t && t.then ? t.then(e) : e(t)));
        r.h = t, r.u = o, r.i = null, n(u, 2, i);
      });
    }, r.prototype["throw"] = function (t) {
      var r = this;
      return r.l = new Promise(function (i, e) {
        var o = r.i;
        if (null === o) return null === r.t ? i(r.l) : (r.t = null, e(t));
        r.u = i, r.i = null, n(o, 2, t);
      });
    };
  }();
  var e,
      o,
      u = (function (t) {
    var n = t.exports = function (t, n) {
      return n = n || function () {}, function () {
        var r = !1,
            i = arguments,
            e = new Promise(function (n, e) {
          var o,
              u = t.apply({
            async: function async() {
              return r = !0, function (t, r) {
                t ? e(t) : n(r);
              };
            }
          }, Array.prototype.slice.call(i));
          r || (!(o = u) || "object" != _typeof(o) && "function" != typeof o || "function" != typeof o.then ? n(u) : u.then(n, e));
        });
        return e.then(n.bind(null, null), n), e;
      };
    };

    n.cb = function (t, r) {
      return n(function () {
        var n = Array.prototype.slice.call(arguments);
        return n.length === t.length - 1 && n.push(this.async()), t.apply(this, n);
      }, r);
    };
  }(e = {
    exports: {}
  }), e.exports);
  !function (t) {
    t[t.off = 0] = "off", t[t.error = 1] = "error", t[t.warning = 2] = "warning", t[t.info = 3] = "info", t[t.debug = 4] = "debug";
  }(o || (o = {}));

  var f = o.off,
      s = function s(t) {
    this.m = t;
  };

  s.getLevel = function () {
    return f;
  }, s.setLevel = function (t) {
    return f = o[t];
  }, s.prototype.print = function () {
    for (var t = [], n = arguments.length; n--;) {
      t[n] = arguments[n];
    }

    this.P(console.info, o.off, t);
  }, s.prototype.error = function () {
    for (var t = [], n = arguments.length; n--;) {
      t[n] = arguments[n];
    }

    this.P(console.error, o.error, t);
  }, s.prototype.warn = function () {
    for (var t = [], n = arguments.length; n--;) {
      t[n] = arguments[n];
    }

    this.P(console.warn, o.warning, t);
  }, s.prototype.info = function () {
    for (var t = [], n = arguments.length; n--;) {
      t[n] = arguments[n];
    }

    this.P(console.info, o.info, t);
  }, s.prototype.debug = function () {
    for (var t = [], n = arguments.length; n--;) {
      t[n] = arguments[n];
    }

    this.P(console.log, o.debug, t);
  }, s.prototype.P = function (t, n, r) {
    n <= s.getLevel() && t.apply(console, ["[" + this.m + "] "].concat(r));
  };

  var c = function c() {
    this.logger = new s("@barba/core"), this.all = ["ready", "page", "reset", "currentAdded", "currentRemoved", "nextAdded", "nextRemoved", "beforeAppear", "appear", "afterAppear", "appearCanceled", "before", "beforeLeave", "leave", "afterLeave", "leaveCanceled", "beforeEnter", "enter", "afterEnter", "enterCanceled", "after"], this.registered = new Map(), this.init();
  };

  c.prototype.init = function () {
    var t = this;
    this.registered.clear(), this.all.forEach(function (n) {
      t[n] || (t[n] = function (r, i) {
        void 0 === i && (i = null), t.registered.has(n) || t.registered.set(n, new Set()), t.registered.get(n).add({
          ctx: i,
          fn: r
        });
      });
    });
  }, c.prototype["do"] = function (t) {
    for (var n = [], r = arguments.length - 1; r-- > 0;) {
      n[r] = arguments[r + 1];
    }

    if (this.registered.has(t)) {
      var i = Promise.resolve();
      return this.registered.get(t).forEach(function (t) {
        var r = t.ctx ? t.fn.bind(t.ctx) : t.fn;
        i = i.then(function () {
          return u(r).apply(void 0, n);
        });
      }), i;
    }

    return Promise.resolve();
  }, c.prototype.clear = function () {
    var t = this;
    this.all.forEach(function (n) {
      delete t[n];
    }), this.init();
  }, c.prototype.help = function () {
    this.logger.info("Available hooks: " + this.all.join(","));
    var t = [];
    this.registered.forEach(function (n, r) {
      return t.push(r);
    }), this.logger.info("Registered hooks: " + t.join(","));
  };

  var a = new c(),
      h = function t(n, r, i) {
    return n instanceof RegExp ? function (t, n) {
      if (!n) return t;
      var r = t.source.match(/\((?!\?)/g);
      if (r) for (var i = 0; i < r.length; i++) {
        n.push({
          name: i,
          prefix: null,
          delimiter: null,
          optional: !1,
          repeat: !1,
          pattern: null
        });
      }
      return t;
    }(n, r) : Array.isArray(n) ? function (n, r, i) {
      for (var e = [], o = 0; o < n.length; o++) {
        e.push(t(n[o], r, i).source);
      }

      return new RegExp("(?:" + e.join("|") + ")", g(i));
    }(n, r, i) : function (t, n, r) {
      return E(w(t, r), n, r);
    }(n, r, i);
  },
      v = w,
      l = b,
      p = E,
      d = "/",
      m = new RegExp(["(\\\\.)", "(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?"].join("|"), "g");

  function w(t, n) {
    for (var r, i = [], e = 0, o = 0, u = "", f = n && n.delimiter || d, s = n && n.whitelist || void 0, c = !1; null !== (r = m.exec(t));) {
      var a = r[0],
          h = r[1],
          v = r.index;
      if (u += t.slice(o, v), o = v + a.length, h) u += h[1], c = !0;else {
        var l = "",
            p = r[2],
            w = r[3],
            b = r[4],
            g = r[5];

        if (!c && u.length) {
          var E = u.length - 1,
              x = u[E];
          (!s || s.indexOf(x) > -1) && (l = x, u = u.slice(0, E));
        }

        u && (i.push(u), u = "", c = !1);
        var A = w || b,
            T = l || f;
        i.push({
          name: p || e++,
          prefix: l,
          delimiter: T,
          optional: "?" === g || "*" === g,
          repeat: "+" === g || "*" === g,
          pattern: A ? P(A) : "[^" + y(T === f ? T : T + f) + "]+?"
        });
      }
    }

    return (u || o < t.length) && i.push(u + t.substr(o)), i;
  }

  function b(t) {
    for (var n = new Array(t.length), r = 0; r < t.length; r++) {
      "object" == _typeof(t[r]) && (n[r] = new RegExp("^(?:" + t[r].pattern + ")$"));
    }

    return function (r, i) {
      for (var e = "", o = i && i.encode || encodeURIComponent, u = 0; u < t.length; u++) {
        var f = t[u];

        if ("string" != typeof f) {
          var s,
              c = r ? r[f.name] : void 0;

          if (Array.isArray(c)) {
            if (!f.repeat) throw new TypeError('Expected "' + f.name + '" to not repeat, but got array');

            if (0 === c.length) {
              if (f.optional) continue;
              throw new TypeError('Expected "' + f.name + '" to not be empty');
            }

            for (var a = 0; a < c.length; a++) {
              if (s = o(c[a], f), !n[u].test(s)) throw new TypeError('Expected all "' + f.name + '" to match "' + f.pattern + '"');
              e += (0 === a ? f.prefix : f.delimiter) + s;
            }
          } else if ("string" != typeof c && "number" != typeof c && "boolean" != typeof c) {
            if (!f.optional) throw new TypeError('Expected "' + f.name + '" to be ' + (f.repeat ? "an array" : "a string"));
          } else {
            if (s = o(String(c), f), !n[u].test(s)) throw new TypeError('Expected "' + f.name + '" to match "' + f.pattern + '", but got "' + s + '"');
            e += f.prefix + s;
          }
        } else e += f;
      }

      return e;
    };
  }

  function y(t) {
    return t.replace(/([.+*?=^!:${}()[\]|\/\\])/g, "\\$1");
  }

  function P(t) {
    return t.replace(/([=!:$\/()])/g, "\\$1");
  }

  function g(t) {
    return t && t.sensitive ? "" : "i";
  }

  function E(t, n, r) {
    for (var i = (r = r || {}).strict, e = !1 !== r.start, o = !1 !== r.end, u = r.delimiter || d, f = [].concat(r.endsWith || []).map(y).concat("$").join("|"), s = e ? "^" : "", c = 0; c < t.length; c++) {
      var a = t[c];
      if ("string" == typeof a) s += y(a);else {
        var h = a.repeat ? "(?:" + a.pattern + ")(?:" + y(a.delimiter) + "(?:" + a.pattern + "))*" : a.pattern;
        n && n.push(a), s += a.optional ? a.prefix ? "(?:" + y(a.prefix) + "(" + h + "))?" : "(" + h + ")?" : y(a.prefix) + "(" + h + ")";
      }
    }

    if (o) i || (s += "(?:" + y(u) + ")?"), s += "$" === f ? "$" : "(?=" + f + ")";else {
      var v = t[t.length - 1],
          l = "string" == typeof v ? v[v.length - 1] === u : void 0 === v;
      i || (s += "(?:" + y(u) + "(?=" + f + "))?"), l || (s += "(?=" + y(u) + "|" + f + ")");
    }
    return new RegExp(s, g(r));
  }

  h.parse = v, h.compile = function (t, n) {
    return b(w(t, n));
  }, h.tokensToFunction = l, h.tokensToRegExp = p;

  var x = {
    container: "container",
    namespace: "namespace",
    prefix: "data-barba",
    prevent: "prevent",
    wrapper: "wrapper"
  },
      A = function A() {
    this.g = x, this.A = new DOMParser();
  };

  A.prototype.toString = function (t) {
    return t.outerHTML;
  }, A.prototype.toDocument = function (t) {
    return this.A.parseFromString(t, "text/html");
  }, A.prototype.toElement = function (t) {
    var n = document.createElement("div");
    return n.innerHTML = t, n;
  }, A.prototype.getHtml = function (t) {
    return void 0 === t && (t = document), this.toString(t.documentElement);
  }, A.prototype.getWrapper = function (t) {
    return void 0 === t && (t = document), t.querySelector("[" + this.g.prefix + '="' + this.g.wrapper + '"]');
  }, A.prototype.getContainer = function (t) {
    return void 0 === t && (t = document), t.querySelector("[" + this.g.prefix + '="' + this.g.container + '"]');
  }, A.prototype.getNamespace = function (t) {
    void 0 === t && (t = document);
    var n = t.querySelector("[" + this.g.prefix + "-" + this.g.namespace + "]");
    return n ? n.getAttribute(this.g.prefix + "-" + this.g.namespace) : null;
  }, A.prototype.getHref = function (t) {
    return t.getAttribute && t.getAttribute("href") ? t.href : null;
  };

  var T = new A(),
      j = function j() {
    this.T = [];
  },
      R = {
    current: {
      configurable: !0
    },
    previous: {
      configurable: !0
    }
  };

  j.prototype.add = function (t, n) {
    this.T.push({
      url: t,
      ns: n
    });
  }, j.prototype.remove = function () {
    this.T.pop();
  }, j.prototype.push = function (t, n) {
    this.add(t, n), window.history && window.history.pushState(null, "", t);
  }, j.prototype.cancel = function () {
    this.remove(), window.history && window.history.back();
  }, R.current.get = function () {
    return this.T[this.T.length - 1];
  }, R.previous.get = function () {
    return this.T.length < 2 ? null : this.T[this.T.length - 2];
  }, Object.defineProperties(j.prototype, R);

  var k = new j(),
      O = function O(t, n) {
    try {
      var r = function () {
        if (!n.next.html) return Promise.resolve(t).then(function (t) {
          var r = n.next,
              i = n.trigger;

          if (t) {
            var e = T.toElement(t);
            r.namespace = T.getNamespace(e), r.container = T.getContainer(e), r.html = t, "popstate" === i ? k.add(r.url.href, r.namespace) : k.push(r.url.href, r.namespace);
            var o = T.toDocument(t);
            document.title = o.title;
          }
        });
      }();

      return Promise.resolve(r && r.then ? r.then(function () {}) : void 0);
    } catch (t) {
      return Promise.reject(t);
    }
  },
      L = function L() {
    return new Promise(function (t) {
      window.requestAnimationFrame(t);
    });
  },
      M = h,
      S = {
    update: O,
    nextTick: L,
    pathToRegexp: M
  },
      $ = function $() {
    return window.location.origin;
  },
      q = function q(t) {
    var n = t || window.location.port,
        r = window.location.protocol;
    return "" !== n ? parseInt(n, 10) : "https:" === r ? 443 : 80;
  },
      C = function C(t) {
    var n,
        r = t.replace($(), ""),
        i = {},
        e = r.indexOf("#");
    e >= 0 && (n = r.slice(e + 1), r = r.slice(0, e));
    var o = r.indexOf("?");
    return o >= 0 && (i = B(r.slice(o + 1)), r = r.slice(0, o)), {
      hash: n,
      path: r,
      query: i
    };
  },
      B = function B(t) {
    return t.split("&").reduce(function (t, n) {
      var r = n.split("=");
      return t[r[0]] = r[1], t;
    }, {});
  },
      H = function H(t) {
    return t.replace(/#.*/, "");
  },
      I = {
    getHref: function getHref() {
      return window.location.href;
    },
    getOrigin: $,
    getPort: q,
    getPath: function getPath(t) {
      return C(t).path;
    },
    parse: C,
    parseQuery: B,
    clean: H
  },
      N = function N(t) {
    if (this.j = [], "boolean" == typeof t) this.R = t;else {
      var n = Array.isArray(t) ? t : [t];
      this.j = n.map(function (t) {
        return M(t);
      });
    }
  };

  N.prototype.checkUrl = function (t) {
    if ("boolean" == typeof this.R) return this.R;
    var n = C(t).path;
    return this.j.some(function (t) {
      return null !== t.exec(n);
    });
  };

  var U = function (t) {
    function n(n) {
      t.call(this, n), this.T = new Map();
    }

    return t && (n.__proto__ = t), (n.prototype = Object.create(t && t.prototype)).constructor = n, n.prototype.set = function (t, n, r) {
      return this.checkUrl(t) || this.T.set(t, {
        action: r,
        request: n
      }), {
        action: r,
        request: n
      };
    }, n.prototype.get = function (t) {
      return this.T.get(t);
    }, n.prototype.getRequest = function (t) {
      return this.T.get(t).request;
    }, n.prototype.getAction = function (t) {
      return this.T.get(t).action;
    }, n.prototype.has = function (t) {
      return this.T.has(t);
    }, n.prototype["delete"] = function (t) {
      return this.T["delete"](t);
    }, n.prototype.update = function (t, n) {
      var r = Object.assign({}, this.T.get(t), n);
      return this.T.set(t, r), r;
    }, n;
  }(N);

  function D(t, n, r) {
    return void 0 === n && (n = 2e3), new Promise(function (i, e) {
      var o = new XMLHttpRequest();
      o.onreadystatechange = function () {
        if (o.readyState === XMLHttpRequest.DONE) if (200 === o.status) i(o.responseText);else if (o.status) {
          var n = {
            status: o.status,
            statusText: o.statusText
          };
          r(t, n), e(n);
        }
      }, o.ontimeout = function () {
        var i = new Error("Timeout error [" + n + "]");
        r(t, i), e(i);
      }, o.onerror = function () {
        var n = new Error("Fetch error");
        r(t, n), e(n);
      }, o.open("GET", t), o.timeout = n, o.setRequestHeader("Accept", "text/html,application/xhtml+xml,application/xml"), o.setRequestHeader("x-barba", "yes"), o.send();
    });
  }

  var X = function X() {
    return !window.history.pushState;
  },
      _ = function _(t) {
    return !t.el || !t.href;
  },
      F = function F(t) {
    var n = t.event;
    return n.which > 1 || n.metaKey || n.ctrlKey || n.shiftKey || n.altKey;
  },
      G = function G(t) {
    var n = t.el;
    return n.hasAttribute("target") && "_blank" === n.target;
  },
      Q = function Q(t) {
    var n = t.el;
    return window.location.protocol !== n.protocol || window.location.hostname !== n.hostname;
  },
      W = function W(t) {
    var n = t.el;
    return q() !== q(n.port);
  },
      z = function z(t) {
    var n = t.el;
    return n.getAttribute && "string" == typeof n.getAttribute("download");
  },
      J = function J(t) {
    return t.el.hasAttribute(x.prefix + "-" + x.prevent);
  },
      K = function K(t) {
    return Boolean(t.el.closest("[" + x.prefix + "-" + x.prevent + '="all"]'));
  },
      V = function V(t) {
    return H(t.href) === H(window.location.href);
  },
      Y = function (t) {
    function n(n) {
      t.call(this, n), this.suite = [], this.tests = new Map(), this.init();
    }

    return t && (n.__proto__ = t), (n.prototype = Object.create(t && t.prototype)).constructor = n, n.prototype.init = function () {
      this.add("pushState", X), this.add("exists", _), this.add("newTab", F), this.add("blank", G), this.add("corsDomain", Q), this.add("corsPort", W), this.add("download", z), this.add("preventSelf", J), this.add("preventAll", K), this.add("sameUrl", V, !1);
    }, n.prototype.add = function (t, n, r) {
      void 0 === r && (r = !0), this.tests.set(t, n), r && this.suite.push(t);
    }, n.prototype.run = function (t, n, r, i) {
      return this.tests.get(t)({
        el: n,
        event: r,
        href: i
      });
    }, n.prototype.checkLink = function (t, n, r) {
      var i = this;
      return this.suite.some(function (e) {
        return i.run(e, t, n, r);
      });
    }, n;
  }(N),
      Z = function Z(t) {
    void 0 === t && (t = []), this.logger = new s("@barba/core"), this.all = [], this.appear = [], this.k = [{
      name: "namespace",
      type: "strings"
    }, {
      name: "custom",
      type: "function"
    }], t && (this.all = this.all.concat(t)), this.update();
  };

  Z.prototype.add = function (t, n) {
    switch (t) {
      case "rule":
        this.k.splice(n.position || 0, 0, n.value);
        break;

      case "transition":
      default:
        this.all.push(n);
    }

    this.update();
  }, Z.prototype.resolve = function (t, n) {
    var r,
        i = this;
    void 0 === n && (n = {});
    var e = n.appear ? this.appear : this.all;
    e = e.filter(n.self ? function (t) {
      return t.name && "self" === t.name;
    } : function (t) {
      return !t.name || "self" !== t.name;
    });
    var o = new Map(),
        u = e.find(function (r) {
      var e = !0,
          u = {};
      return !(!n.self || "self" !== r.name) || (i.k.reverse().forEach(function (o) {
        e && (e = i.O(r, o, t, u), n.appear || (r.from && r.to && (e = i.O(r, o, t, u, "from") && i.O(r, o, t, u, "to")), r.from && !r.to && (e = i.O(r, o, t, u, "from")), !r.from && r.to && (e = i.O(r, o, t, u, "to"))));
      }), o.set(r, u), e);
    }),
        f = o.get(u),
        s = [];

    if (s.push(n.appear ? "appear" : "page"), n.self && s.push("self"), f) {
      var c = [u];
      Object.keys(f).length > 0 && c.push(f), (r = this.logger).info.apply(r, ["Transition found [" + s.join(",") + "]"].concat(c));
    } else this.logger.info("No transition found [" + s.join(",") + "]");

    return u;
  }, Z.prototype.update = function () {
    var t = this;
    this.all = this.all.map(function (n) {
      return t.L(n);
    }).sort(function (t, n) {
      return t.priority - n.priority;
    }).reverse().map(function (t) {
      return delete t.priority, t;
    }), this.appear = this.all.filter(function (t) {
      return void 0 !== t.appear;
    });
  }, Z.prototype.O = function (t, n, r, i, e) {
    var o = !0,
        u = !1,
        f = t,
        s = n.name,
        c = s,
        a = s,
        h = s,
        v = e ? f[e] : f,
        l = "to" === e ? r.next : r.current;

    if (e ? v && v[s] : v[s]) {
      switch (n.type) {
        case "strings":
        default:
          var p = Array.isArray(v[c]) ? v[c] : [v[c]];
          l[c] && -1 !== p.indexOf(l[c]) && (u = !0), -1 === p.indexOf(l[c]) && (o = !1);
          break;

        case "object":
          var d = Array.isArray(v[a]) ? v[a] : [v[a]];
          l[a] && (l[a].name && -1 !== d.indexOf(l[a].name) && (u = !0), -1 === d.indexOf(l[a].name) && (o = !1));
          break;

        case "function":
          v[h](r) ? u = !0 : o = !1;
      }

      u && (e ? (i[e] = i[e] || {}, i[e][s] = f[e][s]) : i[s] = f[s]);
    }

    return o;
  }, Z.prototype.M = function (t, n, r) {
    var i = 0;
    return (t[n] || t.from && t.from[n] || t.to && t.to[n]) && (i += Math.pow(10, r), t.from && t.from[n] && (i += 1), t.to && t.to[n] && (i += 2)), i;
  }, Z.prototype.L = function (t) {
    var n = this;
    t.priority = 0;
    var r = 0;
    return this.k.forEach(function (i, e) {
      r += n.M(t, i.name, e + 1);
    }), t.priority = r, t;
  };

  var tt = function tt(t) {
    void 0 === t && (t = []), this.logger = new s("@barba/core"), this.S = !1, this.store = new Z(t);
  },
      nt = {
    isRunning: {
      configurable: !0
    },
    hasAppear: {
      configurable: !0
    },
    hasSelf: {
      configurable: !0
    },
    shouldWait: {
      configurable: !0
    }
  };

  tt.prototype.get = function (t, n) {
    return this.store.resolve(t, n);
  }, nt.isRunning.get = function () {
    return this.S;
  }, nt.isRunning.set = function (t) {
    this.S = t;
  }, nt.hasAppear.get = function () {
    return this.store.appear.length > 0;
  }, nt.hasSelf.get = function () {
    return this.store.all.some(function (t) {
      return "self" === t.name;
    });
  }, nt.shouldWait.get = function () {
    return this.store.all.some(function (t) {
      return t.to && !t.to.route || t.sync;
    });
  }, tt.prototype.doAppear = function (t) {
    var n = t.data,
        i = t.transition;

    try {
      var _o = function _o(t) {
        e.S = !1;
      };

      var e = this;
      var u = i || {};
      e.S = !0;
      var f = r(function () {
        return Promise.resolve(e.$("beforeAppear", n, u)).then(function () {
          return Promise.resolve(e.appear(n, u)).then(function () {
            return Promise.resolve(e.$("afterAppear", n, u)).then(function () {});
          });
        });
      }, function (t) {
        throw e.S = !1, e.logger.error(t), new Error("Transition error [appear]");
      });
      return f && f.then ? f.then(_o) : _o();
    } catch (t) {
      return Promise.reject(t);
    }
  }, tt.prototype.doPage = function (t) {
    var n = t.data,
        i = t.transition,
        e = t.page,
        o = t.wrapper;

    try {
      var _f = function _f(t) {
        u.S = !1;
      };

      var u = this;
      var s = i || {},
          c = !0 === s.sync || !1;
      u.S = !0;
      var a = r(function () {
        function t() {
          return Promise.resolve(u.$("before", n, s)).then(function () {
            function t(t) {
              return Promise.resolve(u.$("after", n, s)).then(function () {
                return Promise.resolve(u.remove(n)).then(function () {});
              });
            }

            var i = function () {
              if (c) return r(function () {
                return Promise.resolve(u.add(n, o)).then(function () {
                  return Promise.resolve(u.$("beforeLeave", n, s)).then(function () {
                    return Promise.resolve(u.$("beforeEnter", n, s)).then(function () {
                      return Promise.resolve(Promise.all([u.leave(n, s), u.enter(n, s)])).then(function () {
                        return Promise.resolve(u.$("afterLeave", n, s)).then(function () {
                          return Promise.resolve(u.$("afterEnter", n, s)).then(function () {});
                        });
                      });
                    });
                  });
                });
              }, function () {
                throw new Error("Transition error [page][sync]");
              });
              {
                var _t = function _t(t) {
                  return r(function () {
                    var t = function () {
                      if (!1 !== i) return Promise.resolve(u.add(n, o)).then(function () {
                        return Promise.resolve(u.$("beforeEnter", n, s)).then(function () {
                          return Promise.resolve(u.enter(n, s, i)).then(function () {
                            return Promise.resolve(u.$("afterEnter", n, s)).then(function () {});
                          });
                        });
                      });
                    }();

                    if (t && t.then) return t.then(function () {});
                  }, function () {
                    throw new Error("Transition error [page][enter]");
                  });
                };

                var i = !1,
                    f = r(function () {
                  return Promise.resolve(u.$("beforeLeave", n, s)).then(function () {
                    return Promise.resolve(Promise.all([u.leave(n, s), O(e, n)]).then(function (t) {
                      return t[0];
                    })).then(function (t) {
                      return i = t, Promise.resolve(u.$("afterLeave", n, s)).then(function () {});
                    });
                  });
                }, function () {
                  throw new Error("Transition error [page][leave]");
                });
                return f && f.then ? f.then(_t) : _t();
              }
            }();

            return i && i.then ? i.then(t) : t();
          });
        }

        var i = function () {
          if (c) return Promise.resolve(O(e, n)).then(function () {});
        }();

        return i && i.then ? i.then(t) : t();
      }, function (t) {
        throw u.S = !1, u.logger.error(t), new Error("Transition error");
      });
      return a && a.then ? a.then(_f) : _f();
    } catch (t) {
      return Promise.reject(t);
    }
  }, tt.prototype.appear = function (t, n) {
    try {
      return Promise.resolve(a["do"]("appear", t, n)).then(function () {
        return n.appear ? u(n.appear)(t) : Promise.resolve();
      });
    } catch (t) {
      return Promise.reject(t);
    }
  }, tt.prototype.leave = function (t, n) {
    try {
      return Promise.resolve(a["do"]("leave", t, n)).then(function () {
        return n.leave ? u(n.leave)(t) : Promise.resolve();
      });
    } catch (t) {
      return Promise.reject(t);
    }
  }, tt.prototype.enter = function (t, n, r) {
    try {
      return Promise.resolve(a["do"]("enter", t, n)).then(function () {
        return n.enter ? u(n.enter)(t, r) : Promise.resolve();
      });
    } catch (t) {
      return Promise.reject(t);
    }
  }, tt.prototype.add = function (t, n) {
    try {
      return n.appendChild(t.next.container), Promise.resolve(L()).then(function () {
        a["do"]("nextAdded", t);
      });
    } catch (t) {
      return Promise.reject(t);
    }
  }, tt.prototype.remove = function (t) {
    try {
      var n = t.current.container,
          r = function () {
        if (document.body.contains(n)) return Promise.resolve(L()).then(function () {
          return n.parentNode.removeChild(n), Promise.resolve(L()).then(function () {
            a["do"]("currentRemoved", t);
          });
        });
      }();

      return r && r.then ? r.then(function () {}) : void 0;
    } catch (t) {
      return Promise.reject(t);
    }
  }, tt.prototype.$ = function (t, n, r) {
    try {
      return Promise.resolve(a["do"](t, n, r)).then(function () {
        return r[t] ? u(r[t])(n) : Promise.resolve();
      });
    } catch (t) {
      return Promise.reject(t);
    }
  }, Object.defineProperties(tt.prototype, nt);

  var rt = function rt(t) {
    var n = this;
    this.names = ["beforeAppear", "afterAppear", "beforeLeave", "afterLeave", "beforeEnter", "afterEnter"], this.byNamespace = new Map(), 0 !== t.length && (t.forEach(function (t) {
      n.byNamespace.set(t.namespace, t);
    }), this.names.forEach(function (t) {
      a[t](n.q(t), n);
    }), a.ready(this.q("beforeEnter"), this));
  };

  rt.prototype.q = function (t) {
    var n = this;
    return function (r) {
      var i = t.match(/enter/i) ? r.next : r.current,
          e = n.byNamespace.get(i.namespace);
      e && e[t] && e[t](r);
    };
  }, Element.prototype.matches || (Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector), Element.prototype.closest || (Element.prototype.closest = function (t) {
    var n = this;

    do {
      if (n.matches(t)) return n;
      n = n.parentElement || n.parentNode;
    } while (null !== n && 1 === n.nodeType);

    return null;
  });

  var it = {
    container: void 0,
    html: void 0,
    namespace: void 0,
    url: {
      hash: void 0,
      href: void 0,
      path: void 0,
      query: {}
    }
  },
      et = function et() {
    this.version = "2.3.9", this.schemaPage = it, this.Logger = s, this.logger = new s("@barba/core"), this.plugins = [], this.hooks = a, this.dom = T, this.helpers = S, this.history = k, this.request = D, this.url = I;
  },
      ot = {
    data: {
      configurable: !0
    },
    wrapper: {
      configurable: !0
    }
  };

  return et.prototype.use = function (t, n) {
    var r = this.plugins;
    r.indexOf(t) > -1 ? this.logger.warn("Plugin [" + t.name + "] already installed.") : "function" == typeof t.install ? (t.install(this, n), r.push(t)) : this.logger.warn("Plugin [" + t.name + '] has no "install" method.');
  }, et.prototype.init = function (t) {
    void 0 === t && (t = {});
    var n = t.transitions;
    void 0 === n && (n = []);
    var r = t.views;
    void 0 === r && (r = []);
    var i = t.prevent;
    void 0 === i && (i = null);
    var e = t.timeout;
    void 0 === e && (e = 2e3);
    var o = t.requestError,
        u = t.cacheIgnore;
    void 0 === u && (u = !1);
    var f = t.prefetchIgnore;
    void 0 === f && (f = !1);
    var c = t.schema;
    void 0 === c && (c = x);
    var a = t.debug;
    void 0 === a && (a = !1);
    var h = t.logLevel;
    if (void 0 === h && (h = "off"), s.setLevel(!0 === a ? "debug" : h), this.logger.print(this.version), Object.keys(c).forEach(function (t) {
      x[t] && (x[t] = c[t]);
    }), this.C = o, this.timeout = e, this.cacheIgnore = u, this.prefetchIgnore = f, this.B = this.dom.getWrapper(), !this.B) throw new Error("[@barba/core] No Barba wrapper found");
    this.B.setAttribute("aria-live", "polite"), this.H();
    var v = this.data.current;
    if (!v.container) throw new Error("[@barba/core] No Barba container found");

    if (this.cache = new U(u), this.prevent = new Y(f), this.transitions = new tt(n), this.views = new rt(r), null !== i) {
      if ("function" != typeof i) throw new Error("[@barba/core] Prevent should be a function");
      this.prevent.add("preventCustom", i);
    }

    this.history.add(v.url.href, v.namespace), this.I = this.I.bind(this), this.N = this.N.bind(this), this.U = this.U.bind(this), this.D(), this.plugins.forEach(function (t) {
      return t.init();
    });
    var l = this.data;
    l.trigger = "barba", l.next = l.current, this.hooks["do"]("ready", l), this.appear(), this.H();
  }, et.prototype.destroy = function () {
    this.H(), this.X(), this.hooks.clear(), this.plugins = [];
  }, ot.data.get = function () {
    return this._;
  }, ot.wrapper.get = function () {
    return this.B;
  }, et.prototype.force = function (t) {
    window.location.assign(t);
  }, et.prototype.go = function (t, n, r) {
    var i;
    if (void 0 === n && (n = "barba"), !(i = "popstate" === n ? this.history.current && this.url.getPath(this.history.current.url) === this.url.getPath(t) : this.prevent.run("sameUrl", null, null, t)) || this.transitions.hasSelf) return r && (r.stopPropagation(), r.preventDefault()), this.page(t, n, i);
  }, et.prototype.appear = function () {
    try {
      var t = this,
          n = function () {
        if (t.transitions.hasAppear) {
          var n = r(function () {
            var n = t._,
                r = t.transitions.get(n, {
              appear: !0
            });
            return Promise.resolve(t.transitions.doAppear({
              transition: r,
              data: n
            })).then(function () {});
          }, function (n) {
            t.logger.error(n);
          });
          if (n && n.then) return n.then(function () {});
        }
      }();

      return n && n.then ? n.then(function () {}) : void 0;
    } catch (t) {
      return Promise.reject(t);
    }
  }, et.prototype.page = function (t, n, i) {
    try {
      var _o2 = function _o2() {
        var t = e.data;
        e.hooks["do"]("page", t);
        var n = r(function () {
          var n = e.transitions.get(t, {
            appear: !1,
            self: i
          });
          return Promise.resolve(e.transitions.doPage({
            data: t,
            page: u,
            transition: n,
            wrapper: e.B
          })).then(function () {
            e.H();
          });
        }, function (t) {
          e.logger.error(t);
        });
        if (n && n.then) return n.then(function () {});
      };

      var e = this;
      if (e.transitions.isRunning) return void e.force(t);
      e.data.next.url = Object.assign({}, {
        href: t
      }, e.url.parse(t)), e.data.trigger = n;

      var u = e.cache.has(t) ? e.cache.update(t, {
        action: "click"
      }).request : e.cache.set(t, e.request(t, e.timeout, e.onRequestError.bind(e, n)), "click").request,
          f = function () {
        if (e.transitions.shouldWait) return Promise.resolve(O(u, e.data)).then(function () {});
      }();

      return f && f.then ? f.then(_o2) : _o2();
    } catch (t) {
      return Promise.reject(t);
    }
  }, et.prototype.onRequestError = function (t) {
    for (var n = [], r = arguments.length - 1; r-- > 0;) {
      n[r] = arguments[r + 1];
    }

    this.transitions.isRunning = !1;
    var i = n[0],
        e = n[1],
        o = this.cache.getAction(i);
    return this.cache["delete"](i), !(this.C && !1 === this.C(t, o, i, e) || ("click" === o && this.force(i), 1));
  }, et.prototype.prefetch = function (t) {
    var n = this;
    this.cache.has(t) || this.cache.set(t, this.request(t, this.timeout, this.onRequestError.bind(this, "barba"))["catch"](function (t) {
      n.logger.error(t);
    }), "prefetch");
  }, et.prototype.D = function () {
    !0 !== this.prefetchIgnore && (document.addEventListener("mouseover", this.I), document.addEventListener("touchstart", this.I)), document.addEventListener("click", this.N), window.addEventListener("popstate", this.U);
  }, et.prototype.X = function () {
    !0 !== this.prefetchIgnore && (document.removeEventListener("mouseover", this.I), document.removeEventListener("touchstart", this.I)), document.removeEventListener("click", this.N), window.removeEventListener("popstate", this.U);
  }, et.prototype.I = function (t) {
    var n = this,
        r = this.F(t);

    if (r) {
      var i = this.dom.getHref(r);
      this.prevent.checkUrl(i) || this.cache.has(i) || this.cache.set(i, this.request(i, this.timeout, this.onRequestError.bind(this, r))["catch"](function (t) {
        n.logger.error(t);
      }), "enter");
    }
  }, et.prototype.N = function (t) {
    var n = this.F(t);
    n && this.go(this.dom.getHref(n), n, t);
  }, et.prototype.U = function () {
    this.go(this.url.getHref(), "popstate");
  }, et.prototype.F = function (t) {
    for (var n = t.target; n && !this.dom.getHref(n);) {
      n = n.parentNode;
    }

    if (n && !this.prevent.checkLink(n, t, n.href)) return n;
  }, et.prototype.H = function () {
    var t = this.url.getHref(),
        n = {
      container: this.dom.getContainer(),
      html: this.dom.getHtml(),
      namespace: this.dom.getNamespace(),
      url: Object.assign({}, {
        href: t
      }, this.url.parse(t))
    };
    this._ = {
      current: n,
      next: Object.assign({}, this.schemaPage),
      trigger: void 0
    }, this.hooks["do"]("reset", this.data);
  }, Object.defineProperties(et.prototype, ot), new et();
});

/***/ }),

/***/ "./node_modules/@barba/css/dist/barba-css.umd.js":
/*!*******************************************************!*\
  !*** ./node_modules/@barba/css/dist/barba-css.umd.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

!function (t, i) {
  "object" == ( false ? undefined : _typeof(exports)) && "undefined" != typeof module ? module.exports = i() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (i),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(this, function () {
  var t = function t() {
    this.name = "@barba/css", this.version = "2.1.8", this.prefix = "barba", this.callbacks = {}, this.t = !1;
  };

  return t.prototype.install = function (t) {
    this.logger = new t.Logger(this.name), this.logger.print(this.version), this.barba = t, this.i = this.i.bind(this), this.s = this.s.bind(this), this.h = this.h.bind(this);
  }, t.prototype.init = function () {
    this.barba.hooks.before(this.o, this), this.barba.hooks.beforeAppear(this.o, this), this.barba.hooks.beforeAppear(this.u, this), this.barba.hooks.afterAppear(this.m, this), this.barba.hooks.beforeLeave(this.P, this), this.barba.hooks.afterLeave(this.p, this), this.barba.hooks.beforeEnter(this.v, this), this.barba.hooks.afterEnter(this.l, this), this.barba.transitions.appear = this.i, this.barba.transitions.leave = this.s, this.barba.transitions.enter = this.h, this.barba.transitions.store.all.unshift({
      name: "barba",
      appear: function appear() {},
      leave: function leave() {},
      enter: function enter() {}
    }), this.barba.transitions.store.update();
  }, t.prototype.start = function (t, i) {
    try {
      var n = this;
      return n.add(t, i), Promise.resolve(n.barba.helpers.nextTick()).then(function () {
        return n.add(t, i + "-active"), Promise.resolve(n.barba.helpers.nextTick()).then(function () {});
      });
    } catch (t) {
      return Promise.reject(t);
    }
  }, t.prototype.next = function (t, i) {
    try {
      var n = this;
      return n.t = n.g(t), n.t ? new Promise(function (r) {
        try {
          return n.cb = r, n.callbacks[i] = r, t.addEventListener("transitionend", r, !1), Promise.resolve(n.barba.helpers.nextTick()).then(function () {
            return n.remove(t, i), n.add(t, i + "-to"), Promise.resolve(n.barba.helpers.nextTick()).then(function () {});
          });
        } catch (t) {
          return Promise.reject(t);
        }
      }) : (n.remove(t, i), Promise.resolve(n.barba.helpers.nextTick()).then(function () {
        return n.add(t, i + "-to"), Promise.resolve(n.barba.helpers.nextTick()).then(function () {});
      }));
    } catch (t) {
      return Promise.reject(t);
    }
  }, t.prototype.end = function (t, i) {
    try {
      this.remove(t, i + "-to"), this.remove(t, i + "-active"), t.removeEventListener("transitionend", this.callbacks[i]), this.t = !1;
    } catch (t) {
      return Promise.reject(t);
    }
  }, t.prototype.add = function (t, i) {
    t.classList.add(this.prefix + "-" + i);
  }, t.prototype.remove = function (t, i) {
    t.classList.remove(this.prefix + "-" + i);
  }, t.prototype.o = function (t, i) {
    this.prefix = i.name || "barba";
  }, t.prototype.g = function (t) {
    return "0s" !== getComputedStyle(t).transitionDuration;
  }, t.prototype.u = function (t) {
    return this.start(t.current.container, "appear");
  }, t.prototype.i = function (t, i) {
    try {
      var n = this;
      return Promise.resolve(n.barba.hooks["do"]("appear", t, i)).then(function () {
        return n.next(t.current.container, "appear");
      });
    } catch (t) {
      return Promise.reject(t);
    }
  }, t.prototype.m = function (t) {
    return this.end(t.current.container, "appear");
  }, t.prototype.P = function (t) {
    return this.start(t.current.container, "leave");
  }, t.prototype.s = function (t, i) {
    try {
      var n = this;
      return Promise.resolve(n.barba.hooks["do"]("leave", t, i)).then(function () {
        return n.next(t.current.container, "leave");
      });
    } catch (t) {
      return Promise.reject(t);
    }
  }, t.prototype.p = function (t) {
    return this.end(t.current.container, "leave"), this.barba.transitions.remove(t), Promise.resolve();
  }, t.prototype.v = function (t) {
    return this.start(t.next.container, "enter");
  }, t.prototype.h = function (t, i) {
    try {
      var n = this;
      return Promise.resolve(n.barba.hooks["do"]("enter", t, i)).then(function () {
        return n.next(t.next.container, "enter");
      });
    } catch (t) {
      return Promise.reject(t);
    }
  }, t.prototype.l = function (t) {
    return this.end(t.next.container, "enter");
  }, new t();
});

/***/ }),

/***/ "./node_modules/animejs/lib/anime.es.js":
/*!**********************************************!*\
  !*** ./node_modules/animejs/lib/anime.es.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 * anime.js v3.0.1
 * (c) 2019 Julian Garnier
 * Released under the MIT license
 * animejs.com
 */
// Defaults
var defaultInstanceSettings = {
  update: null,
  begin: null,
  loopBegin: null,
  changeBegin: null,
  change: null,
  changeComplete: null,
  loopComplete: null,
  complete: null,
  loop: 1,
  direction: 'normal',
  autoplay: true,
  timelineOffset: 0
};
var defaultTweenSettings = {
  duration: 1000,
  delay: 0,
  endDelay: 0,
  easing: 'easeOutElastic(1, .5)',
  round: 0
};
var validTransforms = ['translateX', 'translateY', 'translateZ', 'rotate', 'rotateX', 'rotateY', 'rotateZ', 'scale', 'scaleX', 'scaleY', 'scaleZ', 'skew', 'skewX', 'skewY', 'perspective']; // Caching

var cache = {
  CSS: {},
  springs: {}
}; // Utils

function minMax(val, min, max) {
  return Math.min(Math.max(val, min), max);
}

function stringContains(str, text) {
  return str.indexOf(text) > -1;
}

function applyArguments(func, args) {
  return func.apply(null, args);
}

var is = {
  arr: function arr(a) {
    return Array.isArray(a);
  },
  obj: function obj(a) {
    return stringContains(Object.prototype.toString.call(a), 'Object');
  },
  pth: function pth(a) {
    return is.obj(a) && a.hasOwnProperty('totalLength');
  },
  svg: function svg(a) {
    return a instanceof SVGElement;
  },
  inp: function inp(a) {
    return a instanceof HTMLInputElement;
  },
  dom: function dom(a) {
    return a.nodeType || is.svg(a);
  },
  str: function str(a) {
    return typeof a === 'string';
  },
  fnc: function fnc(a) {
    return typeof a === 'function';
  },
  und: function und(a) {
    return typeof a === 'undefined';
  },
  hex: function hex(a) {
    return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a);
  },
  rgb: function rgb(a) {
    return /^rgb/.test(a);
  },
  hsl: function hsl(a) {
    return /^hsl/.test(a);
  },
  col: function col(a) {
    return is.hex(a) || is.rgb(a) || is.hsl(a);
  },
  key: function key(a) {
    return !defaultInstanceSettings.hasOwnProperty(a) && !defaultTweenSettings.hasOwnProperty(a) && a !== 'targets' && a !== 'keyframes';
  }
}; // Easings

function parseEasingParameters(string) {
  var match = /\(([^)]+)\)/.exec(string);
  return match ? match[1].split(',').map(function (p) {
    return parseFloat(p);
  }) : [];
} // Spring solver inspired by Webkit Copyright © 2016 Apple Inc. All rights reserved. https://webkit.org/demos/spring/spring.js


function spring(string, duration) {
  var params = parseEasingParameters(string);
  var mass = minMax(is.und(params[0]) ? 1 : params[0], .1, 100);
  var stiffness = minMax(is.und(params[1]) ? 100 : params[1], .1, 100);
  var damping = minMax(is.und(params[2]) ? 10 : params[2], .1, 100);
  var velocity = minMax(is.und(params[3]) ? 0 : params[3], .1, 100);
  var w0 = Math.sqrt(stiffness / mass);
  var zeta = damping / (2 * Math.sqrt(stiffness * mass));
  var wd = zeta < 1 ? w0 * Math.sqrt(1 - zeta * zeta) : 0;
  var a = 1;
  var b = zeta < 1 ? (zeta * w0 + -velocity) / wd : -velocity + w0;

  function solver(t) {
    var progress = duration ? duration * t / 1000 : t;

    if (zeta < 1) {
      progress = Math.exp(-progress * zeta * w0) * (a * Math.cos(wd * progress) + b * Math.sin(wd * progress));
    } else {
      progress = (a + b * progress) * Math.exp(-progress * w0);
    }

    if (t === 0 || t === 1) {
      return t;
    }

    return 1 - progress;
  }

  function getDuration() {
    var cached = cache.springs[string];

    if (cached) {
      return cached;
    }

    var frame = 1 / 6;
    var elapsed = 0;
    var rest = 0;

    while (true) {
      elapsed += frame;

      if (solver(elapsed) === 1) {
        rest++;

        if (rest >= 16) {
          break;
        }
      } else {
        rest = 0;
      }
    }

    var duration = elapsed * frame * 1000;
    cache.springs[string] = duration;
    return duration;
  }

  return duration ? solver : getDuration;
} // Elastic easing adapted from jQueryUI http://api.jqueryui.com/easings/


function elastic(amplitude, period) {
  if (amplitude === void 0) amplitude = 1;
  if (period === void 0) period = .5;
  var a = minMax(amplitude, 1, 10);
  var p = minMax(period, .1, 2);
  return function (t) {
    return t === 0 || t === 1 ? t : -a * Math.pow(2, 10 * (t - 1)) * Math.sin((t - 1 - p / (Math.PI * 2) * Math.asin(1 / a)) * (Math.PI * 2) / p);
  };
} // Basic steps easing implementation https://developer.mozilla.org/fr/docs/Web/CSS/transition-timing-function


function steps(steps) {
  if (steps === void 0) steps = 10;
  return function (t) {
    return Math.round(t * steps) * (1 / steps);
  };
} // BezierEasing https://github.com/gre/bezier-easing


var bezier = function () {
  var kSplineTableSize = 11;
  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

  function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
  }

  function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
  }

  function C(aA1) {
    return 3.0 * aA1;
  }

  function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
  }

  function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
  }

  function binarySubdivide(aX, aA, aB, mX1, mX2) {
    var currentX,
        currentT,
        i = 0;

    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;

      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > 0.0000001 && ++i < 10);

    return currentT;
  }

  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (var i = 0; i < 4; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);

      if (currentSlope === 0.0) {
        return aGuessT;
      }

      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }

    return aGuessT;
  }

  function bezier(mX1, mY1, mX2, mY2) {
    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
      return;
    }

    var sampleValues = new Float32Array(kSplineTableSize);

    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }

    function getTForX(aX) {
      var intervalStart = 0;
      var currentSample = 1;
      var lastSample = kSplineTableSize - 1;

      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }

      --currentSample;
      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);

      if (initialSlope >= 0.001) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }

    return function (x) {
      if (mX1 === mY1 && mX2 === mY2) {
        return x;
      }

      if (x === 0 || x === 1) {
        return x;
      }

      return calcBezier(getTForX(x), mY1, mY2);
    };
  }

  return bezier;
}();

var penner = function () {
  var names = ['Quad', 'Cubic', 'Quart', 'Quint', 'Sine', 'Expo', 'Circ', 'Back', 'Elastic']; // Approximated Penner equations http://matthewlein.com/ceaser/

  var curves = {
    In: [[0.550, 0.085, 0.680, 0.530],
    /* inQuad */
    [0.550, 0.055, 0.675, 0.190],
    /* inCubic */
    [0.895, 0.030, 0.685, 0.220],
    /* inQuart */
    [0.755, 0.050, 0.855, 0.060],
    /* inQuint */
    [0.470, 0.000, 0.745, 0.715],
    /* inSine */
    [0.950, 0.050, 0.795, 0.035],
    /* inExpo */
    [0.600, 0.040, 0.980, 0.335],
    /* inCirc */
    [0.600, -0.280, 0.735, 0.045],
    /* inBack */
    elastic
    /* inElastic */
    ],
    Out: [[0.250, 0.460, 0.450, 0.940],
    /* outQuad */
    [0.215, 0.610, 0.355, 1.000],
    /* outCubic */
    [0.165, 0.840, 0.440, 1.000],
    /* outQuart */
    [0.230, 1.000, 0.320, 1.000],
    /* outQuint */
    [0.390, 0.575, 0.565, 1.000],
    /* outSine */
    [0.190, 1.000, 0.220, 1.000],
    /* outExpo */
    [0.075, 0.820, 0.165, 1.000],
    /* outCirc */
    [0.175, 0.885, 0.320, 1.275],
    /* outBack */
    function (a, p) {
      return function (t) {
        return 1 - elastic(a, p)(1 - t);
      };
    }
    /* outElastic */
    ],
    InOut: [[0.455, 0.030, 0.515, 0.955],
    /* inOutQuad */
    [0.645, 0.045, 0.355, 1.000],
    /* inOutCubic */
    [0.770, 0.000, 0.175, 1.000],
    /* inOutQuart */
    [0.860, 0.000, 0.070, 1.000],
    /* inOutQuint */
    [0.445, 0.050, 0.550, 0.950],
    /* inOutSine */
    [1.000, 0.000, 0.000, 1.000],
    /* inOutExpo */
    [0.785, 0.135, 0.150, 0.860],
    /* inOutCirc */
    [0.680, -0.550, 0.265, 1.550],
    /* inOutBack */
    function (a, p) {
      return function (t) {
        return t < .5 ? elastic(a, p)(t * 2) / 2 : 1 - elastic(a, p)(t * -2 + 2) / 2;
      };
    }
    /* inOutElastic */
    ]
  };
  var eases = {
    linear: [0.250, 0.250, 0.750, 0.750]
  };

  var loop = function loop(coords) {
    curves[coords].forEach(function (ease, i) {
      eases['ease' + coords + names[i]] = ease;
    });
  };

  for (var coords in curves) {
    loop(coords);
  }

  return eases;
}();

function parseEasings(easing, duration) {
  if (is.fnc(easing)) {
    return easing;
  }

  var name = easing.split('(')[0];
  var ease = penner[name];
  var args = parseEasingParameters(easing);

  switch (name) {
    case 'spring':
      return spring(easing, duration);

    case 'cubicBezier':
      return applyArguments(bezier, args);

    case 'steps':
      return applyArguments(steps, args);

    default:
      return is.fnc(ease) ? applyArguments(ease, args) : applyArguments(bezier, ease);
  }
} // Strings


function selectString(str) {
  try {
    var nodes = document.querySelectorAll(str);
    return nodes;
  } catch (e) {
    return;
  }
} // Arrays


function filterArray(arr, callback) {
  var len = arr.length;
  var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
  var result = [];

  for (var i = 0; i < len; i++) {
    if (i in arr) {
      var val = arr[i];

      if (callback.call(thisArg, val, i, arr)) {
        result.push(val);
      }
    }
  }

  return result;
}

function flattenArray(arr) {
  return arr.reduce(function (a, b) {
    return a.concat(is.arr(b) ? flattenArray(b) : b);
  }, []);
}

function toArray(o) {
  if (is.arr(o)) {
    return o;
  }

  if (is.str(o)) {
    o = selectString(o) || o;
  }

  if (o instanceof NodeList || o instanceof HTMLCollection) {
    return [].slice.call(o);
  }

  return [o];
}

function arrayContains(arr, val) {
  return arr.some(function (a) {
    return a === val;
  });
} // Objects


function cloneObject(o) {
  var clone = {};

  for (var p in o) {
    clone[p] = o[p];
  }

  return clone;
}

function replaceObjectProps(o1, o2) {
  var o = cloneObject(o1);

  for (var p in o1) {
    o[p] = o2.hasOwnProperty(p) ? o2[p] : o1[p];
  }

  return o;
}

function mergeObjects(o1, o2) {
  var o = cloneObject(o1);

  for (var p in o2) {
    o[p] = is.und(o1[p]) ? o2[p] : o1[p];
  }

  return o;
} // Colors


function rgbToRgba(rgbValue) {
  var rgb = /rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(rgbValue);
  return rgb ? "rgba(" + rgb[1] + ",1)" : rgbValue;
}

function hexToRgba(hexValue) {
  var rgx = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  var hex = hexValue.replace(rgx, function (m, r, g, b) {
    return r + r + g + g + b + b;
  });
  var rgb = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  var r = parseInt(rgb[1], 16);
  var g = parseInt(rgb[2], 16);
  var b = parseInt(rgb[3], 16);
  return "rgba(" + r + "," + g + "," + b + ",1)";
}

function hslToRgba(hslValue) {
  var hsl = /hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(hslValue) || /hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(hslValue);
  var h = parseInt(hsl[1], 10) / 360;
  var s = parseInt(hsl[2], 10) / 100;
  var l = parseInt(hsl[3], 10) / 100;
  var a = hsl[4] || 1;

  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }

    if (t > 1) {
      t -= 1;
    }

    if (t < 1 / 6) {
      return p + (q - p) * 6 * t;
    }

    if (t < 1 / 2) {
      return q;
    }

    if (t < 2 / 3) {
      return p + (q - p) * (2 / 3 - t) * 6;
    }

    return p;
  }

  var r, g, b;

  if (s == 0) {
    r = g = b = l;
  } else {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = hue2rgb(p, q, h + 1 / 3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1 / 3);
  }

  return "rgba(" + r * 255 + "," + g * 255 + "," + b * 255 + "," + a + ")";
}

function colorToRgb(val) {
  if (is.rgb(val)) {
    return rgbToRgba(val);
  }

  if (is.hex(val)) {
    return hexToRgba(val);
  }

  if (is.hsl(val)) {
    return hslToRgba(val);
  }
} // Units


function getUnit(val) {
  var split = /([\+\-]?[0-9#\.]+)(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(val);

  if (split) {
    return split[2];
  }
}

function getTransformUnit(propName) {
  if (stringContains(propName, 'translate') || propName === 'perspective') {
    return 'px';
  }

  if (stringContains(propName, 'rotate') || stringContains(propName, 'skew')) {
    return 'deg';
  }
} // Values


function getFunctionValue(val, animatable) {
  if (!is.fnc(val)) {
    return val;
  }

  return val(animatable.target, animatable.id, animatable.total);
}

function getAttribute(el, prop) {
  return el.getAttribute(prop);
}

function convertPxToUnit(el, value, unit) {
  var valueUnit = getUnit(value);

  if (arrayContains([unit, 'deg', 'rad', 'turn'], valueUnit)) {
    return value;
  }

  var cached = cache.CSS[value + unit];

  if (!is.und(cached)) {
    return cached;
  }

  var baseline = 100;
  var tempEl = document.createElement(el.tagName);
  var parentEl = el.parentNode && el.parentNode !== document ? el.parentNode : document.body;
  parentEl.appendChild(tempEl);
  tempEl.style.position = 'absolute';
  tempEl.style.width = baseline + unit;
  var factor = baseline / tempEl.offsetWidth;
  parentEl.removeChild(tempEl);
  var convertedUnit = factor * parseFloat(value);
  cache.CSS[value + unit] = convertedUnit;
  return convertedUnit;
}

function getCSSValue(el, prop, unit) {
  if (prop in el.style) {
    var uppercasePropName = prop.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
    var value = el.style[prop] || getComputedStyle(el).getPropertyValue(uppercasePropName) || '0';
    return unit ? convertPxToUnit(el, value, unit) : value;
  }
}

function getAnimationType(el, prop) {
  if (is.dom(el) && !is.inp(el) && (getAttribute(el, prop) || is.svg(el) && el[prop])) {
    return 'attribute';
  }

  if (is.dom(el) && arrayContains(validTransforms, prop)) {
    return 'transform';
  }

  if (is.dom(el) && prop !== 'transform' && getCSSValue(el, prop)) {
    return 'css';
  }

  if (el[prop] != null) {
    return 'object';
  }
}

function getElementTransforms(el) {
  if (!is.dom(el)) {
    return;
  }

  var str = el.style.transform || '';
  var reg = /(\w+)\(([^)]*)\)/g;
  var transforms = new Map();
  var m;

  while (m = reg.exec(str)) {
    transforms.set(m[1], m[2]);
  }

  return transforms;
}

function getTransformValue(el, propName, animatable, unit) {
  var defaultVal = stringContains(propName, 'scale') ? 1 : 0 + getTransformUnit(propName);
  var value = getElementTransforms(el).get(propName) || defaultVal;

  if (animatable) {
    animatable.transforms.list.set(propName, value);
    animatable.transforms['last'] = propName;
  }

  return unit ? convertPxToUnit(el, value, unit) : value;
}

function getOriginalTargetValue(target, propName, unit, animatable) {
  switch (getAnimationType(target, propName)) {
    case 'transform':
      return getTransformValue(target, propName, animatable, unit);

    case 'css':
      return getCSSValue(target, propName, unit);

    case 'attribute':
      return getAttribute(target, propName);

    default:
      return target[propName] || 0;
  }
}

function getRelativeValue(to, from) {
  var operator = /^(\*=|\+=|-=)/.exec(to);

  if (!operator) {
    return to;
  }

  var u = getUnit(to) || 0;
  var x = parseFloat(from);
  var y = parseFloat(to.replace(operator[0], ''));

  switch (operator[0][0]) {
    case '+':
      return x + y + u;

    case '-':
      return x - y + u;

    case '*':
      return x * y + u;
  }
}

function validateValue(val, unit) {
  if (is.col(val)) {
    return colorToRgb(val);
  }

  var originalUnit = getUnit(val);
  var unitLess = originalUnit ? val.substr(0, val.length - originalUnit.length) : val;
  return unit && !/\s/g.test(val) ? unitLess + unit : unitLess;
} // getTotalLength() equivalent for circle, rect, polyline, polygon and line shapes
// adapted from https://gist.github.com/SebLambla/3e0550c496c236709744


function getDistance(p1, p2) {
  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
}

function getCircleLength(el) {
  return Math.PI * 2 * getAttribute(el, 'r');
}

function getRectLength(el) {
  return getAttribute(el, 'width') * 2 + getAttribute(el, 'height') * 2;
}

function getLineLength(el) {
  return getDistance({
    x: getAttribute(el, 'x1'),
    y: getAttribute(el, 'y1')
  }, {
    x: getAttribute(el, 'x2'),
    y: getAttribute(el, 'y2')
  });
}

function getPolylineLength(el) {
  var points = el.points;
  var totalLength = 0;
  var previousPos;

  for (var i = 0; i < points.numberOfItems; i++) {
    var currentPos = points.getItem(i);

    if (i > 0) {
      totalLength += getDistance(previousPos, currentPos);
    }

    previousPos = currentPos;
  }

  return totalLength;
}

function getPolygonLength(el) {
  var points = el.points;
  return getPolylineLength(el) + getDistance(points.getItem(points.numberOfItems - 1), points.getItem(0));
} // Path animation


function getTotalLength(el) {
  if (el.getTotalLength) {
    return el.getTotalLength();
  }

  switch (el.tagName.toLowerCase()) {
    case 'circle':
      return getCircleLength(el);

    case 'rect':
      return getRectLength(el);

    case 'line':
      return getLineLength(el);

    case 'polyline':
      return getPolylineLength(el);

    case 'polygon':
      return getPolygonLength(el);
  }
}

function setDashoffset(el) {
  var pathLength = getTotalLength(el);
  el.setAttribute('stroke-dasharray', pathLength);
  return pathLength;
} // Motion path


function getParentSvgEl(el) {
  var parentEl = el.parentNode;

  while (is.svg(parentEl)) {
    parentEl = parentEl.parentNode;

    if (!is.svg(parentEl.parentNode)) {
      break;
    }
  }

  return parentEl;
}

function getParentSvg(pathEl, svgData) {
  var svg = svgData || {};
  var parentSvgEl = svg.el || getParentSvgEl(pathEl);
  var rect = parentSvgEl.getBoundingClientRect();
  var viewBoxAttr = getAttribute(parentSvgEl, 'viewBox');
  var width = rect.width;
  var height = rect.height;
  var viewBox = svg.viewBox || (viewBoxAttr ? viewBoxAttr.split(' ') : [0, 0, width, height]);
  return {
    el: parentSvgEl,
    viewBox: viewBox,
    x: viewBox[0] / 1,
    y: viewBox[1] / 1,
    w: width / viewBox[2],
    h: height / viewBox[3]
  };
}

function getPath(path, percent) {
  var pathEl = is.str(path) ? selectString(path)[0] : path;
  var p = percent || 100;
  return function (property) {
    return {
      property: property,
      el: pathEl,
      svg: getParentSvg(pathEl),
      totalLength: getTotalLength(pathEl) * (p / 100)
    };
  };
}

function getPathProgress(path, progress) {
  function point(offset) {
    if (offset === void 0) offset = 0;
    var l = progress + offset >= 1 ? progress + offset : 0;
    return path.el.getPointAtLength(l);
  }

  var svg = getParentSvg(path.el, path.svg);
  var p = point();
  var p0 = point(-1);
  var p1 = point(+1);

  switch (path.property) {
    case 'x':
      return (p.x - svg.x) * svg.w;

    case 'y':
      return (p.y - svg.y) * svg.h;

    case 'angle':
      return Math.atan2(p1.y - p0.y, p1.x - p0.x) * 180 / Math.PI;
  }
} // Decompose value


function decomposeValue(val, unit) {
  var rgx = /-?\d*\.?\d+/g;
  var value = validateValue(is.pth(val) ? val.totalLength : val, unit) + '';
  return {
    original: value,
    numbers: value.match(rgx) ? value.match(rgx).map(Number) : [0],
    strings: is.str(val) || unit ? value.split(rgx) : []
  };
} // Animatables


function parseTargets(targets) {
  var targetsArray = targets ? flattenArray(is.arr(targets) ? targets.map(toArray) : toArray(targets)) : [];
  return filterArray(targetsArray, function (item, pos, self) {
    return self.indexOf(item) === pos;
  });
}

function getAnimatables(targets) {
  var parsed = parseTargets(targets);
  return parsed.map(function (t, i) {
    return {
      target: t,
      id: i,
      total: parsed.length,
      transforms: {
        list: getElementTransforms(t)
      }
    };
  });
} // Properties


function normalizePropertyTweens(prop, tweenSettings) {
  var settings = cloneObject(tweenSettings); // Override duration if easing is a spring

  if (/^spring/.test(settings.easing)) {
    settings.duration = spring(settings.easing);
  }

  if (is.arr(prop)) {
    var l = prop.length;
    var isFromTo = l === 2 && !is.obj(prop[0]);

    if (!isFromTo) {
      // Duration divided by the number of tweens
      if (!is.fnc(tweenSettings.duration)) {
        settings.duration = tweenSettings.duration / l;
      }
    } else {
      // Transform [from, to] values shorthand to a valid tween value
      prop = {
        value: prop
      };
    }
  }

  var propArray = is.arr(prop) ? prop : [prop];
  return propArray.map(function (v, i) {
    var obj = is.obj(v) && !is.pth(v) ? v : {
      value: v
    }; // Default delay value should only be applied to the first tween

    if (is.und(obj.delay)) {
      obj.delay = !i ? tweenSettings.delay : 0;
    } // Default endDelay value should only be applied to the last tween


    if (is.und(obj.endDelay)) {
      obj.endDelay = i === propArray.length - 1 ? tweenSettings.endDelay : 0;
    }

    return obj;
  }).map(function (k) {
    return mergeObjects(k, settings);
  });
}

function flattenKeyframes(keyframes) {
  var propertyNames = filterArray(flattenArray(keyframes.map(function (key) {
    return Object.keys(key);
  })), function (p) {
    return is.key(p);
  }).reduce(function (a, b) {
    if (a.indexOf(b) < 0) {
      a.push(b);
    }

    return a;
  }, []);
  var properties = {};

  var loop = function loop(i) {
    var propName = propertyNames[i];
    properties[propName] = keyframes.map(function (key) {
      var newKey = {};

      for (var p in key) {
        if (is.key(p)) {
          if (p == propName) {
            newKey.value = key[p];
          }
        } else {
          newKey[p] = key[p];
        }
      }

      return newKey;
    });
  };

  for (var i = 0; i < propertyNames.length; i++) {
    loop(i);
  }

  return properties;
}

function getProperties(tweenSettings, params) {
  var properties = [];
  var keyframes = params.keyframes;

  if (keyframes) {
    params = mergeObjects(flattenKeyframes(keyframes), params);
  }

  for (var p in params) {
    if (is.key(p)) {
      properties.push({
        name: p,
        tweens: normalizePropertyTweens(params[p], tweenSettings)
      });
    }
  }

  return properties;
} // Tweens


function normalizeTweenValues(tween, animatable) {
  var t = {};

  for (var p in tween) {
    var value = getFunctionValue(tween[p], animatable);

    if (is.arr(value)) {
      value = value.map(function (v) {
        return getFunctionValue(v, animatable);
      });

      if (value.length === 1) {
        value = value[0];
      }
    }

    t[p] = value;
  }

  t.duration = parseFloat(t.duration);
  t.delay = parseFloat(t.delay);
  return t;
}

function normalizeTweens(prop, animatable) {
  var previousTween;
  return prop.tweens.map(function (t) {
    var tween = normalizeTweenValues(t, animatable);
    var tweenValue = tween.value;
    var to = is.arr(tweenValue) ? tweenValue[1] : tweenValue;
    var toUnit = getUnit(to);
    var originalValue = getOriginalTargetValue(animatable.target, prop.name, toUnit, animatable);
    var previousValue = previousTween ? previousTween.to.original : originalValue;
    var from = is.arr(tweenValue) ? tweenValue[0] : previousValue;
    var fromUnit = getUnit(from) || getUnit(originalValue);
    var unit = toUnit || fromUnit;

    if (is.und(to)) {
      to = previousValue;
    }

    tween.from = decomposeValue(from, unit);
    tween.to = decomposeValue(getRelativeValue(to, from), unit);
    tween.start = previousTween ? previousTween.end : 0;
    tween.end = tween.start + tween.delay + tween.duration + tween.endDelay;
    tween.easing = parseEasings(tween.easing, tween.duration);
    tween.isPath = is.pth(tweenValue);
    tween.isColor = is.col(tween.from.original);

    if (tween.isColor) {
      tween.round = 1;
    }

    previousTween = tween;
    return tween;
  });
} // Tween progress


var setProgressValue = {
  css: function css(t, p, v) {
    return t.style[p] = v;
  },
  attribute: function attribute(t, p, v) {
    return t.setAttribute(p, v);
  },
  object: function object(t, p, v) {
    return t[p] = v;
  },
  transform: function transform(t, p, v, transforms, manual) {
    transforms.list.set(p, v);

    if (p === transforms.last || manual) {
      var str = '';
      transforms.list.forEach(function (value, prop) {
        str += prop + "(" + value + ") ";
      });
      t.style.transform = str;
    }
  }
}; // Set Value helper

function setTargetsValue(targets, properties) {
  var animatables = getAnimatables(targets);
  animatables.forEach(function (animatable) {
    for (var property in properties) {
      var value = getFunctionValue(properties[property], animatable);
      var target = animatable.target;
      var valueUnit = getUnit(value);
      var originalValue = getOriginalTargetValue(target, property, valueUnit, animatable);
      var unit = valueUnit || getUnit(originalValue);
      var to = getRelativeValue(validateValue(value, unit), originalValue);
      var animType = getAnimationType(target, property);
      setProgressValue[animType](target, property, to, animatable.transforms, true);
    }
  });
} // Animations


function createAnimation(animatable, prop) {
  var animType = getAnimationType(animatable.target, prop.name);

  if (animType) {
    var tweens = normalizeTweens(prop, animatable);
    var lastTween = tweens[tweens.length - 1];
    return {
      type: animType,
      property: prop.name,
      animatable: animatable,
      tweens: tweens,
      duration: lastTween.end,
      delay: tweens[0].delay,
      endDelay: lastTween.endDelay
    };
  }
}

function getAnimations(animatables, properties) {
  return filterArray(flattenArray(animatables.map(function (animatable) {
    return properties.map(function (prop) {
      return createAnimation(animatable, prop);
    });
  })), function (a) {
    return !is.und(a);
  });
} // Create Instance


function getInstanceTimings(animations, tweenSettings) {
  var animLength = animations.length;

  var getTlOffset = function getTlOffset(anim) {
    return anim.timelineOffset ? anim.timelineOffset : 0;
  };

  var timings = {};
  timings.duration = animLength ? Math.max.apply(Math, animations.map(function (anim) {
    return getTlOffset(anim) + anim.duration;
  })) : tweenSettings.duration;
  timings.delay = animLength ? Math.min.apply(Math, animations.map(function (anim) {
    return getTlOffset(anim) + anim.delay;
  })) : tweenSettings.delay;
  timings.endDelay = animLength ? timings.duration - Math.max.apply(Math, animations.map(function (anim) {
    return getTlOffset(anim) + anim.duration - anim.endDelay;
  })) : tweenSettings.endDelay;
  return timings;
}

var instanceID = 0;

function createNewInstance(params) {
  var instanceSettings = replaceObjectProps(defaultInstanceSettings, params);
  var tweenSettings = replaceObjectProps(defaultTweenSettings, params);
  var properties = getProperties(tweenSettings, params);
  var animatables = getAnimatables(params.targets);
  var animations = getAnimations(animatables, properties);
  var timings = getInstanceTimings(animations, tweenSettings);
  var id = instanceID;
  instanceID++;
  return mergeObjects(instanceSettings, {
    id: id,
    children: [],
    animatables: animatables,
    animations: animations,
    duration: timings.duration,
    delay: timings.delay,
    endDelay: timings.endDelay
  });
} // Core


var activeInstances = [];
var pausedInstances = [];
var raf;

var engine = function () {
  function play() {
    raf = requestAnimationFrame(step);
  }

  function step(t) {
    var activeInstancesLength = activeInstances.length;

    if (activeInstancesLength) {
      var i = 0;

      while (i < activeInstancesLength) {
        var activeInstance = activeInstances[i];

        if (!activeInstance.paused) {
          activeInstance.tick(t);
        } else {
          var instanceIndex = activeInstances.indexOf(activeInstance);

          if (instanceIndex > -1) {
            activeInstances.splice(instanceIndex, 1);
            activeInstancesLength = activeInstances.length;
          }
        }

        i++;
      }

      play();
    } else {
      raf = cancelAnimationFrame(raf);
    }
  }

  return play;
}();

function handleVisibilityChange() {
  if (document.hidden) {
    activeInstances.forEach(function (ins) {
      return ins.pause();
    });
    pausedInstances = activeInstances.slice(0);
    activeInstances = [];
  } else {
    pausedInstances.forEach(function (ins) {
      return ins.play();
    });
  }
}

if (typeof document !== 'undefined') {
  document.addEventListener('visibilitychange', handleVisibilityChange);
} // Public Instance


function anime(params) {
  if (params === void 0) params = {};
  var startTime = 0,
      lastTime = 0,
      now = 0;
  var children,
      childrenLength = 0;
  var resolve = null;

  function makePromise(instance) {
    var promise = window.Promise && new Promise(function (_resolve) {
      return resolve = _resolve;
    });
    instance.finished = promise;
    return promise;
  }

  var instance = createNewInstance(params);
  var promise = makePromise(instance);

  function toggleInstanceDirection() {
    var direction = instance.direction;

    if (direction !== 'alternate') {
      instance.direction = direction !== 'normal' ? 'normal' : 'reverse';
    }

    instance.reversed = !instance.reversed;
    children.forEach(function (child) {
      return child.reversed = instance.reversed;
    });
  }

  function adjustTime(time) {
    return instance.reversed ? instance.duration - time : time;
  }

  function resetTime() {
    startTime = 0;
    lastTime = adjustTime(instance.currentTime) * (1 / anime.speed);
  }

  function seekCild(time, child) {
    if (child) {
      child.seek(time - child.timelineOffset);
    }
  }

  function syncInstanceChildren(time) {
    if (!instance.reversePlayback) {
      for (var i = 0; i < childrenLength; i++) {
        seekCild(time, children[i]);
      }
    } else {
      for (var i$1 = childrenLength; i$1--;) {
        seekCild(time, children[i$1]);
      }
    }
  }

  function setAnimationsProgress(insTime) {
    var i = 0;
    var animations = instance.animations;
    var animationsLength = animations.length;

    while (i < animationsLength) {
      var anim = animations[i];
      var animatable = anim.animatable;
      var tweens = anim.tweens;
      var tweenLength = tweens.length - 1;
      var tween = tweens[tweenLength]; // Only check for keyframes if there is more than one tween

      if (tweenLength) {
        tween = filterArray(tweens, function (t) {
          return insTime < t.end;
        })[0] || tween;
      }

      var elapsed = minMax(insTime - tween.start - tween.delay, 0, tween.duration) / tween.duration;
      var eased = isNaN(elapsed) ? 1 : tween.easing(elapsed);
      var strings = tween.to.strings;
      var round = tween.round;
      var numbers = [];
      var toNumbersLength = tween.to.numbers.length;
      var progress = void 0;

      for (var n = 0; n < toNumbersLength; n++) {
        var value = void 0;
        var toNumber = tween.to.numbers[n];
        var fromNumber = tween.from.numbers[n] || 0;

        if (!tween.isPath) {
          value = fromNumber + eased * (toNumber - fromNumber);
        } else {
          value = getPathProgress(tween.value, eased * toNumber);
        }

        if (round) {
          if (!(tween.isColor && n > 2)) {
            value = Math.round(value * round) / round;
          }
        }

        numbers.push(value);
      } // Manual Array.reduce for better performances


      var stringsLength = strings.length;

      if (!stringsLength) {
        progress = numbers[0];
      } else {
        progress = strings[0];

        for (var s = 0; s < stringsLength; s++) {
          var a = strings[s];
          var b = strings[s + 1];
          var n$1 = numbers[s];

          if (!isNaN(n$1)) {
            if (!b) {
              progress += n$1 + ' ';
            } else {
              progress += n$1 + b;
            }
          }
        }
      }

      setProgressValue[anim.type](animatable.target, anim.property, progress, animatable.transforms);
      anim.currentValue = progress;
      i++;
    }
  }

  function setCallback(cb) {
    if (instance[cb] && !instance.passThrough) {
      instance[cb](instance);
    }
  }

  function countIteration() {
    if (instance.remaining && instance.remaining !== true) {
      instance.remaining--;
    }
  }

  function setInstanceProgress(engineTime) {
    var insDuration = instance.duration;
    var insDelay = instance.delay;
    var insEndDelay = insDuration - instance.endDelay;
    var insTime = adjustTime(engineTime);
    instance.progress = minMax(insTime / insDuration * 100, 0, 100);
    instance.reversePlayback = insTime < instance.currentTime;

    if (children) {
      syncInstanceChildren(insTime);
    }

    if (!instance.began && instance.currentTime > 0) {
      instance.began = true;
      setCallback('begin');
      setCallback('loopBegin');
    }

    if (insTime <= insDelay && instance.currentTime !== 0) {
      setAnimationsProgress(0);
    }

    if (insTime >= insEndDelay && instance.currentTime !== insDuration || !insDuration) {
      setAnimationsProgress(insDuration);
    }

    if (insTime > insDelay && insTime < insEndDelay) {
      if (!instance.changeBegan) {
        instance.changeBegan = true;
        instance.changeCompleted = false;
        setCallback('changeBegin');
      }

      setCallback('change');
      setAnimationsProgress(insTime);
    } else {
      if (instance.changeBegan) {
        instance.changeCompleted = true;
        instance.changeBegan = false;
        setCallback('changeComplete');
      }
    }

    instance.currentTime = minMax(insTime, 0, insDuration);

    if (instance.began) {
      setCallback('update');
    }

    if (engineTime >= insDuration) {
      lastTime = 0;
      countIteration();

      if (instance.remaining) {
        startTime = now;
        setCallback('loopComplete');
        setCallback('loopBegin');

        if (instance.direction === 'alternate') {
          toggleInstanceDirection();
        }
      } else {
        instance.paused = true;

        if (!instance.completed) {
          instance.completed = true;
          setCallback('loopComplete');
          setCallback('complete');

          if (!instance.passThrough && 'Promise' in window) {
            resolve();
            promise = makePromise(instance);
          }
        }
      }
    }
  }

  instance.reset = function () {
    var direction = instance.direction;
    instance.passThrough = false;
    instance.currentTime = 0;
    instance.progress = 0;
    instance.paused = true;
    instance.began = false;
    instance.changeBegan = false;
    instance.completed = false;
    instance.changeCompleted = false;
    instance.reversePlayback = false;
    instance.reversed = direction === 'reverse';
    instance.remaining = instance.loop;
    children = instance.children;
    childrenLength = children.length;

    for (var i = childrenLength; i--;) {
      instance.children[i].reset();
    }

    if (instance.reversed && instance.loop !== true || direction === 'alternate' && instance.loop === 1) {
      instance.remaining++;
    }

    setAnimationsProgress(0);
  }; // Set Value helper


  instance.set = function (targets, properties) {
    setTargetsValue(targets, properties);
    return instance;
  };

  instance.tick = function (t) {
    now = t;

    if (!startTime) {
      startTime = now;
    }

    setInstanceProgress((now + (lastTime - startTime)) * anime.speed);
  };

  instance.seek = function (time) {
    setInstanceProgress(adjustTime(time));
  };

  instance.pause = function () {
    instance.paused = true;
    resetTime();
  };

  instance.play = function () {
    if (!instance.paused) {
      return;
    }

    if (instance.completed) {
      instance.reset();
    }

    instance.paused = false;
    activeInstances.push(instance);
    resetTime();

    if (!raf) {
      engine();
    }
  };

  instance.reverse = function () {
    toggleInstanceDirection();
    resetTime();
  };

  instance.restart = function () {
    instance.reset();
    instance.play();
  };

  instance.reset();

  if (instance.autoplay) {
    instance.play();
  }

  return instance;
} // Remove targets from animation


function removeTargetsFromAnimations(targetsArray, animations) {
  for (var a = animations.length; a--;) {
    if (arrayContains(targetsArray, animations[a].animatable.target)) {
      animations.splice(a, 1);
    }
  }
}

function removeTargets(targets) {
  var targetsArray = parseTargets(targets);

  for (var i = activeInstances.length; i--;) {
    var instance = activeInstances[i];
    var animations = instance.animations;
    var children = instance.children;
    removeTargetsFromAnimations(targetsArray, animations);

    for (var c = children.length; c--;) {
      var child = children[c];
      var childAnimations = child.animations;
      removeTargetsFromAnimations(targetsArray, childAnimations);

      if (!childAnimations.length && !child.children.length) {
        children.splice(c, 1);
      }
    }

    if (!animations.length && !children.length) {
      instance.pause();
    }
  }
} // Stagger helpers


function stagger(val, params) {
  if (params === void 0) params = {};
  var direction = params.direction || 'normal';
  var easing = params.easing ? parseEasings(params.easing) : null;
  var grid = params.grid;
  var axis = params.axis;
  var fromIndex = params.from || 0;
  var fromFirst = fromIndex === 'first';
  var fromCenter = fromIndex === 'center';
  var fromLast = fromIndex === 'last';
  var isRange = is.arr(val);
  var val1 = isRange ? parseFloat(val[0]) : parseFloat(val);
  var val2 = isRange ? parseFloat(val[1]) : 0;
  var unit = getUnit(isRange ? val[1] : val) || 0;
  var start = params.start || 0 + (isRange ? val1 : 0);
  var values = [];
  var maxValue = 0;
  return function (el, i, t) {
    if (fromFirst) {
      fromIndex = 0;
    }

    if (fromCenter) {
      fromIndex = (t - 1) / 2;
    }

    if (fromLast) {
      fromIndex = t - 1;
    }

    if (!values.length) {
      for (var index = 0; index < t; index++) {
        if (!grid) {
          values.push(Math.abs(fromIndex - index));
        } else {
          var fromX = !fromCenter ? fromIndex % grid[0] : (grid[0] - 1) / 2;
          var fromY = !fromCenter ? Math.floor(fromIndex / grid[0]) : (grid[1] - 1) / 2;
          var toX = index % grid[0];
          var toY = Math.floor(index / grid[0]);
          var distanceX = fromX - toX;
          var distanceY = fromY - toY;
          var value = Math.sqrt(distanceX * distanceX + distanceY * distanceY);

          if (axis === 'x') {
            value = -distanceX;
          }

          if (axis === 'y') {
            value = -distanceY;
          }

          values.push(value);
        }

        maxValue = Math.max.apply(Math, values);
      }

      if (easing) {
        values = values.map(function (val) {
          return easing(val / maxValue) * maxValue;
        });
      }

      if (direction === 'reverse') {
        values = values.map(function (val) {
          return axis ? val < 0 ? val * -1 : -val : Math.abs(maxValue - val);
        });
      }
    }

    var spacing = isRange ? (val2 - val1) / maxValue : val1;
    return start + spacing * (Math.round(values[i] * 100) / 100) + unit;
  };
} // Timeline


function timeline(params) {
  if (params === void 0) params = {};
  var tl = anime(params);
  tl.duration = 0;

  tl.add = function (instanceParams, timelineOffset) {
    var tlIndex = activeInstances.indexOf(tl);
    var children = tl.children;

    if (tlIndex > -1) {
      activeInstances.splice(tlIndex, 1);
    }

    function passThrough(ins) {
      ins.passThrough = true;
    }

    for (var i = 0; i < children.length; i++) {
      passThrough(children[i]);
    }

    var insParams = mergeObjects(instanceParams, replaceObjectProps(defaultTweenSettings, params));
    insParams.targets = insParams.targets || params.targets;
    var tlDuration = tl.duration;
    insParams.autoplay = false;
    insParams.direction = tl.direction;
    insParams.timelineOffset = is.und(timelineOffset) ? tlDuration : getRelativeValue(timelineOffset, tlDuration);
    passThrough(tl);
    tl.seek(insParams.timelineOffset);
    var ins = anime(insParams);
    passThrough(ins);
    children.push(ins);
    var timings = getInstanceTimings(children, params);
    tl.delay = timings.delay;
    tl.endDelay = timings.endDelay;
    tl.duration = timings.duration;
    tl.seek(0);
    tl.reset();

    if (tl.autoplay) {
      tl.play();
    }

    return tl;
  };

  return tl;
}

anime.version = '3.0.1';
anime.speed = 1;
anime.running = activeInstances;
anime.remove = removeTargets;
anime.get = getOriginalTargetValue;
anime.set = setTargetsValue;
anime.convertPx = convertPxToUnit;
anime.path = getPath;
anime.setDashoffset = setDashoffset;
anime.stagger = stagger;
anime.timeline = timeline;
anime.easing = parseEasings;
anime.penner = penner;

anime.random = function (min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

/* harmony default export */ __webpack_exports__["default"] = (anime);

/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");

var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");

var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");

var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");

var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest(); // HTTP basic authentication

    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true); // Set the request timeout in MS

    request.timeout = config.timeout; // Listen for ready state

    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      } // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request


      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      } // Prepare the response


      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };
      settle(resolve, reject, response); // Clean up request

      request = null;
    }; // Handle browser request cancellation (as opposed to a manual cancellation)


    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request)); // Clean up request

      request = null;
    }; // Handle low level network errors


    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request)); // Clean up request

      request = null;
    }; // Handle timeout


    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', request)); // Clean up request

      request = null;
    }; // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.


    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js"); // Add xsrf header


      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    } // Add headers to the request


    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    } // Add withCredentials to request if needed


    if (config.withCredentials) {
      request.withCredentials = true;
    } // Add responseType to request if needed


    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    } // Handle progress if needed


    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    } // Not all browsers support upload events


    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel); // Clean up request

        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    } // Send the request


    request.send(requestData);
  });
};

/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");

var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");

var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");

var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */


function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context); // Copy axios.prototype to instance

  utils.extend(instance, Axios.prototype, context); // Copy context to instance

  utils.extend(instance, context);
  return instance;
} // Create the default instance to be exported


var axios = createInstance(defaults); // Expose Axios class to allow class inheritance

axios.Axios = Axios; // Factory for creating new instances

axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
}; // Expose Cancel & CancelToken


axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js"); // Expose all/spread

axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");
module.exports = axios; // Allow use of default import syntax in TypeScript

module.exports["default"] = axios;

/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;
module.exports = Cancel;

/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */


function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });
  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}
/**
 * Throws a `Cancel` if cancellation has been requested.
 */


CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */


CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");

var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");

var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");

var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */


function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */


Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);
  config.method = config.method ? config.method.toLowerCase() : 'get'; // Hook up interceptors middleware

  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
}; // Provide aliases for supported request methods


utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});
module.exports = Axios;

/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */


InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */


InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */


InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */


module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");

var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");

var isAbsoluteURL = __webpack_require__(/*! ./../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");

var combineURLs = __webpack_require__(/*! ./../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");
/**
 * Throws a `Cancel` if cancellation has been requested.
 */


function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */


module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config); // Support baseURL config

  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  } // Ensure headers exist


  config.headers = config.headers || {}; // Transform request data

  config.data = transformData(config.data, config.headers, config.transformRequest); // Flatten headers

  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers || {});
  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });
  var adapter = config.adapter || defaults.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config); // Transform response data

    response.data = transformData(response.data, response.headers, config.transformResponse);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config); // Transform response data

      if (reason && reason.response) {
        reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
      }
    }

    return Promise.reject(reason);
  });
};

/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;

  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function () {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };

  return error;
};

/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */


module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};
  utils.forEach(['url', 'method', 'params', 'data'], function valueFromConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    }
  });
  utils.forEach(['headers', 'auth', 'proxy'], function mergeDeepProperties(prop) {
    if (utils.isObject(config2[prop])) {
      config[prop] = utils.deepMerge(config1[prop], config2[prop]);
    } else if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (utils.isObject(config1[prop])) {
      config[prop] = utils.deepMerge(config1[prop]);
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });
  utils.forEach(['baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer', 'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName', 'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'cancelToken', 'socketPath'], function defaultToConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });
  return config;
};

/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */


module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;

  if (!validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
  }
};

/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */


module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });
  return data;
};

/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");

var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter; // Only Node.JS has a process variable that is of [[Class]] process

  if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  }

  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
      return data;
    }

    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }

    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }

    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }

    return data;
  }],
  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) {
        /* Ignore */
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};
defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};
utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    return fn.apply(thisArg, args);
  };
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */


module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;

  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }

        parts.push(encode(key) + '=' + encode(v));
      });
    });
    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      var cookie = [];
      cookie.push(name + '=' + encodeURIComponent(value));

      if (utils.isNumber(expires)) {
        cookie.push('expires=' + new Date(expires).toGMTString());
      }

      if (utils.isString(path)) {
        cookie.push('path=' + path);
      }

      if (utils.isString(domain)) {
        cookie.push('domain=' + domain);
      }

      if (secure === true) {
        cookie.push('secure');
      }

      document.cookie = cookie.join('; ');
    },
    read: function read(name) {
      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
}();

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement('a');
  var originURL;
  /**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */

  function resolveURL(url) {
    var href = url;

    if (msie) {
      // IE needs attribute set twice to normalize properties
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }

    urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }

  originURL = resolveURL(window.location.href);
  /**
  * Determine if a URL shares the same origin as the current location
  *
  * @param {String} requestURL The URL to test
  * @returns {boolean} True if URL shares the same origin, otherwise false
  */

  return function isURLSameOrigin(requestURL) {
    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return function isURLSameOrigin() {
    return true;
  };
}();

/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js"); // Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers


var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) {
    return parsed;
  }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }

      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });
  return parsed;
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

var isBuffer = __webpack_require__(/*! is-buffer */ "./node_modules/axios/node_modules/is-buffer/index.js");
/*global toString:true*/
// utils is a library of generic helper functions non-specific to axios


var toString = Object.prototype.toString;
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

function isArray(val) {
  return toString.call(val) === '[object Array]';
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */


function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */


function isFormData(val) {
  return typeof FormData !== 'undefined' && val instanceof FormData;
}
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */


function isArrayBufferView(val) {
  var result;

  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
  }

  return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */


function isString(val) {
  return typeof val === 'string';
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */


function isNumber(val) {
  return typeof val === 'number';
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */


function isUndefined(val) {
  return typeof val === 'undefined';
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */


function isObject(val) {
  return val !== null && _typeof(val) === 'object';
}
/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */


function isDate(val) {
  return toString.call(val) === '[object Date]';
}
/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */


function isFile(val) {
  return toString.call(val) === '[object File]';
}
/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */


function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */


function isFunction(val) {
  return toString.call(val) === '[object Function]';
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */


function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */


function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */


function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */


function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
    return false;
  }

  return typeof window !== 'undefined' && typeof document !== 'undefined';
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */


function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  } // Force an array if not already something iterable


  if (_typeof(obj) !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */


function merge()
/* obj1, obj2, obj3, ... */
{
  var result = {};

  function assignValue(val, key) {
    if (_typeof(result[key]) === 'object' && _typeof(val) === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }

  return result;
}
/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */


function deepMerge()
/* obj1, obj2, obj3, ... */
{
  var result = {};

  function assignValue(val, key) {
    if (_typeof(result[key]) === 'object' && _typeof(val) === 'object') {
      result[key] = deepMerge(result[key], val);
    } else if (_typeof(val) === 'object') {
      result[key] = deepMerge({}, val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }

  return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */


function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  deepMerge: deepMerge,
  extend: extend,
  trim: trim
};

/***/ }),

/***/ "./node_modules/axios/node_modules/is-buffer/index.js":
/*!************************************************************!*\
  !*** ./node_modules/axios/node_modules/is-buffer/index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
module.exports = function isBuffer(obj) {
  return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
};

/***/ }),

/***/ "./node_modules/dom7/dist/dom7.modular.js":
/*!************************************************!*\
  !*** ./node_modules/dom7/dist/dom7.modular.js ***!
  \************************************************/
/*! exports provided: $, addClass, removeClass, hasClass, toggleClass, attr, removeAttr, prop, data, removeData, dataset, val, transform, transition, on, off, once, trigger, transitionEnd, animationEnd, width, outerWidth, height, outerHeight, offset, hide, show, styles, css, toArray, each, forEach, filter, map, html, text, is, indexOf, index, eq, append, appendTo, prepend, prependTo, insertBefore, insertAfter, next, nextAll, prev, prevAll, siblings, parent, parents, closest, find, children, remove, detach, add, empty, scrollTo, scrollTop, scrollLeft, animate, stop, click, blur, focus, focusin, focusout, keyup, keydown, keypress, submit, change, mousedown, mousemove, mouseup, mouseenter, mouseleave, mouseout, mouseover, touchstart, touchend, touchmove, resize, scroll */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$", function() { return $; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addClass", function() { return addClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeClass", function() { return removeClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasClass", function() { return hasClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toggleClass", function() { return toggleClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "attr", function() { return attr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeAttr", function() { return removeAttr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prop", function() { return prop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "data", function() { return data; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeData", function() { return removeData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dataset", function() { return dataset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "val", function() { return val; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transform", function() { return transform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transition", function() { return transition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "on", function() { return on; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "off", function() { return off; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "once", function() { return once; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trigger", function() { return trigger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transitionEnd", function() { return transitionEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animationEnd", function() { return animationEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "width", function() { return width; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "outerWidth", function() { return outerWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "height", function() { return height; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "outerHeight", function() { return outerHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "offset", function() { return offset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hide", function() { return hide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "show", function() { return show; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "styles", function() { return styles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "css", function() { return css; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toArray", function() { return toArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "each", function() { return each; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return forEach; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function() { return filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function() { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "html", function() { return html; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "text", function() { return text; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "is", function() { return is; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "indexOf", function() { return indexOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "index", function() { return index; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eq", function() { return eq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "append", function() { return append; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendTo", function() { return appendTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prepend", function() { return prepend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependTo", function() { return prependTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertBefore", function() { return insertBefore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertAfter", function() { return insertAfter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "next", function() { return next; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nextAll", function() { return nextAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prev", function() { return prev; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prevAll", function() { return prevAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "siblings", function() { return siblings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parent", function() { return parent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parents", function() { return parents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closest", function() { return closest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "find", function() { return find; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "children", function() { return children; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "remove", function() { return remove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "detach", function() { return detach; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function() { return empty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scrollTo", function() { return scrollTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scrollTop", function() { return scrollTop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scrollLeft", function() { return scrollLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animate", function() { return animate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stop", function() { return stop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "click", function() { return click; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blur", function() { return blur; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "focus", function() { return focus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "focusin", function() { return focusin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "focusout", function() { return focusout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyup", function() { return keyup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keydown", function() { return keydown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keypress", function() { return keypress; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "submit", function() { return submit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "change", function() { return change; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mousedown", function() { return mousedown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mousemove", function() { return mousemove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseup", function() { return mouseup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseenter", function() { return mouseenter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseleave", function() { return mouseleave; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseout", function() { return mouseout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseover", function() { return mouseover; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "touchstart", function() { return touchstart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "touchend", function() { return touchend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "touchmove", function() { return touchmove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resize", function() { return resize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scroll", function() { return scroll; });
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/dist/ssr-window.esm.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Dom7 2.1.3
 * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
 * http://framework7.io/docs/dom.html
 *
 * Copyright 2019, Vladimir Kharlampidi
 * The iDangero.us
 * http://www.idangero.us/
 *
 * Licensed under MIT
 *
 * Released on: February 11, 2019
 */


var Dom7 = function Dom7(arr) {
  _classCallCheck(this, Dom7);

  var self = this; // Create array-like object

  for (var i = 0; i < arr.length; i += 1) {
    self[i] = arr[i];
  }

  self.length = arr.length; // Return collection with methods

  return this;
};

function $(selector, context) {
  var arr = [];
  var i = 0;

  if (selector && !context) {
    if (selector instanceof Dom7) {
      return selector;
    }
  }

  if (selector) {
    // String
    if (typeof selector === 'string') {
      var els;
      var tempParent;

      var _html = selector.trim();

      if (_html.indexOf('<') >= 0 && _html.indexOf('>') >= 0) {
        var toCreate = 'div';
        if (_html.indexOf('<li') === 0) toCreate = 'ul';
        if (_html.indexOf('<tr') === 0) toCreate = 'tbody';
        if (_html.indexOf('<td') === 0 || _html.indexOf('<th') === 0) toCreate = 'tr';
        if (_html.indexOf('<tbody') === 0) toCreate = 'table';
        if (_html.indexOf('<option') === 0) toCreate = 'select';
        tempParent = ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"].createElement(toCreate);
        tempParent.innerHTML = _html;

        for (i = 0; i < tempParent.childNodes.length; i += 1) {
          arr.push(tempParent.childNodes[i]);
        }
      } else {
        if (!context && selector[0] === '#' && !selector.match(/[ .<>:~]/)) {
          // Pure ID selector
          els = [ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"].getElementById(selector.trim().split('#')[1])];
        } else {
          // Other selectors
          els = (context || ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"]).querySelectorAll(selector.trim());
        }

        for (i = 0; i < els.length; i += 1) {
          if (els[i]) arr.push(els[i]);
        }
      }
    } else if (selector.nodeType || selector === ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"] || selector === ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"]) {
      // Node/element
      arr.push(selector);
    } else if (selector.length > 0 && selector[0].nodeType) {
      // Array of elements or instance of Dom
      for (i = 0; i < selector.length; i += 1) {
        arr.push(selector[i]);
      }
    }
  }

  return new Dom7(arr);
}

$.fn = Dom7.prototype;
$.Class = Dom7;
$.Dom7 = Dom7;

function unique(arr) {
  var uniqueArray = [];

  for (var i = 0; i < arr.length; i += 1) {
    if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);
  }

  return uniqueArray;
}

function toCamelCase(string) {
  return string.toLowerCase().replace(/-(.)/g, function (match, group1) {
    return group1.toUpperCase();
  });
}

function requestAnimationFrame(callback) {
  if (ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].requestAnimationFrame) return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].requestAnimationFrame(callback);else if (ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].webkitRequestAnimationFrame) return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].webkitRequestAnimationFrame(callback);
  return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].setTimeout(callback, 1000 / 60);
}

function cancelAnimationFrame(id) {
  if (ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].cancelAnimationFrame) return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].cancelAnimationFrame(id);else if (ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].webkitCancelAnimationFrame) return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].webkitCancelAnimationFrame(id);
  return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].clearTimeout(id);
} // Classes and attributes


function addClass(className) {
  if (typeof className === 'undefined') {
    return this;
  }

  var classes = className.split(' ');

  for (var i = 0; i < classes.length; i += 1) {
    for (var j = 0; j < this.length; j += 1) {
      if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') this[j].classList.add(classes[i]);
    }
  }

  return this;
}

function removeClass(className) {
  var classes = className.split(' ');

  for (var i = 0; i < classes.length; i += 1) {
    for (var j = 0; j < this.length; j += 1) {
      if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') this[j].classList.remove(classes[i]);
    }
  }

  return this;
}

function hasClass(className) {
  if (!this[0]) return false;
  return this[0].classList.contains(className);
}

function toggleClass(className) {
  var classes = className.split(' ');

  for (var i = 0; i < classes.length; i += 1) {
    for (var j = 0; j < this.length; j += 1) {
      if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') this[j].classList.toggle(classes[i]);
    }
  }

  return this;
}

function attr(attrs, value) {
  if (arguments.length === 1 && typeof attrs === 'string') {
    // Get attr
    if (this[0]) return this[0].getAttribute(attrs);
    return undefined;
  } // Set attrs


  for (var i = 0; i < this.length; i += 1) {
    if (arguments.length === 2) {
      // String
      this[i].setAttribute(attrs, value);
    } else {
      // Object
      // eslint-disable-next-line
      for (var attrName in attrs) {
        this[i][attrName] = attrs[attrName];
        this[i].setAttribute(attrName, attrs[attrName]);
      }
    }
  }

  return this;
} // eslint-disable-next-line


function removeAttr(attr) {
  for (var i = 0; i < this.length; i += 1) {
    this[i].removeAttribute(attr);
  }

  return this;
} // eslint-disable-next-line


function prop(props, value) {
  if (arguments.length === 1 && typeof props === 'string') {
    // Get prop
    if (this[0]) return this[0][props];
  } else {
    // Set props
    for (var i = 0; i < this.length; i += 1) {
      if (arguments.length === 2) {
        // String
        this[i][props] = value;
      } else {
        // Object
        // eslint-disable-next-line
        for (var propName in props) {
          this[i][propName] = props[propName];
        }
      }
    }

    return this;
  }
}

function data(key, value) {
  var el;

  if (typeof value === 'undefined') {
    el = this[0]; // Get value

    if (el) {
      if (el.dom7ElementDataStorage && key in el.dom7ElementDataStorage) {
        return el.dom7ElementDataStorage[key];
      }

      var dataKey = el.getAttribute("data-".concat(key));

      if (dataKey) {
        return dataKey;
      }

      return undefined;
    }

    return undefined;
  } // Set value


  for (var i = 0; i < this.length; i += 1) {
    el = this[i];
    if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};
    el.dom7ElementDataStorage[key] = value;
  }

  return this;
}

function removeData(key) {
  for (var i = 0; i < this.length; i += 1) {
    var el = this[i];

    if (el.dom7ElementDataStorage && el.dom7ElementDataStorage[key]) {
      el.dom7ElementDataStorage[key] = null;
      delete el.dom7ElementDataStorage[key];
    }
  }
}

function dataset() {
  var el = this[0];
  if (!el) return undefined;
  var dataset = {}; // eslint-disable-line

  if (el.dataset) {
    // eslint-disable-next-line
    for (var dataKey in el.dataset) {
      dataset[dataKey] = el.dataset[dataKey];
    }
  } else {
    for (var i = 0; i < el.attributes.length; i += 1) {
      // eslint-disable-next-line
      var _attr = el.attributes[i];

      if (_attr.name.indexOf('data-') >= 0) {
        dataset[toCamelCase(_attr.name.split('data-')[1])] = _attr.value;
      }
    }
  } // eslint-disable-next-line


  for (var key in dataset) {
    if (dataset[key] === 'false') dataset[key] = false;else if (dataset[key] === 'true') dataset[key] = true;else if (parseFloat(dataset[key]) === dataset[key] * 1) dataset[key] *= 1;
  }

  return dataset;
}

function val(value) {
  var dom = this;

  if (typeof value === 'undefined') {
    if (dom[0]) {
      if (dom[0].multiple && dom[0].nodeName.toLowerCase() === 'select') {
        var values = [];

        for (var i = 0; i < dom[0].selectedOptions.length; i += 1) {
          values.push(dom[0].selectedOptions[i].value);
        }

        return values;
      }

      return dom[0].value;
    }

    return undefined;
  }

  for (var _i = 0; _i < dom.length; _i += 1) {
    var el = dom[_i];

    if (Array.isArray(value) && el.multiple && el.nodeName.toLowerCase() === 'select') {
      for (var j = 0; j < el.options.length; j += 1) {
        el.options[j].selected = value.indexOf(el.options[j].value) >= 0;
      }
    } else {
      el.value = value;
    }
  }

  return dom;
} // Transforms
// eslint-disable-next-line


function transform(transform) {
  for (var i = 0; i < this.length; i += 1) {
    var elStyle = this[i].style;
    elStyle.webkitTransform = transform;
    elStyle.transform = transform;
  }

  return this;
}

function transition(duration) {
  if (typeof duration !== 'string') {
    duration = "".concat(duration, "ms"); // eslint-disable-line
  }

  for (var i = 0; i < this.length; i += 1) {
    var elStyle = this[i].style;
    elStyle.webkitTransitionDuration = duration;
    elStyle.transitionDuration = duration;
  }

  return this;
} // Events


function on() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var eventType = args[0],
      targetSelector = args[1],
      listener = args[2],
      capture = args[3];

  if (typeof args[1] === 'function') {
    eventType = args[0];
    listener = args[1];
    capture = args[2];
    targetSelector = undefined;
  }

  if (!capture) capture = false;

  function handleLiveEvent(e) {
    var target = e.target;
    if (!target) return;
    var eventData = e.target.dom7EventData || [];

    if (eventData.indexOf(e) < 0) {
      eventData.unshift(e);
    }

    if ($(target).is(targetSelector)) listener.apply(target, eventData);else {
      var _parents = $(target).parents(); // eslint-disable-line


      for (var k = 0; k < _parents.length; k += 1) {
        if ($(_parents[k]).is(targetSelector)) listener.apply(_parents[k], eventData);
      }
    }
  }

  function handleEvent(e) {
    var eventData = e && e.target ? e.target.dom7EventData || [] : [];

    if (eventData.indexOf(e) < 0) {
      eventData.unshift(e);
    }

    listener.apply(this, eventData);
  }

  var events = eventType.split(' ');
  var j;

  for (var i = 0; i < this.length; i += 1) {
    var el = this[i];

    if (!targetSelector) {
      for (j = 0; j < events.length; j += 1) {
        var event = events[j];
        if (!el.dom7Listeners) el.dom7Listeners = {};
        if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];
        el.dom7Listeners[event].push({
          listener: listener,
          proxyListener: handleEvent
        });
        el.addEventListener(event, handleEvent, capture);
      }
    } else {
      // Live events
      for (j = 0; j < events.length; j += 1) {
        var _event = events[j];
        if (!el.dom7LiveListeners) el.dom7LiveListeners = {};
        if (!el.dom7LiveListeners[_event]) el.dom7LiveListeners[_event] = [];

        el.dom7LiveListeners[_event].push({
          listener: listener,
          proxyListener: handleLiveEvent
        });

        el.addEventListener(_event, handleLiveEvent, capture);
      }
    }
  }

  return this;
}

function off() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  var eventType = args[0],
      targetSelector = args[1],
      listener = args[2],
      capture = args[3];

  if (typeof args[1] === 'function') {
    eventType = args[0];
    listener = args[1];
    capture = args[2];
    targetSelector = undefined;
  }

  if (!capture) capture = false;
  var events = eventType.split(' ');

  for (var i = 0; i < events.length; i += 1) {
    var event = events[i];

    for (var j = 0; j < this.length; j += 1) {
      var el = this[j];
      var handlers = void 0;

      if (!targetSelector && el.dom7Listeners) {
        handlers = el.dom7Listeners[event];
      } else if (targetSelector && el.dom7LiveListeners) {
        handlers = el.dom7LiveListeners[event];
      }

      if (handlers && handlers.length) {
        for (var k = handlers.length - 1; k >= 0; k -= 1) {
          var handler = handlers[k];

          if (listener && handler.listener === listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          } else if (!listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          }
        }
      }
    }
  }

  return this;
}

function once() {
  var dom = this;

  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  var eventName = args[0],
      targetSelector = args[1],
      listener = args[2],
      capture = args[3];

  if (typeof args[1] === 'function') {
    eventName = args[0];
    listener = args[1];
    capture = args[2];
    targetSelector = undefined;
  }

  function onceHandler() {
    for (var _len4 = arguments.length, eventArgs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      eventArgs[_key4] = arguments[_key4];
    }

    listener.apply(this, eventArgs);
    dom.off(eventName, targetSelector, onceHandler, capture);

    if (onceHandler.dom7proxy) {
      delete onceHandler.dom7proxy;
    }
  }

  onceHandler.dom7proxy = listener;
  return dom.on(eventName, targetSelector, onceHandler, capture);
}

function trigger() {
  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    args[_key5] = arguments[_key5];
  }

  var events = args[0].split(' ');
  var eventData = args[1];

  for (var i = 0; i < events.length; i += 1) {
    var event = events[i];

    for (var j = 0; j < this.length; j += 1) {
      var el = this[j];
      var evt = void 0;

      try {
        evt = new ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].CustomEvent(event, {
          detail: eventData,
          bubbles: true,
          cancelable: true
        });
      } catch (e) {
        evt = ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"].createEvent('Event');
        evt.initEvent(event, true, true);
        evt.detail = eventData;
      } // eslint-disable-next-line


      el.dom7EventData = args.filter(function (data, dataIndex) {
        return dataIndex > 0;
      });
      el.dispatchEvent(evt);
      el.dom7EventData = [];
      delete el.dom7EventData;
    }
  }

  return this;
}

function transitionEnd(callback) {
  var events = ['webkitTransitionEnd', 'transitionend'];
  var dom = this;
  var i;

  function fireCallBack(e) {
    /* jshint validthis:true */
    if (e.target !== this) return;
    callback.call(this, e);

    for (i = 0; i < events.length; i += 1) {
      dom.off(events[i], fireCallBack);
    }
  }

  if (callback) {
    for (i = 0; i < events.length; i += 1) {
      dom.on(events[i], fireCallBack);
    }
  }

  return this;
}

function animationEnd(callback) {
  var events = ['webkitAnimationEnd', 'animationend'];
  var dom = this;
  var i;

  function fireCallBack(e) {
    if (e.target !== this) return;
    callback.call(this, e);

    for (i = 0; i < events.length; i += 1) {
      dom.off(events[i], fireCallBack);
    }
  }

  if (callback) {
    for (i = 0; i < events.length; i += 1) {
      dom.on(events[i], fireCallBack);
    }
  }

  return this;
} // Sizing/Styles


function width() {
  if (this[0] === ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"]) {
    return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].innerWidth;
  }

  if (this.length > 0) {
    return parseFloat(this.css('width'));
  }

  return null;
}

function outerWidth(includeMargins) {
  if (this.length > 0) {
    if (includeMargins) {
      // eslint-disable-next-line
      var _styles = this.styles();

      return this[0].offsetWidth + parseFloat(_styles.getPropertyValue('margin-right')) + parseFloat(_styles.getPropertyValue('margin-left'));
    }

    return this[0].offsetWidth;
  }

  return null;
}

function height() {
  if (this[0] === ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"]) {
    return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].innerHeight;
  }

  if (this.length > 0) {
    return parseFloat(this.css('height'));
  }

  return null;
}

function outerHeight(includeMargins) {
  if (this.length > 0) {
    if (includeMargins) {
      // eslint-disable-next-line
      var _styles2 = this.styles();

      return this[0].offsetHeight + parseFloat(_styles2.getPropertyValue('margin-top')) + parseFloat(_styles2.getPropertyValue('margin-bottom'));
    }

    return this[0].offsetHeight;
  }

  return null;
}

function offset() {
  if (this.length > 0) {
    var el = this[0];
    var box = el.getBoundingClientRect();
    var body = ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"].body;
    var clientTop = el.clientTop || body.clientTop || 0;
    var clientLeft = el.clientLeft || body.clientLeft || 0;

    var _scrollTop = el === ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"] ? ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].scrollY : el.scrollTop;

    var _scrollLeft = el === ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"] ? ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].scrollX : el.scrollLeft;

    return {
      top: box.top + _scrollTop - clientTop,
      left: box.left + _scrollLeft - clientLeft
    };
  }

  return null;
}

function hide() {
  for (var i = 0; i < this.length; i += 1) {
    this[i].style.display = 'none';
  }

  return this;
}

function show() {
  for (var i = 0; i < this.length; i += 1) {
    var el = this[i];

    if (el.style.display === 'none') {
      el.style.display = '';
    }

    if (ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].getComputedStyle(el, null).getPropertyValue('display') === 'none') {
      // Still not visible
      el.style.display = 'block';
    }
  }

  return this;
}

function styles() {
  if (this[0]) return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].getComputedStyle(this[0], null);
  return {};
}

function css(props, value) {
  var i;

  if (arguments.length === 1) {
    if (typeof props === 'string') {
      if (this[0]) return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].getComputedStyle(this[0], null).getPropertyValue(props);
    } else {
      for (i = 0; i < this.length; i += 1) {
        // eslint-disable-next-line
        for (var _prop in props) {
          this[i].style[_prop] = props[_prop];
        }
      }

      return this;
    }
  }

  if (arguments.length === 2 && typeof props === 'string') {
    for (i = 0; i < this.length; i += 1) {
      this[i].style[props] = value;
    }

    return this;
  }

  return this;
} // Dom manipulation


function toArray() {
  var arr = [];

  for (var i = 0; i < this.length; i += 1) {
    arr.push(this[i]);
  }

  return arr;
} // Iterate over the collection passing elements to `callback`


function each(callback) {
  // Don't bother continuing without a callback
  if (!callback) return this; // Iterate over the current collection

  for (var i = 0; i < this.length; i += 1) {
    // If the callback returns false
    if (callback.call(this[i], i, this[i]) === false) {
      // End the loop early
      return this;
    }
  } // Return `this` to allow chained DOM operations


  return this;
}

function forEach(callback) {
  // Don't bother continuing without a callback
  if (!callback) return this; // Iterate over the current collection

  for (var i = 0; i < this.length; i += 1) {
    // If the callback returns false
    if (callback.call(this[i], this[i], i) === false) {
      // End the loop early
      return this;
    }
  } // Return `this` to allow chained DOM operations


  return this;
}

function filter(callback) {
  var matchedItems = [];
  var dom = this;

  for (var i = 0; i < dom.length; i += 1) {
    if (callback.call(dom[i], i, dom[i])) matchedItems.push(dom[i]);
  }

  return new Dom7(matchedItems);
}

function map(callback) {
  var modifiedItems = [];
  var dom = this;

  for (var i = 0; i < dom.length; i += 1) {
    modifiedItems.push(callback.call(dom[i], i, dom[i]));
  }

  return new Dom7(modifiedItems);
} // eslint-disable-next-line


function html(html) {
  if (typeof html === 'undefined') {
    return this[0] ? this[0].innerHTML : undefined;
  }

  for (var i = 0; i < this.length; i += 1) {
    this[i].innerHTML = html;
  }

  return this;
} // eslint-disable-next-line


function text(text) {
  if (typeof text === 'undefined') {
    if (this[0]) {
      return this[0].textContent.trim();
    }

    return null;
  }

  for (var i = 0; i < this.length; i += 1) {
    this[i].textContent = text;
  }

  return this;
}

function is(selector) {
  var el = this[0];
  var compareWith;
  var i;
  if (!el || typeof selector === 'undefined') return false;

  if (typeof selector === 'string') {
    if (el.matches) return el.matches(selector);else if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);else if (el.msMatchesSelector) return el.msMatchesSelector(selector);
    compareWith = $(selector);

    for (i = 0; i < compareWith.length; i += 1) {
      if (compareWith[i] === el) return true;
    }

    return false;
  } else if (selector === ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"]) return el === ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"];else if (selector === ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"]) return el === ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"];

  if (selector.nodeType || selector instanceof Dom7) {
    compareWith = selector.nodeType ? [selector] : selector;

    for (i = 0; i < compareWith.length; i += 1) {
      if (compareWith[i] === el) return true;
    }

    return false;
  }

  return false;
}

function indexOf(el) {
  for (var i = 0; i < this.length; i += 1) {
    if (this[i] === el) return i;
  }

  return -1;
}

function index() {
  var child = this[0];
  var i;

  if (child) {
    i = 0; // eslint-disable-next-line

    while ((child = child.previousSibling) !== null) {
      if (child.nodeType === 1) i += 1;
    }

    return i;
  }

  return undefined;
} // eslint-disable-next-line


function eq(index) {
  if (typeof index === 'undefined') return this;
  var length = this.length;
  var returnIndex;

  if (index > length - 1) {
    return new Dom7([]);
  }

  if (index < 0) {
    returnIndex = length + index;
    if (returnIndex < 0) return new Dom7([]);
    return new Dom7([this[returnIndex]]);
  }

  return new Dom7([this[index]]);
}

function append() {
  var newChild;

  for (var k = 0; k < arguments.length; k += 1) {
    newChild = k < 0 || arguments.length <= k ? undefined : arguments[k];

    for (var i = 0; i < this.length; i += 1) {
      if (typeof newChild === 'string') {
        var tempDiv = ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"].createElement('div');
        tempDiv.innerHTML = newChild;

        while (tempDiv.firstChild) {
          this[i].appendChild(tempDiv.firstChild);
        }
      } else if (newChild instanceof Dom7) {
        for (var j = 0; j < newChild.length; j += 1) {
          this[i].appendChild(newChild[j]);
        }
      } else {
        this[i].appendChild(newChild);
      }
    }
  }

  return this;
} // eslint-disable-next-line


function appendTo(parent) {
  $(parent).append(this);
  return this;
}

function prepend(newChild) {
  var i;
  var j;

  for (i = 0; i < this.length; i += 1) {
    if (typeof newChild === 'string') {
      var tempDiv = ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"].createElement('div');
      tempDiv.innerHTML = newChild;

      for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {
        this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);
      }
    } else if (newChild instanceof Dom7) {
      for (j = 0; j < newChild.length; j += 1) {
        this[i].insertBefore(newChild[j], this[i].childNodes[0]);
      }
    } else {
      this[i].insertBefore(newChild, this[i].childNodes[0]);
    }
  }

  return this;
} // eslint-disable-next-line


function prependTo(parent) {
  $(parent).prepend(this);
  return this;
}

function insertBefore(selector) {
  var before = $(selector);

  for (var i = 0; i < this.length; i += 1) {
    if (before.length === 1) {
      before[0].parentNode.insertBefore(this[i], before[0]);
    } else if (before.length > 1) {
      for (var j = 0; j < before.length; j += 1) {
        before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);
      }
    }
  }
}

function insertAfter(selector) {
  var after = $(selector);

  for (var i = 0; i < this.length; i += 1) {
    if (after.length === 1) {
      after[0].parentNode.insertBefore(this[i], after[0].nextSibling);
    } else if (after.length > 1) {
      for (var j = 0; j < after.length; j += 1) {
        after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);
      }
    }
  }
}

function next(selector) {
  if (this.length > 0) {
    if (selector) {
      if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {
        return new Dom7([this[0].nextElementSibling]);
      }

      return new Dom7([]);
    }

    if (this[0].nextElementSibling) return new Dom7([this[0].nextElementSibling]);
    return new Dom7([]);
  }

  return new Dom7([]);
}

function nextAll(selector) {
  var nextEls = [];
  var el = this[0];
  if (!el) return new Dom7([]);

  while (el.nextElementSibling) {
    var _next = el.nextElementSibling; // eslint-disable-line

    if (selector) {
      if ($(_next).is(selector)) nextEls.push(_next);
    } else nextEls.push(_next);

    el = _next;
  }

  return new Dom7(nextEls);
}

function prev(selector) {
  if (this.length > 0) {
    var el = this[0];

    if (selector) {
      if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {
        return new Dom7([el.previousElementSibling]);
      }

      return new Dom7([]);
    }

    if (el.previousElementSibling) return new Dom7([el.previousElementSibling]);
    return new Dom7([]);
  }

  return new Dom7([]);
}

function prevAll(selector) {
  var prevEls = [];
  var el = this[0];
  if (!el) return new Dom7([]);

  while (el.previousElementSibling) {
    var _prev = el.previousElementSibling; // eslint-disable-line

    if (selector) {
      if ($(_prev).is(selector)) prevEls.push(_prev);
    } else prevEls.push(_prev);

    el = _prev;
  }

  return new Dom7(prevEls);
}

function siblings(selector) {
  return this.nextAll(selector).add(this.prevAll(selector));
}

function parent(selector) {
  var parents = []; // eslint-disable-line

  for (var i = 0; i < this.length; i += 1) {
    if (this[i].parentNode !== null) {
      if (selector) {
        if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);
      } else {
        parents.push(this[i].parentNode);
      }
    }
  }

  return $(unique(parents));
}

function parents(selector) {
  var parents = []; // eslint-disable-line

  for (var i = 0; i < this.length; i += 1) {
    var _parent = this[i].parentNode; // eslint-disable-line

    while (_parent) {
      if (selector) {
        if ($(_parent).is(selector)) parents.push(_parent);
      } else {
        parents.push(_parent);
      }

      _parent = _parent.parentNode;
    }
  }

  return $(unique(parents));
}

function closest(selector) {
  var closest = this; // eslint-disable-line

  if (typeof selector === 'undefined') {
    return new Dom7([]);
  }

  if (!closest.is(selector)) {
    closest = closest.parents(selector).eq(0);
  }

  return closest;
}

function find(selector) {
  var foundElements = [];

  for (var i = 0; i < this.length; i += 1) {
    var found = this[i].querySelectorAll(selector);

    for (var j = 0; j < found.length; j += 1) {
      foundElements.push(found[j]);
    }
  }

  return new Dom7(foundElements);
}

function children(selector) {
  var children = []; // eslint-disable-line

  for (var i = 0; i < this.length; i += 1) {
    var childNodes = this[i].childNodes;

    for (var j = 0; j < childNodes.length; j += 1) {
      if (!selector) {
        if (childNodes[j].nodeType === 1) children.push(childNodes[j]);
      } else if (childNodes[j].nodeType === 1 && $(childNodes[j]).is(selector)) {
        children.push(childNodes[j]);
      }
    }
  }

  return new Dom7(unique(children));
}

function remove() {
  for (var i = 0; i < this.length; i += 1) {
    if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);
  }

  return this;
}

function detach() {
  return this.remove();
}

function add() {
  var dom = this;
  var i;
  var j;

  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }

  for (i = 0; i < args.length; i += 1) {
    var toAdd = $(args[i]);

    for (j = 0; j < toAdd.length; j += 1) {
      dom[dom.length] = toAdd[j];
      dom.length += 1;
    }
  }

  return dom;
}

function empty() {
  for (var i = 0; i < this.length; i += 1) {
    var el = this[i];

    if (el.nodeType === 1) {
      for (var j = 0; j < el.childNodes.length; j += 1) {
        if (el.childNodes[j].parentNode) {
          el.childNodes[j].parentNode.removeChild(el.childNodes[j]);
        }
      }

      el.textContent = '';
    }
  }

  return this;
}

function scrollTo() {
  for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
    args[_key7] = arguments[_key7];
  }

  var left = args[0],
      top = args[1],
      duration = args[2],
      easing = args[3],
      callback = args[4];

  if (args.length === 4 && typeof easing === 'function') {
    callback = easing;
    left = args[0];
    top = args[1];
    duration = args[2];
    callback = args[3];
    easing = args[4];
  }

  if (typeof easing === 'undefined') easing = 'swing';
  return this.each(function animate() {
    var el = this;
    var currentTop;
    var currentLeft;
    var maxTop;
    var maxLeft;
    var newTop;
    var newLeft;
    var scrollTop; // eslint-disable-line

    var scrollLeft; // eslint-disable-line

    var animateTop = top > 0 || top === 0;
    var animateLeft = left > 0 || left === 0;

    if (typeof easing === 'undefined') {
      easing = 'swing';
    }

    if (animateTop) {
      currentTop = el.scrollTop;

      if (!duration) {
        el.scrollTop = top;
      }
    }

    if (animateLeft) {
      currentLeft = el.scrollLeft;

      if (!duration) {
        el.scrollLeft = left;
      }
    }

    if (!duration) return;

    if (animateTop) {
      maxTop = el.scrollHeight - el.offsetHeight;
      newTop = Math.max(Math.min(top, maxTop), 0);
    }

    if (animateLeft) {
      maxLeft = el.scrollWidth - el.offsetWidth;
      newLeft = Math.max(Math.min(left, maxLeft), 0);
    }

    var startTime = null;
    if (animateTop && newTop === currentTop) animateTop = false;
    if (animateLeft && newLeft === currentLeft) animateLeft = false;

    function render() {
      var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date().getTime();

      if (startTime === null) {
        startTime = time;
      }

      var progress = Math.max(Math.min((time - startTime) / duration, 1), 0);
      var easeProgress = easing === 'linear' ? progress : 0.5 - Math.cos(progress * Math.PI) / 2;
      var done;
      if (animateTop) scrollTop = currentTop + easeProgress * (newTop - currentTop);
      if (animateLeft) scrollLeft = currentLeft + easeProgress * (newLeft - currentLeft);

      if (animateTop && newTop > currentTop && scrollTop >= newTop) {
        el.scrollTop = newTop;
        done = true;
      }

      if (animateTop && newTop < currentTop && scrollTop <= newTop) {
        el.scrollTop = newTop;
        done = true;
      }

      if (animateLeft && newLeft > currentLeft && scrollLeft >= newLeft) {
        el.scrollLeft = newLeft;
        done = true;
      }

      if (animateLeft && newLeft < currentLeft && scrollLeft <= newLeft) {
        el.scrollLeft = newLeft;
        done = true;
      }

      if (done) {
        if (callback) callback();
        return;
      }

      if (animateTop) el.scrollTop = scrollTop;
      if (animateLeft) el.scrollLeft = scrollLeft;
      requestAnimationFrame(render);
    }

    requestAnimationFrame(render);
  });
} // scrollTop(top, duration, easing, callback) {


function scrollTop() {
  for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
    args[_key8] = arguments[_key8];
  }

  var top = args[0],
      duration = args[1],
      easing = args[2],
      callback = args[3];

  if (args.length === 3 && typeof easing === 'function') {
    top = args[0];
    duration = args[1];
    callback = args[2];
    easing = args[3];
  }

  var dom = this;

  if (typeof top === 'undefined') {
    if (dom.length > 0) return dom[0].scrollTop;
    return null;
  }

  return dom.scrollTo(undefined, top, duration, easing, callback);
}

function scrollLeft() {
  for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
    args[_key9] = arguments[_key9];
  }

  var left = args[0],
      duration = args[1],
      easing = args[2],
      callback = args[3];

  if (args.length === 3 && typeof easing === 'function') {
    left = args[0];
    duration = args[1];
    callback = args[2];
    easing = args[3];
  }

  var dom = this;

  if (typeof left === 'undefined') {
    if (dom.length > 0) return dom[0].scrollLeft;
    return null;
  }

  return dom.scrollTo(left, undefined, duration, easing, callback);
}

function animate(initialProps, initialParams) {
  var els = this;
  var a = {
    props: Object.assign({}, initialProps),
    params: Object.assign({
      duration: 300,
      easing: 'swing' // or 'linear'

      /* Callbacks
      begin(elements)
      complete(elements)
      progress(elements, complete, remaining, start, tweenValue)
      */

    }, initialParams),
    elements: els,
    animating: false,
    que: [],
    easingProgress: function easingProgress(easing, progress) {
      if (easing === 'swing') {
        return 0.5 - Math.cos(progress * Math.PI) / 2;
      }

      if (typeof easing === 'function') {
        return easing(progress);
      }

      return progress;
    },
    stop: function stop() {
      if (a.frameId) {
        cancelAnimationFrame(a.frameId);
      }

      a.animating = false;
      a.elements.each(function (index, el) {
        var element = el;
        delete element.dom7AnimateInstance;
      });
      a.que = [];
    },
    done: function done(complete) {
      a.animating = false;
      a.elements.each(function (index, el) {
        var element = el;
        delete element.dom7AnimateInstance;
      });
      if (complete) complete(els);

      if (a.que.length > 0) {
        var que = a.que.shift();
        a.animate(que[0], que[1]);
      }
    },
    animate: function animate(props, params) {
      if (a.animating) {
        a.que.push([props, params]);
        return a;
      }

      var elements = []; // Define & Cache Initials & Units

      a.elements.each(function (index, el) {
        var initialFullValue;
        var initialValue;
        var unit;
        var finalValue;
        var finalFullValue;
        if (!el.dom7AnimateInstance) a.elements[index].dom7AnimateInstance = a;
        elements[index] = {
          container: el
        };
        Object.keys(props).forEach(function (prop) {
          initialFullValue = ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].getComputedStyle(el, null).getPropertyValue(prop).replace(',', '.');
          initialValue = parseFloat(initialFullValue);
          unit = initialFullValue.replace(initialValue, '');
          finalValue = parseFloat(props[prop]);
          finalFullValue = props[prop] + unit;
          elements[index][prop] = {
            initialFullValue: initialFullValue,
            initialValue: initialValue,
            unit: unit,
            finalValue: finalValue,
            finalFullValue: finalFullValue,
            currentValue: initialValue
          };
        });
      });
      var startTime = null;
      var time;
      var elementsDone = 0;
      var propsDone = 0;
      var done;
      var began = false;
      a.animating = true;

      function render() {
        time = new Date().getTime();
        var progress;
        var easeProgress; // let el;

        if (!began) {
          began = true;
          if (params.begin) params.begin(els);
        }

        if (startTime === null) {
          startTime = time;
        }

        if (params.progress) {
          // eslint-disable-next-line
          params.progress(els, Math.max(Math.min((time - startTime) / params.duration, 1), 0), startTime + params.duration - time < 0 ? 0 : startTime + params.duration - time, startTime);
        }

        elements.forEach(function (element) {
          var el = element;
          if (done || el.done) return;
          Object.keys(props).forEach(function (prop) {
            if (done || el.done) return;
            progress = Math.max(Math.min((time - startTime) / params.duration, 1), 0);
            easeProgress = a.easingProgress(params.easing, progress);
            var _el$prop = el[prop],
                initialValue = _el$prop.initialValue,
                finalValue = _el$prop.finalValue,
                unit = _el$prop.unit;
            el[prop].currentValue = initialValue + easeProgress * (finalValue - initialValue);
            var currentValue = el[prop].currentValue;

            if (finalValue > initialValue && currentValue >= finalValue || finalValue < initialValue && currentValue <= finalValue) {
              el.container.style[prop] = finalValue + unit;
              propsDone += 1;

              if (propsDone === Object.keys(props).length) {
                el.done = true;
                elementsDone += 1;
              }

              if (elementsDone === elements.length) {
                done = true;
              }
            }

            if (done) {
              a.done(params.complete);
              return;
            }

            el.container.style[prop] = currentValue + unit;
          });
        });
        if (done) return; // Then call

        a.frameId = requestAnimationFrame(render);
      }

      a.frameId = requestAnimationFrame(render);
      return a;
    }
  };

  if (a.elements.length === 0) {
    return els;
  }

  var animateInstance;

  for (var i = 0; i < a.elements.length; i += 1) {
    if (a.elements[i].dom7AnimateInstance) {
      animateInstance = a.elements[i].dom7AnimateInstance;
    } else a.elements[i].dom7AnimateInstance = a;
  }

  if (!animateInstance) {
    animateInstance = a;
  }

  if (initialProps === 'stop') {
    animateInstance.stop();
  } else {
    animateInstance.animate(a.props, a.params);
  }

  return els;
}

function stop() {
  var els = this;

  for (var i = 0; i < els.length; i += 1) {
    if (els[i].dom7AnimateInstance) {
      els[i].dom7AnimateInstance.stop();
    }
  }
}

var noTrigger = 'resize scroll'.split(' ');

function eventShortcut(name) {
  for (var _len10 = arguments.length, args = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {
    args[_key10 - 1] = arguments[_key10];
  }

  if (typeof args[0] === 'undefined') {
    for (var i = 0; i < this.length; i += 1) {
      if (noTrigger.indexOf(name) < 0) {
        if (name in this[i]) this[i][name]();else {
          $(this[i]).trigger(name);
        }
      }
    }

    return this;
  }

  return this.on.apply(this, [name].concat(args));
}

function click() {
  for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
    args[_key11] = arguments[_key11];
  }

  return eventShortcut.bind(this).apply(void 0, ['click'].concat(args));
}

function blur() {
  for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
    args[_key12] = arguments[_key12];
  }

  return eventShortcut.bind(this).apply(void 0, ['blur'].concat(args));
}

function focus() {
  for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
    args[_key13] = arguments[_key13];
  }

  return eventShortcut.bind(this).apply(void 0, ['focus'].concat(args));
}

function focusin() {
  for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
    args[_key14] = arguments[_key14];
  }

  return eventShortcut.bind(this).apply(void 0, ['focusin'].concat(args));
}

function focusout() {
  for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
    args[_key15] = arguments[_key15];
  }

  return eventShortcut.bind(this).apply(void 0, ['focusout'].concat(args));
}

function keyup() {
  for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
    args[_key16] = arguments[_key16];
  }

  return eventShortcut.bind(this).apply(void 0, ['keyup'].concat(args));
}

function keydown() {
  for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
    args[_key17] = arguments[_key17];
  }

  return eventShortcut.bind(this).apply(void 0, ['keydown'].concat(args));
}

function keypress() {
  for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
    args[_key18] = arguments[_key18];
  }

  return eventShortcut.bind(this).apply(void 0, ['keypress'].concat(args));
}

function submit() {
  for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
    args[_key19] = arguments[_key19];
  }

  return eventShortcut.bind(this).apply(void 0, ['submit'].concat(args));
}

function change() {
  for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
    args[_key20] = arguments[_key20];
  }

  return eventShortcut.bind(this).apply(void 0, ['change'].concat(args));
}

function mousedown() {
  for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {
    args[_key21] = arguments[_key21];
  }

  return eventShortcut.bind(this).apply(void 0, ['mousedown'].concat(args));
}

function mousemove() {
  for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {
    args[_key22] = arguments[_key22];
  }

  return eventShortcut.bind(this).apply(void 0, ['mousemove'].concat(args));
}

function mouseup() {
  for (var _len23 = arguments.length, args = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {
    args[_key23] = arguments[_key23];
  }

  return eventShortcut.bind(this).apply(void 0, ['mouseup'].concat(args));
}

function mouseenter() {
  for (var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {
    args[_key24] = arguments[_key24];
  }

  return eventShortcut.bind(this).apply(void 0, ['mouseenter'].concat(args));
}

function mouseleave() {
  for (var _len25 = arguments.length, args = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {
    args[_key25] = arguments[_key25];
  }

  return eventShortcut.bind(this).apply(void 0, ['mouseleave'].concat(args));
}

function mouseout() {
  for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {
    args[_key26] = arguments[_key26];
  }

  return eventShortcut.bind(this).apply(void 0, ['mouseout'].concat(args));
}

function mouseover() {
  for (var _len27 = arguments.length, args = new Array(_len27), _key27 = 0; _key27 < _len27; _key27++) {
    args[_key27] = arguments[_key27];
  }

  return eventShortcut.bind(this).apply(void 0, ['mouseover'].concat(args));
}

function touchstart() {
  for (var _len28 = arguments.length, args = new Array(_len28), _key28 = 0; _key28 < _len28; _key28++) {
    args[_key28] = arguments[_key28];
  }

  return eventShortcut.bind(this).apply(void 0, ['touchstart'].concat(args));
}

function touchend() {
  for (var _len29 = arguments.length, args = new Array(_len29), _key29 = 0; _key29 < _len29; _key29++) {
    args[_key29] = arguments[_key29];
  }

  return eventShortcut.bind(this).apply(void 0, ['touchend'].concat(args));
}

function touchmove() {
  for (var _len30 = arguments.length, args = new Array(_len30), _key30 = 0; _key30 < _len30; _key30++) {
    args[_key30] = arguments[_key30];
  }

  return eventShortcut.bind(this).apply(void 0, ['touchmove'].concat(args));
}

function resize() {
  for (var _len31 = arguments.length, args = new Array(_len31), _key31 = 0; _key31 < _len31; _key31++) {
    args[_key31] = arguments[_key31];
  }

  return eventShortcut.bind(this).apply(void 0, ['resize'].concat(args));
}

function scroll() {
  for (var _len32 = arguments.length, args = new Array(_len32), _key32 = 0; _key32 < _len32; _key32++) {
    args[_key32] = arguments[_key32];
  }

  return eventShortcut.bind(this).apply(void 0, ['scroll'].concat(args));
}



/***/ }),

/***/ "./node_modules/lodash/_Symbol.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_Symbol.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");
/** Built-in value references. */


var _Symbol = root.Symbol;
module.exports = _Symbol;

/***/ }),

/***/ "./node_modules/lodash/_baseGetTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseGetTag.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__(/*! ./_getRawTag */ "./node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__(/*! ./_objectToString */ "./node_modules/lodash/_objectToString.js");
/** `Object#toString` result references. */


var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';
/** Built-in value references. */

var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }

  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}

module.exports = baseGetTag;

/***/ }),

/***/ "./node_modules/lodash/_freeGlobal.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_freeGlobal.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/** Detect free variable `global` from Node.js. */
var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof(global)) == 'object' && global && global.Object === Object && global;
module.exports = freeGlobal;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/lodash/_getRawTag.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getRawTag.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/** Built-in value references. */

var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);

  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }

  return result;
}

module.exports = getRawTag;

/***/ }),

/***/ "./node_modules/lodash/_objectToString.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_objectToString.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

/***/ }),

/***/ "./node_modules/lodash/_root.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_root.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");
/** Detect free variable `self`. */


var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = freeGlobal || freeSelf || Function('return this')();
module.exports = root;

/***/ }),

/***/ "./node_modules/lodash/debounce.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/debounce.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    now = __webpack_require__(/*! ./now */ "./node_modules/lodash/now.js"),
    toNumber = __webpack_require__(/*! ./toNumber */ "./node_modules/lodash/toNumber.js");
/** Error message constants. */


var FUNC_ERROR_TEXT = 'Expected a function';
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeMax = Math.max,
    nativeMin = Math.min;
/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */

function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }

  wait = toNumber(wait) || 0;

  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;
    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time; // Start the timer for the trailing edge.

    timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.

    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.

    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }

  function timerExpired() {
    var time = now();

    if (shouldInvoke(time)) {
      return trailingEdge(time);
    } // Restart the timer.


    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.

    if (trailing && lastArgs) {
      return invokeFunc(time);
    }

    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }

    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }

      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }

    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }

    return result;
  }

  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

module.exports = debounce;

/***/ }),

/***/ "./node_modules/lodash/isObject.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isObject.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = _typeof(value);

  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

/***/ }),

/***/ "./node_modules/lodash/isObjectLike.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isObjectLike.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && _typeof(value) == 'object';
}

module.exports = isObjectLike;

/***/ }),

/***/ "./node_modules/lodash/isSymbol.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isSymbol.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var symbolTag = '[object Symbol]';
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

function isSymbol(value) {
  return _typeof(value) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}

module.exports = isSymbol;

/***/ }),

/***/ "./node_modules/lodash/now.js":
/*!************************************!*\
  !*** ./node_modules/lodash/now.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");
/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */


var now = function now() {
  return root.Date.now();
};

module.exports = now;

/***/ }),

/***/ "./node_modules/lodash/toNumber.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toNumber.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");
/** Used as references for various `Number` constants. */


var NAN = 0 / 0;
/** Used to match leading and trailing whitespace. */

var reTrim = /^\s+|\s+$/g;
/** Used to detect bad signed hexadecimal string values. */

var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */

var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */

var reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */

var freeParseInt = parseInt;
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */

function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }

  if (isSymbol(value)) {
    return NAN;
  }

  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? other + '' : other;
  }

  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }

  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}

module.exports = toNumber;

/***/ }),

/***/ "./node_modules/object-fit-images/dist/ofi.common-js.js":
/*!**************************************************************!*\
  !*** ./node_modules/object-fit-images/dist/ofi.common-js.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*! npm.im/object-fit-images 3.2.4 */


var OFI = 'bfred-it:object-fit-images';
var propRegex = /(object-fit|object-position)\s*:\s*([-.\w\s%]+)/g;
var testImg = typeof Image === 'undefined' ? {
  style: {
    'object-position': 1
  }
} : new Image();
var supportsObjectFit = 'object-fit' in testImg.style;
var supportsObjectPosition = 'object-position' in testImg.style;
var supportsOFI = 'background-size' in testImg.style;
var supportsCurrentSrc = typeof testImg.currentSrc === 'string';
var nativeGetAttribute = testImg.getAttribute;
var nativeSetAttribute = testImg.setAttribute;
var autoModeEnabled = false;

function createPlaceholder(w, h) {
  return "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='" + w + "' height='" + h + "'%3E%3C/svg%3E";
}

function polyfillCurrentSrc(el) {
  if (el.srcset && !supportsCurrentSrc && window.picturefill) {
    var pf = window.picturefill._; // parse srcset with picturefill where currentSrc isn't available

    if (!el[pf.ns] || !el[pf.ns].evaled) {
      // force synchronous srcset parsing
      pf.fillImg(el, {
        reselect: true
      });
    }

    if (!el[pf.ns].curSrc) {
      // force picturefill to parse srcset
      el[pf.ns].supported = false;
      pf.fillImg(el, {
        reselect: true
      });
    } // retrieve parsed currentSrc, if any


    el.currentSrc = el[pf.ns].curSrc || el.src;
  }
}

function getStyle(el) {
  var style = getComputedStyle(el).fontFamily;
  var parsed;
  var props = {};

  while ((parsed = propRegex.exec(style)) !== null) {
    props[parsed[1]] = parsed[2];
  }

  return props;
}

function setPlaceholder(img, width, height) {
  // Default: fill width, no height
  var placeholder = createPlaceholder(width || 1, height || 0); // Only set placeholder if it's different

  if (nativeGetAttribute.call(img, 'src') !== placeholder) {
    nativeSetAttribute.call(img, 'src', placeholder);
  }
}

function onImageReady(img, callback) {
  // naturalWidth is only available when the image headers are loaded,
  // this loop will poll it every 100ms.
  if (img.naturalWidth) {
    callback(img);
  } else {
    setTimeout(onImageReady, 100, img, callback);
  }
}

function fixOne(el) {
  var style = getStyle(el);
  var ofi = el[OFI];
  style['object-fit'] = style['object-fit'] || 'fill'; // default value
  // Avoid running where unnecessary, unless OFI had already done its deed

  if (!ofi.img) {
    // fill is the default behavior so no action is necessary
    if (style['object-fit'] === 'fill') {
      return;
    } // Where object-fit is supported and object-position isn't (Safari < 10)


    if (!ofi.skipTest && // unless user wants to apply regardless of browser support
    supportsObjectFit && // if browser already supports object-fit
    !style['object-position'] // unless object-position is used
    ) {
        return;
      }
  } // keep a clone in memory while resetting the original to a blank


  if (!ofi.img) {
    ofi.img = new Image(el.width, el.height);
    ofi.img.srcset = nativeGetAttribute.call(el, "data-ofi-srcset") || el.srcset;
    ofi.img.src = nativeGetAttribute.call(el, "data-ofi-src") || el.src; // preserve for any future cloneNode calls
    // https://github.com/bfred-it/object-fit-images/issues/53

    nativeSetAttribute.call(el, "data-ofi-src", el.src);

    if (el.srcset) {
      nativeSetAttribute.call(el, "data-ofi-srcset", el.srcset);
    }

    setPlaceholder(el, el.naturalWidth || el.width, el.naturalHeight || el.height); // remove srcset because it overrides src

    if (el.srcset) {
      el.srcset = '';
    }

    try {
      keepSrcUsable(el);
    } catch (err) {
      if (window.console) {
        console.warn('https://bit.ly/ofi-old-browser');
      }
    }
  }

  polyfillCurrentSrc(ofi.img);
  el.style.backgroundImage = "url(\"" + (ofi.img.currentSrc || ofi.img.src).replace(/"/g, '\\"') + "\")";
  el.style.backgroundPosition = style['object-position'] || 'center';
  el.style.backgroundRepeat = 'no-repeat';
  el.style.backgroundOrigin = 'content-box';

  if (/scale-down/.test(style['object-fit'])) {
    onImageReady(ofi.img, function () {
      if (ofi.img.naturalWidth > el.width || ofi.img.naturalHeight > el.height) {
        el.style.backgroundSize = 'contain';
      } else {
        el.style.backgroundSize = 'auto';
      }
    });
  } else {
    el.style.backgroundSize = style['object-fit'].replace('none', 'auto').replace('fill', '100% 100%');
  }

  onImageReady(ofi.img, function (img) {
    setPlaceholder(el, img.naturalWidth, img.naturalHeight);
  });
}

function keepSrcUsable(el) {
  var descriptors = {
    get: function get(prop) {
      return el[OFI].img[prop ? prop : 'src'];
    },
    set: function set(value, prop) {
      el[OFI].img[prop ? prop : 'src'] = value;
      nativeSetAttribute.call(el, "data-ofi-" + prop, value); // preserve for any future cloneNode

      fixOne(el);
      return value;
    }
  };
  Object.defineProperty(el, 'src', descriptors);
  Object.defineProperty(el, 'currentSrc', {
    get: function get() {
      return descriptors.get('currentSrc');
    }
  });
  Object.defineProperty(el, 'srcset', {
    get: function get() {
      return descriptors.get('srcset');
    },
    set: function set(ss) {
      return descriptors.set(ss, 'srcset');
    }
  });
}

function hijackAttributes() {
  function getOfiImageMaybe(el, name) {
    return el[OFI] && el[OFI].img && (name === 'src' || name === 'srcset') ? el[OFI].img : el;
  }

  if (!supportsObjectPosition) {
    HTMLImageElement.prototype.getAttribute = function (name) {
      return nativeGetAttribute.call(getOfiImageMaybe(this, name), name);
    };

    HTMLImageElement.prototype.setAttribute = function (name, value) {
      return nativeSetAttribute.call(getOfiImageMaybe(this, name), name, String(value));
    };
  }
}

function fix(imgs, opts) {
  var startAutoMode = !autoModeEnabled && !imgs;
  opts = opts || {};
  imgs = imgs || 'img';

  if (supportsObjectPosition && !opts.skipTest || !supportsOFI) {
    return false;
  } // use imgs as a selector or just select all images


  if (imgs === 'img') {
    imgs = document.getElementsByTagName('img');
  } else if (typeof imgs === 'string') {
    imgs = document.querySelectorAll(imgs);
  } else if (!('length' in imgs)) {
    imgs = [imgs];
  } // apply fix to all


  for (var i = 0; i < imgs.length; i++) {
    imgs[i][OFI] = imgs[i][OFI] || {
      skipTest: opts.skipTest
    };
    fixOne(imgs[i]);
  }

  if (startAutoMode) {
    document.body.addEventListener('load', function (e) {
      if (e.target.tagName === 'IMG') {
        fix(e.target, {
          skipTest: opts.skipTest
        });
      }
    }, true);
    autoModeEnabled = true;
    imgs = 'img'; // reset to a generic selector for watchMQ
  } // if requested, watch media queries for object-fit change


  if (opts.watchMQ) {
    window.addEventListener('resize', fix.bind(null, imgs, {
      skipTest: opts.skipTest
    }));
  }
}

fix.supportsObjectFit = supportsObjectFit;
fix.supportsObjectPosition = supportsObjectPosition;
hijackAttributes();
module.exports = fix;

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),

/***/ "./node_modules/scrollmagic/scrollmagic/uncompressed/ScrollMagic.js":
/*!**************************************************************************!*\
  !*** ./node_modules/scrollmagic/scrollmagic/uncompressed/ScrollMagic.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * ScrollMagic v2.0.7 (2019-05-07)
 * The javascript library for magical scroll interactions.
 * (c) 2019 Jan Paepke (@janpaepke)
 * Project Website: http://scrollmagic.io
 * 
 * @version 2.0.7
 * @license Dual licensed under MIT license and GPL.
 * @author Jan Paepke - e-mail@janpaepke.de
 *
 * @file ScrollMagic main library.
 */

/**
 * @namespace ScrollMagic
 */
(function (root, factory) {
  if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function () {
  "use strict";

  var ScrollMagic = function ScrollMagic() {
    _util.log(2, '(COMPATIBILITY NOTICE) -> As of ScrollMagic 2.0.0 you need to use \'new ScrollMagic.Controller()\' to create a new controller instance. Use \'new ScrollMagic.Scene()\' to instance a scene.');
  };

  ScrollMagic.version = "2.0.7"; // TODO: temporary workaround for chrome's scroll jitter bug

  window.addEventListener("mousewheel", function () {}); // global const

  var PIN_SPACER_ATTRIBUTE = "data-scrollmagic-pin-spacer";
  /**
   * The main class that is needed once per scroll container.
   *
   * @class
   *
   * @example
   * // basic initialization
   * var controller = new ScrollMagic.Controller();
   *
   * // passing options
   * var controller = new ScrollMagic.Controller({container: "#myContainer", loglevel: 3});
   *
   * @param {object} [options] - An object containing one or more options for the controller.
   * @param {(string|object)} [options.container=window] - A selector, DOM object that references the main container for scrolling.
   * @param {boolean} [options.vertical=true] - Sets the scroll mode to vertical (`true`) or horizontal (`false`) scrolling.
   * @param {object} [options.globalSceneOptions={}] - These options will be passed to every Scene that is added to the controller using the addScene method. For more information on Scene options see {@link ScrollMagic.Scene}.
   * @param {number} [options.loglevel=2] Loglevel for debugging. Note that logging is disabled in the minified version of ScrollMagic.
  										 ** `0` => silent
  										 ** `1` => errors
  										 ** `2` => errors, warnings
  										 ** `3` => errors, warnings, debuginfo
   * @param {boolean} [options.refreshInterval=100] - Some changes don't call events by default, like changing the container size or moving a scene trigger element.  
   																										 This interval polls these parameters to fire the necessary events.  
   																										 If you don't use custom containers, trigger elements or have static layouts, where the positions of the trigger elements don't change, you can set this to 0 disable interval checking and improve performance.
   *
   */

  ScrollMagic.Controller = function (options) {
    /*
     * ----------------------------------------------------------------
     * settings
     * ----------------------------------------------------------------
     */
    var NAMESPACE = 'ScrollMagic.Controller',
        SCROLL_DIRECTION_FORWARD = 'FORWARD',
        SCROLL_DIRECTION_REVERSE = 'REVERSE',
        SCROLL_DIRECTION_PAUSED = 'PAUSED',
        DEFAULT_OPTIONS = CONTROLLER_OPTIONS.defaults;
    /*
     * ----------------------------------------------------------------
     * private vars
     * ----------------------------------------------------------------
     */

    var Controller = this,
        _options = _util.extend({}, DEFAULT_OPTIONS, options),
        _sceneObjects = [],
        _updateScenesOnNextCycle = false,
        // can be boolean (true => all scenes) or an array of scenes to be updated
    _scrollPos = 0,
        _scrollDirection = SCROLL_DIRECTION_PAUSED,
        _isDocument = true,
        _viewPortSize = 0,
        _enabled = true,
        _updateTimeout,
        _refreshTimeout;
    /*
     * ----------------------------------------------------------------
     * private functions
     * ----------------------------------------------------------------
     */

    /**
     * Internal constructor function of the ScrollMagic Controller
     * @private
     */


    var construct = function construct() {
      for (var key in _options) {
        if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
          log(2, "WARNING: Unknown option \"" + key + "\"");
          delete _options[key];
        }
      }

      _options.container = _util.get.elements(_options.container)[0]; // check ScrollContainer

      if (!_options.container) {
        log(1, "ERROR creating object " + NAMESPACE + ": No valid scroll container supplied");
        throw NAMESPACE + " init failed."; // cancel
      }

      _isDocument = _options.container === window || _options.container === document.body || !document.body.contains(_options.container); // normalize to window

      if (_isDocument) {
        _options.container = window;
      } // update container size immediately


      _viewPortSize = getViewportSize(); // set event handlers

      _options.container.addEventListener("resize", onChange);

      _options.container.addEventListener("scroll", onChange);

      var ri = parseInt(_options.refreshInterval, 10);
      _options.refreshInterval = _util.type.Number(ri) ? ri : DEFAULT_OPTIONS.refreshInterval;
      scheduleRefresh();
      log(3, "added new " + NAMESPACE + " controller (v" + ScrollMagic.version + ")");
    };
    /**
     * Schedule the next execution of the refresh function
     * @private
     */


    var scheduleRefresh = function scheduleRefresh() {
      if (_options.refreshInterval > 0) {
        _refreshTimeout = window.setTimeout(refresh, _options.refreshInterval);
      }
    };
    /**
     * Default function to get scroll pos - overwriteable using `Controller.scrollPos(newFunction)`
     * @private
     */


    var getScrollPos = function getScrollPos() {
      return _options.vertical ? _util.get.scrollTop(_options.container) : _util.get.scrollLeft(_options.container);
    };
    /**
     * Returns the current viewport Size (width vor horizontal, height for vertical)
     * @private
     */


    var getViewportSize = function getViewportSize() {
      return _options.vertical ? _util.get.height(_options.container) : _util.get.width(_options.container);
    };
    /**
     * Default function to set scroll pos - overwriteable using `Controller.scrollTo(newFunction)`
     * Make available publicly for pinned mousewheel workaround.
     * @private
     */


    var setScrollPos = this._setScrollPos = function (pos) {
      if (_options.vertical) {
        if (_isDocument) {
          window.scrollTo(_util.get.scrollLeft(), pos);
        } else {
          _options.container.scrollTop = pos;
        }
      } else {
        if (_isDocument) {
          window.scrollTo(pos, _util.get.scrollTop());
        } else {
          _options.container.scrollLeft = pos;
        }
      }
    };
    /**
     * Handle updates in cycles instead of on scroll (performance)
     * @private
     */


    var updateScenes = function updateScenes() {
      if (_enabled && _updateScenesOnNextCycle) {
        // determine scenes to update
        var scenesToUpdate = _util.type.Array(_updateScenesOnNextCycle) ? _updateScenesOnNextCycle : _sceneObjects.slice(0); // reset scenes

        _updateScenesOnNextCycle = false;
        var oldScrollPos = _scrollPos; // update scroll pos now instead of onChange, as it might have changed since scheduling (i.e. in-browser smooth scroll)

        _scrollPos = Controller.scrollPos();
        var deltaScroll = _scrollPos - oldScrollPos;

        if (deltaScroll !== 0) {
          // scroll position changed?
          _scrollDirection = deltaScroll > 0 ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_REVERSE;
        } // reverse order of scenes if scrolling reverse


        if (_scrollDirection === SCROLL_DIRECTION_REVERSE) {
          scenesToUpdate.reverse();
        } // update scenes


        scenesToUpdate.forEach(function (scene, index) {
          log(3, "updating Scene " + (index + 1) + "/" + scenesToUpdate.length + " (" + _sceneObjects.length + " total)");
          scene.update(true);
        });

        if (scenesToUpdate.length === 0 && _options.loglevel >= 3) {
          log(3, "updating 0 Scenes (nothing added to controller)");
        }
      }
    };
    /**
     * Initializes rAF callback
     * @private
     */


    var debounceUpdate = function debounceUpdate() {
      _updateTimeout = _util.rAF(updateScenes);
    };
    /**
     * Handles Container changes
     * @private
     */


    var onChange = function onChange(e) {
      log(3, "event fired causing an update:", e.type);

      if (e.type == "resize") {
        // resize
        _viewPortSize = getViewportSize();
        _scrollDirection = SCROLL_DIRECTION_PAUSED;
      } // schedule update


      if (_updateScenesOnNextCycle !== true) {
        _updateScenesOnNextCycle = true;
        debounceUpdate();
      }
    };

    var refresh = function refresh() {
      if (!_isDocument) {
        // simulate resize event. Only works for viewport relevant param (performance)
        if (_viewPortSize != getViewportSize()) {
          var resizeEvent;

          try {
            resizeEvent = new Event('resize', {
              bubbles: false,
              cancelable: false
            });
          } catch (e) {
            // stupid IE
            resizeEvent = document.createEvent("Event");
            resizeEvent.initEvent("resize", false, false);
          }

          _options.container.dispatchEvent(resizeEvent);
        }
      }

      _sceneObjects.forEach(function (scene, index) {
        // refresh all scenes
        scene.refresh();
      });

      scheduleRefresh();
    };
    /**
     * Send a debug message to the console.
     * provided publicly with _log for plugins
     * @private
     *
     * @param {number} loglevel - The loglevel required to initiate output for the message.
     * @param {...mixed} output - One or more variables that should be passed to the console.
     */


    var log = this._log = function (loglevel, output) {
      if (_options.loglevel >= loglevel) {
        Array.prototype.splice.call(arguments, 1, 0, "(" + NAMESPACE + ") ->");

        _util.log.apply(window, arguments);
      }
    }; // for scenes we have getters for each option, but for the controller we don't, so we need to make it available externally for plugins


    this._options = _options;
    /**
     * Sort scenes in ascending order of their start offset.
     * @private
     *
     * @param {array} ScenesArray - an array of ScrollMagic Scenes that should be sorted
     * @return {array} The sorted array of Scenes.
     */

    var sortScenes = function sortScenes(ScenesArray) {
      if (ScenesArray.length <= 1) {
        return ScenesArray;
      } else {
        var scenes = ScenesArray.slice(0);
        scenes.sort(function (a, b) {
          return a.scrollOffset() > b.scrollOffset() ? 1 : -1;
        });
        return scenes;
      }
    };
    /**
     * ----------------------------------------------------------------
     * public functions
     * ----------------------------------------------------------------
     */

    /**
     * Add one ore more scene(s) to the controller.  
     * This is the equivalent to `Scene.addTo(controller)`.
     * @public
     * @example
     * // with a previously defined scene
     * controller.addScene(scene);
     *
     * // with a newly created scene.
     * controller.addScene(new ScrollMagic.Scene({duration : 0}));
     *
     * // adding multiple scenes
     * controller.addScene([scene, scene2, new ScrollMagic.Scene({duration : 0})]);
     *
     * @param {(ScrollMagic.Scene|array)} newScene - ScrollMagic Scene or Array of Scenes to be added to the controller.
     * @return {Controller} Parent object for chaining.
     */


    this.addScene = function (newScene) {
      if (_util.type.Array(newScene)) {
        newScene.forEach(function (scene, index) {
          Controller.addScene(scene);
        });
      } else if (newScene instanceof ScrollMagic.Scene) {
        if (newScene.controller() !== Controller) {
          newScene.addTo(Controller);
        } else if (_sceneObjects.indexOf(newScene) < 0) {
          // new scene
          _sceneObjects.push(newScene); // add to array


          _sceneObjects = sortScenes(_sceneObjects); // sort

          newScene.on("shift.controller_sort", function () {
            // resort whenever scene moves
            _sceneObjects = sortScenes(_sceneObjects);
          }); // insert Global defaults.

          for (var key in _options.globalSceneOptions) {
            if (newScene[key]) {
              newScene[key].call(newScene, _options.globalSceneOptions[key]);
            }
          }

          log(3, "adding Scene (now " + _sceneObjects.length + " total)");
        }
      } else {
        log(1, "ERROR: invalid argument supplied for '.addScene()'");
      }

      return Controller;
    };
    /**
     * Remove one ore more scene(s) from the controller.  
     * This is the equivalent to `Scene.remove()`.
     * @public
     * @example
     * // remove a scene from the controller
     * controller.removeScene(scene);
     *
     * // remove multiple scenes from the controller
     * controller.removeScene([scene, scene2, scene3]);
     *
     * @param {(ScrollMagic.Scene|array)} Scene - ScrollMagic Scene or Array of Scenes to be removed from the controller.
     * @returns {Controller} Parent object for chaining.
     */


    this.removeScene = function (Scene) {
      if (_util.type.Array(Scene)) {
        Scene.forEach(function (scene, index) {
          Controller.removeScene(scene);
        });
      } else {
        var index = _sceneObjects.indexOf(Scene);

        if (index > -1) {
          Scene.off("shift.controller_sort");

          _sceneObjects.splice(index, 1);

          log(3, "removing Scene (now " + _sceneObjects.length + " left)");
          Scene.remove();
        }
      }

      return Controller;
    };
    /**
    * Update one ore more scene(s) according to the scroll position of the container.  
    * This is the equivalent to `Scene.update()`.  
    * The update method calculates the scene's start and end position (based on the trigger element, trigger hook, duration and offset) and checks it against the current scroll position of the container.  
    * It then updates the current scene state accordingly (or does nothing, if the state is already correct) – Pins will be set to their correct position and tweens will be updated to their correct progress.  
    * _**Note:** This method gets called constantly whenever Controller detects a change. The only application for you is if you change something outside of the realm of ScrollMagic, like moving the trigger or changing tween parameters._
    * @public
    * @example
    * // update a specific scene on next cycle
     * controller.updateScene(scene);
     *
    * // update a specific scene immediately
    * controller.updateScene(scene, true);
     *
    * // update multiple scenes scene on next cycle
    * controller.updateScene([scene1, scene2, scene3]);
    *
    * @param {ScrollMagic.Scene} Scene - ScrollMagic Scene or Array of Scenes that is/are supposed to be updated.
    * @param {boolean} [immediately=false] - If `true` the update will be instant, if `false` it will wait until next update cycle.  
    										  This is useful when changing multiple properties of the scene - this way it will only be updated once all new properties are set (updateScenes).
    * @return {Controller} Parent object for chaining.
    */


    this.updateScene = function (Scene, immediately) {
      if (_util.type.Array(Scene)) {
        Scene.forEach(function (scene, index) {
          Controller.updateScene(scene, immediately);
        });
      } else {
        if (immediately) {
          Scene.update(true);
        } else if (_updateScenesOnNextCycle !== true && Scene instanceof ScrollMagic.Scene) {
          // if _updateScenesOnNextCycle is true, all connected scenes are already scheduled for update
          // prep array for next update cycle
          _updateScenesOnNextCycle = _updateScenesOnNextCycle || [];

          if (_updateScenesOnNextCycle.indexOf(Scene) == -1) {
            _updateScenesOnNextCycle.push(Scene);
          }

          _updateScenesOnNextCycle = sortScenes(_updateScenesOnNextCycle); // sort

          debounceUpdate();
        }
      }

      return Controller;
    };
    /**
     * Updates the controller params and calls updateScene on every scene, that is attached to the controller.  
     * See `Controller.updateScene()` for more information about what this means.  
     * In most cases you will not need this function, as it is called constantly, whenever ScrollMagic detects a state change event, like resize or scroll.  
     * The only application for this method is when ScrollMagic fails to detect these events.  
     * One application is with some external scroll libraries (like iScroll) that move an internal container to a negative offset instead of actually scrolling. In this case the update on the controller needs to be called whenever the child container's position changes.
     * For this case there will also be the need to provide a custom function to calculate the correct scroll position. See `Controller.scrollPos()` for details.
     * @public
     * @example
     * // update the controller on next cycle (saves performance due to elimination of redundant updates)
     * controller.update();
     *
     * // update the controller immediately
     * controller.update(true);
     *
     * @param {boolean} [immediately=false] - If `true` the update will be instant, if `false` it will wait until next update cycle (better performance)
     * @return {Controller} Parent object for chaining.
     */


    this.update = function (immediately) {
      onChange({
        type: "resize"
      }); // will update size and set _updateScenesOnNextCycle to true

      if (immediately) {
        updateScenes();
      }

      return Controller;
    };
    /**
     * Scroll to a numeric scroll offset, a DOM element, the start of a scene or provide an alternate method for scrolling.  
     * For vertical controllers it will change the top scroll offset and for horizontal applications it will change the left offset.
     * @public
     *
     * @since 1.1.0
     * @example
     * // scroll to an offset of 100
     * controller.scrollTo(100);
     *
     * // scroll to a DOM element
     * controller.scrollTo("#anchor");
     *
     * // scroll to the beginning of a scene
     * var scene = new ScrollMagic.Scene({offset: 200});
     * controller.scrollTo(scene);
     *
     * // define a new scroll position modification function (jQuery animate instead of jump)
     * controller.scrollTo(function (newScrollPos) {
     *	$("html, body").animate({scrollTop: newScrollPos});
     * });
     * controller.scrollTo(100); // call as usual, but the new function will be used instead
     *
     * // define a new scroll function with an additional parameter
     * controller.scrollTo(function (newScrollPos, message) {
     *  console.log(message);
     *	$(this).animate({scrollTop: newScrollPos});
     * });
     * // call as usual, but supply an extra parameter to the defined custom function
     * controller.scrollTo(100, "my message");
     *
     * // define a new scroll function with an additional parameter containing multiple variables
     * controller.scrollTo(function (newScrollPos, options) {
     *  someGlobalVar = options.a + options.b;
     *	$(this).animate({scrollTop: newScrollPos});
     * });
     * // call as usual, but supply an extra parameter containing multiple options
     * controller.scrollTo(100, {a: 1, b: 2});
     *
     * // define a new scroll function with a callback supplied as an additional parameter
     * controller.scrollTo(function (newScrollPos, callback) {
     *	$(this).animate({scrollTop: newScrollPos}, 400, "swing", callback);
     * });
     * // call as usual, but supply an extra parameter, which is used as a callback in the previously defined custom scroll function
     * controller.scrollTo(100, function() {
     *	console.log("scroll has finished.");
     * });
     *
     * @param {mixed} scrollTarget - The supplied argument can be one of these types:
     * 1. `number` -> The container will scroll to this new scroll offset.
     * 2. `string` or `object` -> Can be a selector or a DOM object.  
     *  The container will scroll to the position of this element.
     * 3. `ScrollMagic Scene` -> The container will scroll to the start of this scene.
     * 4. `function` -> This function will be used for future scroll position modifications.  
     *  This provides a way for you to change the behaviour of scrolling and adding new behaviour like animation. The function receives the new scroll position as a parameter and a reference to the container element using `this`.  
     *  It may also optionally receive an optional additional parameter (see below)  
     *  _**NOTE:**  
     *  All other options will still work as expected, using the new function to scroll._
     * @param {mixed} [additionalParameter] - If a custom scroll function was defined (see above 4.), you may want to supply additional parameters to it, when calling it. You can do this using this parameter – see examples for details. Please note, that this parameter will have no effect, if you use the default scrolling function.
     * @returns {Controller} Parent object for chaining.
     */


    this.scrollTo = function (scrollTarget, additionalParameter) {
      if (_util.type.Number(scrollTarget)) {
        // excecute
        setScrollPos.call(_options.container, scrollTarget, additionalParameter);
      } else if (scrollTarget instanceof ScrollMagic.Scene) {
        // scroll to scene
        if (scrollTarget.controller() === Controller) {
          // check if the controller is associated with this scene
          Controller.scrollTo(scrollTarget.scrollOffset(), additionalParameter);
        } else {
          log(2, "scrollTo(): The supplied scene does not belong to this controller. Scroll cancelled.", scrollTarget);
        }
      } else if (_util.type.Function(scrollTarget)) {
        // assign new scroll function
        setScrollPos = scrollTarget;
      } else {
        // scroll to element
        var elem = _util.get.elements(scrollTarget)[0];

        if (elem) {
          // if parent is pin spacer, use spacer position instead so correct start position is returned for pinned elements.
          while (elem.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) {
            elem = elem.parentNode;
          }

          var param = _options.vertical ? "top" : "left",
              // which param is of interest ?
          containerOffset = _util.get.offset(_options.container),
              // container position is needed because element offset is returned in relation to document, not in relation to container.
          elementOffset = _util.get.offset(elem);

          if (!_isDocument) {
            // container is not the document root, so substract scroll Position to get correct trigger element position relative to scrollcontent
            containerOffset[param] -= Controller.scrollPos();
          }

          Controller.scrollTo(elementOffset[param] - containerOffset[param], additionalParameter);
        } else {
          log(2, "scrollTo(): The supplied argument is invalid. Scroll cancelled.", scrollTarget);
        }
      }

      return Controller;
    };
    /**
     * **Get** the current scrollPosition or **Set** a new method to calculate it.  
     * -> **GET**:
     * When used as a getter this function will return the current scroll position.  
     * To get a cached value use Controller.info("scrollPos"), which will be updated in the update cycle.  
     * For vertical controllers it will return the top scroll offset and for horizontal applications it will return the left offset.
     *
     * -> **SET**:
     * When used as a setter this method prodes a way to permanently overwrite the controller's scroll position calculation.  
     * A typical usecase is when the scroll position is not reflected by the containers scrollTop or scrollLeft values, but for example by the inner offset of a child container.  
     * Moving a child container inside a parent is a commonly used method for several scrolling frameworks, including iScroll.  
     * By providing an alternate calculation function you can make sure ScrollMagic receives the correct scroll position.  
     * Please also bear in mind that your function should return y values for vertical scrolls an x for horizontals.
     *
     * To change the current scroll position please use `Controller.scrollTo()`.
     * @public
     *
     * @example
     * // get the current scroll Position
     * var scrollPos = controller.scrollPos();
     *
     * // set a new scroll position calculation method
     * controller.scrollPos(function () {
     *	return this.info("vertical") ? -mychildcontainer.y : -mychildcontainer.x
     * });
     *
     * @param {function} [scrollPosMethod] - The function to be used for the scroll position calculation of the container.
     * @returns {(number|Controller)} Current scroll position or parent object for chaining.
     */


    this.scrollPos = function (scrollPosMethod) {
      if (!arguments.length) {
        // get
        return getScrollPos.call(Controller);
      } else {
        // set
        if (_util.type.Function(scrollPosMethod)) {
          getScrollPos = scrollPosMethod;
        } else {
          log(2, "Provided value for method 'scrollPos' is not a function. To change the current scroll position use 'scrollTo()'.");
        }
      }

      return Controller;
    };
    /**
     * **Get** all infos or one in particular about the controller.
     * @public
     * @example
     * // returns the current scroll position (number)
     * var scrollPos = controller.info("scrollPos");
     *
     * // returns all infos as an object
     * var infos = controller.info();
     *
     * @param {string} [about] - If passed only this info will be returned instead of an object containing all.  
     							 Valid options are:
     							 ** `"size"` => the current viewport size of the container
     							 ** `"vertical"` => true if vertical scrolling, otherwise false
     							 ** `"scrollPos"` => the current scroll position
     							 ** `"scrollDirection"` => the last known direction of the scroll
     							 ** `"container"` => the container element
     							 ** `"isDocument"` => true if container element is the document.
     * @returns {(mixed|object)} The requested info(s).
     */


    this.info = function (about) {
      var values = {
        size: _viewPortSize,
        // contains height or width (in regard to orientation);
        vertical: _options.vertical,
        scrollPos: _scrollPos,
        scrollDirection: _scrollDirection,
        container: _options.container,
        isDocument: _isDocument
      };

      if (!arguments.length) {
        // get all as an object
        return values;
      } else if (values[about] !== undefined) {
        return values[about];
      } else {
        log(1, "ERROR: option \"" + about + "\" is not available");
        return;
      }
    };
    /**
     * **Get** or **Set** the current loglevel option value.
     * @public
     *
     * @example
     * // get the current value
     * var loglevel = controller.loglevel();
     *
     * // set a new value
     * controller.loglevel(3);
     *
     * @param {number} [newLoglevel] - The new loglevel setting of the Controller. `[0-3]`
     * @returns {(number|Controller)} Current loglevel or parent object for chaining.
     */


    this.loglevel = function (newLoglevel) {
      if (!arguments.length) {
        // get
        return _options.loglevel;
      } else if (_options.loglevel != newLoglevel) {
        // set
        _options.loglevel = newLoglevel;
      }

      return Controller;
    };
    /**
     * **Get** or **Set** the current enabled state of the controller.  
     * This can be used to disable all Scenes connected to the controller without destroying or removing them.
     * @public
     *
     * @example
     * // get the current value
     * var enabled = controller.enabled();
     *
     * // disable the controller
     * controller.enabled(false);
     *
     * @param {boolean} [newState] - The new enabled state of the controller `true` or `false`.
     * @returns {(boolean|Controller)} Current enabled state or parent object for chaining.
     */


    this.enabled = function (newState) {
      if (!arguments.length) {
        // get
        return _enabled;
      } else if (_enabled != newState) {
        // set
        _enabled = !!newState;
        Controller.updateScene(_sceneObjects, true);
      }

      return Controller;
    };
    /**
     * Destroy the Controller, all Scenes and everything.
     * @public
     *
     * @example
     * // without resetting the scenes
     * controller = controller.destroy();
     *
     * // with scene reset
     * controller = controller.destroy(true);
     *
     * @param {boolean} [resetScenes=false] - If `true` the pins and tweens (if existent) of all scenes will be reset.
     * @returns {null} Null to unset handler variables.
     */


    this.destroy = function (resetScenes) {
      window.clearTimeout(_refreshTimeout);
      var i = _sceneObjects.length;

      while (i--) {
        _sceneObjects[i].destroy(resetScenes);
      }

      _options.container.removeEventListener("resize", onChange);

      _options.container.removeEventListener("scroll", onChange);

      _util.cAF(_updateTimeout);

      log(3, "destroyed " + NAMESPACE + " (reset: " + (resetScenes ? "true" : "false") + ")");
      return null;
    }; // INIT


    construct();
    return Controller;
  }; // store pagewide controller options


  var CONTROLLER_OPTIONS = {
    defaults: {
      container: window,
      vertical: true,
      globalSceneOptions: {},
      loglevel: 2,
      refreshInterval: 100
    }
  };
  /*
   * method used to add an option to ScrollMagic Scenes.
   */

  ScrollMagic.Controller.addOption = function (name, defaultValue) {
    CONTROLLER_OPTIONS.defaults[name] = defaultValue;
  }; // instance extension function for plugins


  ScrollMagic.Controller.extend = function (extension) {
    var oldClass = this;

    ScrollMagic.Controller = function () {
      oldClass.apply(this, arguments);
      this.$super = _util.extend({}, this); // copy parent state

      return extension.apply(this, arguments) || this;
    };

    _util.extend(ScrollMagic.Controller, oldClass); // copy properties


    ScrollMagic.Controller.prototype = oldClass.prototype; // copy prototype

    ScrollMagic.Controller.prototype.constructor = ScrollMagic.Controller; // restore constructor
  };
  /**
   * A Scene defines where the controller should react and how.
   *
   * @class
   *
   * @example
   * // create a standard scene and add it to a controller
   * new ScrollMagic.Scene()
   *		.addTo(controller);
   *
   * // create a scene with custom options and assign a handler to it.
   * var scene = new ScrollMagic.Scene({
   * 		duration: 100,
   *		offset: 200,
   *		triggerHook: "onEnter",
   *		reverse: false
   * });
   *
   * @param {object} [options] - Options for the Scene. The options can be updated at any time.  
   							   Instead of setting the options for each scene individually you can also set them globally in the controller as the controllers `globalSceneOptions` option. The object accepts the same properties as the ones below.  
   							   When a scene is added to the controller the options defined using the Scene constructor will be overwritten by those set in `globalSceneOptions`.
   * @param {(number|string|function)} [options.duration=0] - The duration of the scene. 
   					Please see `Scene.duration()` for details.
   * @param {number} [options.offset=0] - Offset Value for the Trigger Position. If no triggerElement is defined this will be the scroll distance from the start of the page, after which the scene will start.
   * @param {(string|object)} [options.triggerElement=null] - Selector or DOM object that defines the start of the scene. If undefined the scene will start right at the start of the page (unless an offset is set).
   * @param {(number|string)} [options.triggerHook="onCenter"] - Can be a number between 0 and 1 defining the position of the trigger Hook in relation to the viewport.  
   															  Can also be defined using a string:
   															  ** `"onEnter"` => `1`
   															  ** `"onCenter"` => `0.5`
   															  ** `"onLeave"` => `0`
   * @param {boolean} [options.reverse=true] - Should the scene reverse, when scrolling up?
   * @param {number} [options.loglevel=2] - Loglevel for debugging. Note that logging is disabled in the minified version of ScrollMagic.
   										  ** `0` => silent
   										  ** `1` => errors
   										  ** `2` => errors, warnings
   										  ** `3` => errors, warnings, debuginfo
   * 
   */


  ScrollMagic.Scene = function (options) {
    /*
     * ----------------------------------------------------------------
     * settings
     * ----------------------------------------------------------------
     */
    var NAMESPACE = 'ScrollMagic.Scene',
        SCENE_STATE_BEFORE = 'BEFORE',
        SCENE_STATE_DURING = 'DURING',
        SCENE_STATE_AFTER = 'AFTER',
        DEFAULT_OPTIONS = SCENE_OPTIONS.defaults;
    /*
     * ----------------------------------------------------------------
     * private vars
     * ----------------------------------------------------------------
     */

    var Scene = this,
        _options = _util.extend({}, DEFAULT_OPTIONS, options),
        _state = SCENE_STATE_BEFORE,
        _progress = 0,
        _scrollOffset = {
      start: 0,
      end: 0
    },
        // reflects the controllers's scroll position for the start and end of the scene respectively
    _triggerPos = 0,
        _enabled = true,
        _durationUpdateMethod,
        _controller;
    /**
     * Internal constructor function of the ScrollMagic Scene
     * @private
     */


    var construct = function construct() {
      for (var key in _options) {
        // check supplied options
        if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
          log(2, "WARNING: Unknown option \"" + key + "\"");
          delete _options[key];
        }
      } // add getters/setters for all possible options


      for (var optionName in DEFAULT_OPTIONS) {
        addSceneOption(optionName);
      } // validate all options


      validateOption();
    };
    /*
     * ----------------------------------------------------------------
     * Event Management
     * ----------------------------------------------------------------
     */


    var _listeners = {};
    /**
     * Scene start event.  
     * Fires whenever the scroll position its the starting point of the scene.  
     * It will also fire when scrolling back up going over the start position of the scene. If you want something to happen only when scrolling down/right, use the scrollDirection parameter passed to the callback.
     *
     * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.
     *
     * @event ScrollMagic.Scene#start
     *
     * @example
     * scene.on("start", function (event) {
     * 	console.log("Hit start point of scene.");
     * });
     *
     * @property {object} event - The event Object passed to each callback
     * @property {string} event.type - The name of the event
     * @property {Scene} event.target - The Scene object that triggered this event
     * @property {number} event.progress - Reflects the current progress of the scene
     * @property {string} event.state - The current state of the scene `"BEFORE"` or `"DURING"`
     * @property {string} event.scrollDirection - Indicates which way we are scrolling `"PAUSED"`, `"FORWARD"` or `"REVERSE"`
     */

    /**
     * Scene end event.  
     * Fires whenever the scroll position its the ending point of the scene.  
     * It will also fire when scrolling back up from after the scene and going over its end position. If you want something to happen only when scrolling down/right, use the scrollDirection parameter passed to the callback.
     *
     * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.
     *
     * @event ScrollMagic.Scene#end
     *
     * @example
     * scene.on("end", function (event) {
     * 	console.log("Hit end point of scene.");
     * });
     *
     * @property {object} event - The event Object passed to each callback
     * @property {string} event.type - The name of the event
     * @property {Scene} event.target - The Scene object that triggered this event
     * @property {number} event.progress - Reflects the current progress of the scene
     * @property {string} event.state - The current state of the scene `"DURING"` or `"AFTER"`
     * @property {string} event.scrollDirection - Indicates which way we are scrolling `"PAUSED"`, `"FORWARD"` or `"REVERSE"`
     */

    /**
     * Scene enter event.  
     * Fires whenever the scene enters the "DURING" state.  
     * Keep in mind that it doesn't matter if the scene plays forward or backward: This event always fires when the scene enters its active scroll timeframe, regardless of the scroll-direction.
     *
     * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.
     *
     * @event ScrollMagic.Scene#enter
     *
     * @example
     * scene.on("enter", function (event) {
     * 	console.log("Scene entered.");
     * });
     *
     * @property {object} event - The event Object passed to each callback
     * @property {string} event.type - The name of the event
     * @property {Scene} event.target - The Scene object that triggered this event
     * @property {number} event.progress - Reflects the current progress of the scene
     * @property {string} event.state - The current state of the scene - always `"DURING"`
     * @property {string} event.scrollDirection - Indicates which way we are scrolling `"PAUSED"`, `"FORWARD"` or `"REVERSE"`
     */

    /**
     * Scene leave event.  
     * Fires whenever the scene's state goes from "DURING" to either "BEFORE" or "AFTER".  
     * Keep in mind that it doesn't matter if the scene plays forward or backward: This event always fires when the scene leaves its active scroll timeframe, regardless of the scroll-direction.
     *
     * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.
     *
     * @event ScrollMagic.Scene#leave
     *
     * @example
     * scene.on("leave", function (event) {
     * 	console.log("Scene left.");
     * });
     *
     * @property {object} event - The event Object passed to each callback
     * @property {string} event.type - The name of the event
     * @property {Scene} event.target - The Scene object that triggered this event
     * @property {number} event.progress - Reflects the current progress of the scene
     * @property {string} event.state - The current state of the scene `"BEFORE"` or `"AFTER"`
     * @property {string} event.scrollDirection - Indicates which way we are scrolling `"PAUSED"`, `"FORWARD"` or `"REVERSE"`
     */

    /**
     * Scene update event.  
     * Fires whenever the scene is updated (but not necessarily changes the progress).
     *
     * @event ScrollMagic.Scene#update
     *
     * @example
     * scene.on("update", function (event) {
     * 	console.log("Scene updated.");
     * });
     *
     * @property {object} event - The event Object passed to each callback
     * @property {string} event.type - The name of the event
     * @property {Scene} event.target - The Scene object that triggered this event
     * @property {number} event.startPos - The starting position of the scene (in relation to the conainer)
     * @property {number} event.endPos - The ending position of the scene (in relation to the conainer)
     * @property {number} event.scrollPos - The current scroll position of the container
     */

    /**
     * Scene progress event.  
     * Fires whenever the progress of the scene changes.
     *
     * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.
     *
     * @event ScrollMagic.Scene#progress
     *
     * @example
     * scene.on("progress", function (event) {
     * 	console.log("Scene progress changed to " + event.progress);
     * });
     *
     * @property {object} event - The event Object passed to each callback
     * @property {string} event.type - The name of the event
     * @property {Scene} event.target - The Scene object that triggered this event
     * @property {number} event.progress - Reflects the current progress of the scene
     * @property {string} event.state - The current state of the scene `"BEFORE"`, `"DURING"` or `"AFTER"`
     * @property {string} event.scrollDirection - Indicates which way we are scrolling `"PAUSED"`, `"FORWARD"` or `"REVERSE"`
     */

    /**
     * Scene change event.  
     * Fires whenvever a property of the scene is changed.
     *
     * @event ScrollMagic.Scene#change
     *
     * @example
     * scene.on("change", function (event) {
     * 	console.log("Scene Property \"" + event.what + "\" changed to " + event.newval);
     * });
     *
     * @property {object} event - The event Object passed to each callback
     * @property {string} event.type - The name of the event
     * @property {Scene} event.target - The Scene object that triggered this event
     * @property {string} event.what - Indicates what value has been changed
     * @property {mixed} event.newval - The new value of the changed property
     */

    /**
     * Scene shift event.  
     * Fires whenvever the start or end **scroll offset** of the scene change.
     * This happens explicitely, when one of these values change: `offset`, `duration` or `triggerHook`.
     * It will fire implicitly when the `triggerElement` changes, if the new element has a different position (most cases).
     * It will also fire implicitly when the size of the container changes and the triggerHook is anything other than `onLeave`.
     *
     * @event ScrollMagic.Scene#shift
     * @since 1.1.0
     *
     * @example
     * scene.on("shift", function (event) {
     * 	console.log("Scene moved, because the " + event.reason + " has changed.)");
     * });
     *
     * @property {object} event - The event Object passed to each callback
     * @property {string} event.type - The name of the event
     * @property {Scene} event.target - The Scene object that triggered this event
     * @property {string} event.reason - Indicates why the scene has shifted
     */

    /**
     * Scene destroy event.  
     * Fires whenvever the scene is destroyed.
     * This can be used to tidy up custom behaviour used in events.
     *
     * @event ScrollMagic.Scene#destroy
     * @since 1.1.0
     *
     * @example
     * scene.on("enter", function (event) {
     *        // add custom action
     *        $("#my-elem").left("200");
     *      })
     *      .on("destroy", function (event) {
     *        // reset my element to start position
     *        if (event.reset) {
     *          $("#my-elem").left("0");
     *        }
     *      });
     *
     * @property {object} event - The event Object passed to each callback
     * @property {string} event.type - The name of the event
     * @property {Scene} event.target - The Scene object that triggered this event
     * @property {boolean} event.reset - Indicates if the destroy method was called with reset `true` or `false`.
     */

    /**
     * Scene add event.  
     * Fires when the scene is added to a controller.
     * This is mostly used by plugins to know that change might be due.
     *
     * @event ScrollMagic.Scene#add
     * @since 2.0.0
     *
     * @example
     * scene.on("add", function (event) {
     * 	console.log('Scene was added to a new controller.');
     * });
     *
     * @property {object} event - The event Object passed to each callback
     * @property {string} event.type - The name of the event
     * @property {Scene} event.target - The Scene object that triggered this event
     * @property {boolean} event.controller - The controller object the scene was added to.
     */

    /**
     * Scene remove event.  
     * Fires when the scene is removed from a controller.
     * This is mostly used by plugins to know that change might be due.
     *
     * @event ScrollMagic.Scene#remove
     * @since 2.0.0
     *
     * @example
     * scene.on("remove", function (event) {
     * 	console.log('Scene was removed from its controller.');
     * });
     *
     * @property {object} event - The event Object passed to each callback
     * @property {string} event.type - The name of the event
     * @property {Scene} event.target - The Scene object that triggered this event
     */

    /**
     * Add one ore more event listener.  
     * The callback function will be fired at the respective event, and an object containing relevant data will be passed to the callback.
     * @method ScrollMagic.Scene#on
     *
     * @example
     * function callback (event) {
     * 		console.log("Event fired! (" + event.type + ")");
     * }
     * // add listeners
     * scene.on("change update progress start end enter leave", callback);
     *
     * @param {string} names - The name or names of the event the callback should be attached to.
     * @param {function} callback - A function that should be executed, when the event is dispatched. An event object will be passed to the callback.
     * @returns {Scene} Parent object for chaining.
     */

    this.on = function (names, callback) {
      if (_util.type.Function(callback)) {
        names = names.trim().split(' ');
        names.forEach(function (fullname) {
          var nameparts = fullname.split('.'),
              eventname = nameparts[0],
              namespace = nameparts[1];

          if (eventname != "*") {
            // disallow wildcards
            if (!_listeners[eventname]) {
              _listeners[eventname] = [];
            }

            _listeners[eventname].push({
              namespace: namespace || '',
              callback: callback
            });
          }
        });
      } else {
        log(1, "ERROR when calling '.on()': Supplied callback for '" + names + "' is not a valid function!");
      }

      return Scene;
    };
    /**
     * Remove one or more event listener.
     * @method ScrollMagic.Scene#off
     *
     * @example
     * function callback (event) {
     * 		console.log("Event fired! (" + event.type + ")");
     * }
     * // add listeners
     * scene.on("change update", callback);
     * // remove listeners
     * scene.off("change update", callback);
     *
     * @param {string} names - The name or names of the event that should be removed.
     * @param {function} [callback] - A specific callback function that should be removed. If none is passed all callbacks to the event listener will be removed.
     * @returns {Scene} Parent object for chaining.
     */


    this.off = function (names, callback) {
      if (!names) {
        log(1, "ERROR: Invalid event name supplied.");
        return Scene;
      }

      names = names.trim().split(' ');
      names.forEach(function (fullname, key) {
        var nameparts = fullname.split('.'),
            eventname = nameparts[0],
            namespace = nameparts[1] || '',
            removeList = eventname === '*' ? Object.keys(_listeners) : [eventname];
        removeList.forEach(function (remove) {
          var list = _listeners[remove] || [],
              i = list.length;

          while (i--) {
            var listener = list[i];

            if (listener && (namespace === listener.namespace || namespace === '*') && (!callback || callback == listener.callback)) {
              list.splice(i, 1);
            }
          }

          if (!list.length) {
            delete _listeners[remove];
          }
        });
      });
      return Scene;
    };
    /**
     * Trigger an event.
     * @method ScrollMagic.Scene#trigger
     *
     * @example
     * this.trigger("change");
     *
     * @param {string} name - The name of the event that should be triggered.
     * @param {object} [vars] - An object containing info that should be passed to the callback.
     * @returns {Scene} Parent object for chaining.
     */


    this.trigger = function (name, vars) {
      if (name) {
        var nameparts = name.trim().split('.'),
            eventname = nameparts[0],
            namespace = nameparts[1],
            listeners = _listeners[eventname];
        log(3, 'event fired:', eventname, vars ? "->" : '', vars || '');

        if (listeners) {
          listeners.forEach(function (listener, key) {
            if (!namespace || namespace === listener.namespace) {
              listener.callback.call(Scene, new ScrollMagic.Event(eventname, listener.namespace, Scene, vars));
            }
          });
        }
      } else {
        log(1, "ERROR: Invalid event name supplied.");
      }

      return Scene;
    }; // set event listeners


    Scene.on("change.internal", function (e) {
      if (e.what !== "loglevel" && e.what !== "tweenChanges") {
        // no need for a scene update scene with these options...
        if (e.what === "triggerElement") {
          updateTriggerElementPosition();
        } else if (e.what === "reverse") {
          // the only property left that may have an impact on the current scene state. Everything else is handled by the shift event.
          Scene.update();
        }
      }
    }).on("shift.internal", function (e) {
      updateScrollOffset();
      Scene.update(); // update scene to reflect new position
    });
    /**
     * Send a debug message to the console.
     * @private
     * but provided publicly with _log for plugins
     *
     * @param {number} loglevel - The loglevel required to initiate output for the message.
     * @param {...mixed} output - One or more variables that should be passed to the console.
     */

    var log = this._log = function (loglevel, output) {
      if (_options.loglevel >= loglevel) {
        Array.prototype.splice.call(arguments, 1, 0, "(" + NAMESPACE + ") ->");

        _util.log.apply(window, arguments);
      }
    };
    /**
     * Add the scene to a controller.  
     * This is the equivalent to `Controller.addScene(scene)`.
     * @method ScrollMagic.Scene#addTo
     *
     * @example
     * // add a scene to a ScrollMagic Controller
     * scene.addTo(controller);
     *
     * @param {ScrollMagic.Controller} controller - The controller to which the scene should be added.
     * @returns {Scene} Parent object for chaining.
     */


    this.addTo = function (controller) {
      if (!(controller instanceof ScrollMagic.Controller)) {
        log(1, "ERROR: supplied argument of 'addTo()' is not a valid ScrollMagic Controller");
      } else if (_controller != controller) {
        // new controller
        if (_controller) {
          // was associated to a different controller before, so remove it...
          _controller.removeScene(Scene);
        }

        _controller = controller;
        validateOption();
        updateDuration(true);
        updateTriggerElementPosition(true);
        updateScrollOffset();

        _controller.info("container").addEventListener('resize', onContainerResize);

        controller.addScene(Scene);
        Scene.trigger("add", {
          controller: _controller
        });
        log(3, "added " + NAMESPACE + " to controller");
        Scene.update();
      }

      return Scene;
    };
    /**
     * **Get** or **Set** the current enabled state of the scene.  
     * This can be used to disable this scene without removing or destroying it.
     * @method ScrollMagic.Scene#enabled
     *
     * @example
     * // get the current value
     * var enabled = scene.enabled();
     *
     * // disable the scene
     * scene.enabled(false);
     *
     * @param {boolean} [newState] - The new enabled state of the scene `true` or `false`.
     * @returns {(boolean|Scene)} Current enabled state or parent object for chaining.
     */


    this.enabled = function (newState) {
      if (!arguments.length) {
        // get
        return _enabled;
      } else if (_enabled != newState) {
        // set
        _enabled = !!newState;
        Scene.update(true);
      }

      return Scene;
    };
    /**
     * Remove the scene from the controller.  
     * This is the equivalent to `Controller.removeScene(scene)`.
     * The scene will not be updated anymore until you readd it to a controller.
     * To remove the pin or the tween you need to call removeTween() or removePin() respectively.
     * @method ScrollMagic.Scene#remove
     * @example
     * // remove the scene from its controller
     * scene.remove();
     *
     * @returns {Scene} Parent object for chaining.
     */


    this.remove = function () {
      if (_controller) {
        _controller.info("container").removeEventListener('resize', onContainerResize);

        var tmpParent = _controller;
        _controller = undefined;
        tmpParent.removeScene(Scene);
        Scene.trigger("remove");
        log(3, "removed " + NAMESPACE + " from controller");
      }

      return Scene;
    };
    /**
     * Destroy the scene and everything.
     * @method ScrollMagic.Scene#destroy
     * @example
     * // destroy the scene without resetting the pin and tween to their initial positions
     * scene = scene.destroy();
     *
     * // destroy the scene and reset the pin and tween
     * scene = scene.destroy(true);
     *
     * @param {boolean} [reset=false] - If `true` the pin and tween (if existent) will be reset.
     * @returns {null} Null to unset handler variables.
     */


    this.destroy = function (reset) {
      Scene.trigger("destroy", {
        reset: reset
      });
      Scene.remove();
      Scene.off("*.*");
      log(3, "destroyed " + NAMESPACE + " (reset: " + (reset ? "true" : "false") + ")");
      return null;
    };
    /**
     * Updates the Scene to reflect the current state.  
     * This is the equivalent to `Controller.updateScene(scene, immediately)`.  
     * The update method calculates the scene's start and end position (based on the trigger element, trigger hook, duration and offset) and checks it against the current scroll position of the container.  
     * It then updates the current scene state accordingly (or does nothing, if the state is already correct) – Pins will be set to their correct position and tweens will be updated to their correct progress.
     * This means an update doesn't necessarily result in a progress change. The `progress` event will be fired if the progress has indeed changed between this update and the last.  
     * _**NOTE:** This method gets called constantly whenever ScrollMagic detects a change. The only application for you is if you change something outside of the realm of ScrollMagic, like moving the trigger or changing tween parameters._
     * @method ScrollMagic.Scene#update
     * @example
     * // update the scene on next tick
     * scene.update();
     *
     * // update the scene immediately
     * scene.update(true);
     *
     * @fires Scene.update
     *
     * @param {boolean} [immediately=false] - If `true` the update will be instant, if `false` it will wait until next update cycle (better performance).
     * @returns {Scene} Parent object for chaining.
     */


    this.update = function (immediately) {
      if (_controller) {
        if (immediately) {
          if (_controller.enabled() && _enabled) {
            var scrollPos = _controller.info("scrollPos"),
                newProgress;

            if (_options.duration > 0) {
              newProgress = (scrollPos - _scrollOffset.start) / (_scrollOffset.end - _scrollOffset.start);
            } else {
              newProgress = scrollPos >= _scrollOffset.start ? 1 : 0;
            }

            Scene.trigger("update", {
              startPos: _scrollOffset.start,
              endPos: _scrollOffset.end,
              scrollPos: scrollPos
            });
            Scene.progress(newProgress);
          } else if (_pin && _state === SCENE_STATE_DURING) {
            updatePinState(true); // unpin in position
          }
        } else {
          _controller.updateScene(Scene, false);
        }
      }

      return Scene;
    };
    /**
     * Updates dynamic scene variables like the trigger element position or the duration.
     * This method is automatically called in regular intervals from the controller. See {@link ScrollMagic.Controller} option `refreshInterval`.
     * 
     * You can call it to minimize lag, for example when you intentionally change the position of the triggerElement.
     * If you don't it will simply be updated in the next refresh interval of the container, which is usually sufficient.
     *
     * @method ScrollMagic.Scene#refresh
     * @since 1.1.0
     * @example
     * scene = new ScrollMagic.Scene({triggerElement: "#trigger"});
     * 
     * // change the position of the trigger
     * $("#trigger").css("top", 500);
     * // immediately let the scene know of this change
     * scene.refresh();
     *
     * @fires {@link Scene.shift}, if the trigger element position or the duration changed
     * @fires {@link Scene.change}, if the duration changed
     *
     * @returns {Scene} Parent object for chaining.
     */


    this.refresh = function () {
      updateDuration();
      updateTriggerElementPosition(); // update trigger element position

      return Scene;
    };
    /**
     * **Get** or **Set** the scene's progress.  
     * Usually it shouldn't be necessary to use this as a setter, as it is set automatically by scene.update().  
     * The order in which the events are fired depends on the duration of the scene:
     *  1. Scenes with `duration == 0`:  
     *  Scenes that have no duration by definition have no ending. Thus the `end` event will never be fired.  
     *  When the trigger position of the scene is passed the events are always fired in this order:  
     *  `enter`, `start`, `progress` when scrolling forward  
     *  and  
     *  `progress`, `start`, `leave` when scrolling in reverse
     *  2. Scenes with `duration > 0`:  
     *  Scenes with a set duration have a defined start and end point.  
     *  When scrolling past the start position of the scene it will fire these events in this order:  
     *  `enter`, `start`, `progress`  
     *  When continuing to scroll and passing the end point it will fire these events:  
     *  `progress`, `end`, `leave`  
     *  When reversing through the end point these events are fired:  
     *  `enter`, `end`, `progress`  
     *  And when continuing to scroll past the start position in reverse it will fire:  
     *  `progress`, `start`, `leave`  
     *  In between start and end the `progress` event will be called constantly, whenever the progress changes.
     * 
     * In short:  
     * `enter` events will always trigger **before** the progress update and `leave` envents will trigger **after** the progress update.  
     * `start` and `end` will always trigger at their respective position.
     * 
     * Please review the event descriptions for details on the events and the event object that is passed to the callback.
     * 
     * @method ScrollMagic.Scene#progress
     * @example
     * // get the current scene progress
     * var progress = scene.progress();
     *
     * // set new scene progress
     * scene.progress(0.3);
     *
     * @fires {@link Scene.enter}, when used as setter
     * @fires {@link Scene.start}, when used as setter
     * @fires {@link Scene.progress}, when used as setter
     * @fires {@link Scene.end}, when used as setter
     * @fires {@link Scene.leave}, when used as setter
     *
     * @param {number} [progress] - The new progress value of the scene `[0-1]`.
     * @returns {number} `get` -  Current scene progress.
     * @returns {Scene} `set` -  Parent object for chaining.
     */


    this.progress = function (progress) {
      if (!arguments.length) {
        // get
        return _progress;
      } else {
        // set
        var doUpdate = false,
            oldState = _state,
            scrollDirection = _controller ? _controller.info("scrollDirection") : 'PAUSED',
            reverseOrForward = _options.reverse || progress >= _progress;

        if (_options.duration === 0) {
          // zero duration scenes
          doUpdate = _progress != progress;
          _progress = progress < 1 && reverseOrForward ? 0 : 1;
          _state = _progress === 0 ? SCENE_STATE_BEFORE : SCENE_STATE_DURING;
        } else {
          // scenes with start and end
          if (progress < 0 && _state !== SCENE_STATE_BEFORE && reverseOrForward) {
            // go back to initial state
            _progress = 0;
            _state = SCENE_STATE_BEFORE;
            doUpdate = true;
          } else if (progress >= 0 && progress < 1 && reverseOrForward) {
            _progress = progress;
            _state = SCENE_STATE_DURING;
            doUpdate = true;
          } else if (progress >= 1 && _state !== SCENE_STATE_AFTER) {
            _progress = 1;
            _state = SCENE_STATE_AFTER;
            doUpdate = true;
          } else if (_state === SCENE_STATE_DURING && !reverseOrForward) {
            updatePinState(); // in case we scrolled backwards mid-scene and reverse is disabled => update the pin position, so it doesn't move back as well.
          }
        }

        if (doUpdate) {
          // fire events
          var eventVars = {
            progress: _progress,
            state: _state,
            scrollDirection: scrollDirection
          },
              stateChanged = _state != oldState;

          var trigger = function trigger(eventName) {
            // tmp helper to simplify code
            Scene.trigger(eventName, eventVars);
          };

          if (stateChanged) {
            // enter events
            if (oldState !== SCENE_STATE_DURING) {
              trigger("enter");
              trigger(oldState === SCENE_STATE_BEFORE ? "start" : "end");
            }
          }

          trigger("progress");

          if (stateChanged) {
            // leave events
            if (_state !== SCENE_STATE_DURING) {
              trigger(_state === SCENE_STATE_BEFORE ? "start" : "end");
              trigger("leave");
            }
          }
        }

        return Scene;
      }
    };
    /**
     * Update the start and end scrollOffset of the container.
     * The positions reflect what the controller's scroll position will be at the start and end respectively.
     * Is called, when:
     *   - Scene event "change" is called with: offset, triggerHook, duration 
     *   - scroll container event "resize" is called
     *   - the position of the triggerElement changes
     *   - the controller changes -> addTo()
     * @private
     */


    var updateScrollOffset = function updateScrollOffset() {
      _scrollOffset = {
        start: _triggerPos + _options.offset
      };

      if (_controller && _options.triggerElement) {
        // take away triggerHook portion to get relative to top
        _scrollOffset.start -= _controller.info("size") * _options.triggerHook;
      }

      _scrollOffset.end = _scrollOffset.start + _options.duration;
    };
    /**
     * Updates the duration if set to a dynamic function.
     * This method is called when the scene is added to a controller and in regular intervals from the controller through scene.refresh().
     * 
     * @fires {@link Scene.change}, if the duration changed
     * @fires {@link Scene.shift}, if the duration changed
     *
     * @param {boolean} [suppressEvents=false] - If true the shift event will be suppressed.
     * @private
     */


    var updateDuration = function updateDuration(suppressEvents) {
      // update duration
      if (_durationUpdateMethod) {
        var varname = "duration";

        if (changeOption(varname, _durationUpdateMethod.call(Scene)) && !suppressEvents) {
          // set
          Scene.trigger("change", {
            what: varname,
            newval: _options[varname]
          });
          Scene.trigger("shift", {
            reason: varname
          });
        }
      }
    };
    /**
     * Updates the position of the triggerElement, if present.
     * This method is called ...
     *  - ... when the triggerElement is changed
     *  - ... when the scene is added to a (new) controller
     *  - ... in regular intervals from the controller through scene.refresh().
     * 
     * @fires {@link Scene.shift}, if the position changed
     *
     * @param {boolean} [suppressEvents=false] - If true the shift event will be suppressed.
     * @private
     */


    var updateTriggerElementPosition = function updateTriggerElementPosition(suppressEvents) {
      var elementPos = 0,
          telem = _options.triggerElement;

      if (_controller && (telem || _triggerPos > 0)) {
        // either an element exists or was removed and the triggerPos is still > 0
        if (telem) {
          // there currently a triggerElement set
          if (telem.parentNode) {
            // check if element is still attached to DOM
            var controllerInfo = _controller.info(),
                containerOffset = _util.get.offset(controllerInfo.container),
                // container position is needed because element offset is returned in relation to document, not in relation to container.
            param = controllerInfo.vertical ? "top" : "left"; // which param is of interest ?
            // if parent is spacer, use spacer position instead so correct start position is returned for pinned elements.


            while (telem.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) {
              telem = telem.parentNode;
            }

            var elementOffset = _util.get.offset(telem);

            if (!controllerInfo.isDocument) {
              // container is not the document root, so substract scroll Position to get correct trigger element position relative to scrollcontent
              containerOffset[param] -= _controller.scrollPos();
            }

            elementPos = elementOffset[param] - containerOffset[param];
          } else {
            // there was an element, but it was removed from DOM
            log(2, "WARNING: triggerElement was removed from DOM and will be reset to", undefined);
            Scene.triggerElement(undefined); // unset, so a change event is triggered
          }
        }

        var changed = elementPos != _triggerPos;
        _triggerPos = elementPos;

        if (changed && !suppressEvents) {
          Scene.trigger("shift", {
            reason: "triggerElementPosition"
          });
        }
      }
    };
    /**
     * Trigger a shift event, when the container is resized and the triggerHook is > 1.
     * @private
     */


    var onContainerResize = function onContainerResize(e) {
      if (_options.triggerHook > 0) {
        Scene.trigger("shift", {
          reason: "containerResize"
        });
      }
    };

    var _validate = _util.extend(SCENE_OPTIONS.validate, {
      // validation for duration handled internally for reference to private var _durationMethod
      duration: function duration(val) {
        if (_util.type.String(val) && val.match(/^(\.|\d)*\d+%$/)) {
          // percentage value
          var perc = parseFloat(val) / 100;

          val = function val() {
            return _controller ? _controller.info("size") * perc : 0;
          };
        }

        if (_util.type.Function(val)) {
          // function
          _durationUpdateMethod = val;

          try {
            val = parseFloat(_durationUpdateMethod.call(Scene));
          } catch (e) {
            val = -1; // will cause error below
          }
        } // val has to be float


        val = parseFloat(val);

        if (!_util.type.Number(val) || val < 0) {
          if (_durationUpdateMethod) {
            _durationUpdateMethod = undefined;
            throw ["Invalid return value of supplied function for option \"duration\":", val];
          } else {
            throw ["Invalid value for option \"duration\":", val];
          }
        }

        return val;
      }
    });
    /**
     * Checks the validity of a specific or all options and reset to default if neccessary.
     * @private
     */


    var validateOption = function validateOption(check) {
      check = arguments.length ? [check] : Object.keys(_validate);
      check.forEach(function (optionName, key) {
        var value;

        if (_validate[optionName]) {
          // there is a validation method for this option
          try {
            // validate value
            value = _validate[optionName](_options[optionName]);
          } catch (e) {
            // validation failed -> reset to default
            value = DEFAULT_OPTIONS[optionName];
            var logMSG = _util.type.String(e) ? [e] : e;

            if (_util.type.Array(logMSG)) {
              logMSG[0] = "ERROR: " + logMSG[0];
              logMSG.unshift(1); // loglevel 1 for error msg

              log.apply(this, logMSG);
            } else {
              log(1, "ERROR: Problem executing validation callback for option '" + optionName + "':", e.message);
            }
          } finally {
            _options[optionName] = value;
          }
        }
      });
    };
    /**
     * Helper used by the setter/getters for scene options
     * @private
     */


    var changeOption = function changeOption(varname, newval) {
      var changed = false,
          oldval = _options[varname];

      if (_options[varname] != newval) {
        _options[varname] = newval;
        validateOption(varname); // resets to default if necessary

        changed = oldval != _options[varname];
      }

      return changed;
    }; // generate getters/setters for all options


    var addSceneOption = function addSceneOption(optionName) {
      if (!Scene[optionName]) {
        Scene[optionName] = function (newVal) {
          if (!arguments.length) {
            // get
            return _options[optionName];
          } else {
            if (optionName === "duration") {
              // new duration is set, so any previously set function must be unset
              _durationUpdateMethod = undefined;
            }

            if (changeOption(optionName, newVal)) {
              // set
              Scene.trigger("change", {
                what: optionName,
                newval: _options[optionName]
              });

              if (SCENE_OPTIONS.shifts.indexOf(optionName) > -1) {
                Scene.trigger("shift", {
                  reason: optionName
                });
              }
            }
          }

          return Scene;
        };
      }
    };
    /**
     * **Get** or **Set** the duration option value.
     *
     * As a **setter** it accepts three types of parameters:
     * 1. `number`: Sets the duration of the scene to exactly this amount of pixels.  
     *   This means the scene will last for exactly this amount of pixels scrolled. Sub-Pixels are also valid.
     *   A value of `0` means that the scene is 'open end' and no end will be triggered. Pins will never unpin and animations will play independently of scroll progress.
     * 2. `string`: Always updates the duration relative to parent scroll container.  
     *   For example `"100%"` will keep the duration always exactly at the inner height of the scroll container.
     *   When scrolling vertically the width is used for reference respectively.
     * 3. `function`: The supplied function will be called to return the scene duration.
     *   This is useful in setups where the duration depends on other elements who might change size. By supplying a function you can return a value instead of updating potentially multiple scene durations.  
     *   The scene can be referenced inside the callback using `this`.
     *   _**WARNING:** This is an easy way to kill performance, as the callback will be executed every time `Scene.refresh()` is called, which happens a lot. The interval is defined by the controller (see ScrollMagic.Controller option `refreshInterval`).  
     *   It's recomended to avoid calculations within the function and use cached variables as return values.  
     *   This counts double if you use the same function for multiple scenes._
     *
     * @method ScrollMagic.Scene#duration
     * @example
     * // get the current duration value
     * var duration = scene.duration();
     *
     * // set a new duration
     * scene.duration(300);
     *
     * // set duration responsively to container size
     * scene.duration("100%");
     *
     * // use a function to randomize the duration for some reason.
     * var durationValueCache;
     * function durationCallback () {
     *   return durationValueCache;
     * }
     * function updateDuration () {
     *   durationValueCache = Math.random() * 100;
     * }
     * updateDuration(); // set to initial value
     * scene.duration(durationCallback); // set duration callback
     *
     * @fires {@link Scene.change}, when used as setter
     * @fires {@link Scene.shift}, when used as setter
     * @param {(number|string|function)} [newDuration] - The new duration setting for the scene.
     * @returns {number} `get` -  Current scene duration.
     * @returns {Scene} `set` -  Parent object for chaining.
     */

    /**
     * **Get** or **Set** the offset option value.
     * @method ScrollMagic.Scene#offset
     * @example
     * // get the current offset
     * var offset = scene.offset();
     *
     * // set a new offset
     * scene.offset(100);
     *
     * @fires {@link Scene.change}, when used as setter
     * @fires {@link Scene.shift}, when used as setter
     * @param {number} [newOffset] - The new offset of the scene.
     * @returns {number} `get` -  Current scene offset.
     * @returns {Scene} `set` -  Parent object for chaining.
     */

    /**
     * **Get** or **Set** the triggerElement option value.
     * Does **not** fire `Scene.shift`, because changing the trigger Element doesn't necessarily mean the start position changes. This will be determined in `Scene.refresh()`, which is automatically triggered.
     * @method ScrollMagic.Scene#triggerElement
     * @example
     * // get the current triggerElement
     * var triggerElement = scene.triggerElement();
     *
     * // set a new triggerElement using a selector
     * scene.triggerElement("#trigger");
     * // set a new triggerElement using a DOM object
     * scene.triggerElement(document.getElementById("trigger"));
     *
     * @fires {@link Scene.change}, when used as setter
     * @param {(string|object)} [newTriggerElement] - The new trigger element for the scene.
     * @returns {(string|object)} `get` -  Current triggerElement.
     * @returns {Scene} `set` -  Parent object for chaining.
     */

    /**
     * **Get** or **Set** the triggerHook option value.
     * @method ScrollMagic.Scene#triggerHook
     * @example
     * // get the current triggerHook value
     * var triggerHook = scene.triggerHook();
     *
     * // set a new triggerHook using a string
     * scene.triggerHook("onLeave");
     * // set a new triggerHook using a number
     * scene.triggerHook(0.7);
     *
     * @fires {@link Scene.change}, when used as setter
     * @fires {@link Scene.shift}, when used as setter
     * @param {(number|string)} [newTriggerHook] - The new triggerHook of the scene. See {@link Scene} parameter description for value options.
     * @returns {number} `get` -  Current triggerHook (ALWAYS numerical).
     * @returns {Scene} `set` -  Parent object for chaining.
     */

    /**
     * **Get** or **Set** the reverse option value.
     * @method ScrollMagic.Scene#reverse
     * @example
     * // get the current reverse option
     * var reverse = scene.reverse();
     *
     * // set new reverse option
     * scene.reverse(false);
     *
     * @fires {@link Scene.change}, when used as setter
     * @param {boolean} [newReverse] - The new reverse setting of the scene.
     * @returns {boolean} `get` -  Current reverse option value.
     * @returns {Scene} `set` -  Parent object for chaining.
     */

    /**
     * **Get** or **Set** the loglevel option value.
     * @method ScrollMagic.Scene#loglevel
     * @example
     * // get the current loglevel
     * var loglevel = scene.loglevel();
     *
     * // set new loglevel
     * scene.loglevel(3);
     *
     * @fires {@link Scene.change}, when used as setter
     * @param {number} [newLoglevel] - The new loglevel setting of the scene. `[0-3]`
     * @returns {number} `get` -  Current loglevel.
     * @returns {Scene} `set` -  Parent object for chaining.
     */

    /**
     * **Get** the associated controller.
     * @method ScrollMagic.Scene#controller
     * @example
     * // get the controller of a scene
     * var controller = scene.controller();
     *
     * @returns {ScrollMagic.Controller} Parent controller or `undefined`
     */


    this.controller = function () {
      return _controller;
    };
    /**
     * **Get** the current state.
     * @method ScrollMagic.Scene#state
     * @example
     * // get the current state
     * var state = scene.state();
     *
     * @returns {string} `"BEFORE"`, `"DURING"` or `"AFTER"`
     */


    this.state = function () {
      return _state;
    };
    /**
     * **Get** the current scroll offset for the start of the scene.  
     * Mind, that the scrollOffset is related to the size of the container, if `triggerHook` is bigger than `0` (or `"onLeave"`).  
     * This means, that resizing the container or changing the `triggerHook` will influence the scene's start offset.
     * @method ScrollMagic.Scene#scrollOffset
     * @example
     * // get the current scroll offset for the start and end of the scene.
     * var start = scene.scrollOffset();
     * var end = scene.scrollOffset() + scene.duration();
     * console.log("the scene starts at", start, "and ends at", end);
     *
     * @returns {number} The scroll offset (of the container) at which the scene will trigger. Y value for vertical and X value for horizontal scrolls.
     */


    this.scrollOffset = function () {
      return _scrollOffset.start;
    };
    /**
     * **Get** the trigger position of the scene (including the value of the `offset` option).  
     * @method ScrollMagic.Scene#triggerPosition
     * @example
     * // get the scene's trigger position
     * var triggerPosition = scene.triggerPosition();
     *
     * @returns {number} Start position of the scene. Top position value for vertical and left position value for horizontal scrolls.
     */


    this.triggerPosition = function () {
      var pos = _options.offset; // the offset is the basis

      if (_controller) {
        // get the trigger position
        if (_options.triggerElement) {
          // Element as trigger
          pos += _triggerPos;
        } else {
          // return the height of the triggerHook to start at the beginning
          pos += _controller.info("size") * Scene.triggerHook();
        }
      }

      return pos;
    };

    var _pin, _pinOptions;

    Scene.on("shift.internal", function (e) {
      var durationChanged = e.reason === "duration";

      if (_state === SCENE_STATE_AFTER && durationChanged || _state === SCENE_STATE_DURING && _options.duration === 0) {
        // if [duration changed after a scene (inside scene progress updates pin position)] or [duration is 0, we are in pin phase and some other value changed].
        updatePinState();
      }

      if (durationChanged) {
        updatePinDimensions();
      }
    }).on("progress.internal", function (e) {
      updatePinState();
    }).on("add.internal", function (e) {
      updatePinDimensions();
    }).on("destroy.internal", function (e) {
      Scene.removePin(e.reset);
    });
    /**
     * Update the pin state.
     * @private
     */

    var updatePinState = function updatePinState(forceUnpin) {
      if (_pin && _controller) {
        var containerInfo = _controller.info(),
            pinTarget = _pinOptions.spacer.firstChild; // may be pin element or another spacer, if cascading pins


        if (!forceUnpin && _state === SCENE_STATE_DURING) {
          // during scene or if duration is 0 and we are past the trigger
          // pinned state
          if (_util.css(pinTarget, "position") != "fixed") {
            // change state before updating pin spacer (position changes due to fixed collapsing might occur.)
            _util.css(pinTarget, {
              "position": "fixed"
            }); // update pin spacer


            updatePinDimensions();
          }

          var fixedPos = _util.get.offset(_pinOptions.spacer, true),
              // get viewport position of spacer
          scrollDistance = _options.reverse || _options.duration === 0 ? containerInfo.scrollPos - _scrollOffset.start // quicker
          : Math.round(_progress * _options.duration * 10) / 10; // if no reverse and during pin the position needs to be recalculated using the progress
          // add scrollDistance


          fixedPos[containerInfo.vertical ? "top" : "left"] += scrollDistance; // set new values

          _util.css(_pinOptions.spacer.firstChild, {
            top: fixedPos.top,
            left: fixedPos.left
          });
        } else {
          // unpinned state
          var newCSS = {
            position: _pinOptions.inFlow ? "relative" : "absolute",
            top: 0,
            left: 0
          },
              change = _util.css(pinTarget, "position") != newCSS.position;

          if (!_pinOptions.pushFollowers) {
            newCSS[containerInfo.vertical ? "top" : "left"] = _options.duration * _progress;
          } else if (_options.duration > 0) {
            // only concerns scenes with duration
            if (_state === SCENE_STATE_AFTER && parseFloat(_util.css(_pinOptions.spacer, "padding-top")) === 0) {
              change = true; // if in after state but havent updated spacer yet (jumped past pin)
            } else if (_state === SCENE_STATE_BEFORE && parseFloat(_util.css(_pinOptions.spacer, "padding-bottom")) === 0) {
              // before
              change = true; // jumped past fixed state upward direction
            }
          } // set new values


          _util.css(pinTarget, newCSS);

          if (change) {
            // update pin spacer if state changed
            updatePinDimensions();
          }
        }
      }
    };
    /**
     * Update the pin spacer and/or element size.
     * The size of the spacer needs to be updated whenever the duration of the scene changes, if it is to push down following elements.
     * @private
     */


    var updatePinDimensions = function updatePinDimensions() {
      if (_pin && _controller && _pinOptions.inFlow) {
        // no spacerresize, if original position is absolute
        var after = _state === SCENE_STATE_AFTER,
            before = _state === SCENE_STATE_BEFORE,
            during = _state === SCENE_STATE_DURING,
            vertical = _controller.info("vertical"),
            pinTarget = _pinOptions.spacer.firstChild,
            // usually the pined element but can also be another spacer (cascaded pins)
        marginCollapse = _util.isMarginCollapseType(_util.css(_pinOptions.spacer, "display")),
            css = {}; // set new size
        // if relsize: spacer -> pin | else: pin -> spacer


        if (_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) {
          if (during) {
            _util.css(_pin, {
              "width": _util.get.width(_pinOptions.spacer)
            });
          } else {
            _util.css(_pin, {
              "width": "100%"
            });
          }
        } else {
          // minwidth is needed for cascaded pins.
          css["min-width"] = _util.get.width(vertical ? _pin : pinTarget, true, true);
          css.width = during ? css["min-width"] : "auto";
        }

        if (_pinOptions.relSize.height) {
          if (during) {
            // the only padding the spacer should ever include is the duration (if pushFollowers = true), so we need to substract that.
            _util.css(_pin, {
              "height": _util.get.height(_pinOptions.spacer) - (_pinOptions.pushFollowers ? _options.duration : 0)
            });
          } else {
            _util.css(_pin, {
              "height": "100%"
            });
          }
        } else {
          // margin is only included if it's a cascaded pin to resolve an IE9 bug
          css["min-height"] = _util.get.height(vertical ? pinTarget : _pin, true, !marginCollapse); // needed for cascading pins

          css.height = during ? css["min-height"] : "auto";
        } // add space for duration if pushFollowers is true


        if (_pinOptions.pushFollowers) {
          css["padding" + (vertical ? "Top" : "Left")] = _options.duration * _progress;
          css["padding" + (vertical ? "Bottom" : "Right")] = _options.duration * (1 - _progress);
        }

        _util.css(_pinOptions.spacer, css);
      }
    };
    /**
     * Updates the Pin state (in certain scenarios)
     * If the controller container is not the document and we are mid-pin-phase scrolling or resizing the main document can result to wrong pin positions.
     * So this function is called on resize and scroll of the document.
     * @private
     */


    var updatePinInContainer = function updatePinInContainer() {
      if (_controller && _pin && _state === SCENE_STATE_DURING && !_controller.info("isDocument")) {
        updatePinState();
      }
    };
    /**
     * Updates the Pin spacer size state (in certain scenarios)
     * If container is resized during pin and relatively sized the size of the pin might need to be updated...
     * So this function is called on resize of the container.
     * @private
     */


    var updateRelativePinSpacer = function updateRelativePinSpacer() {
      if (_controller && _pin && // well, duh
      _state === SCENE_STATE_DURING && ( // element in pinned state?
      // is width or height relatively sized, but not in relation to body? then we need to recalc.
      (_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) && _util.get.width(window) != _util.get.width(_pinOptions.spacer.parentNode) || _pinOptions.relSize.height && _util.get.height(window) != _util.get.height(_pinOptions.spacer.parentNode))) {
        updatePinDimensions();
      }
    };
    /**
     * Is called, when the mousewhel is used while over a pinned element inside a div container.
     * If the scene is in fixed state scroll events would be counted towards the body. This forwards the event to the scroll container.
     * @private
     */


    var onMousewheelOverPin = function onMousewheelOverPin(e) {
      if (_controller && _pin && _state === SCENE_STATE_DURING && !_controller.info("isDocument")) {
        // in pin state
        e.preventDefault();

        _controller._setScrollPos(_controller.info("scrollPos") - ((e.wheelDelta || e[_controller.info("vertical") ? "wheelDeltaY" : "wheelDeltaX"]) / 3 || -e.detail * 30));
      }
    };
    /**
     * Pin an element for the duration of the scene.
     * If the scene duration is 0 the element will only be unpinned, if the user scrolls back past the start position.  
     * Make sure only one pin is applied to an element at the same time.
     * An element can be pinned multiple times, but only successively.
     * _**NOTE:** The option `pushFollowers` has no effect, when the scene duration is 0._
     * @method ScrollMagic.Scene#setPin
     * @example
     * // pin element and push all following elements down by the amount of the pin duration.
     * scene.setPin("#pin");
     *
     * // pin element and keeping all following elements in their place. The pinned element will move past them.
     * scene.setPin("#pin", {pushFollowers: false});
     *
     * @param {(string|object)} element - A Selector targeting an element or a DOM object that is supposed to be pinned.
     * @param {object} [settings] - settings for the pin
     * @param {boolean} [settings.pushFollowers=true] - If `true` following elements will be "pushed" down for the duration of the pin, if `false` the pinned element will just scroll past them.  
     												   Ignored, when duration is `0`.
     * @param {string} [settings.spacerClass="scrollmagic-pin-spacer"] - Classname of the pin spacer element, which is used to replace the element.
     *
     * @returns {Scene} Parent object for chaining.
     */


    this.setPin = function (element, settings) {
      var defaultSettings = {
        pushFollowers: true,
        spacerClass: "scrollmagic-pin-spacer"
      };
      var pushFollowersActivelySet = settings && settings.hasOwnProperty('pushFollowers');
      settings = _util.extend({}, defaultSettings, settings); // validate Element

      element = _util.get.elements(element)[0];

      if (!element) {
        log(1, "ERROR calling method 'setPin()': Invalid pin element supplied.");
        return Scene; // cancel
      } else if (_util.css(element, "position") === "fixed") {
        log(1, "ERROR calling method 'setPin()': Pin does not work with elements that are positioned 'fixed'.");
        return Scene; // cancel
      }

      if (_pin) {
        // preexisting pin?
        if (_pin === element) {
          // same pin we already have -> do nothing
          return Scene; // cancel
        } else {
          // kill old pin
          Scene.removePin();
        }
      }

      _pin = element;
      var parentDisplay = _pin.parentNode.style.display,
          boundsParams = ["top", "left", "bottom", "right", "margin", "marginLeft", "marginRight", "marginTop", "marginBottom"];
      _pin.parentNode.style.display = 'none'; // hack start to force css to return stylesheet values instead of calculated px values.

      var inFlow = _util.css(_pin, "position") != "absolute",
          pinCSS = _util.css(_pin, boundsParams.concat(["display"])),
          sizeCSS = _util.css(_pin, ["width", "height"]);

      _pin.parentNode.style.display = parentDisplay; // hack end.

      if (!inFlow && settings.pushFollowers) {
        log(2, "WARNING: If the pinned element is positioned absolutely pushFollowers will be disabled.");
        settings.pushFollowers = false;
      }

      window.setTimeout(function () {
        // wait until all finished, because with responsive duration it will only be set after scene is added to controller
        if (_pin && _options.duration === 0 && pushFollowersActivelySet && settings.pushFollowers) {
          log(2, "WARNING: pushFollowers =", true, "has no effect, when scene duration is 0.");
        }
      }, 0); // create spacer and insert

      var spacer = _pin.parentNode.insertBefore(document.createElement('div'), _pin),
          spacerCSS = _util.extend(pinCSS, {
        position: inFlow ? "relative" : "absolute",
        boxSizing: "content-box",
        mozBoxSizing: "content-box",
        webkitBoxSizing: "content-box"
      });

      if (!inFlow) {
        // copy size if positioned absolutely, to work for bottom/right positioned elements.
        _util.extend(spacerCSS, _util.css(_pin, ["width", "height"]));
      }

      _util.css(spacer, spacerCSS);

      spacer.setAttribute(PIN_SPACER_ATTRIBUTE, "");

      _util.addClass(spacer, settings.spacerClass); // set the pin Options


      _pinOptions = {
        spacer: spacer,
        relSize: {
          // save if size is defined using % values. if so, handle spacer resize differently...
          width: sizeCSS.width.slice(-1) === "%",
          height: sizeCSS.height.slice(-1) === "%",
          autoFullWidth: sizeCSS.width === "auto" && inFlow && _util.isMarginCollapseType(pinCSS.display)
        },
        pushFollowers: settings.pushFollowers,
        inFlow: inFlow // stores if the element takes up space in the document flow

      };

      if (!_pin.___origStyle) {
        _pin.___origStyle = {};
        var pinInlineCSS = _pin.style,
            copyStyles = boundsParams.concat(["width", "height", "position", "boxSizing", "mozBoxSizing", "webkitBoxSizing"]);
        copyStyles.forEach(function (val) {
          _pin.___origStyle[val] = pinInlineCSS[val] || "";
        });
      } // if relative size, transfer it to spacer and make pin calculate it...


      if (_pinOptions.relSize.width) {
        _util.css(spacer, {
          width: sizeCSS.width
        });
      }

      if (_pinOptions.relSize.height) {
        _util.css(spacer, {
          height: sizeCSS.height
        });
      } // now place the pin element inside the spacer	


      spacer.appendChild(_pin); // and set new css

      _util.css(_pin, {
        position: inFlow ? "relative" : "absolute",
        margin: "auto",
        top: "auto",
        left: "auto",
        bottom: "auto",
        right: "auto"
      });

      if (_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) {
        _util.css(_pin, {
          boxSizing: "border-box",
          mozBoxSizing: "border-box",
          webkitBoxSizing: "border-box"
        });
      } // add listener to document to update pin position in case controller is not the document.


      window.addEventListener('scroll', updatePinInContainer);
      window.addEventListener('resize', updatePinInContainer);
      window.addEventListener('resize', updateRelativePinSpacer); // add mousewheel listener to catch scrolls over fixed elements

      _pin.addEventListener("mousewheel", onMousewheelOverPin);

      _pin.addEventListener("DOMMouseScroll", onMousewheelOverPin);

      log(3, "added pin"); // finally update the pin to init

      updatePinState();
      return Scene;
    };
    /**
     * Remove the pin from the scene.
     * @method ScrollMagic.Scene#removePin
     * @example
     * // remove the pin from the scene without resetting it (the spacer is not removed)
     * scene.removePin();
     *
     * // remove the pin from the scene and reset the pin element to its initial position (spacer is removed)
     * scene.removePin(true);
     *
     * @param {boolean} [reset=false] - If `false` the spacer will not be removed and the element's position will not be reset.
     * @returns {Scene} Parent object for chaining.
     */


    this.removePin = function (reset) {
      if (_pin) {
        if (_state === SCENE_STATE_DURING) {
          updatePinState(true); // force unpin at position
        }

        if (reset || !_controller) {
          // if there's no controller no progress was made anyway...
          var pinTarget = _pinOptions.spacer.firstChild; // usually the pin element, but may be another spacer (cascaded pins)...

          if (pinTarget.hasAttribute(PIN_SPACER_ATTRIBUTE)) {
            // copy margins to child spacer
            var style = _pinOptions.spacer.style,
                values = ["margin", "marginLeft", "marginRight", "marginTop", "marginBottom"],
                margins = {};
            values.forEach(function (val) {
              margins[val] = style[val] || "";
            });

            _util.css(pinTarget, margins);
          }

          _pinOptions.spacer.parentNode.insertBefore(pinTarget, _pinOptions.spacer);

          _pinOptions.spacer.parentNode.removeChild(_pinOptions.spacer);

          if (!_pin.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) {
            // if it's the last pin for this element -> restore inline styles
            // TODO: only correctly set for first pin (when cascading) - how to fix?
            _util.css(_pin, _pin.___origStyle);

            delete _pin.___origStyle;
          }
        }

        window.removeEventListener('scroll', updatePinInContainer);
        window.removeEventListener('resize', updatePinInContainer);
        window.removeEventListener('resize', updateRelativePinSpacer);

        _pin.removeEventListener("mousewheel", onMousewheelOverPin);

        _pin.removeEventListener("DOMMouseScroll", onMousewheelOverPin);

        _pin = undefined;
        log(3, "removed pin (reset: " + (reset ? "true" : "false") + ")");
      }

      return Scene;
    };

    var _cssClasses,
        _cssClassElems = [];

    Scene.on("destroy.internal", function (e) {
      Scene.removeClassToggle(e.reset);
    });
    /**
     * Define a css class modification while the scene is active.  
     * When the scene triggers the classes will be added to the supplied element and removed, when the scene is over.
     * If the scene duration is 0 the classes will only be removed if the user scrolls back past the start position.
     * @method ScrollMagic.Scene#setClassToggle
     * @example
     * // add the class 'myclass' to the element with the id 'my-elem' for the duration of the scene
     * scene.setClassToggle("#my-elem", "myclass");
     *
     * // add multiple classes to multiple elements defined by the selector '.classChange'
     * scene.setClassToggle(".classChange", "class1 class2 class3");
     *
     * @param {(string|object)} element - A Selector targeting one or more elements or a DOM object that is supposed to be modified.
     * @param {string} classes - One or more Classnames (separated by space) that should be added to the element during the scene.
     *
     * @returns {Scene} Parent object for chaining.
     */

    this.setClassToggle = function (element, classes) {
      var elems = _util.get.elements(element);

      if (elems.length === 0 || !_util.type.String(classes)) {
        log(1, "ERROR calling method 'setClassToggle()': Invalid " + (elems.length === 0 ? "element" : "classes") + " supplied.");
        return Scene;
      }

      if (_cssClassElems.length > 0) {
        // remove old ones
        Scene.removeClassToggle();
      }

      _cssClasses = classes;
      _cssClassElems = elems;
      Scene.on("enter.internal_class leave.internal_class", function (e) {
        var toggle = e.type === "enter" ? _util.addClass : _util.removeClass;

        _cssClassElems.forEach(function (elem, key) {
          toggle(elem, _cssClasses);
        });
      });
      return Scene;
    };
    /**
     * Remove the class binding from the scene.
     * @method ScrollMagic.Scene#removeClassToggle
     * @example
     * // remove class binding from the scene without reset
     * scene.removeClassToggle();
     *
     * // remove class binding and remove the changes it caused
     * scene.removeClassToggle(true);
     *
     * @param {boolean} [reset=false] - If `false` and the classes are currently active, they will remain on the element. If `true` they will be removed.
     * @returns {Scene} Parent object for chaining.
     */


    this.removeClassToggle = function (reset) {
      if (reset) {
        _cssClassElems.forEach(function (elem, key) {
          _util.removeClass(elem, _cssClasses);
        });
      }

      Scene.off("start.internal_class end.internal_class");
      _cssClasses = undefined;
      _cssClassElems = [];
      return Scene;
    }; // INIT


    construct();
    return Scene;
  }; // store pagewide scene options


  var SCENE_OPTIONS = {
    defaults: {
      duration: 0,
      offset: 0,
      triggerElement: undefined,
      triggerHook: 0.5,
      reverse: true,
      loglevel: 2
    },
    validate: {
      offset: function offset(val) {
        val = parseFloat(val);

        if (!_util.type.Number(val)) {
          throw ["Invalid value for option \"offset\":", val];
        }

        return val;
      },
      triggerElement: function triggerElement(val) {
        val = val || undefined;

        if (val) {
          var elem = _util.get.elements(val)[0];

          if (elem && elem.parentNode) {
            val = elem;
          } else {
            throw ["Element defined in option \"triggerElement\" was not found:", val];
          }
        }

        return val;
      },
      triggerHook: function triggerHook(val) {
        var translate = {
          "onCenter": 0.5,
          "onEnter": 1,
          "onLeave": 0
        };

        if (_util.type.Number(val)) {
          val = Math.max(0, Math.min(parseFloat(val), 1)); //  make sure its betweeen 0 and 1
        } else if (val in translate) {
          val = translate[val];
        } else {
          throw ["Invalid value for option \"triggerHook\": ", val];
        }

        return val;
      },
      reverse: function reverse(val) {
        return !!val; // force boolean
      },
      loglevel: function loglevel(val) {
        val = parseInt(val);

        if (!_util.type.Number(val) || val < 0 || val > 3) {
          throw ["Invalid value for option \"loglevel\":", val];
        }

        return val;
      }
    },
    // holder for  validation methods. duration validation is handled in 'getters-setters.js'
    shifts: ["duration", "offset", "triggerHook"] // list of options that trigger a `shift` event

  };
  /*
   * method used to add an option to ScrollMagic Scenes.
   * TODO: DOC (private for dev)
   */

  ScrollMagic.Scene.addOption = function (name, defaultValue, validationCallback, shifts) {
    if (!(name in SCENE_OPTIONS.defaults)) {
      SCENE_OPTIONS.defaults[name] = defaultValue;
      SCENE_OPTIONS.validate[name] = validationCallback;

      if (shifts) {
        SCENE_OPTIONS.shifts.push(name);
      }
    } else {
      ScrollMagic._util.log(1, "[static] ScrollMagic.Scene -> Cannot add Scene option '" + name + "', because it already exists.");
    }
  }; // instance extension function for plugins
  // TODO: DOC (private for dev)


  ScrollMagic.Scene.extend = function (extension) {
    var oldClass = this;

    ScrollMagic.Scene = function () {
      oldClass.apply(this, arguments);
      this.$super = _util.extend({}, this); // copy parent state

      return extension.apply(this, arguments) || this;
    };

    _util.extend(ScrollMagic.Scene, oldClass); // copy properties


    ScrollMagic.Scene.prototype = oldClass.prototype; // copy prototype

    ScrollMagic.Scene.prototype.constructor = ScrollMagic.Scene; // restore constructor
  };
  /**
   * TODO: DOCS (private for dev)
   * @class
   * @private
   */


  ScrollMagic.Event = function (type, namespace, target, vars) {
    vars = vars || {};

    for (var key in vars) {
      this[key] = vars[key];
    }

    this.type = type;
    this.target = this.currentTarget = target;
    this.namespace = namespace || '';
    this.timeStamp = this.timestamp = Date.now();
    return this;
  };
  /*
   * TODO: DOCS (private for dev)
   */


  var _util = ScrollMagic._util = function (window) {
    var U = {},
        i;
    /**
     * ------------------------------
     * internal helpers
     * ------------------------------
     */
    // parse float and fall back to 0.

    var floatval = function floatval(number) {
      return parseFloat(number) || 0;
    }; // get current style IE safe (otherwise IE would return calculated values for 'auto')


    var _getComputedStyle = function _getComputedStyle(elem) {
      return elem.currentStyle ? elem.currentStyle : window.getComputedStyle(elem);
    }; // get element dimension (width or height)


    var _dimension = function _dimension(which, elem, outer, includeMargin) {
      elem = elem === document ? window : elem;

      if (elem === window) {
        includeMargin = false;
      } else if (!_type.DomElement(elem)) {
        return 0;
      }

      which = which.charAt(0).toUpperCase() + which.substr(1).toLowerCase();
      var dimension = (outer ? elem['offset' + which] || elem['outer' + which] : elem['client' + which] || elem['inner' + which]) || 0;

      if (outer && includeMargin) {
        var style = _getComputedStyle(elem);

        dimension += which === 'Height' ? floatval(style.marginTop) + floatval(style.marginBottom) : floatval(style.marginLeft) + floatval(style.marginRight);
      }

      return dimension;
    }; // converts 'margin-top' into 'marginTop'


    var _camelCase = function _camelCase(str) {
      return str.replace(/^[^a-z]+([a-z])/g, '$1').replace(/-([a-z])/g, function (g) {
        return g[1].toUpperCase();
      });
    };
    /**
     * ------------------------------
     * external helpers
     * ------------------------------
     */
    // extend obj – same as jQuery.extend({}, objA, objB)


    U.extend = function (obj) {
      obj = obj || {};

      for (i = 1; i < arguments.length; i++) {
        if (!arguments[i]) {
          continue;
        }

        for (var key in arguments[i]) {
          if (arguments[i].hasOwnProperty(key)) {
            obj[key] = arguments[i][key];
          }
        }
      }

      return obj;
    }; // check if a css display type results in margin-collapse or not


    U.isMarginCollapseType = function (str) {
      return ["block", "flex", "list-item", "table", "-webkit-box"].indexOf(str) > -1;
    }; // implementation of requestAnimationFrame
    // based on https://gist.github.com/paulirish/1579671


    var lastTime = 0,
        vendors = ['ms', 'moz', 'webkit', 'o'];
    var _requestAnimationFrame = window.requestAnimationFrame;
    var _cancelAnimationFrame = window.cancelAnimationFrame; // try vendor prefixes if the above doesn't work

    for (i = 0; !_requestAnimationFrame && i < vendors.length; ++i) {
      _requestAnimationFrame = window[vendors[i] + 'RequestAnimationFrame'];
      _cancelAnimationFrame = window[vendors[i] + 'CancelAnimationFrame'] || window[vendors[i] + 'CancelRequestAnimationFrame'];
    } // fallbacks


    if (!_requestAnimationFrame) {
      _requestAnimationFrame = function _requestAnimationFrame(callback) {
        var currTime = new Date().getTime(),
            timeToCall = Math.max(0, 16 - (currTime - lastTime)),
            id = window.setTimeout(function () {
          callback(currTime + timeToCall);
        }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
      };
    }

    if (!_cancelAnimationFrame) {
      _cancelAnimationFrame = function _cancelAnimationFrame(id) {
        window.clearTimeout(id);
      };
    }

    U.rAF = _requestAnimationFrame.bind(window);
    U.cAF = _cancelAnimationFrame.bind(window);
    var loglevels = ["error", "warn", "log"],
        console = window.console || {};

    console.log = console.log || function () {}; // no console log, well - do nothing then...
    // make sure methods for all levels exist.


    for (i = 0; i < loglevels.length; i++) {
      var method = loglevels[i];

      if (!console[method]) {
        console[method] = console.log; // prefer .log over nothing
      }
    }

    U.log = function (loglevel) {
      if (loglevel > loglevels.length || loglevel <= 0) loglevel = loglevels.length;
      var now = new Date(),
          time = ("0" + now.getHours()).slice(-2) + ":" + ("0" + now.getMinutes()).slice(-2) + ":" + ("0" + now.getSeconds()).slice(-2) + ":" + ("00" + now.getMilliseconds()).slice(-3),
          method = loglevels[loglevel - 1],
          args = Array.prototype.splice.call(arguments, 1),
          func = Function.prototype.bind.call(console[method], console);
      args.unshift(time);
      func.apply(console, args);
    };
    /**
     * ------------------------------
     * type testing
     * ------------------------------
     */


    var _type = U.type = function (v) {
      return Object.prototype.toString.call(v).replace(/^\[object (.+)\]$/, "$1").toLowerCase();
    };

    _type.String = function (v) {
      return _type(v) === 'string';
    };

    _type.Function = function (v) {
      return _type(v) === 'function';
    };

    _type.Array = function (v) {
      return Array.isArray(v);
    };

    _type.Number = function (v) {
      return !_type.Array(v) && v - parseFloat(v) + 1 >= 0;
    };

    _type.DomElement = function (o) {
      return (typeof HTMLElement === "undefined" ? "undefined" : _typeof(HTMLElement)) === "object" || typeof HTMLElement === "function" ? o instanceof HTMLElement || o instanceof SVGElement : //DOM2
      o && _typeof(o) === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string";
    };
    /**
     * ------------------------------
     * DOM Element info
     * ------------------------------
     */
    // always returns a list of matching DOM elements, from a selector, a DOM element or an list of elements or even an array of selectors


    var _get = U.get = {};

    _get.elements = function (selector) {
      var arr = [];

      if (_type.String(selector)) {
        try {
          selector = document.querySelectorAll(selector);
        } catch (e) {
          // invalid selector
          return arr;
        }
      }

      if (_type(selector) === 'nodelist' || _type.Array(selector) || selector instanceof NodeList) {
        for (var i = 0, ref = arr.length = selector.length; i < ref; i++) {
          // list of elements
          var elem = selector[i];
          arr[i] = _type.DomElement(elem) ? elem : _get.elements(elem); // if not an element, try to resolve recursively
        }
      } else if (_type.DomElement(selector) || selector === document || selector === window) {
        arr = [selector]; // only the element
      }

      return arr;
    }; // get scroll top value


    _get.scrollTop = function (elem) {
      return elem && typeof elem.scrollTop === 'number' ? elem.scrollTop : window.pageYOffset || 0;
    }; // get scroll left value


    _get.scrollLeft = function (elem) {
      return elem && typeof elem.scrollLeft === 'number' ? elem.scrollLeft : window.pageXOffset || 0;
    }; // get element height


    _get.width = function (elem, outer, includeMargin) {
      return _dimension('width', elem, outer, includeMargin);
    }; // get element width


    _get.height = function (elem, outer, includeMargin) {
      return _dimension('height', elem, outer, includeMargin);
    }; // get element position (optionally relative to viewport)


    _get.offset = function (elem, relativeToViewport) {
      var offset = {
        top: 0,
        left: 0
      };

      if (elem && elem.getBoundingClientRect) {
        // check if available
        var rect = elem.getBoundingClientRect();
        offset.top = rect.top;
        offset.left = rect.left;

        if (!relativeToViewport) {
          // clientRect is by default relative to viewport...
          offset.top += _get.scrollTop();
          offset.left += _get.scrollLeft();
        }
      }

      return offset;
    };
    /**
     * ------------------------------
     * DOM Element manipulation
     * ------------------------------
     */


    U.addClass = function (elem, classname) {
      if (classname) {
        if (elem.classList) elem.classList.add(classname);else elem.className += ' ' + classname;
      }
    };

    U.removeClass = function (elem, classname) {
      if (classname) {
        if (elem.classList) elem.classList.remove(classname);else elem.className = elem.className.replace(new RegExp('(^|\\b)' + classname.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
      }
    }; // if options is string -> returns css value
    // if options is array -> returns object with css value pairs
    // if options is object -> set new css values


    U.css = function (elem, options) {
      if (_type.String(options)) {
        return _getComputedStyle(elem)[_camelCase(options)];
      } else if (_type.Array(options)) {
        var obj = {},
            style = _getComputedStyle(elem);

        options.forEach(function (option, key) {
          obj[option] = style[_camelCase(option)];
        });
        return obj;
      } else {
        for (var option in options) {
          var val = options[option];

          if (val == parseFloat(val)) {
            // assume pixel for seemingly numerical values
            val += 'px';
          }

          elem.style[_camelCase(option)] = val;
        }
      }
    };

    return U;
  }(window || {});

  ScrollMagic.Scene.prototype.addIndicators = function () {
    ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling addIndicators() due to missing Plugin \'debug.addIndicators\'. Please make sure to include plugins/debug.addIndicators.js');

    return this;
  };

  ScrollMagic.Scene.prototype.removeIndicators = function () {
    ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling removeIndicators() due to missing Plugin \'debug.addIndicators\'. Please make sure to include plugins/debug.addIndicators.js');

    return this;
  };

  ScrollMagic.Scene.prototype.setTween = function () {
    ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling setTween() due to missing Plugin \'animation.gsap\'. Please make sure to include plugins/animation.gsap.js');

    return this;
  };

  ScrollMagic.Scene.prototype.removeTween = function () {
    ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling removeTween() due to missing Plugin \'animation.gsap\'. Please make sure to include plugins/animation.gsap.js');

    return this;
  };

  ScrollMagic.Scene.prototype.setVelocity = function () {
    ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling setVelocity() due to missing Plugin \'animation.velocity\'. Please make sure to include plugins/animation.velocity.js');

    return this;
  };

  ScrollMagic.Scene.prototype.removeVelocity = function () {
    ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling removeVelocity() due to missing Plugin \'animation.velocity\'. Please make sure to include plugins/animation.velocity.js');

    return this;
  };

  return ScrollMagic;
});

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
  "use strict";

  if (global.setImmediate) {
    return;
  }

  var nextHandle = 1; // Spec says greater than zero

  var tasksByHandle = {};
  var currentlyRunningATask = false;
  var doc = global.document;
  var registerImmediate;

  function setImmediate(callback) {
    // Callback can either be a function or a string
    if (typeof callback !== "function") {
      callback = new Function("" + callback);
    } // Copy function arguments


    var args = new Array(arguments.length - 1);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i + 1];
    } // Store and register the task


    var task = {
      callback: callback,
      args: args
    };
    tasksByHandle[nextHandle] = task;
    registerImmediate(nextHandle);
    return nextHandle++;
  }

  function clearImmediate(handle) {
    delete tasksByHandle[handle];
  }

  function run(task) {
    var callback = task.callback;
    var args = task.args;

    switch (args.length) {
      case 0:
        callback();
        break;

      case 1:
        callback(args[0]);
        break;

      case 2:
        callback(args[0], args[1]);
        break;

      case 3:
        callback(args[0], args[1], args[2]);
        break;

      default:
        callback.apply(undefined, args);
        break;
    }
  }

  function runIfPresent(handle) {
    // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
    // So if we're currently running a task, we'll need to delay this invocation.
    if (currentlyRunningATask) {
      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
      // "too much recursion" error.
      setTimeout(runIfPresent, 0, handle);
    } else {
      var task = tasksByHandle[handle];

      if (task) {
        currentlyRunningATask = true;

        try {
          run(task);
        } finally {
          clearImmediate(handle);
          currentlyRunningATask = false;
        }
      }
    }
  }

  function installNextTickImplementation() {
    registerImmediate = function registerImmediate(handle) {
      process.nextTick(function () {
        runIfPresent(handle);
      });
    };
  }

  function canUsePostMessage() {
    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
    // where `global.postMessage` means something completely different and can't be used for this purpose.
    if (global.postMessage && !global.importScripts) {
      var postMessageIsAsynchronous = true;
      var oldOnMessage = global.onmessage;

      global.onmessage = function () {
        postMessageIsAsynchronous = false;
      };

      global.postMessage("", "*");
      global.onmessage = oldOnMessage;
      return postMessageIsAsynchronous;
    }
  }

  function installPostMessageImplementation() {
    // Installs an event handler on `global` for the `message` event: see
    // * https://developer.mozilla.org/en/DOM/window.postMessage
    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
    var messagePrefix = "setImmediate$" + Math.random() + "$";

    var onGlobalMessage = function onGlobalMessage(event) {
      if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
        runIfPresent(+event.data.slice(messagePrefix.length));
      }
    };

    if (global.addEventListener) {
      global.addEventListener("message", onGlobalMessage, false);
    } else {
      global.attachEvent("onmessage", onGlobalMessage);
    }

    registerImmediate = function registerImmediate(handle) {
      global.postMessage(messagePrefix + handle, "*");
    };
  }

  function installMessageChannelImplementation() {
    var channel = new MessageChannel();

    channel.port1.onmessage = function (event) {
      var handle = event.data;
      runIfPresent(handle);
    };

    registerImmediate = function registerImmediate(handle) {
      channel.port2.postMessage(handle);
    };
  }

  function installReadyStateChangeImplementation() {
    var html = doc.documentElement;

    registerImmediate = function registerImmediate(handle) {
      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var script = doc.createElement("script");

      script.onreadystatechange = function () {
        runIfPresent(handle);
        script.onreadystatechange = null;
        html.removeChild(script);
        script = null;
      };

      html.appendChild(script);
    };
  }

  function installSetTimeoutImplementation() {
    registerImmediate = function registerImmediate(handle) {
      setTimeout(runIfPresent, 0, handle);
    };
  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.


  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.

  if ({}.toString.call(global.process) === "[object process]") {
    // For Node.js before 0.9
    installNextTickImplementation();
  } else if (canUsePostMessage()) {
    // For non-IE10 modern browsers
    installPostMessageImplementation();
  } else if (global.MessageChannel) {
    // For web workers, where supported
    installMessageChannelImplementation();
  } else if (doc && "onreadystatechange" in doc.createElement("script")) {
    // For IE 6–8
    installReadyStateChangeImplementation();
  } else {
    // For older browsers
    installSetTimeoutImplementation();
  }

  attachTo.setImmediate = setImmediate;
  attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/ssr-window/dist/ssr-window.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/ssr-window/dist/ssr-window.esm.js ***!
  \********************************************************/
/*! exports provided: window, document */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "window", function() { return win; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "document", function() { return doc; });
/**
 * SSR Window 1.0.1
 * Better handling for window object in SSR environment
 * https://github.com/nolimits4web/ssr-window
 *
 * Copyright 2018, Vladimir Kharlampidi
 *
 * Licensed under MIT
 *
 * Released on: July 18, 2018
 */
var doc = typeof document === 'undefined' ? {
  body: {},
  addEventListener: function addEventListener() {},
  removeEventListener: function removeEventListener() {},
  activeElement: {
    blur: function blur() {},
    nodeName: ''
  },
  querySelector: function querySelector() {
    return null;
  },
  querySelectorAll: function querySelectorAll() {
    return [];
  },
  getElementById: function getElementById() {
    return null;
  },
  createEvent: function createEvent() {
    return {
      initEvent: function initEvent() {}
    };
  },
  createElement: function createElement() {
    return {
      children: [],
      childNodes: [],
      style: {},
      setAttribute: function setAttribute() {},
      getElementsByTagName: function getElementsByTagName() {
        return [];
      }
    };
  },
  location: {
    hash: ''
  }
} : document; // eslint-disable-line

var win = typeof window === 'undefined' ? {
  document: doc,
  navigator: {
    userAgent: ''
  },
  location: {},
  history: {},
  CustomEvent: function CustomEvent() {
    return this;
  },
  addEventListener: function addEventListener() {},
  removeEventListener: function removeEventListener() {},
  getComputedStyle: function getComputedStyle() {
    return {
      getPropertyValue: function getPropertyValue() {
        return '';
      }
    };
  },
  Image: function Image() {},
  Date: function Date() {},
  screen: {},
  setTimeout: function setTimeout() {},
  clearTimeout: function clearTimeout() {}
} : window; // eslint-disable-line



/***/ }),

/***/ "./node_modules/swiper/dist/css/swiper.min.css":
/*!*****************************************************!*\
  !*** ./node_modules/swiper/dist/css/swiper.min.css ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./node_modules/swiper/dist/js/swiper.esm.bundle.js":
/*!**********************************************************!*\
  !*** ./node_modules/swiper/dist/js/swiper.esm.bundle.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dom7/dist/dom7.modular */ "./node_modules/dom7/dist/dom7.modular.js");
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/dist/ssr-window.esm.js");
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Swiper 4.5.0
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * http://www.idangero.us/swiper/
 *
 * Copyright 2014-2019 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: February 22, 2019
 */


var Methods = {
  addClass: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["addClass"],
  removeClass: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["removeClass"],
  hasClass: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["hasClass"],
  toggleClass: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["toggleClass"],
  attr: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["attr"],
  removeAttr: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["removeAttr"],
  data: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["data"],
  transform: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["transform"],
  transition: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["transition"],
  on: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["on"],
  off: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["off"],
  trigger: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["trigger"],
  transitionEnd: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["transitionEnd"],
  outerWidth: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["outerWidth"],
  outerHeight: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["outerHeight"],
  offset: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["offset"],
  css: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["css"],
  each: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["each"],
  html: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["html"],
  text: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["text"],
  is: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["is"],
  index: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["index"],
  eq: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["eq"],
  append: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["append"],
  prepend: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["prepend"],
  next: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["next"],
  nextAll: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["nextAll"],
  prev: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["prev"],
  prevAll: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["prevAll"],
  parent: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["parent"],
  parents: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["parents"],
  closest: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["closest"],
  find: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["find"],
  children: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["children"],
  remove: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["remove"],
  add: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["add"],
  styles: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["styles"]
};
Object.keys(Methods).forEach(function (methodName) {
  dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"].fn[methodName] = Methods[methodName];
});
var Utils = {
  deleteProps: function deleteProps(obj) {
    var object = obj;
    Object.keys(object).forEach(function (key) {
      try {
        object[key] = null;
      } catch (e) {// no getter for object
      }

      try {
        delete object[key];
      } catch (e) {// something got wrong
      }
    });
  },
  nextTick: function nextTick(callback) {
    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return setTimeout(callback, delay);
  },
  now: function now() {
    return Date.now();
  },
  getTranslate: function getTranslate(el) {
    var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';
    var matrix;
    var curTransform;
    var transformMatrix;
    var curStyle = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].getComputedStyle(el, null);

    if (ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].WebKitCSSMatrix) {
      curTransform = curStyle.transform || curStyle.webkitTransform;

      if (curTransform.split(',').length > 6) {
        curTransform = curTransform.split(', ').map(function (a) {
          return a.replace(',', '.');
        }).join(', ');
      } // Some old versions of Webkit choke when 'none' is passed; pass
      // empty string instead in this case


      transformMatrix = new ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);
    } else {
      transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
      matrix = transformMatrix.toString().split(',');
    }

    if (axis === 'x') {
      // Latest Chrome and webkits Fix
      if (ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].WebKitCSSMatrix) curTransform = transformMatrix.m41; // Crazy IE10 Matrix
      else if (matrix.length === 16) curTransform = parseFloat(matrix[12]); // Normal Browsers
        else curTransform = parseFloat(matrix[4]);
    }

    if (axis === 'y') {
      // Latest Chrome and webkits Fix
      if (ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].WebKitCSSMatrix) curTransform = transformMatrix.m42; // Crazy IE10 Matrix
      else if (matrix.length === 16) curTransform = parseFloat(matrix[13]); // Normal Browsers
        else curTransform = parseFloat(matrix[5]);
    }

    return curTransform || 0;
  },
  parseUrlQuery: function parseUrlQuery(url) {
    var query = {};
    var urlToParse = url || ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].location.href;
    var i;
    var params;
    var param;
    var length;

    if (typeof urlToParse === 'string' && urlToParse.length) {
      urlToParse = urlToParse.indexOf('?') > -1 ? urlToParse.replace(/\S*\?/, '') : '';
      params = urlToParse.split('&').filter(function (paramsPart) {
        return paramsPart !== '';
      });
      length = params.length;

      for (i = 0; i < length; i += 1) {
        param = params[i].replace(/#\S+/g, '').split('=');
        query[decodeURIComponent(param[0])] = typeof param[1] === 'undefined' ? undefined : decodeURIComponent(param[1]) || '';
      }
    }

    return query;
  },
  isObject: function isObject(o) {
    return _typeof(o) === 'object' && o !== null && o.constructor && o.constructor === Object;
  },
  extend: function extend() {
    var to = Object(arguments.length <= 0 ? undefined : arguments[0]);

    for (var i = 1; i < arguments.length; i += 1) {
      var nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];

      if (nextSource !== undefined && nextSource !== null) {
        var keysArray = Object.keys(Object(nextSource));

        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
          var nextKey = keysArray[nextIndex];
          var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);

          if (desc !== undefined && desc.enumerable) {
            if (Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {
              Utils.extend(to[nextKey], nextSource[nextKey]);
            } else if (!Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {
              to[nextKey] = {};
              Utils.extend(to[nextKey], nextSource[nextKey]);
            } else {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }
    }

    return to;
  }
};

var Support = function Support() {
  var testDiv = ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].createElement('div');
  return {
    touch: ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].Modernizr && ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].Modernizr.touch === true || function checkTouch() {
      return !!(ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.maxTouchPoints > 0 || 'ontouchstart' in ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"] || ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].DocumentTouch && ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"] instanceof ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].DocumentTouch);
    }(),
    pointerEvents: !!(ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.pointerEnabled || ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].PointerEvent || 'maxTouchPoints' in ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator && ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.maxTouchPoints > 0),
    prefixedPointerEvents: !!ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.msPointerEnabled,
    transition: function checkTransition() {
      var style = testDiv.style;
      return 'transition' in style || 'webkitTransition' in style || 'MozTransition' in style;
    }(),
    transforms3d: ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].Modernizr && ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].Modernizr.csstransforms3d === true || function checkTransforms3d() {
      var style = testDiv.style;
      return 'webkitPerspective' in style || 'MozPerspective' in style || 'OPerspective' in style || 'MsPerspective' in style || 'perspective' in style;
    }(),
    flexbox: function checkFlexbox() {
      var style = testDiv.style;
      var styles = 'alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient'.split(' ');

      for (var i = 0; i < styles.length; i += 1) {
        if (styles[i] in style) return true;
      }

      return false;
    }(),
    observer: function checkObserver() {
      return 'MutationObserver' in ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"] || 'WebkitMutationObserver' in ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"];
    }(),
    passiveListener: function checkPassiveListener() {
      var supportsPassive = false;

      try {
        var opts = Object.defineProperty({}, 'passive', {
          // eslint-disable-next-line
          get: function get() {
            supportsPassive = true;
          }
        });
        ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].addEventListener('testPassiveListener', null, opts);
      } catch (e) {// No support
      }

      return supportsPassive;
    }(),
    gestures: function checkGestures() {
      return 'ongesturestart' in ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"];
    }()
  };
}();

var Browser = function Browser() {
  function isSafari() {
    var ua = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.userAgent.toLowerCase();
    return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;
  }

  return {
    isIE: !!ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.userAgent.match(/Trident/g) || !!ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.userAgent.match(/MSIE/g),
    isEdge: !!ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.userAgent.match(/Edge/g),
    isSafari: isSafari(),
    isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.userAgent)
  };
}();

var SwiperClass =
/*#__PURE__*/
function () {
  function SwiperClass() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SwiperClass);

    var self = this;
    self.params = params; // Events

    self.eventsListeners = {};

    if (self.params && self.params.on) {
      Object.keys(self.params.on).forEach(function (eventName) {
        self.on(eventName, self.params.on[eventName]);
      });
    }
  }

  _createClass(SwiperClass, [{
    key: "on",
    value: function on(events, handler, priority) {
      var self = this;
      if (typeof handler !== 'function') return self;
      var method = priority ? 'unshift' : 'push';
      events.split(' ').forEach(function (event) {
        if (!self.eventsListeners[event]) self.eventsListeners[event] = [];
        self.eventsListeners[event][method](handler);
      });
      return self;
    }
  }, {
    key: "once",
    value: function once(events, handler, priority) {
      var self = this;
      if (typeof handler !== 'function') return self;

      function onceHandler() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        handler.apply(self, args);
        self.off(events, onceHandler);

        if (onceHandler.f7proxy) {
          delete onceHandler.f7proxy;
        }
      }

      onceHandler.f7proxy = handler;
      return self.on(events, onceHandler, priority);
    }
  }, {
    key: "off",
    value: function off(events, handler) {
      var self = this;
      if (!self.eventsListeners) return self;
      events.split(' ').forEach(function (event) {
        if (typeof handler === 'undefined') {
          self.eventsListeners[event] = [];
        } else if (self.eventsListeners[event] && self.eventsListeners[event].length) {
          self.eventsListeners[event].forEach(function (eventHandler, index) {
            if (eventHandler === handler || eventHandler.f7proxy && eventHandler.f7proxy === handler) {
              self.eventsListeners[event].splice(index, 1);
            }
          });
        }
      });
      return self;
    }
  }, {
    key: "emit",
    value: function emit() {
      var self = this;
      if (!self.eventsListeners) return self;
      var events;
      var data;
      var context;

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      if (typeof args[0] === 'string' || Array.isArray(args[0])) {
        events = args[0];
        data = args.slice(1, args.length);
        context = self;
      } else {
        events = args[0].events;
        data = args[0].data;
        context = args[0].context || self;
      }

      var eventsArray = Array.isArray(events) ? events : events.split(' ');
      eventsArray.forEach(function (event) {
        if (self.eventsListeners && self.eventsListeners[event]) {
          var handlers = [];
          self.eventsListeners[event].forEach(function (eventHandler) {
            handlers.push(eventHandler);
          });
          handlers.forEach(function (eventHandler) {
            eventHandler.apply(context, data);
          });
        }
      });
      return self;
    }
  }, {
    key: "useModulesParams",
    value: function useModulesParams(instanceParams) {
      var instance = this;
      if (!instance.modules) return;
      Object.keys(instance.modules).forEach(function (moduleName) {
        var module = instance.modules[moduleName]; // Extend params

        if (module.params) {
          Utils.extend(instanceParams, module.params);
        }
      });
    }
  }, {
    key: "useModules",
    value: function useModules() {
      var modulesParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var instance = this;
      if (!instance.modules) return;
      Object.keys(instance.modules).forEach(function (moduleName) {
        var module = instance.modules[moduleName];
        var moduleParams = modulesParams[moduleName] || {}; // Extend instance methods and props

        if (module.instance) {
          Object.keys(module.instance).forEach(function (modulePropName) {
            var moduleProp = module.instance[modulePropName];

            if (typeof moduleProp === 'function') {
              instance[modulePropName] = moduleProp.bind(instance);
            } else {
              instance[modulePropName] = moduleProp;
            }
          });
        } // Add event listeners


        if (module.on && instance.on) {
          Object.keys(module.on).forEach(function (moduleEventName) {
            instance.on(moduleEventName, module.on[moduleEventName]);
          });
        } // Module create callback


        if (module.create) {
          module.create.bind(instance)(moduleParams);
        }
      });
    }
  }], [{
    key: "installModule",
    value: function installModule(module) {
      var Class = this;
      if (!Class.prototype.modules) Class.prototype.modules = {};
      var name = module.name || "".concat(Object.keys(Class.prototype.modules).length, "_").concat(Utils.now());
      Class.prototype.modules[name] = module; // Prototype

      if (module.proto) {
        Object.keys(module.proto).forEach(function (key) {
          Class.prototype[key] = module.proto[key];
        });
      } // Class


      if (module["static"]) {
        Object.keys(module["static"]).forEach(function (key) {
          Class[key] = module["static"][key];
        });
      } // Callback


      if (module.install) {
        for (var _len3 = arguments.length, params = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          params[_key3 - 1] = arguments[_key3];
        }

        module.install.apply(Class, params);
      }

      return Class;
    }
  }, {
    key: "use",
    value: function use(module) {
      var Class = this;

      if (Array.isArray(module)) {
        module.forEach(function (m) {
          return Class.installModule(m);
        });
        return Class;
      }

      for (var _len4 = arguments.length, params = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        params[_key4 - 1] = arguments[_key4];
      }

      return Class.installModule.apply(Class, [module].concat(params));
    }
  }, {
    key: "components",
    set: function set(components) {
      var Class = this;
      if (!Class.use) return;
      Class.use(components);
    }
  }]);

  return SwiperClass;
}();

function updateSize() {
  var swiper = this;
  var width;
  var height;
  var $el = swiper.$el;

  if (typeof swiper.params.width !== 'undefined') {
    width = swiper.params.width;
  } else {
    width = $el[0].clientWidth;
  }

  if (typeof swiper.params.height !== 'undefined') {
    height = swiper.params.height;
  } else {
    height = $el[0].clientHeight;
  }

  if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {
    return;
  } // Subtract paddings


  width = width - parseInt($el.css('padding-left'), 10) - parseInt($el.css('padding-right'), 10);
  height = height - parseInt($el.css('padding-top'), 10) - parseInt($el.css('padding-bottom'), 10);
  Utils.extend(swiper, {
    width: width,
    height: height,
    size: swiper.isHorizontal() ? width : height
  });
}

function updateSlides() {
  var swiper = this;
  var params = swiper.params;
  var $wrapperEl = swiper.$wrapperEl,
      swiperSize = swiper.size,
      rtl = swiper.rtlTranslate,
      wrongRTL = swiper.wrongRTL;
  var isVirtual = swiper.virtual && params.virtual.enabled;
  var previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;
  var slides = $wrapperEl.children(".".concat(swiper.params.slideClass));
  var slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
  var snapGrid = [];
  var slidesGrid = [];
  var slidesSizesGrid = [];
  var offsetBefore = params.slidesOffsetBefore;

  if (typeof offsetBefore === 'function') {
    offsetBefore = params.slidesOffsetBefore.call(swiper);
  }

  var offsetAfter = params.slidesOffsetAfter;

  if (typeof offsetAfter === 'function') {
    offsetAfter = params.slidesOffsetAfter.call(swiper);
  }

  var previousSnapGridLength = swiper.snapGrid.length;
  var previousSlidesGridLength = swiper.snapGrid.length;
  var spaceBetween = params.spaceBetween;
  var slidePosition = -offsetBefore;
  var prevSlideSize = 0;
  var index = 0;

  if (typeof swiperSize === 'undefined') {
    return;
  }

  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;
  }

  swiper.virtualSize = -spaceBetween; // reset margins

  if (rtl) slides.css({
    marginLeft: '',
    marginTop: ''
  });else slides.css({
    marginRight: '',
    marginBottom: ''
  });
  var slidesNumberEvenToRows;

  if (params.slidesPerColumn > 1) {
    if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) {
      slidesNumberEvenToRows = slidesLength;
    } else {
      slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;
    }

    if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {
      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);
    }
  } // Calc slides


  var slideSize;
  var slidesPerColumn = params.slidesPerColumn;
  var slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;
  var numFullColumns = Math.floor(slidesLength / params.slidesPerColumn);

  for (var i = 0; i < slidesLength; i += 1) {
    slideSize = 0;

    var _slide = slides.eq(i);

    if (params.slidesPerColumn > 1) {
      // Set slides order
      var newSlideOrderIndex = void 0;
      var column = void 0;
      var row = void 0;

      if (params.slidesPerColumnFill === 'column') {
        column = Math.floor(i / slidesPerColumn);
        row = i - column * slidesPerColumn;

        if (column > numFullColumns || column === numFullColumns && row === slidesPerColumn - 1) {
          row += 1;

          if (row >= slidesPerColumn) {
            row = 0;
            column += 1;
          }
        }

        newSlideOrderIndex = column + row * slidesNumberEvenToRows / slidesPerColumn;

        _slide.css({
          '-webkit-box-ordinal-group': newSlideOrderIndex,
          '-moz-box-ordinal-group': newSlideOrderIndex,
          '-ms-flex-order': newSlideOrderIndex,
          '-webkit-order': newSlideOrderIndex,
          order: newSlideOrderIndex
        });
      } else {
        row = Math.floor(i / slidesPerRow);
        column = i - row * slidesPerRow;
      }

      _slide.css("margin-".concat(swiper.isHorizontal() ? 'top' : 'left'), row !== 0 && params.spaceBetween && "".concat(params.spaceBetween, "px")).attr('data-swiper-column', column).attr('data-swiper-row', row);
    }

    if (_slide.css('display') === 'none') continue; // eslint-disable-line

    if (params.slidesPerView === 'auto') {
      var slideStyles = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].getComputedStyle(_slide[0], null);
      var currentTransform = _slide[0].style.transform;
      var currentWebKitTransform = _slide[0].style.webkitTransform;

      if (currentTransform) {
        _slide[0].style.transform = 'none';
      }

      if (currentWebKitTransform) {
        _slide[0].style.webkitTransform = 'none';
      }

      if (params.roundLengths) {
        slideSize = swiper.isHorizontal() ? _slide.outerWidth(true) : _slide.outerHeight(true);
      } else {
        // eslint-disable-next-line
        if (swiper.isHorizontal()) {
          var width = parseFloat(slideStyles.getPropertyValue('width'));
          var paddingLeft = parseFloat(slideStyles.getPropertyValue('padding-left'));
          var paddingRight = parseFloat(slideStyles.getPropertyValue('padding-right'));
          var marginLeft = parseFloat(slideStyles.getPropertyValue('margin-left'));
          var marginRight = parseFloat(slideStyles.getPropertyValue('margin-right'));
          var boxSizing = slideStyles.getPropertyValue('box-sizing');

          if (boxSizing && boxSizing === 'border-box') {
            slideSize = width + marginLeft + marginRight;
          } else {
            slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight;
          }
        } else {
          var height = parseFloat(slideStyles.getPropertyValue('height'));
          var paddingTop = parseFloat(slideStyles.getPropertyValue('padding-top'));
          var paddingBottom = parseFloat(slideStyles.getPropertyValue('padding-bottom'));
          var marginTop = parseFloat(slideStyles.getPropertyValue('margin-top'));
          var marginBottom = parseFloat(slideStyles.getPropertyValue('margin-bottom'));

          var _boxSizing = slideStyles.getPropertyValue('box-sizing');

          if (_boxSizing && _boxSizing === 'border-box') {
            slideSize = height + marginTop + marginBottom;
          } else {
            slideSize = height + paddingTop + paddingBottom + marginTop + marginBottom;
          }
        }
      }

      if (currentTransform) {
        _slide[0].style.transform = currentTransform;
      }

      if (currentWebKitTransform) {
        _slide[0].style.webkitTransform = currentWebKitTransform;
      }

      if (params.roundLengths) slideSize = Math.floor(slideSize);
    } else {
      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;
      if (params.roundLengths) slideSize = Math.floor(slideSize);

      if (slides[i]) {
        if (swiper.isHorizontal()) {
          slides[i].style.width = "".concat(slideSize, "px");
        } else {
          slides[i].style.height = "".concat(slideSize, "px");
        }
      }
    }

    if (slides[i]) {
      slides[i].swiperSlideSize = slideSize;
    }

    slidesSizesGrid.push(slideSize);

    if (params.centeredSlides) {
      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;
      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;
      if (params.roundLengths) slidePosition = Math.floor(slidePosition);
      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);
      slidesGrid.push(slidePosition);
    } else {
      if (params.roundLengths) slidePosition = Math.floor(slidePosition);
      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);
      slidesGrid.push(slidePosition);
      slidePosition = slidePosition + slideSize + spaceBetween;
    }

    swiper.virtualSize += slideSize + spaceBetween;
    prevSlideSize = slideSize;
    index += 1;
  }

  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
  var newSlidesGrid;

  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {
    $wrapperEl.css({
      width: "".concat(swiper.virtualSize + params.spaceBetween, "px")
    });
  }

  if (!Support.flexbox || params.setWrapperSize) {
    if (swiper.isHorizontal()) $wrapperEl.css({
      width: "".concat(swiper.virtualSize + params.spaceBetween, "px")
    });else $wrapperEl.css({
      height: "".concat(swiper.virtualSize + params.spaceBetween, "px")
    });
  }

  if (params.slidesPerColumn > 1) {
    swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;
    swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;
    if (swiper.isHorizontal()) $wrapperEl.css({
      width: "".concat(swiper.virtualSize + params.spaceBetween, "px")
    });else $wrapperEl.css({
      height: "".concat(swiper.virtualSize + params.spaceBetween, "px")
    });

    if (params.centeredSlides) {
      newSlidesGrid = [];

      for (var _i = 0; _i < snapGrid.length; _i += 1) {
        var slidesGridItem = snapGrid[_i];
        if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);
        if (snapGrid[_i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);
      }

      snapGrid = newSlidesGrid;
    }
  } // Remove last grid elements depending on width


  if (!params.centeredSlides) {
    newSlidesGrid = [];

    for (var _i2 = 0; _i2 < snapGrid.length; _i2 += 1) {
      var _slidesGridItem = snapGrid[_i2];
      if (params.roundLengths) _slidesGridItem = Math.floor(_slidesGridItem);

      if (snapGrid[_i2] <= swiper.virtualSize - swiperSize) {
        newSlidesGrid.push(_slidesGridItem);
      }
    }

    snapGrid = newSlidesGrid;

    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {
      snapGrid.push(swiper.virtualSize - swiperSize);
    }
  }

  if (snapGrid.length === 0) snapGrid = [0];

  if (params.spaceBetween !== 0) {
    if (swiper.isHorizontal()) {
      if (rtl) slides.css({
        marginLeft: "".concat(spaceBetween, "px")
      });else slides.css({
        marginRight: "".concat(spaceBetween, "px")
      });
    } else slides.css({
      marginBottom: "".concat(spaceBetween, "px")
    });
  }

  if (params.centerInsufficientSlides) {
    var allSlidesSize = 0;
    slidesSizesGrid.forEach(function (slideSizeValue) {
      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
    });
    allSlidesSize -= params.spaceBetween;

    if (allSlidesSize < swiperSize) {
      var allSlidesOffset = (swiperSize - allSlidesSize) / 2;
      snapGrid.forEach(function (snap, snapIndex) {
        snapGrid[snapIndex] = snap - allSlidesOffset;
      });
      slidesGrid.forEach(function (snap, snapIndex) {
        slidesGrid[snapIndex] = snap + allSlidesOffset;
      });
    }
  }

  Utils.extend(swiper, {
    slides: slides,
    snapGrid: snapGrid,
    slidesGrid: slidesGrid,
    slidesSizesGrid: slidesSizesGrid
  });

  if (slidesLength !== previousSlidesLength) {
    swiper.emit('slidesLengthChange');
  }

  if (snapGrid.length !== previousSnapGridLength) {
    if (swiper.params.watchOverflow) swiper.checkOverflow();
    swiper.emit('snapGridLengthChange');
  }

  if (slidesGrid.length !== previousSlidesGridLength) {
    swiper.emit('slidesGridLengthChange');
  }

  if (params.watchSlidesProgress || params.watchSlidesVisibility) {
    swiper.updateSlidesOffset();
  }
}

function updateAutoHeight(speed) {
  var swiper = this;
  var activeSlides = [];
  var newHeight = 0;
  var i;

  if (typeof speed === 'number') {
    swiper.setTransition(speed);
  } else if (speed === true) {
    swiper.setTransition(swiper.params.speed);
  } // Find slides currently in view


  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {
    for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
      var _index = swiper.activeIndex + i;

      if (_index > swiper.slides.length) break;
      activeSlides.push(swiper.slides.eq(_index)[0]);
    }
  } else {
    activeSlides.push(swiper.slides.eq(swiper.activeIndex)[0]);
  } // Find new height from highest slide in view


  for (i = 0; i < activeSlides.length; i += 1) {
    if (typeof activeSlides[i] !== 'undefined') {
      var height = activeSlides[i].offsetHeight;
      newHeight = height > newHeight ? height : newHeight;
    }
  } // Update Height


  if (newHeight) swiper.$wrapperEl.css('height', "".concat(newHeight, "px"));
}

function updateSlidesOffset() {
  var swiper = this;
  var slides = swiper.slides;

  for (var i = 0; i < slides.length; i += 1) {
    slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;
  }
}

function updateSlidesProgress() {
  var translate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this && this.translate || 0;
  var swiper = this;
  var params = swiper.params;
  var slides = swiper.slides,
      rtl = swiper.rtlTranslate;
  if (slides.length === 0) return;
  if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();
  var offsetCenter = -translate;
  if (rtl) offsetCenter = translate; // Visible Slides

  slides.removeClass(params.slideVisibleClass);
  swiper.visibleSlidesIndexes = [];
  swiper.visibleSlides = [];

  for (var i = 0; i < slides.length; i += 1) {
    var _slide2 = slides[i];
    var slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - _slide2.swiperSlideOffset) / (_slide2.swiperSlideSize + params.spaceBetween);

    if (params.watchSlidesVisibility) {
      var slideBefore = -(offsetCenter - _slide2.swiperSlideOffset);
      var slideAfter = slideBefore + swiper.slidesSizesGrid[i];
      var isVisible = slideBefore >= 0 && slideBefore < swiper.size || slideAfter > 0 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;

      if (isVisible) {
        swiper.visibleSlides.push(_slide2);
        swiper.visibleSlidesIndexes.push(i);
        slides.eq(i).addClass(params.slideVisibleClass);
      }
    }

    _slide2.progress = rtl ? -slideProgress : slideProgress;
  }

  swiper.visibleSlides = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(swiper.visibleSlides);
}

function updateProgress() {
  var translate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this && this.translate || 0;
  var swiper = this;
  var params = swiper.params;
  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  var progress = swiper.progress,
      isBeginning = swiper.isBeginning,
      isEnd = swiper.isEnd;
  var wasBeginning = isBeginning;
  var wasEnd = isEnd;

  if (translatesDiff === 0) {
    progress = 0;
    isBeginning = true;
    isEnd = true;
  } else {
    progress = (translate - swiper.minTranslate()) / translatesDiff;
    isBeginning = progress <= 0;
    isEnd = progress >= 1;
  }

  Utils.extend(swiper, {
    progress: progress,
    isBeginning: isBeginning,
    isEnd: isEnd
  });
  if (params.watchSlidesProgress || params.watchSlidesVisibility) swiper.updateSlidesProgress(translate);

  if (isBeginning && !wasBeginning) {
    swiper.emit('reachBeginning toEdge');
  }

  if (isEnd && !wasEnd) {
    swiper.emit('reachEnd toEdge');
  }

  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {
    swiper.emit('fromEdge');
  }

  swiper.emit('progress', progress);
}

function updateSlidesClasses() {
  var swiper = this;
  var slides = swiper.slides,
      params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      activeIndex = swiper.activeIndex,
      realIndex = swiper.realIndex;
  var isVirtual = swiper.virtual && params.virtual.enabled;
  slides.removeClass("".concat(params.slideActiveClass, " ").concat(params.slideNextClass, " ").concat(params.slidePrevClass, " ").concat(params.slideDuplicateActiveClass, " ").concat(params.slideDuplicateNextClass, " ").concat(params.slideDuplicatePrevClass));
  var activeSlide;

  if (isVirtual) {
    activeSlide = swiper.$wrapperEl.find(".".concat(params.slideClass, "[data-swiper-slide-index=\"").concat(activeIndex, "\"]"));
  } else {
    activeSlide = slides.eq(activeIndex);
  } // Active classes


  activeSlide.addClass(params.slideActiveClass);

  if (params.loop) {
    // Duplicate to all looped slides
    if (activeSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl.children(".".concat(params.slideClass, ":not(.").concat(params.slideDuplicateClass, ")[data-swiper-slide-index=\"").concat(realIndex, "\"]")).addClass(params.slideDuplicateActiveClass);
    } else {
      $wrapperEl.children(".".concat(params.slideClass, ".").concat(params.slideDuplicateClass, "[data-swiper-slide-index=\"").concat(realIndex, "\"]")).addClass(params.slideDuplicateActiveClass);
    }
  } // Next Slide


  var nextSlide = activeSlide.nextAll(".".concat(params.slideClass)).eq(0).addClass(params.slideNextClass);

  if (params.loop && nextSlide.length === 0) {
    nextSlide = slides.eq(0);
    nextSlide.addClass(params.slideNextClass);
  } // Prev Slide


  var prevSlide = activeSlide.prevAll(".".concat(params.slideClass)).eq(0).addClass(params.slidePrevClass);

  if (params.loop && prevSlide.length === 0) {
    prevSlide = slides.eq(-1);
    prevSlide.addClass(params.slidePrevClass);
  }

  if (params.loop) {
    // Duplicate to all looped slides
    if (nextSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl.children(".".concat(params.slideClass, ":not(.").concat(params.slideDuplicateClass, ")[data-swiper-slide-index=\"").concat(nextSlide.attr('data-swiper-slide-index'), "\"]")).addClass(params.slideDuplicateNextClass);
    } else {
      $wrapperEl.children(".".concat(params.slideClass, ".").concat(params.slideDuplicateClass, "[data-swiper-slide-index=\"").concat(nextSlide.attr('data-swiper-slide-index'), "\"]")).addClass(params.slideDuplicateNextClass);
    }

    if (prevSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl.children(".".concat(params.slideClass, ":not(.").concat(params.slideDuplicateClass, ")[data-swiper-slide-index=\"").concat(prevSlide.attr('data-swiper-slide-index'), "\"]")).addClass(params.slideDuplicatePrevClass);
    } else {
      $wrapperEl.children(".".concat(params.slideClass, ".").concat(params.slideDuplicateClass, "[data-swiper-slide-index=\"").concat(prevSlide.attr('data-swiper-slide-index'), "\"]")).addClass(params.slideDuplicatePrevClass);
    }
  }
}

function updateActiveIndex(newActiveIndex) {
  var swiper = this;
  var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
  var slidesGrid = swiper.slidesGrid,
      snapGrid = swiper.snapGrid,
      params = swiper.params,
      previousIndex = swiper.activeIndex,
      previousRealIndex = swiper.realIndex,
      previousSnapIndex = swiper.snapIndex;
  var activeIndex = newActiveIndex;
  var snapIndex;

  if (typeof activeIndex === 'undefined') {
    for (var i = 0; i < slidesGrid.length; i += 1) {
      if (typeof slidesGrid[i + 1] !== 'undefined') {
        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {
          activeIndex = i;
        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {
          activeIndex = i + 1;
        }
      } else if (translate >= slidesGrid[i]) {
        activeIndex = i;
      }
    } // Normalize slideIndex


    if (params.normalizeSlideIndex) {
      if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;
    }
  }

  if (snapGrid.indexOf(translate) >= 0) {
    snapIndex = snapGrid.indexOf(translate);
  } else {
    snapIndex = Math.floor(activeIndex / params.slidesPerGroup);
  }

  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;

  if (activeIndex === previousIndex) {
    if (snapIndex !== previousSnapIndex) {
      swiper.snapIndex = snapIndex;
      swiper.emit('snapIndexChange');
    }

    return;
  } // Get real index


  var realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);
  Utils.extend(swiper, {
    snapIndex: snapIndex,
    realIndex: realIndex,
    previousIndex: previousIndex,
    activeIndex: activeIndex
  });
  swiper.emit('activeIndexChange');
  swiper.emit('snapIndexChange');

  if (previousRealIndex !== realIndex) {
    swiper.emit('realIndexChange');
  }

  swiper.emit('slideChange');
}

function updateClickedSlide(e) {
  var swiper = this;
  var params = swiper.params;
  var slide = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target).closest(".".concat(params.slideClass))[0];
  var slideFound = false;

  if (slide) {
    for (var i = 0; i < swiper.slides.length; i += 1) {
      if (swiper.slides[i] === slide) slideFound = true;
    }
  }

  if (slide && slideFound) {
    swiper.clickedSlide = slide;

    if (swiper.virtual && swiper.params.virtual.enabled) {
      swiper.clickedIndex = parseInt(Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(slide).attr('data-swiper-slide-index'), 10);
    } else {
      swiper.clickedIndex = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(slide).index();
    }
  } else {
    swiper.clickedSlide = undefined;
    swiper.clickedIndex = undefined;
    return;
  }

  if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {
    swiper.slideToClickedSlide();
  }
}

var update = {
  updateSize: updateSize,
  updateSlides: updateSlides,
  updateAutoHeight: updateAutoHeight,
  updateSlidesOffset: updateSlidesOffset,
  updateSlidesProgress: updateSlidesProgress,
  updateProgress: updateProgress,
  updateSlidesClasses: updateSlidesClasses,
  updateActiveIndex: updateActiveIndex,
  updateClickedSlide: updateClickedSlide
};

function getTranslate() {
  var axis = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isHorizontal() ? 'x' : 'y';
  var swiper = this;
  var params = swiper.params,
      rtl = swiper.rtlTranslate,
      translate = swiper.translate,
      $wrapperEl = swiper.$wrapperEl;

  if (params.virtualTranslate) {
    return rtl ? -translate : translate;
  }

  var currentTranslate = Utils.getTranslate($wrapperEl[0], axis);
  if (rtl) currentTranslate = -currentTranslate;
  return currentTranslate || 0;
}

function setTranslate(translate, byController) {
  var swiper = this;
  var rtl = swiper.rtlTranslate,
      params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      progress = swiper.progress;
  var x = 0;
  var y = 0;
  var z = 0;

  if (swiper.isHorizontal()) {
    x = rtl ? -translate : translate;
  } else {
    y = translate;
  }

  if (params.roundLengths) {
    x = Math.floor(x);
    y = Math.floor(y);
  }

  if (!params.virtualTranslate) {
    if (Support.transforms3d) $wrapperEl.transform("translate3d(".concat(x, "px, ").concat(y, "px, ").concat(z, "px)"));else $wrapperEl.transform("translate(".concat(x, "px, ").concat(y, "px)"));
  }

  swiper.previousTranslate = swiper.translate;
  swiper.translate = swiper.isHorizontal() ? x : y; // Check if we need to update progress

  var newProgress;
  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();

  if (translatesDiff === 0) {
    newProgress = 0;
  } else {
    newProgress = (translate - swiper.minTranslate()) / translatesDiff;
  }

  if (newProgress !== progress) {
    swiper.updateProgress(translate);
  }

  swiper.emit('setTranslate', swiper.translate, byController);
}

function minTranslate() {
  return -this.snapGrid[0];
}

function maxTranslate() {
  return -this.snapGrid[this.snapGrid.length - 1];
}

var translate = {
  getTranslate: getTranslate,
  setTranslate: setTranslate,
  minTranslate: minTranslate,
  maxTranslate: maxTranslate
};

function setTransition(duration, byController) {
  var swiper = this;
  swiper.$wrapperEl.transition(duration);
  swiper.emit('setTransition', duration, byController);
}

function transitionStart() {
  var runCallbacks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var direction = arguments.length > 1 ? arguments[1] : undefined;
  var swiper = this;
  var activeIndex = swiper.activeIndex,
      params = swiper.params,
      previousIndex = swiper.previousIndex;

  if (params.autoHeight) {
    swiper.updateAutoHeight();
  }

  var dir = direction;

  if (!dir) {
    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';
  }

  swiper.emit('transitionStart');

  if (runCallbacks && activeIndex !== previousIndex) {
    if (dir === 'reset') {
      swiper.emit('slideResetTransitionStart');
      return;
    }

    swiper.emit('slideChangeTransitionStart');

    if (dir === 'next') {
      swiper.emit('slideNextTransitionStart');
    } else {
      swiper.emit('slidePrevTransitionStart');
    }
  }
}

function transitionEnd() {
  var runCallbacks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var direction = arguments.length > 1 ? arguments[1] : undefined;
  var swiper = this;
  var activeIndex = swiper.activeIndex,
      previousIndex = swiper.previousIndex;
  swiper.animating = false;
  swiper.setTransition(0);
  var dir = direction;

  if (!dir) {
    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';
  }

  swiper.emit('transitionEnd');

  if (runCallbacks && activeIndex !== previousIndex) {
    if (dir === 'reset') {
      swiper.emit('slideResetTransitionEnd');
      return;
    }

    swiper.emit('slideChangeTransitionEnd');

    if (dir === 'next') {
      swiper.emit('slideNextTransitionEnd');
    } else {
      swiper.emit('slidePrevTransitionEnd');
    }
  }
}

var transition = {
  setTransition: setTransition,
  transitionStart: transitionStart,
  transitionEnd: transitionEnd
};

function slideTo() {
  var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.params.speed;
  var runCallbacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var internal = arguments.length > 3 ? arguments[3] : undefined;
  var swiper = this;
  var slideIndex = index;
  if (slideIndex < 0) slideIndex = 0;
  var params = swiper.params,
      snapGrid = swiper.snapGrid,
      slidesGrid = swiper.slidesGrid,
      previousIndex = swiper.previousIndex,
      activeIndex = swiper.activeIndex,
      rtl = swiper.rtlTranslate;

  if (swiper.animating && params.preventInteractionOnTransition) {
    return false;
  }

  var snapIndex = Math.floor(slideIndex / params.slidesPerGroup);
  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;

  if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {
    swiper.emit('beforeSlideChangeStart');
  }

  var translate = -snapGrid[snapIndex]; // Update progress

  swiper.updateProgress(translate); // Normalize slideIndex

  if (params.normalizeSlideIndex) {
    for (var i = 0; i < slidesGrid.length; i += 1) {
      if (-Math.floor(translate * 100) >= Math.floor(slidesGrid[i] * 100)) {
        slideIndex = i;
      }
    }
  } // Directions locks


  if (swiper.initialized && slideIndex !== activeIndex) {
    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {
      return false;
    }

    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {
      if ((activeIndex || 0) !== slideIndex) return false;
    }
  }

  var direction;
  if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset'; // Update Index

  if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {
    swiper.updateActiveIndex(slideIndex); // Update Height

    if (params.autoHeight) {
      swiper.updateAutoHeight();
    }

    swiper.updateSlidesClasses();

    if (params.effect !== 'slide') {
      swiper.setTranslate(translate);
    }

    if (direction !== 'reset') {
      swiper.transitionStart(runCallbacks, direction);
      swiper.transitionEnd(runCallbacks, direction);
    }

    return false;
  }

  if (speed === 0 || !Support.transition) {
    swiper.setTransition(0);
    swiper.setTranslate(translate);
    swiper.updateActiveIndex(slideIndex);
    swiper.updateSlidesClasses();
    swiper.emit('beforeTransitionStart', speed, internal);
    swiper.transitionStart(runCallbacks, direction);
    swiper.transitionEnd(runCallbacks, direction);
  } else {
    swiper.setTransition(speed);
    swiper.setTranslate(translate);
    swiper.updateActiveIndex(slideIndex);
    swiper.updateSlidesClasses();
    swiper.emit('beforeTransitionStart', speed, internal);
    swiper.transitionStart(runCallbacks, direction);

    if (!swiper.animating) {
      swiper.animating = true;

      if (!swiper.onSlideToWrapperTransitionEnd) {
        swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {
          if (!swiper || swiper.destroyed) return;
          if (e.target !== this) return;
          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
          swiper.onSlideToWrapperTransitionEnd = null;
          delete swiper.onSlideToWrapperTransitionEnd;
          swiper.transitionEnd(runCallbacks, direction);
        };
      }

      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
    }
  }

  return true;
}

function slideToLoop() {
  var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.params.speed;
  var runCallbacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var internal = arguments.length > 3 ? arguments[3] : undefined;
  var swiper = this;
  var newIndex = index;

  if (swiper.params.loop) {
    newIndex += swiper.loopedSlides;
  }

  return swiper.slideTo(newIndex, speed, runCallbacks, internal);
}
/* eslint no-unused-vars: "off" */


function slideNext() {
  var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.params.speed;
  var runCallbacks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var internal = arguments.length > 2 ? arguments[2] : undefined;
  var swiper = this;
  var params = swiper.params,
      animating = swiper.animating;

  if (params.loop) {
    if (animating) return false;
    swiper.loopFix(); // eslint-disable-next-line

    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
    return swiper.slideTo(swiper.activeIndex + params.slidesPerGroup, speed, runCallbacks, internal);
  }

  return swiper.slideTo(swiper.activeIndex + params.slidesPerGroup, speed, runCallbacks, internal);
}
/* eslint no-unused-vars: "off" */


function slidePrev() {
  var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.params.speed;
  var runCallbacks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var internal = arguments.length > 2 ? arguments[2] : undefined;
  var swiper = this;
  var params = swiper.params,
      animating = swiper.animating,
      snapGrid = swiper.snapGrid,
      slidesGrid = swiper.slidesGrid,
      rtlTranslate = swiper.rtlTranslate;

  if (params.loop) {
    if (animating) return false;
    swiper.loopFix(); // eslint-disable-next-line

    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
  }

  var translate = rtlTranslate ? swiper.translate : -swiper.translate;

  function normalize(val) {
    if (val < 0) return -Math.floor(Math.abs(val));
    return Math.floor(val);
  }

  var normalizedTranslate = normalize(translate);
  var normalizedSnapGrid = snapGrid.map(function (val) {
    return normalize(val);
  });
  var normalizedSlidesGrid = slidesGrid.map(function (val) {
    return normalize(val);
  });
  var currentSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate)];
  var prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];
  var prevIndex;

  if (typeof prevSnap !== 'undefined') {
    prevIndex = slidesGrid.indexOf(prevSnap);
    if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;
  }

  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
}
/* eslint no-unused-vars: "off" */


function slideReset() {
  var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.params.speed;
  var runCallbacks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var internal = arguments.length > 2 ? arguments[2] : undefined;
  var swiper = this;
  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
}
/* eslint no-unused-vars: "off" */


function slideToClosest() {
  var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.params.speed;
  var runCallbacks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var internal = arguments.length > 2 ? arguments[2] : undefined;
  var swiper = this;
  var index = swiper.activeIndex;
  var snapIndex = Math.floor(index / swiper.params.slidesPerGroup);

  if (snapIndex < swiper.snapGrid.length - 1) {
    var _translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;

    var currentSnap = swiper.snapGrid[snapIndex];
    var nextSnap = swiper.snapGrid[snapIndex + 1];

    if (_translate - currentSnap > (nextSnap - currentSnap) / 2) {
      index = swiper.params.slidesPerGroup;
    }
  }

  return swiper.slideTo(index, speed, runCallbacks, internal);
}

function slideToClickedSlide() {
  var swiper = this;
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl;
  var slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;
  var slideToIndex = swiper.clickedIndex;
  var realIndex;

  if (params.loop) {
    if (swiper.animating) return;
    realIndex = parseInt(Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);

    if (params.centeredSlides) {
      if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {
        swiper.loopFix();
        slideToIndex = $wrapperEl.children(".".concat(params.slideClass, "[data-swiper-slide-index=\"").concat(realIndex, "\"]:not(.").concat(params.slideDuplicateClass, ")")).eq(0).index();
        Utils.nextTick(function () {
          swiper.slideTo(slideToIndex);
        });
      } else {
        swiper.slideTo(slideToIndex);
      }
    } else if (slideToIndex > swiper.slides.length - slidesPerView) {
      swiper.loopFix();
      slideToIndex = $wrapperEl.children(".".concat(params.slideClass, "[data-swiper-slide-index=\"").concat(realIndex, "\"]:not(.").concat(params.slideDuplicateClass, ")")).eq(0).index();
      Utils.nextTick(function () {
        swiper.slideTo(slideToIndex);
      });
    } else {
      swiper.slideTo(slideToIndex);
    }
  } else {
    swiper.slideTo(slideToIndex);
  }
}

var slide = {
  slideTo: slideTo,
  slideToLoop: slideToLoop,
  slideNext: slideNext,
  slidePrev: slidePrev,
  slideReset: slideReset,
  slideToClosest: slideToClosest,
  slideToClickedSlide: slideToClickedSlide
};

function loopCreate() {
  var swiper = this;
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl; // Remove duplicated slides

  $wrapperEl.children(".".concat(params.slideClass, ".").concat(params.slideDuplicateClass)).remove();
  var slides = $wrapperEl.children(".".concat(params.slideClass));

  if (params.loopFillGroupWithBlank) {
    var blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;

    if (blankSlidesNum !== params.slidesPerGroup) {
      for (var i = 0; i < blankSlidesNum; i += 1) {
        var blankNode = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].createElement('div')).addClass("".concat(params.slideClass, " ").concat(params.slideBlankClass));
        $wrapperEl.append(blankNode);
      }

      slides = $wrapperEl.children(".".concat(params.slideClass));
    }
  }

  if (params.slidesPerView === 'auto' && !params.loopedSlides) params.loopedSlides = slides.length;
  swiper.loopedSlides = parseInt(params.loopedSlides || params.slidesPerView, 10);
  swiper.loopedSlides += params.loopAdditionalSlides;

  if (swiper.loopedSlides > slides.length) {
    swiper.loopedSlides = slides.length;
  }

  var prependSlides = [];
  var appendSlides = [];
  slides.each(function (index, el) {
    var slide = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(el);
    if (index < swiper.loopedSlides) appendSlides.push(el);
    if (index < slides.length && index >= slides.length - swiper.loopedSlides) prependSlides.push(el);
    slide.attr('data-swiper-slide-index', index);
  });

  for (var _i3 = 0; _i3 < appendSlides.length; _i3 += 1) {
    $wrapperEl.append(Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(appendSlides[_i3].cloneNode(true)).addClass(params.slideDuplicateClass));
  }

  for (var _i4 = prependSlides.length - 1; _i4 >= 0; _i4 -= 1) {
    $wrapperEl.prepend(Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(prependSlides[_i4].cloneNode(true)).addClass(params.slideDuplicateClass));
  }
}

function loopFix() {
  var swiper = this;
  var params = swiper.params,
      activeIndex = swiper.activeIndex,
      slides = swiper.slides,
      loopedSlides = swiper.loopedSlides,
      allowSlidePrev = swiper.allowSlidePrev,
      allowSlideNext = swiper.allowSlideNext,
      snapGrid = swiper.snapGrid,
      rtl = swiper.rtlTranslate;
  var newIndex;
  swiper.allowSlidePrev = true;
  swiper.allowSlideNext = true;
  var snapTranslate = -snapGrid[activeIndex];
  var diff = snapTranslate - swiper.getTranslate(); // Fix For Negative Oversliding

  if (activeIndex < loopedSlides) {
    newIndex = slides.length - loopedSlides * 3 + activeIndex;
    newIndex += loopedSlides;
    var slideChanged = swiper.slideTo(newIndex, 0, false, true);

    if (slideChanged && diff !== 0) {
      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
    }
  } else if (params.slidesPerView === 'auto' && activeIndex >= loopedSlides * 2 || activeIndex >= slides.length - loopedSlides) {
    // Fix For Positive Oversliding
    newIndex = -slides.length + activeIndex + loopedSlides;
    newIndex += loopedSlides;

    var _slideChanged = swiper.slideTo(newIndex, 0, false, true);

    if (_slideChanged && diff !== 0) {
      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
    }
  }

  swiper.allowSlidePrev = allowSlidePrev;
  swiper.allowSlideNext = allowSlideNext;
}

function loopDestroy() {
  var swiper = this;
  var $wrapperEl = swiper.$wrapperEl,
      params = swiper.params,
      slides = swiper.slides;
  $wrapperEl.children(".".concat(params.slideClass, ".").concat(params.slideDuplicateClass, ",.").concat(params.slideClass, ".").concat(params.slideBlankClass)).remove();
  slides.removeAttr('data-swiper-slide-index');
}

var loop = {
  loopCreate: loopCreate,
  loopFix: loopFix,
  loopDestroy: loopDestroy
};

function setGrabCursor(moving) {
  var swiper = this;
  if (Support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked) return;
  var el = swiper.el;
  el.style.cursor = 'move';
  el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';
  el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';
  el.style.cursor = moving ? 'grabbing' : 'grab';
}

function unsetGrabCursor() {
  var swiper = this;
  if (Support.touch || swiper.params.watchOverflow && swiper.isLocked) return;
  swiper.el.style.cursor = '';
}

var grabCursor = {
  setGrabCursor: setGrabCursor,
  unsetGrabCursor: unsetGrabCursor
};

function appendSlide(slides) {
  var swiper = this;
  var $wrapperEl = swiper.$wrapperEl,
      params = swiper.params;

  if (params.loop) {
    swiper.loopDestroy();
  }

  if (_typeof(slides) === 'object' && 'length' in slides) {
    for (var i = 0; i < slides.length; i += 1) {
      if (slides[i]) $wrapperEl.append(slides[i]);
    }
  } else {
    $wrapperEl.append(slides);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && Support.observer)) {
    swiper.update();
  }
}

function prependSlide(slides) {
  var swiper = this;
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      activeIndex = swiper.activeIndex;

  if (params.loop) {
    swiper.loopDestroy();
  }

  var newActiveIndex = activeIndex + 1;

  if (_typeof(slides) === 'object' && 'length' in slides) {
    for (var i = 0; i < slides.length; i += 1) {
      if (slides[i]) $wrapperEl.prepend(slides[i]);
    }

    newActiveIndex = activeIndex + slides.length;
  } else {
    $wrapperEl.prepend(slides);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && Support.observer)) {
    swiper.update();
  }

  swiper.slideTo(newActiveIndex, 0, false);
}

function addSlide(index, slides) {
  var swiper = this;
  var $wrapperEl = swiper.$wrapperEl,
      params = swiper.params,
      activeIndex = swiper.activeIndex;
  var activeIndexBuffer = activeIndex;

  if (params.loop) {
    activeIndexBuffer -= swiper.loopedSlides;
    swiper.loopDestroy();
    swiper.slides = $wrapperEl.children(".".concat(params.slideClass));
  }

  var baseLength = swiper.slides.length;

  if (index <= 0) {
    swiper.prependSlide(slides);
    return;
  }

  if (index >= baseLength) {
    swiper.appendSlide(slides);
    return;
  }

  var newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;
  var slidesBuffer = [];

  for (var i = baseLength - 1; i >= index; i -= 1) {
    var currentSlide = swiper.slides.eq(i);
    currentSlide.remove();
    slidesBuffer.unshift(currentSlide);
  }

  if (_typeof(slides) === 'object' && 'length' in slides) {
    for (var _i5 = 0; _i5 < slides.length; _i5 += 1) {
      if (slides[_i5]) $wrapperEl.append(slides[_i5]);
    }

    newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;
  } else {
    $wrapperEl.append(slides);
  }

  for (var _i6 = 0; _i6 < slidesBuffer.length; _i6 += 1) {
    $wrapperEl.append(slidesBuffer[_i6]);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && Support.observer)) {
    swiper.update();
  }

  if (params.loop) {
    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
  } else {
    swiper.slideTo(newActiveIndex, 0, false);
  }
}

function removeSlide(slidesIndexes) {
  var swiper = this;
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      activeIndex = swiper.activeIndex;
  var activeIndexBuffer = activeIndex;

  if (params.loop) {
    activeIndexBuffer -= swiper.loopedSlides;
    swiper.loopDestroy();
    swiper.slides = $wrapperEl.children(".".concat(params.slideClass));
  }

  var newActiveIndex = activeIndexBuffer;
  var indexToRemove;

  if (_typeof(slidesIndexes) === 'object' && 'length' in slidesIndexes) {
    for (var i = 0; i < slidesIndexes.length; i += 1) {
      indexToRemove = slidesIndexes[i];
      if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
      if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
    }

    newActiveIndex = Math.max(newActiveIndex, 0);
  } else {
    indexToRemove = slidesIndexes;
    if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
    if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
    newActiveIndex = Math.max(newActiveIndex, 0);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && Support.observer)) {
    swiper.update();
  }

  if (params.loop) {
    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
  } else {
    swiper.slideTo(newActiveIndex, 0, false);
  }
}

function removeAllSlides() {
  var swiper = this;
  var slidesIndexes = [];

  for (var i = 0; i < swiper.slides.length; i += 1) {
    slidesIndexes.push(i);
  }

  swiper.removeSlide(slidesIndexes);
}

var manipulation = {
  appendSlide: appendSlide,
  prependSlide: prependSlide,
  addSlide: addSlide,
  removeSlide: removeSlide,
  removeAllSlides: removeAllSlides
};

var Device = function Device() {
  var ua = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.userAgent;
  var device = {
    ios: false,
    android: false,
    androidChrome: false,
    desktop: false,
    windows: false,
    iphone: false,
    ipod: false,
    ipad: false,
    cordova: ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].cordova || ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].phonegap,
    phonegap: ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].cordova || ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].phonegap
  };
  var windows = ua.match(/(Windows Phone);?[\s\/]+([\d.]+)?/); // eslint-disable-line

  var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line

  var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
  var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
  var iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/); // Windows

  if (windows) {
    device.os = 'windows';
    device.osVersion = windows[2];
    device.windows = true;
  } // Android


  if (android && !windows) {
    device.os = 'android';
    device.osVersion = android[2];
    device.android = true;
    device.androidChrome = ua.toLowerCase().indexOf('chrome') >= 0;
  }

  if (ipad || iphone || ipod) {
    device.os = 'ios';
    device.ios = true;
  } // iOS


  if (iphone && !ipod) {
    device.osVersion = iphone[2].replace(/_/g, '.');
    device.iphone = true;
  }

  if (ipad) {
    device.osVersion = ipad[2].replace(/_/g, '.');
    device.ipad = true;
  }

  if (ipod) {
    device.osVersion = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
    device.iphone = true;
  } // iOS 8+ changed UA


  if (device.ios && device.osVersion && ua.indexOf('Version/') >= 0) {
    if (device.osVersion.split('.')[0] === '10') {
      device.osVersion = ua.toLowerCase().split('version/')[1].split(' ')[0];
    }
  } // Desktop


  device.desktop = !(device.os || device.android || device.webView); // Webview

  device.webView = (iphone || ipad || ipod) && ua.match(/.*AppleWebKit(?!.*Safari)/i); // Minimal UI

  if (device.os && device.os === 'ios') {
    var osVersionArr = device.osVersion.split('.');
    var metaViewport = ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].querySelector('meta[name="viewport"]');
    device.minimalUi = !device.webView && (ipod || iphone) && (osVersionArr[0] * 1 === 7 ? osVersionArr[1] * 1 >= 1 : osVersionArr[0] * 1 > 7) && metaViewport && metaViewport.getAttribute('content').indexOf('minimal-ui') >= 0;
  } // Pixel Ratio


  device.pixelRatio = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].devicePixelRatio || 1; // Export object

  return device;
}();

function onTouchStart(event) {
  var swiper = this;
  var data = swiper.touchEventsData;
  var params = swiper.params,
      touches = swiper.touches;

  if (swiper.animating && params.preventInteractionOnTransition) {
    return;
  }

  var e = event;
  if (e.originalEvent) e = e.originalEvent;
  data.isTouchEvent = e.type === 'touchstart';
  if (!data.isTouchEvent && 'which' in e && e.which === 3) return;
  if (!data.isTouchEvent && 'button' in e && e.button > 0) return;
  if (data.isTouched && data.isMoved) return;

  if (params.noSwiping && Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target).closest(params.noSwipingSelector ? params.noSwipingSelector : ".".concat(params.noSwipingClass))[0]) {
    swiper.allowClick = true;
    return;
  }

  if (params.swipeHandler) {
    if (!Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e).closest(params.swipeHandler)[0]) return;
  }

  touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
  touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
  var startX = touches.currentX;
  var startY = touches.currentY; // Do NOT start if iOS edge swipe is detected. Otherwise iOS app (UIWebView) cannot swipe-to-go-back anymore

  var edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;
  var edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;

  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].screen.width - edgeSwipeThreshold)) {
    return;
  }

  Utils.extend(data, {
    isTouched: true,
    isMoved: false,
    allowTouchCallbacks: true,
    isScrolling: undefined,
    startMoving: undefined
  });
  touches.startX = startX;
  touches.startY = startY;
  data.touchStartTime = Utils.now();
  swiper.allowClick = true;
  swiper.updateSize();
  swiper.swipeDirection = undefined;
  if (params.threshold > 0) data.allowThresholdMove = false;

  if (e.type !== 'touchstart') {
    var preventDefault = true;
    if (Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target).is(data.formElements)) preventDefault = false;

    if (ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement && Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement).is(data.formElements) && ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement !== e.target) {
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement.blur();
    }

    var shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;

    if (params.touchStartForcePreventDefault || shouldPreventDefault) {
      e.preventDefault();
    }
  }

  swiper.emit('touchStart', e);
}

function onTouchMove(event) {
  var swiper = this;
  var data = swiper.touchEventsData;
  var params = swiper.params,
      touches = swiper.touches,
      rtl = swiper.rtlTranslate;
  var e = event;
  if (e.originalEvent) e = e.originalEvent;

  if (!data.isTouched) {
    if (data.startMoving && data.isScrolling) {
      swiper.emit('touchMoveOpposite', e);
    }

    return;
  }

  if (data.isTouchEvent && e.type === 'mousemove') return;
  var pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
  var pageY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;

  if (e.preventedByNestedSwiper) {
    touches.startX = pageX;
    touches.startY = pageY;
    return;
  }

  if (!swiper.allowTouchMove) {
    // isMoved = true;
    swiper.allowClick = false;

    if (data.isTouched) {
      Utils.extend(touches, {
        startX: pageX,
        startY: pageY,
        currentX: pageX,
        currentY: pageY
      });
      data.touchStartTime = Utils.now();
    }

    return;
  }

  if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {
    if (swiper.isVertical()) {
      // Vertical
      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {
        data.isTouched = false;
        data.isMoved = false;
        return;
      }
    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {
      return;
    }
  }

  if (data.isTouchEvent && ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement) {
    if (e.target === ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement && Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target).is(data.formElements)) {
      data.isMoved = true;
      swiper.allowClick = false;
      return;
    }
  }

  if (data.allowTouchCallbacks) {
    swiper.emit('touchMove', e);
  }

  if (e.targetTouches && e.targetTouches.length > 1) return;
  touches.currentX = pageX;
  touches.currentY = pageY;
  var diffX = touches.currentX - touches.startX;
  var diffY = touches.currentY - touches.startY;
  if (swiper.params.threshold && Math.sqrt(Math.pow(diffX, 2) + Math.pow(diffY, 2)) < swiper.params.threshold) return;

  if (typeof data.isScrolling === 'undefined') {
    var touchAngle;

    if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {
      data.isScrolling = false;
    } else {
      // eslint-disable-next-line
      if (diffX * diffX + diffY * diffY >= 25) {
        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;
        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;
      }
    }
  }

  if (data.isScrolling) {
    swiper.emit('touchMoveOpposite', e);
  }

  if (typeof data.startMoving === 'undefined') {
    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {
      data.startMoving = true;
    }
  }

  if (data.isScrolling) {
    data.isTouched = false;
    return;
  }

  if (!data.startMoving) {
    return;
  }

  swiper.allowClick = false;
  e.preventDefault();

  if (params.touchMoveStopPropagation && !params.nested) {
    e.stopPropagation();
  }

  if (!data.isMoved) {
    if (params.loop) {
      swiper.loopFix();
    }

    data.startTranslate = swiper.getTranslate();
    swiper.setTransition(0);

    if (swiper.animating) {
      swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');
    }

    data.allowMomentumBounce = false; // Grab Cursor

    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
      swiper.setGrabCursor(true);
    }

    swiper.emit('sliderFirstMove', e);
  }

  swiper.emit('sliderMove', e);
  data.isMoved = true;
  var diff = swiper.isHorizontal() ? diffX : diffY;
  touches.diff = diff;
  diff *= params.touchRatio;
  if (rtl) diff = -diff;
  swiper.swipeDirection = diff > 0 ? 'prev' : 'next';
  data.currentTranslate = diff + data.startTranslate;
  var disableParentSwiper = true;
  var resistanceRatio = params.resistanceRatio;

  if (params.touchReleaseOnEdges) {
    resistanceRatio = 0;
  }

  if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {
    disableParentSwiper = false;
    if (params.resistance) data.currentTranslate = swiper.minTranslate() - 1 + Math.pow(-swiper.minTranslate() + data.startTranslate + diff, resistanceRatio);
  } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {
    disableParentSwiper = false;
    if (params.resistance) data.currentTranslate = swiper.maxTranslate() + 1 - Math.pow(swiper.maxTranslate() - data.startTranslate - diff, resistanceRatio);
  }

  if (disableParentSwiper) {
    e.preventedByNestedSwiper = true;
  } // Directions locks


  if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {
    data.currentTranslate = data.startTranslate;
  }

  if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {
    data.currentTranslate = data.startTranslate;
  } // Threshold


  if (params.threshold > 0) {
    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
      if (!data.allowThresholdMove) {
        data.allowThresholdMove = true;
        touches.startX = touches.currentX;
        touches.startY = touches.currentY;
        data.currentTranslate = data.startTranslate;
        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
        return;
      }
    } else {
      data.currentTranslate = data.startTranslate;
      return;
    }
  }

  if (!params.followFinger) return; // Update active index in free mode

  if (params.freeMode || params.watchSlidesProgress || params.watchSlidesVisibility) {
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  }

  if (params.freeMode) {
    // Velocity
    if (data.velocities.length === 0) {
      data.velocities.push({
        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],
        time: data.touchStartTime
      });
    }

    data.velocities.push({
      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],
      time: Utils.now()
    });
  } // Update progress


  swiper.updateProgress(data.currentTranslate); // Update translate

  swiper.setTranslate(data.currentTranslate);
}

function onTouchEnd(event) {
  var swiper = this;
  var data = swiper.touchEventsData;
  var params = swiper.params,
      touches = swiper.touches,
      rtl = swiper.rtlTranslate,
      $wrapperEl = swiper.$wrapperEl,
      slidesGrid = swiper.slidesGrid,
      snapGrid = swiper.snapGrid;
  var e = event;
  if (e.originalEvent) e = e.originalEvent;

  if (data.allowTouchCallbacks) {
    swiper.emit('touchEnd', e);
  }

  data.allowTouchCallbacks = false;

  if (!data.isTouched) {
    if (data.isMoved && params.grabCursor) {
      swiper.setGrabCursor(false);
    }

    data.isMoved = false;
    data.startMoving = false;
    return;
  } // Return Grab Cursor


  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
    swiper.setGrabCursor(false);
  } // Time diff


  var touchEndTime = Utils.now();
  var timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click

  if (swiper.allowClick) {
    swiper.updateClickedSlide(e);
    swiper.emit('tap', e);

    if (timeDiff < 300 && touchEndTime - data.lastClickTime > 300) {
      if (data.clickTimeout) clearTimeout(data.clickTimeout);
      data.clickTimeout = Utils.nextTick(function () {
        if (!swiper || swiper.destroyed) return;
        swiper.emit('click', e);
      }, 300);
    }

    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {
      if (data.clickTimeout) clearTimeout(data.clickTimeout);
      swiper.emit('doubleTap', e);
    }
  }

  data.lastClickTime = Utils.now();
  Utils.nextTick(function () {
    if (!swiper.destroyed) swiper.allowClick = true;
  });

  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {
    data.isTouched = false;
    data.isMoved = false;
    data.startMoving = false;
    return;
  }

  data.isTouched = false;
  data.isMoved = false;
  data.startMoving = false;
  var currentPos;

  if (params.followFinger) {
    currentPos = rtl ? swiper.translate : -swiper.translate;
  } else {
    currentPos = -data.currentTranslate;
  }

  if (params.freeMode) {
    if (currentPos < -swiper.minTranslate()) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }

    if (currentPos > -swiper.maxTranslate()) {
      if (swiper.slides.length < snapGrid.length) {
        swiper.slideTo(snapGrid.length - 1);
      } else {
        swiper.slideTo(swiper.slides.length - 1);
      }

      return;
    }

    if (params.freeModeMomentum) {
      if (data.velocities.length > 1) {
        var lastMoveEvent = data.velocities.pop();
        var velocityEvent = data.velocities.pop();
        var distance = lastMoveEvent.position - velocityEvent.position;
        var time = lastMoveEvent.time - velocityEvent.time;
        swiper.velocity = distance / time;
        swiper.velocity /= 2;

        if (Math.abs(swiper.velocity) < params.freeModeMinimumVelocity) {
          swiper.velocity = 0;
        } // this implies that the user stopped moving a finger then released.
        // There would be no events with distance zero, so the last event is stale.


        if (time > 150 || Utils.now() - lastMoveEvent.time > 300) {
          swiper.velocity = 0;
        }
      } else {
        swiper.velocity = 0;
      }

      swiper.velocity *= params.freeModeMomentumVelocityRatio;
      data.velocities.length = 0;
      var momentumDuration = 1000 * params.freeModeMomentumRatio;
      var momentumDistance = swiper.velocity * momentumDuration;
      var newPosition = swiper.translate + momentumDistance;
      if (rtl) newPosition = -newPosition;
      var doBounce = false;
      var afterBouncePosition;
      var bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeModeMomentumBounceRatio;
      var needsLoopFix;

      if (newPosition < swiper.maxTranslate()) {
        if (params.freeModeMomentumBounce) {
          if (newPosition + swiper.maxTranslate() < -bounceAmount) {
            newPosition = swiper.maxTranslate() - bounceAmount;
          }

          afterBouncePosition = swiper.maxTranslate();
          doBounce = true;
          data.allowMomentumBounce = true;
        } else {
          newPosition = swiper.maxTranslate();
        }

        if (params.loop && params.centeredSlides) needsLoopFix = true;
      } else if (newPosition > swiper.minTranslate()) {
        if (params.freeModeMomentumBounce) {
          if (newPosition - swiper.minTranslate() > bounceAmount) {
            newPosition = swiper.minTranslate() + bounceAmount;
          }

          afterBouncePosition = swiper.minTranslate();
          doBounce = true;
          data.allowMomentumBounce = true;
        } else {
          newPosition = swiper.minTranslate();
        }

        if (params.loop && params.centeredSlides) needsLoopFix = true;
      } else if (params.freeModeSticky) {
        var nextSlide;

        for (var j = 0; j < snapGrid.length; j += 1) {
          if (snapGrid[j] > -newPosition) {
            nextSlide = j;
            break;
          }
        }

        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {
          newPosition = snapGrid[nextSlide];
        } else {
          newPosition = snapGrid[nextSlide - 1];
        }

        newPosition = -newPosition;
      }

      if (needsLoopFix) {
        swiper.once('transitionEnd', function () {
          swiper.loopFix();
        });
      } // Fix duration


      if (swiper.velocity !== 0) {
        if (rtl) {
          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);
        } else {
          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);
        }
      } else if (params.freeModeSticky) {
        swiper.slideToClosest();
        return;
      }

      if (params.freeModeMomentumBounce && doBounce) {
        swiper.updateProgress(afterBouncePosition);
        swiper.setTransition(momentumDuration);
        swiper.setTranslate(newPosition);
        swiper.transitionStart(true, swiper.swipeDirection);
        swiper.animating = true;
        $wrapperEl.transitionEnd(function () {
          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;
          swiper.emit('momentumBounce');
          swiper.setTransition(params.speed);
          swiper.setTranslate(afterBouncePosition);
          $wrapperEl.transitionEnd(function () {
            if (!swiper || swiper.destroyed) return;
            swiper.transitionEnd();
          });
        });
      } else if (swiper.velocity) {
        swiper.updateProgress(newPosition);
        swiper.setTransition(momentumDuration);
        swiper.setTranslate(newPosition);
        swiper.transitionStart(true, swiper.swipeDirection);

        if (!swiper.animating) {
          swiper.animating = true;
          $wrapperEl.transitionEnd(function () {
            if (!swiper || swiper.destroyed) return;
            swiper.transitionEnd();
          });
        }
      } else {
        swiper.updateProgress(newPosition);
      }

      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    } else if (params.freeModeSticky) {
      swiper.slideToClosest();
      return;
    }

    if (!params.freeModeMomentum || timeDiff >= params.longSwipesMs) {
      swiper.updateProgress();
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }

    return;
  } // Find current slide


  var stopIndex = 0;
  var groupSize = swiper.slidesSizesGrid[0];

  for (var i = 0; i < slidesGrid.length; i += params.slidesPerGroup) {
    if (typeof slidesGrid[i + params.slidesPerGroup] !== 'undefined') {
      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + params.slidesPerGroup]) {
        stopIndex = i;
        groupSize = slidesGrid[i + params.slidesPerGroup] - slidesGrid[i];
      }
    } else if (currentPos >= slidesGrid[i]) {
      stopIndex = i;
      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
    }
  } // Find current slide size


  var ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;

  if (timeDiff > params.longSwipesMs) {
    // Long touches
    if (!params.longSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }

    if (swiper.swipeDirection === 'next') {
      if (ratio >= params.longSwipesRatio) swiper.slideTo(stopIndex + params.slidesPerGroup);else swiper.slideTo(stopIndex);
    }

    if (swiper.swipeDirection === 'prev') {
      if (ratio > 1 - params.longSwipesRatio) swiper.slideTo(stopIndex + params.slidesPerGroup);else swiper.slideTo(stopIndex);
    }
  } else {
    // Short swipes
    if (!params.shortSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }

    if (swiper.swipeDirection === 'next') {
      swiper.slideTo(stopIndex + params.slidesPerGroup);
    }

    if (swiper.swipeDirection === 'prev') {
      swiper.slideTo(stopIndex);
    }
  }
}

function onResize() {
  var swiper = this;
  var params = swiper.params,
      el = swiper.el;
  if (el && el.offsetWidth === 0) return; // Breakpoints

  if (params.breakpoints) {
    swiper.setBreakpoint();
  } // Save locks


  var allowSlideNext = swiper.allowSlideNext,
      allowSlidePrev = swiper.allowSlidePrev,
      snapGrid = swiper.snapGrid; // Disable locks on resize

  swiper.allowSlideNext = true;
  swiper.allowSlidePrev = true;
  swiper.updateSize();
  swiper.updateSlides();

  if (params.freeMode) {
    var newTranslate = Math.min(Math.max(swiper.translate, swiper.maxTranslate()), swiper.minTranslate());
    swiper.setTranslate(newTranslate);
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();

    if (params.autoHeight) {
      swiper.updateAutoHeight();
    }
  } else {
    swiper.updateSlidesClasses();

    if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
      swiper.slideTo(swiper.slides.length - 1, 0, false, true);
    } else {
      swiper.slideTo(swiper.activeIndex, 0, false, true);
    }
  } // Return locks after resize


  swiper.allowSlidePrev = allowSlidePrev;
  swiper.allowSlideNext = allowSlideNext;

  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
    swiper.checkOverflow();
  }
}

function onClick(e) {
  var swiper = this;

  if (!swiper.allowClick) {
    if (swiper.params.preventClicks) e.preventDefault();

    if (swiper.params.preventClicksPropagation && swiper.animating) {
      e.stopPropagation();
      e.stopImmediatePropagation();
    }
  }
}

function attachEvents() {
  var swiper = this;
  var params = swiper.params,
      touchEvents = swiper.touchEvents,
      el = swiper.el,
      wrapperEl = swiper.wrapperEl;
  {
    swiper.onTouchStart = onTouchStart.bind(swiper);
    swiper.onTouchMove = onTouchMove.bind(swiper);
    swiper.onTouchEnd = onTouchEnd.bind(swiper);
  }
  swiper.onClick = onClick.bind(swiper);
  var target = params.touchEventsTarget === 'container' ? el : wrapperEl;
  var capture = !!params.nested; // Touch Events

  {
    if (!Support.touch && (Support.pointerEvents || Support.prefixedPointerEvents)) {
      target.addEventListener(touchEvents.start, swiper.onTouchStart, false);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].addEventListener(touchEvents.move, swiper.onTouchMove, capture);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].addEventListener(touchEvents.end, swiper.onTouchEnd, false);
    } else {
      if (Support.touch) {
        var passiveListener = touchEvents.start === 'touchstart' && Support.passiveListener && params.passiveListeners ? {
          passive: true,
          capture: false
        } : false;
        target.addEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
        target.addEventListener(touchEvents.move, swiper.onTouchMove, Support.passiveListener ? {
          passive: false,
          capture: capture
        } : capture);
        target.addEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);
      }

      if (params.simulateTouch && !Device.ios && !Device.android || params.simulateTouch && !Support.touch && Device.ios) {
        target.addEventListener('mousedown', swiper.onTouchStart, false);
        ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].addEventListener('mousemove', swiper.onTouchMove, capture);
        ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].addEventListener('mouseup', swiper.onTouchEnd, false);
      }
    } // Prevent Links Clicks


    if (params.preventClicks || params.preventClicksPropagation) {
      target.addEventListener('click', swiper.onClick, true);
    }
  } // Resize handler

  swiper.on(Device.ios || Device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize, true);
}

function detachEvents() {
  var swiper = this;
  var params = swiper.params,
      touchEvents = swiper.touchEvents,
      el = swiper.el,
      wrapperEl = swiper.wrapperEl;
  var target = params.touchEventsTarget === 'container' ? el : wrapperEl;
  var capture = !!params.nested; // Touch Events

  {
    if (!Support.touch && (Support.pointerEvents || Support.prefixedPointerEvents)) {
      target.removeEventListener(touchEvents.start, swiper.onTouchStart, false);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].removeEventListener(touchEvents.end, swiper.onTouchEnd, false);
    } else {
      if (Support.touch) {
        var passiveListener = touchEvents.start === 'onTouchStart' && Support.passiveListener && params.passiveListeners ? {
          passive: true,
          capture: false
        } : false;
        target.removeEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
        target.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
        target.removeEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);
      }

      if (params.simulateTouch && !Device.ios && !Device.android || params.simulateTouch && !Support.touch && Device.ios) {
        target.removeEventListener('mousedown', swiper.onTouchStart, false);
        ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].removeEventListener('mousemove', swiper.onTouchMove, capture);
        ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].removeEventListener('mouseup', swiper.onTouchEnd, false);
      }
    } // Prevent Links Clicks


    if (params.preventClicks || params.preventClicksPropagation) {
      target.removeEventListener('click', swiper.onClick, true);
    }
  } // Resize handler

  swiper.off(Device.ios || Device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize);
}

var events = {
  attachEvents: attachEvents,
  detachEvents: detachEvents
};

function setBreakpoint() {
  var swiper = this;
  var activeIndex = swiper.activeIndex,
      initialized = swiper.initialized,
      _swiper$loopedSlides = swiper.loopedSlides,
      loopedSlides = _swiper$loopedSlides === void 0 ? 0 : _swiper$loopedSlides,
      params = swiper.params;
  var breakpoints = params.breakpoints;
  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return; // Set breakpoint for window width and update parameters

  var breakpoint = swiper.getBreakpoint(breakpoints);

  if (breakpoint && swiper.currentBreakpoint !== breakpoint) {
    var breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;

    if (breakpointOnlyParams) {
      ['slidesPerView', 'spaceBetween', 'slidesPerGroup'].forEach(function (param) {
        var paramValue = breakpointOnlyParams[param];
        if (typeof paramValue === 'undefined') return;

        if (param === 'slidesPerView' && (paramValue === 'AUTO' || paramValue === 'auto')) {
          breakpointOnlyParams[param] = 'auto';
        } else if (param === 'slidesPerView') {
          breakpointOnlyParams[param] = parseFloat(paramValue);
        } else {
          breakpointOnlyParams[param] = parseInt(paramValue, 10);
        }
      });
    }

    var breakpointParams = breakpointOnlyParams || swiper.originalParams;
    var directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;
    var needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);

    if (directionChanged && initialized) {
      swiper.changeDirection();
    }

    Utils.extend(swiper.params, breakpointParams);
    Utils.extend(swiper, {
      allowTouchMove: swiper.params.allowTouchMove,
      allowSlideNext: swiper.params.allowSlideNext,
      allowSlidePrev: swiper.params.allowSlidePrev
    });
    swiper.currentBreakpoint = breakpoint;

    if (needsReLoop && initialized) {
      swiper.loopDestroy();
      swiper.loopCreate();
      swiper.updateSlides();
      swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);
    }

    swiper.emit('breakpoint', breakpointParams);
  }
}

function getBreakpoint(breakpoints) {
  var swiper = this; // Get breakpoint for window width

  if (!breakpoints) return undefined;
  var breakpoint = false;
  var points = [];
  Object.keys(breakpoints).forEach(function (point) {
    points.push(point);
  });
  points.sort(function (a, b) {
    return parseInt(a, 10) - parseInt(b, 10);
  });

  for (var i = 0; i < points.length; i += 1) {
    var point = points[i];

    if (swiper.params.breakpointsInverse) {
      if (point <= ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].innerWidth) {
        breakpoint = point;
      }
    } else if (point >= ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].innerWidth && !breakpoint) {
      breakpoint = point;
    }
  }

  return breakpoint || 'max';
}

var breakpoints = {
  setBreakpoint: setBreakpoint,
  getBreakpoint: getBreakpoint
};

function addClasses() {
  var swiper = this;
  var classNames = swiper.classNames,
      params = swiper.params,
      rtl = swiper.rtl,
      $el = swiper.$el;
  var suffixes = [];
  suffixes.push('initialized');
  suffixes.push(params.direction);

  if (params.freeMode) {
    suffixes.push('free-mode');
  }

  if (!Support.flexbox) {
    suffixes.push('no-flexbox');
  }

  if (params.autoHeight) {
    suffixes.push('autoheight');
  }

  if (rtl) {
    suffixes.push('rtl');
  }

  if (params.slidesPerColumn > 1) {
    suffixes.push('multirow');
  }

  if (Device.android) {
    suffixes.push('android');
  }

  if (Device.ios) {
    suffixes.push('ios');
  } // WP8 Touch Events Fix


  if ((Browser.isIE || Browser.isEdge) && (Support.pointerEvents || Support.prefixedPointerEvents)) {
    suffixes.push("wp8-".concat(params.direction));
  }

  suffixes.forEach(function (suffix) {
    classNames.push(params.containerModifierClass + suffix);
  });
  $el.addClass(classNames.join(' '));
}

function removeClasses() {
  var swiper = this;
  var $el = swiper.$el,
      classNames = swiper.classNames;
  $el.removeClass(classNames.join(' '));
}

var classes = {
  addClasses: addClasses,
  removeClasses: removeClasses
};

function loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {
  var image;

  function onReady() {
    if (callback) callback();
  }

  if (!imageEl.complete || !checkForComplete) {
    if (src) {
      image = new ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].Image();
      image.onload = onReady;
      image.onerror = onReady;

      if (sizes) {
        image.sizes = sizes;
      }

      if (srcset) {
        image.srcset = srcset;
      }

      if (src) {
        image.src = src;
      }
    } else {
      onReady();
    }
  } else {
    // image already loaded...
    onReady();
  }
}

function preloadImages() {
  var swiper = this;
  swiper.imagesToLoad = swiper.$el.find('img');

  function onReady() {
    if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) return;
    if (swiper.imagesLoaded !== undefined) swiper.imagesLoaded += 1;

    if (swiper.imagesLoaded === swiper.imagesToLoad.length) {
      if (swiper.params.updateOnImagesReady) swiper.update();
      swiper.emit('imagesReady');
    }
  }

  for (var i = 0; i < swiper.imagesToLoad.length; i += 1) {
    var imageEl = swiper.imagesToLoad[i];
    swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute('src'), imageEl.srcset || imageEl.getAttribute('srcset'), imageEl.sizes || imageEl.getAttribute('sizes'), true, onReady);
  }
}

var images = {
  loadImage: loadImage,
  preloadImages: preloadImages
};

function checkOverflow() {
  var swiper = this;
  var wasLocked = swiper.isLocked;
  swiper.isLocked = swiper.snapGrid.length === 1;
  swiper.allowSlideNext = !swiper.isLocked;
  swiper.allowSlidePrev = !swiper.isLocked; // events

  if (wasLocked !== swiper.isLocked) swiper.emit(swiper.isLocked ? 'lock' : 'unlock');

  if (wasLocked && wasLocked !== swiper.isLocked) {
    swiper.isEnd = false;
    swiper.navigation.update();
  }
}

var checkOverflow$1 = {
  checkOverflow: checkOverflow
};
var defaults = {
  init: true,
  direction: 'horizontal',
  touchEventsTarget: 'container',
  initialSlide: 0,
  speed: 300,
  //
  preventInteractionOnTransition: false,
  // To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).
  edgeSwipeDetection: false,
  edgeSwipeThreshold: 20,
  // Free mode
  freeMode: false,
  freeModeMomentum: true,
  freeModeMomentumRatio: 1,
  freeModeMomentumBounce: true,
  freeModeMomentumBounceRatio: 1,
  freeModeMomentumVelocityRatio: 1,
  freeModeSticky: false,
  freeModeMinimumVelocity: 0.02,
  // Autoheight
  autoHeight: false,
  // Set wrapper width
  setWrapperSize: false,
  // Virtual Translate
  virtualTranslate: false,
  // Effects
  effect: 'slide',
  // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'
  // Breakpoints
  breakpoints: undefined,
  breakpointsInverse: false,
  // Slides grid
  spaceBetween: 0,
  slidesPerView: 1,
  slidesPerColumn: 1,
  slidesPerColumnFill: 'column',
  slidesPerGroup: 1,
  centeredSlides: false,
  slidesOffsetBefore: 0,
  // in px
  slidesOffsetAfter: 0,
  // in px
  normalizeSlideIndex: true,
  centerInsufficientSlides: false,
  // Disable swiper and hide navigation when container not overflow
  watchOverflow: false,
  // Round length
  roundLengths: false,
  // Touches
  touchRatio: 1,
  touchAngle: 45,
  simulateTouch: true,
  shortSwipes: true,
  longSwipes: true,
  longSwipesRatio: 0.5,
  longSwipesMs: 300,
  followFinger: true,
  allowTouchMove: true,
  threshold: 0,
  touchMoveStopPropagation: true,
  touchStartPreventDefault: true,
  touchStartForcePreventDefault: false,
  touchReleaseOnEdges: false,
  // Unique Navigation Elements
  uniqueNavElements: true,
  // Resistance
  resistance: true,
  resistanceRatio: 0.85,
  // Progress
  watchSlidesProgress: false,
  watchSlidesVisibility: false,
  // Cursor
  grabCursor: false,
  // Clicks
  preventClicks: true,
  preventClicksPropagation: true,
  slideToClickedSlide: false,
  // Images
  preloadImages: true,
  updateOnImagesReady: true,
  // loop
  loop: false,
  loopAdditionalSlides: 0,
  loopedSlides: null,
  loopFillGroupWithBlank: false,
  // Swiping/no swiping
  allowSlidePrev: true,
  allowSlideNext: true,
  swipeHandler: null,
  // '.swipe-handler',
  noSwiping: true,
  noSwipingClass: 'swiper-no-swiping',
  noSwipingSelector: null,
  // Passive Listeners
  passiveListeners: true,
  // NS
  containerModifierClass: 'swiper-container-',
  // NEW
  slideClass: 'swiper-slide',
  slideBlankClass: 'swiper-slide-invisible-blank',
  slideActiveClass: 'swiper-slide-active',
  slideDuplicateActiveClass: 'swiper-slide-duplicate-active',
  slideVisibleClass: 'swiper-slide-visible',
  slideDuplicateClass: 'swiper-slide-duplicate',
  slideNextClass: 'swiper-slide-next',
  slideDuplicateNextClass: 'swiper-slide-duplicate-next',
  slidePrevClass: 'swiper-slide-prev',
  slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',
  wrapperClass: 'swiper-wrapper',
  // Callbacks
  runCallbacksOnInit: true
};
/* eslint no-param-reassign: "off" */

var prototypes = {
  update: update,
  translate: translate,
  transition: transition,
  slide: slide,
  loop: loop,
  grabCursor: grabCursor,
  manipulation: manipulation,
  events: events,
  breakpoints: breakpoints,
  checkOverflow: checkOverflow$1,
  classes: classes,
  images: images
};
var extendedDefaults = {};

var Swiper =
/*#__PURE__*/
function (_SwiperClass) {
  _inherits(Swiper, _SwiperClass);

  function Swiper() {
    var _this;

    _classCallCheck(this, Swiper);

    var el;
    var params;

    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }

    if (args.length === 1 && args[0].constructor && args[0].constructor === Object) {
      params = args[0];
    } else {
      el = args[0];
      params = args[1];
    }

    if (!params) params = {};
    params = Utils.extend({}, params);
    if (el && !params.el) params.el = el;
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Swiper).call(this, params));
    Object.keys(prototypes).forEach(function (prototypeGroup) {
      Object.keys(prototypes[prototypeGroup]).forEach(function (protoMethod) {
        if (!Swiper.prototype[protoMethod]) {
          Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
        }
      });
    }); // Swiper Instance

    var swiper = _assertThisInitialized(_this);

    if (typeof swiper.modules === 'undefined') {
      swiper.modules = {};
    }

    Object.keys(swiper.modules).forEach(function (moduleName) {
      var module = swiper.modules[moduleName];

      if (module.params) {
        var moduleParamName = Object.keys(module.params)[0];
        var moduleParams = module.params[moduleParamName];
        if (_typeof(moduleParams) !== 'object' || moduleParams === null) return;
        if (!(moduleParamName in params && 'enabled' in moduleParams)) return;

        if (params[moduleParamName] === true) {
          params[moduleParamName] = {
            enabled: true
          };
        }

        if (_typeof(params[moduleParamName]) === 'object' && !('enabled' in params[moduleParamName])) {
          params[moduleParamName].enabled = true;
        }

        if (!params[moduleParamName]) params[moduleParamName] = {
          enabled: false
        };
      }
    }); // Extend defaults with modules params

    var swiperParams = Utils.extend({}, defaults);
    swiper.useModulesParams(swiperParams); // Extend defaults with passed params

    swiper.params = Utils.extend({}, swiperParams, extendedDefaults, params);
    swiper.originalParams = Utils.extend({}, swiper.params);
    swiper.passedParams = Utils.extend({}, params); // Save Dom lib

    swiper.$ = dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"]; // Find el

    var $el = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(swiper.params.el);
    el = $el[0];

    if (!el) {
      return _possibleConstructorReturn(_this, undefined);
    }

    if ($el.length > 1) {
      var swipers = [];
      $el.each(function (index, containerEl) {
        var newParams = Utils.extend({}, params, {
          el: containerEl
        });
        swipers.push(new Swiper(newParams));
      });
      return _possibleConstructorReturn(_this, swipers);
    }

    el.swiper = swiper;
    $el.data('swiper', swiper); // Find Wrapper

    var $wrapperEl = $el.children(".".concat(swiper.params.wrapperClass)); // Extend Swiper

    Utils.extend(swiper, {
      $el: $el,
      el: el,
      $wrapperEl: $wrapperEl,
      wrapperEl: $wrapperEl[0],
      // Classes
      classNames: [],
      // Slides
      slides: Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(),
      slidesGrid: [],
      snapGrid: [],
      slidesSizesGrid: [],
      // isDirection
      isHorizontal: function isHorizontal() {
        return swiper.params.direction === 'horizontal';
      },
      isVertical: function isVertical() {
        return swiper.params.direction === 'vertical';
      },
      // RTL
      rtl: el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl',
      rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
      wrongRTL: $wrapperEl.css('display') === '-webkit-box',
      // Indexes
      activeIndex: 0,
      realIndex: 0,
      //
      isBeginning: true,
      isEnd: false,
      // Props
      translate: 0,
      previousTranslate: 0,
      progress: 0,
      velocity: 0,
      animating: false,
      // Locks
      allowSlideNext: swiper.params.allowSlideNext,
      allowSlidePrev: swiper.params.allowSlidePrev,
      // Touch Events
      touchEvents: function touchEvents() {
        var touch = ['touchstart', 'touchmove', 'touchend'];
        var desktop = ['mousedown', 'mousemove', 'mouseup'];

        if (Support.pointerEvents) {
          desktop = ['pointerdown', 'pointermove', 'pointerup'];
        } else if (Support.prefixedPointerEvents) {
          desktop = ['MSPointerDown', 'MSPointerMove', 'MSPointerUp'];
        }

        swiper.touchEventsTouch = {
          start: touch[0],
          move: touch[1],
          end: touch[2]
        };
        swiper.touchEventsDesktop = {
          start: desktop[0],
          move: desktop[1],
          end: desktop[2]
        };
        return Support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;
      }(),
      touchEventsData: {
        isTouched: undefined,
        isMoved: undefined,
        allowTouchCallbacks: undefined,
        touchStartTime: undefined,
        isScrolling: undefined,
        currentTranslate: undefined,
        startTranslate: undefined,
        allowThresholdMove: undefined,
        // Form elements to match
        formElements: 'input, select, option, textarea, button, video',
        // Last click time
        lastClickTime: Utils.now(),
        clickTimeout: undefined,
        // Velocities
        velocities: [],
        allowMomentumBounce: undefined,
        isTouchEvent: undefined,
        startMoving: undefined
      },
      // Clicks
      allowClick: true,
      // Touches
      allowTouchMove: swiper.params.allowTouchMove,
      touches: {
        startX: 0,
        startY: 0,
        currentX: 0,
        currentY: 0,
        diff: 0
      },
      // Images
      imagesToLoad: [],
      imagesLoaded: 0
    }); // Install Modules

    swiper.useModules(); // Init

    if (swiper.params.init) {
      swiper.init();
    } // Return app instance


    return _possibleConstructorReturn(_this, swiper);
  }

  _createClass(Swiper, [{
    key: "slidesPerViewDynamic",
    value: function slidesPerViewDynamic() {
      var swiper = this;
      var params = swiper.params,
          slides = swiper.slides,
          slidesGrid = swiper.slidesGrid,
          swiperSize = swiper.size,
          activeIndex = swiper.activeIndex;
      var spv = 1;

      if (params.centeredSlides) {
        var slideSize = slides[activeIndex].swiperSlideSize;
        var breakLoop;

        for (var i = activeIndex + 1; i < slides.length; i += 1) {
          if (slides[i] && !breakLoop) {
            slideSize += slides[i].swiperSlideSize;
            spv += 1;
            if (slideSize > swiperSize) breakLoop = true;
          }
        }

        for (var _i7 = activeIndex - 1; _i7 >= 0; _i7 -= 1) {
          if (slides[_i7] && !breakLoop) {
            slideSize += slides[_i7].swiperSlideSize;
            spv += 1;
            if (slideSize > swiperSize) breakLoop = true;
          }
        }
      } else {
        for (var _i8 = activeIndex + 1; _i8 < slides.length; _i8 += 1) {
          if (slidesGrid[_i8] - slidesGrid[activeIndex] < swiperSize) {
            spv += 1;
          }
        }
      }

      return spv;
    }
  }, {
    key: "update",
    value: function update() {
      var swiper = this;
      if (!swiper || swiper.destroyed) return;
      var snapGrid = swiper.snapGrid,
          params = swiper.params; // Breakpoints

      if (params.breakpoints) {
        swiper.setBreakpoint();
      }

      swiper.updateSize();
      swiper.updateSlides();
      swiper.updateProgress();
      swiper.updateSlidesClasses();

      function setTranslate() {
        var translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;
        var newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
        swiper.setTranslate(newTranslate);
        swiper.updateActiveIndex();
        swiper.updateSlidesClasses();
      }

      var translated;

      if (swiper.params.freeMode) {
        setTranslate();

        if (swiper.params.autoHeight) {
          swiper.updateAutoHeight();
        }
      } else {
        if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
          translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);
        } else {
          translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
        }

        if (!translated) {
          setTranslate();
        }
      }

      if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
        swiper.checkOverflow();
      }

      swiper.emit('update');
    }
  }, {
    key: "changeDirection",
    value: function changeDirection(newDirection) {
      var needUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var swiper = this;
      var currentDirection = swiper.params.direction;

      if (!newDirection) {
        // eslint-disable-next-line
        newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';
      }

      if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {
        return swiper;
      }

      if (currentDirection === 'vertical') {
        swiper.$el.removeClass("".concat(swiper.params.containerModifierClass, "vertical wp8-vertical")).addClass("".concat(swiper.params.containerModifierClass).concat(newDirection));

        if ((Browser.isIE || Browser.isEdge) && (Support.pointerEvents || Support.prefixedPointerEvents)) {
          swiper.$el.addClass("".concat(swiper.params.containerModifierClass, "wp8-").concat(newDirection));
        }
      }

      if (currentDirection === 'horizontal') {
        swiper.$el.removeClass("".concat(swiper.params.containerModifierClass, "horizontal wp8-horizontal")).addClass("".concat(swiper.params.containerModifierClass).concat(newDirection));

        if ((Browser.isIE || Browser.isEdge) && (Support.pointerEvents || Support.prefixedPointerEvents)) {
          swiper.$el.addClass("".concat(swiper.params.containerModifierClass, "wp8-").concat(newDirection));
        }
      }

      swiper.params.direction = newDirection;
      swiper.slides.each(function (slideIndex, slideEl) {
        if (newDirection === 'vertical') {
          slideEl.style.width = '';
        } else {
          slideEl.style.height = '';
        }
      });
      swiper.emit('changeDirection');
      if (needUpdate) swiper.update();
      return swiper;
    }
  }, {
    key: "init",
    value: function init() {
      var swiper = this;
      if (swiper.initialized) return;
      swiper.emit('beforeInit'); // Set breakpoint

      if (swiper.params.breakpoints) {
        swiper.setBreakpoint();
      } // Add Classes


      swiper.addClasses(); // Create loop

      if (swiper.params.loop) {
        swiper.loopCreate();
      } // Update size


      swiper.updateSize(); // Update slides

      swiper.updateSlides();

      if (swiper.params.watchOverflow) {
        swiper.checkOverflow();
      } // Set Grab Cursor


      if (swiper.params.grabCursor) {
        swiper.setGrabCursor();
      }

      if (swiper.params.preloadImages) {
        swiper.preloadImages();
      } // Slide To Initial Slide


      if (swiper.params.loop) {
        swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit);
      } else {
        swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit);
      } // Attach events


      swiper.attachEvents(); // Init Flag

      swiper.initialized = true; // Emit

      swiper.emit('init');
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var deleteInstance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var cleanStyles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var swiper = this;
      var params = swiper.params,
          $el = swiper.$el,
          $wrapperEl = swiper.$wrapperEl,
          slides = swiper.slides;

      if (typeof swiper.params === 'undefined' || swiper.destroyed) {
        return null;
      }

      swiper.emit('beforeDestroy'); // Init Flag

      swiper.initialized = false; // Detach events

      swiper.detachEvents(); // Destroy loop

      if (params.loop) {
        swiper.loopDestroy();
      } // Cleanup styles


      if (cleanStyles) {
        swiper.removeClasses();
        $el.removeAttr('style');
        $wrapperEl.removeAttr('style');

        if (slides && slides.length) {
          slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-slide-index').removeAttr('data-swiper-column').removeAttr('data-swiper-row');
        }
      }

      swiper.emit('destroy'); // Detach emitter events

      Object.keys(swiper.eventsListeners).forEach(function (eventName) {
        swiper.off(eventName);
      });

      if (deleteInstance !== false) {
        swiper.$el[0].swiper = null;
        swiper.$el.data('swiper', null);
        Utils.deleteProps(swiper);
      }

      swiper.destroyed = true;
      return null;
    }
  }], [{
    key: "extendDefaults",
    value: function extendDefaults(newDefaults) {
      Utils.extend(extendedDefaults, newDefaults);
    }
  }, {
    key: "extendedDefaults",
    get: function get() {
      return extendedDefaults;
    }
  }, {
    key: "defaults",
    get: function get() {
      return defaults;
    }
  }, {
    key: "Class",
    get: function get() {
      return SwiperClass;
    }
  }, {
    key: "$",
    get: function get() {
      return dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"];
    }
  }]);

  return Swiper;
}(SwiperClass);

var Device$1 = {
  name: 'device',
  proto: {
    device: Device
  },
  "static": {
    device: Device
  }
};
var Support$1 = {
  name: 'support',
  proto: {
    support: Support
  },
  "static": {
    support: Support
  }
};
var Browser$1 = {
  name: 'browser',
  proto: {
    browser: Browser
  },
  "static": {
    browser: Browser
  }
};
var Resize = {
  name: 'resize',
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      resize: {
        resizeHandler: function resizeHandler() {
          if (!swiper || swiper.destroyed || !swiper.initialized) return;
          swiper.emit('beforeResize');
          swiper.emit('resize');
        },
        orientationChangeHandler: function orientationChangeHandler() {
          if (!swiper || swiper.destroyed || !swiper.initialized) return;
          swiper.emit('orientationchange');
        }
      }
    });
  },
  on: {
    init: function init() {
      var swiper = this; // Emit resize

      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].addEventListener('resize', swiper.resize.resizeHandler); // Emit orientationchange

      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].addEventListener('orientationchange', swiper.resize.orientationChangeHandler);
    },
    destroy: function destroy() {
      var swiper = this;
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].removeEventListener('resize', swiper.resize.resizeHandler);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].removeEventListener('orientationchange', swiper.resize.orientationChangeHandler);
    }
  }
};
var Observer = {
  func: ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].MutationObserver || ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].WebkitMutationObserver,
  attach: function attach(target) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var swiper = this;
    var ObserverFunc = Observer.func;
    var observer = new ObserverFunc(function (mutations) {
      // The observerUpdate event should only be triggered
      // once despite the number of mutations.  Additional
      // triggers are redundant and are very costly
      if (mutations.length === 1) {
        swiper.emit('observerUpdate', mutations[0]);
        return;
      }

      var observerUpdate = function observerUpdate() {
        swiper.emit('observerUpdate', mutations[0]);
      };

      if (ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].requestAnimationFrame) {
        ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].requestAnimationFrame(observerUpdate);
      } else {
        ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].setTimeout(observerUpdate, 0);
      }
    });
    observer.observe(target, {
      attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
      childList: typeof options.childList === 'undefined' ? true : options.childList,
      characterData: typeof options.characterData === 'undefined' ? true : options.characterData
    });
    swiper.observer.observers.push(observer);
  },
  init: function init() {
    var swiper = this;
    if (!Support.observer || !swiper.params.observer) return;

    if (swiper.params.observeParents) {
      var containerParents = swiper.$el.parents();

      for (var i = 0; i < containerParents.length; i += 1) {
        swiper.observer.attach(containerParents[i]);
      }
    } // Observe container


    swiper.observer.attach(swiper.$el[0], {
      childList: swiper.params.observeSlideChildren
    }); // Observe wrapper

    swiper.observer.attach(swiper.$wrapperEl[0], {
      attributes: false
    });
  },
  destroy: function destroy() {
    var swiper = this;
    swiper.observer.observers.forEach(function (observer) {
      observer.disconnect();
    });
    swiper.observer.observers = [];
  }
};
var Observer$1 = {
  name: 'observer',
  params: {
    observer: false,
    observeParents: false,
    observeSlideChildren: false
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      observer: {
        init: Observer.init.bind(swiper),
        attach: Observer.attach.bind(swiper),
        destroy: Observer.destroy.bind(swiper),
        observers: []
      }
    });
  },
  on: {
    init: function init() {
      var swiper = this;
      swiper.observer.init();
    },
    destroy: function destroy() {
      var swiper = this;
      swiper.observer.destroy();
    }
  }
};
var Virtual = {
  update: function update(force) {
    var swiper = this;
    var _swiper$params = swiper.params,
        slidesPerView = _swiper$params.slidesPerView,
        slidesPerGroup = _swiper$params.slidesPerGroup,
        centeredSlides = _swiper$params.centeredSlides;
    var _swiper$params$virtua = swiper.params.virtual,
        addSlidesBefore = _swiper$params$virtua.addSlidesBefore,
        addSlidesAfter = _swiper$params$virtua.addSlidesAfter;
    var _swiper$virtual = swiper.virtual,
        previousFrom = _swiper$virtual.from,
        previousTo = _swiper$virtual.to,
        slides = _swiper$virtual.slides,
        previousSlidesGrid = _swiper$virtual.slidesGrid,
        renderSlide = _swiper$virtual.renderSlide,
        previousOffset = _swiper$virtual.offset;
    swiper.updateActiveIndex();
    var activeIndex = swiper.activeIndex || 0;
    var offsetProp;
    if (swiper.rtlTranslate) offsetProp = 'right';else offsetProp = swiper.isHorizontal() ? 'left' : 'top';
    var slidesAfter;
    var slidesBefore;

    if (centeredSlides) {
      slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;
      slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;
    } else {
      slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesBefore;
      slidesBefore = slidesPerGroup + addSlidesAfter;
    }

    var from = Math.max((activeIndex || 0) - slidesBefore, 0);
    var to = Math.min((activeIndex || 0) + slidesAfter, slides.length - 1);
    var offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);
    Utils.extend(swiper.virtual, {
      from: from,
      to: to,
      offset: offset,
      slidesGrid: swiper.slidesGrid
    });

    function onRendered() {
      swiper.updateSlides();
      swiper.updateProgress();
      swiper.updateSlidesClasses();

      if (swiper.lazy && swiper.params.lazy.enabled) {
        swiper.lazy.load();
      }
    }

    if (previousFrom === from && previousTo === to && !force) {
      if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {
        swiper.slides.css(offsetProp, "".concat(offset, "px"));
      }

      swiper.updateProgress();
      return;
    }

    if (swiper.params.virtual.renderExternal) {
      swiper.params.virtual.renderExternal.call(swiper, {
        offset: offset,
        from: from,
        to: to,
        slides: function getSlides() {
          var slidesToRender = [];

          for (var i = from; i <= to; i += 1) {
            slidesToRender.push(slides[i]);
          }

          return slidesToRender;
        }()
      });
      onRendered();
      return;
    }

    var prependIndexes = [];
    var appendIndexes = [];

    if (force) {
      swiper.$wrapperEl.find(".".concat(swiper.params.slideClass)).remove();
    } else {
      for (var i = previousFrom; i <= previousTo; i += 1) {
        if (i < from || i > to) {
          swiper.$wrapperEl.find(".".concat(swiper.params.slideClass, "[data-swiper-slide-index=\"").concat(i, "\"]")).remove();
        }
      }
    }

    for (var _i9 = 0; _i9 < slides.length; _i9 += 1) {
      if (_i9 >= from && _i9 <= to) {
        if (typeof previousTo === 'undefined' || force) {
          appendIndexes.push(_i9);
        } else {
          if (_i9 > previousTo) appendIndexes.push(_i9);
          if (_i9 < previousFrom) prependIndexes.push(_i9);
        }
      }
    }

    appendIndexes.forEach(function (index) {
      swiper.$wrapperEl.append(renderSlide(slides[index], index));
    });
    prependIndexes.sort(function (a, b) {
      return b - a;
    }).forEach(function (index) {
      swiper.$wrapperEl.prepend(renderSlide(slides[index], index));
    });
    swiper.$wrapperEl.children('.swiper-slide').css(offsetProp, "".concat(offset, "px"));
    onRendered();
  },
  renderSlide: function renderSlide(slide, index) {
    var swiper = this;
    var params = swiper.params.virtual;

    if (params.cache && swiper.virtual.cache[index]) {
      return swiper.virtual.cache[index];
    }

    var $slideEl = params.renderSlide ? Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(params.renderSlide.call(swiper, slide, index)) : Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])("<div class=\"".concat(swiper.params.slideClass, "\" data-swiper-slide-index=\"").concat(index, "\">").concat(slide, "</div>"));
    if (!$slideEl.attr('data-swiper-slide-index')) $slideEl.attr('data-swiper-slide-index', index);
    if (params.cache) swiper.virtual.cache[index] = $slideEl;
    return $slideEl;
  },
  appendSlide: function appendSlide(slides) {
    var swiper = this;

    if (_typeof(slides) === 'object' && 'length' in slides) {
      for (var i = 0; i < slides.length; i += 1) {
        if (slides[i]) swiper.virtual.slides.push(slides[i]);
      }
    } else {
      swiper.virtual.slides.push(slides);
    }

    swiper.virtual.update(true);
  },
  prependSlide: function prependSlide(slides) {
    var swiper = this;
    var activeIndex = swiper.activeIndex;
    var newActiveIndex = activeIndex + 1;
    var numberOfNewSlides = 1;

    if (Array.isArray(slides)) {
      for (var i = 0; i < slides.length; i += 1) {
        if (slides[i]) swiper.virtual.slides.unshift(slides[i]);
      }

      newActiveIndex = activeIndex + slides.length;
      numberOfNewSlides = slides.length;
    } else {
      swiper.virtual.slides.unshift(slides);
    }

    if (swiper.params.virtual.cache) {
      var cache = swiper.virtual.cache;
      var newCache = {};
      Object.keys(cache).forEach(function (cachedIndex) {
        newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = cache[cachedIndex];
      });
      swiper.virtual.cache = newCache;
    }

    swiper.virtual.update(true);
    swiper.slideTo(newActiveIndex, 0);
  },
  removeSlide: function removeSlide(slidesIndexes) {
    var swiper = this;
    if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) return;
    var activeIndex = swiper.activeIndex;

    if (Array.isArray(slidesIndexes)) {
      for (var i = slidesIndexes.length - 1; i >= 0; i -= 1) {
        swiper.virtual.slides.splice(slidesIndexes[i], 1);

        if (swiper.params.virtual.cache) {
          delete swiper.virtual.cache[slidesIndexes[i]];
        }

        if (slidesIndexes[i] < activeIndex) activeIndex -= 1;
        activeIndex = Math.max(activeIndex, 0);
      }
    } else {
      swiper.virtual.slides.splice(slidesIndexes, 1);

      if (swiper.params.virtual.cache) {
        delete swiper.virtual.cache[slidesIndexes];
      }

      if (slidesIndexes < activeIndex) activeIndex -= 1;
      activeIndex = Math.max(activeIndex, 0);
    }

    swiper.virtual.update(true);
    swiper.slideTo(activeIndex, 0);
  },
  removeAllSlides: function removeAllSlides() {
    var swiper = this;
    swiper.virtual.slides = [];

    if (swiper.params.virtual.cache) {
      swiper.virtual.cache = {};
    }

    swiper.virtual.update(true);
    swiper.slideTo(0, 0);
  }
};
var Virtual$1 = {
  name: 'virtual',
  params: {
    virtual: {
      enabled: false,
      slides: [],
      cache: true,
      renderSlide: null,
      renderExternal: null,
      addSlidesBefore: 0,
      addSlidesAfter: 0
    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      virtual: {
        update: Virtual.update.bind(swiper),
        appendSlide: Virtual.appendSlide.bind(swiper),
        prependSlide: Virtual.prependSlide.bind(swiper),
        removeSlide: Virtual.removeSlide.bind(swiper),
        removeAllSlides: Virtual.removeAllSlides.bind(swiper),
        renderSlide: Virtual.renderSlide.bind(swiper),
        slides: swiper.params.virtual.slides,
        cache: {}
      }
    });
  },
  on: {
    beforeInit: function beforeInit() {
      var swiper = this;
      if (!swiper.params.virtual.enabled) return;
      swiper.classNames.push("".concat(swiper.params.containerModifierClass, "virtual"));
      var overwriteParams = {
        watchSlidesProgress: true
      };
      Utils.extend(swiper.params, overwriteParams);
      Utils.extend(swiper.originalParams, overwriteParams);

      if (!swiper.params.initialSlide) {
        swiper.virtual.update();
      }
    },
    setTranslate: function setTranslate() {
      var swiper = this;
      if (!swiper.params.virtual.enabled) return;
      swiper.virtual.update();
    }
  }
};
var Keyboard = {
  handle: function handle(event) {
    var swiper = this;
    var rtl = swiper.rtlTranslate;
    var e = event;
    if (e.originalEvent) e = e.originalEvent; // jquery fix

    var kc = e.keyCode || e.charCode; // Directions locks

    if (!swiper.allowSlideNext && (swiper.isHorizontal() && kc === 39 || swiper.isVertical() && kc === 40)) {
      return false;
    }

    if (!swiper.allowSlidePrev && (swiper.isHorizontal() && kc === 37 || swiper.isVertical() && kc === 38)) {
      return false;
    }

    if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {
      return undefined;
    }

    if (ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement && ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement.nodeName && (ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement.nodeName.toLowerCase() === 'input' || ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement.nodeName.toLowerCase() === 'textarea')) {
      return undefined;
    }

    if (swiper.params.keyboard.onlyInViewport && (kc === 37 || kc === 39 || kc === 38 || kc === 40)) {
      var inView = false; // Check that swiper should be inside of visible area of window

      if (swiper.$el.parents(".".concat(swiper.params.slideClass)).length > 0 && swiper.$el.parents(".".concat(swiper.params.slideActiveClass)).length === 0) {
        return undefined;
      }

      var windowWidth = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].innerWidth;
      var windowHeight = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].innerHeight;
      var swiperOffset = swiper.$el.offset();
      if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;
      var swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiper.width, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiper.height], [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height]];

      for (var i = 0; i < swiperCoord.length; i += 1) {
        var point = swiperCoord[i];

        if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {
          inView = true;
        }
      }

      if (!inView) return undefined;
    }

    if (swiper.isHorizontal()) {
      if (kc === 37 || kc === 39) {
        if (e.preventDefault) e.preventDefault();else e.returnValue = false;
      }

      if (kc === 39 && !rtl || kc === 37 && rtl) swiper.slideNext();
      if (kc === 37 && !rtl || kc === 39 && rtl) swiper.slidePrev();
    } else {
      if (kc === 38 || kc === 40) {
        if (e.preventDefault) e.preventDefault();else e.returnValue = false;
      }

      if (kc === 40) swiper.slideNext();
      if (kc === 38) swiper.slidePrev();
    }

    swiper.emit('keyPress', kc);
    return undefined;
  },
  enable: function enable() {
    var swiper = this;
    if (swiper.keyboard.enabled) return;
    Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"]).on('keydown', swiper.keyboard.handle);
    swiper.keyboard.enabled = true;
  },
  disable: function disable() {
    var swiper = this;
    if (!swiper.keyboard.enabled) return;
    Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"]).off('keydown', swiper.keyboard.handle);
    swiper.keyboard.enabled = false;
  }
};
var Keyboard$1 = {
  name: 'keyboard',
  params: {
    keyboard: {
      enabled: false,
      onlyInViewport: true
    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      keyboard: {
        enabled: false,
        enable: Keyboard.enable.bind(swiper),
        disable: Keyboard.disable.bind(swiper),
        handle: Keyboard.handle.bind(swiper)
      }
    });
  },
  on: {
    init: function init() {
      var swiper = this;

      if (swiper.params.keyboard.enabled) {
        swiper.keyboard.enable();
      }
    },
    destroy: function destroy() {
      var swiper = this;

      if (swiper.keyboard.enabled) {
        swiper.keyboard.disable();
      }
    }
  }
};

function isEventSupported() {
  var eventName = 'onwheel';
  var isSupported = eventName in ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"];

  if (!isSupported) {
    var element = ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].implementation && ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].implementation.hasFeature // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  && ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].implementation.hasFeature('', '') !== true) {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

var Mousewheel = {
  lastScrollTime: Utils.now(),
  event: function getEvent() {
    if (ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.userAgent.indexOf('firefox') > -1) return 'DOMMouseScroll';
    return isEventSupported() ? 'wheel' : 'mousewheel';
  }(),
  normalize: function normalize(e) {
    // Reasonable defaults
    var PIXEL_STEP = 10;
    var LINE_HEIGHT = 40;
    var PAGE_HEIGHT = 800;
    var sX = 0;
    var sY = 0; // spinX, spinY

    var pX = 0;
    var pY = 0; // pixelX, pixelY
    // Legacy

    if ('detail' in e) {
      sY = e.detail;
    }

    if ('wheelDelta' in e) {
      sY = -e.wheelDelta / 120;
    }

    if ('wheelDeltaY' in e) {
      sY = -e.wheelDeltaY / 120;
    }

    if ('wheelDeltaX' in e) {
      sX = -e.wheelDeltaX / 120;
    } // side scrolling on FF with DOMMouseScroll


    if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {
      sX = sY;
      sY = 0;
    }

    pX = sX * PIXEL_STEP;
    pY = sY * PIXEL_STEP;

    if ('deltaY' in e) {
      pY = e.deltaY;
    }

    if ('deltaX' in e) {
      pX = e.deltaX;
    }

    if ((pX || pY) && e.deltaMode) {
      if (e.deltaMode === 1) {
        // delta in LINE units
        pX *= LINE_HEIGHT;
        pY *= LINE_HEIGHT;
      } else {
        // delta in PAGE units
        pX *= PAGE_HEIGHT;
        pY *= PAGE_HEIGHT;
      }
    } // Fall-back if spin cannot be determined


    if (pX && !sX) {
      sX = pX < 1 ? -1 : 1;
    }

    if (pY && !sY) {
      sY = pY < 1 ? -1 : 1;
    }

    return {
      spinX: sX,
      spinY: sY,
      pixelX: pX,
      pixelY: pY
    };
  },
  handleMouseEnter: function handleMouseEnter() {
    var swiper = this;
    swiper.mouseEntered = true;
  },
  handleMouseLeave: function handleMouseLeave() {
    var swiper = this;
    swiper.mouseEntered = false;
  },
  handle: function handle(event) {
    var e = event;
    var swiper = this;
    var params = swiper.params.mousewheel;
    if (!swiper.mouseEntered && !params.releaseOnEdges) return true;
    if (e.originalEvent) e = e.originalEvent; // jquery fix

    var delta = 0;
    var rtlFactor = swiper.rtlTranslate ? -1 : 1;
    var data = Mousewheel.normalize(e);

    if (params.forceToAxis) {
      if (swiper.isHorizontal()) {
        if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = data.pixelX * rtlFactor;else return true;
      } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = data.pixelY;else return true;
    } else {
      delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;
    }

    if (delta === 0) return true;
    if (params.invert) delta = -delta;

    if (!swiper.params.freeMode) {
      if (Utils.now() - swiper.mousewheel.lastScrollTime > 60) {
        if (delta < 0) {
          if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {
            swiper.slideNext();
            swiper.emit('scroll', e);
          } else if (params.releaseOnEdges) return true;
        } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {
          swiper.slidePrev();
          swiper.emit('scroll', e);
        } else if (params.releaseOnEdges) return true;
      }

      swiper.mousewheel.lastScrollTime = new ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].Date().getTime();
    } else {
      // Freemode or scrollContainer:
      if (swiper.params.loop) {
        swiper.loopFix();
      }

      var position = swiper.getTranslate() + delta * params.sensitivity;
      var wasBeginning = swiper.isBeginning;
      var wasEnd = swiper.isEnd;
      if (position >= swiper.minTranslate()) position = swiper.minTranslate();
      if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();
      swiper.setTransition(0);
      swiper.setTranslate(position);
      swiper.updateProgress();
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();

      if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {
        swiper.updateSlidesClasses();
      }

      if (swiper.params.freeModeSticky) {
        clearTimeout(swiper.mousewheel.timeout);
        swiper.mousewheel.timeout = Utils.nextTick(function () {
          swiper.slideToClosest();
        }, 300);
      } // Emit event


      swiper.emit('scroll', e); // Stop autoplay

      if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop(); // Return page scroll on edge positions

      if (position === swiper.minTranslate() || position === swiper.maxTranslate()) return true;
    }

    if (e.preventDefault) e.preventDefault();else e.returnValue = false;
    return false;
  },
  enable: function enable() {
    var swiper = this;
    if (!Mousewheel.event) return false;
    if (swiper.mousewheel.enabled) return false;
    var target = swiper.$el;

    if (swiper.params.mousewheel.eventsTarged !== 'container') {
      target = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(swiper.params.mousewheel.eventsTarged);
    }

    target.on('mouseenter', swiper.mousewheel.handleMouseEnter);
    target.on('mouseleave', swiper.mousewheel.handleMouseLeave);
    target.on(Mousewheel.event, swiper.mousewheel.handle);
    swiper.mousewheel.enabled = true;
    return true;
  },
  disable: function disable() {
    var swiper = this;
    if (!Mousewheel.event) return false;
    if (!swiper.mousewheel.enabled) return false;
    var target = swiper.$el;

    if (swiper.params.mousewheel.eventsTarged !== 'container') {
      target = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(swiper.params.mousewheel.eventsTarged);
    }

    target.off(Mousewheel.event, swiper.mousewheel.handle);
    swiper.mousewheel.enabled = false;
    return true;
  }
};
var Mousewheel$1 = {
  name: 'mousewheel',
  params: {
    mousewheel: {
      enabled: false,
      releaseOnEdges: false,
      invert: false,
      forceToAxis: false,
      sensitivity: 1,
      eventsTarged: 'container'
    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      mousewheel: {
        enabled: false,
        enable: Mousewheel.enable.bind(swiper),
        disable: Mousewheel.disable.bind(swiper),
        handle: Mousewheel.handle.bind(swiper),
        handleMouseEnter: Mousewheel.handleMouseEnter.bind(swiper),
        handleMouseLeave: Mousewheel.handleMouseLeave.bind(swiper),
        lastScrollTime: Utils.now()
      }
    });
  },
  on: {
    init: function init() {
      var swiper = this;
      if (swiper.params.mousewheel.enabled) swiper.mousewheel.enable();
    },
    destroy: function destroy() {
      var swiper = this;
      if (swiper.mousewheel.enabled) swiper.mousewheel.disable();
    }
  }
};
var Navigation = {
  update: function update() {
    // Update Navigation Buttons
    var swiper = this;
    var params = swiper.params.navigation;
    if (swiper.params.loop) return;
    var _swiper$navigation = swiper.navigation,
        $nextEl = _swiper$navigation.$nextEl,
        $prevEl = _swiper$navigation.$prevEl;

    if ($prevEl && $prevEl.length > 0) {
      if (swiper.isBeginning) {
        $prevEl.addClass(params.disabledClass);
      } else {
        $prevEl.removeClass(params.disabledClass);
      }

      $prevEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
    }

    if ($nextEl && $nextEl.length > 0) {
      if (swiper.isEnd) {
        $nextEl.addClass(params.disabledClass);
      } else {
        $nextEl.removeClass(params.disabledClass);
      }

      $nextEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
    }
  },
  onPrevClick: function onPrevClick(e) {
    var swiper = this;
    e.preventDefault();
    if (swiper.isBeginning && !swiper.params.loop) return;
    swiper.slidePrev();
  },
  onNextClick: function onNextClick(e) {
    var swiper = this;
    e.preventDefault();
    if (swiper.isEnd && !swiper.params.loop) return;
    swiper.slideNext();
  },
  init: function init() {
    var swiper = this;
    var params = swiper.params.navigation;
    if (!(params.nextEl || params.prevEl)) return;
    var $nextEl;
    var $prevEl;

    if (params.nextEl) {
      $nextEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(params.nextEl);

      if (swiper.params.uniqueNavElements && typeof params.nextEl === 'string' && $nextEl.length > 1 && swiper.$el.find(params.nextEl).length === 1) {
        $nextEl = swiper.$el.find(params.nextEl);
      }
    }

    if (params.prevEl) {
      $prevEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(params.prevEl);

      if (swiper.params.uniqueNavElements && typeof params.prevEl === 'string' && $prevEl.length > 1 && swiper.$el.find(params.prevEl).length === 1) {
        $prevEl = swiper.$el.find(params.prevEl);
      }
    }

    if ($nextEl && $nextEl.length > 0) {
      $nextEl.on('click', swiper.navigation.onNextClick);
    }

    if ($prevEl && $prevEl.length > 0) {
      $prevEl.on('click', swiper.navigation.onPrevClick);
    }

    Utils.extend(swiper.navigation, {
      $nextEl: $nextEl,
      nextEl: $nextEl && $nextEl[0],
      $prevEl: $prevEl,
      prevEl: $prevEl && $prevEl[0]
    });
  },
  destroy: function destroy() {
    var swiper = this;
    var _swiper$navigation2 = swiper.navigation,
        $nextEl = _swiper$navigation2.$nextEl,
        $prevEl = _swiper$navigation2.$prevEl;

    if ($nextEl && $nextEl.length) {
      $nextEl.off('click', swiper.navigation.onNextClick);
      $nextEl.removeClass(swiper.params.navigation.disabledClass);
    }

    if ($prevEl && $prevEl.length) {
      $prevEl.off('click', swiper.navigation.onPrevClick);
      $prevEl.removeClass(swiper.params.navigation.disabledClass);
    }
  }
};
var Navigation$1 = {
  name: 'navigation',
  params: {
    navigation: {
      nextEl: null,
      prevEl: null,
      hideOnClick: false,
      disabledClass: 'swiper-button-disabled',
      hiddenClass: 'swiper-button-hidden',
      lockClass: 'swiper-button-lock'
    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      navigation: {
        init: Navigation.init.bind(swiper),
        update: Navigation.update.bind(swiper),
        destroy: Navigation.destroy.bind(swiper),
        onNextClick: Navigation.onNextClick.bind(swiper),
        onPrevClick: Navigation.onPrevClick.bind(swiper)
      }
    });
  },
  on: {
    init: function init() {
      var swiper = this;
      swiper.navigation.init();
      swiper.navigation.update();
    },
    toEdge: function toEdge() {
      var swiper = this;
      swiper.navigation.update();
    },
    fromEdge: function fromEdge() {
      var swiper = this;
      swiper.navigation.update();
    },
    destroy: function destroy() {
      var swiper = this;
      swiper.navigation.destroy();
    },
    click: function click(e) {
      var swiper = this;
      var _swiper$navigation3 = swiper.navigation,
          $nextEl = _swiper$navigation3.$nextEl,
          $prevEl = _swiper$navigation3.$prevEl;

      if (swiper.params.navigation.hideOnClick && !Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target).is($prevEl) && !Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target).is($nextEl)) {
        var isHidden;

        if ($nextEl) {
          isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);
        } else if ($prevEl) {
          isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);
        }

        if (isHidden === true) {
          swiper.emit('navigationShow', swiper);
        } else {
          swiper.emit('navigationHide', swiper);
        }

        if ($nextEl) {
          $nextEl.toggleClass(swiper.params.navigation.hiddenClass);
        }

        if ($prevEl) {
          $prevEl.toggleClass(swiper.params.navigation.hiddenClass);
        }
      }
    }
  }
};
var Pagination = {
  update: function update() {
    // Render || Update Pagination bullets/items
    var swiper = this;
    var rtl = swiper.rtl;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
    var $el = swiper.pagination.$el; // Current/Total

    var current;
    var total = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;

    if (swiper.params.loop) {
      current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);

      if (current > slidesLength - 1 - swiper.loopedSlides * 2) {
        current -= slidesLength - swiper.loopedSlides * 2;
      }

      if (current > total - 1) current -= total;
      if (current < 0 && swiper.params.paginationType !== 'bullets') current = total + current;
    } else if (typeof swiper.snapIndex !== 'undefined') {
      current = swiper.snapIndex;
    } else {
      current = swiper.activeIndex || 0;
    } // Types


    if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {
      var bullets = swiper.pagination.bullets;
      var firstIndex;
      var lastIndex;
      var midIndex;

      if (params.dynamicBullets) {
        swiper.pagination.bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);
        $el.css(swiper.isHorizontal() ? 'width' : 'height', "".concat(swiper.pagination.bulletSize * (params.dynamicMainBullets + 4), "px"));

        if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {
          swiper.pagination.dynamicBulletIndex += current - swiper.previousIndex;

          if (swiper.pagination.dynamicBulletIndex > params.dynamicMainBullets - 1) {
            swiper.pagination.dynamicBulletIndex = params.dynamicMainBullets - 1;
          } else if (swiper.pagination.dynamicBulletIndex < 0) {
            swiper.pagination.dynamicBulletIndex = 0;
          }
        }

        firstIndex = current - swiper.pagination.dynamicBulletIndex;
        lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);
        midIndex = (lastIndex + firstIndex) / 2;
      }

      bullets.removeClass("".concat(params.bulletActiveClass, " ").concat(params.bulletActiveClass, "-next ").concat(params.bulletActiveClass, "-next-next ").concat(params.bulletActiveClass, "-prev ").concat(params.bulletActiveClass, "-prev-prev ").concat(params.bulletActiveClass, "-main"));

      if ($el.length > 1) {
        bullets.each(function (index, bullet) {
          var $bullet = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(bullet);
          var bulletIndex = $bullet.index();

          if (bulletIndex === current) {
            $bullet.addClass(params.bulletActiveClass);
          }

          if (params.dynamicBullets) {
            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
              $bullet.addClass("".concat(params.bulletActiveClass, "-main"));
            }

            if (bulletIndex === firstIndex) {
              $bullet.prev().addClass("".concat(params.bulletActiveClass, "-prev")).prev().addClass("".concat(params.bulletActiveClass, "-prev-prev"));
            }

            if (bulletIndex === lastIndex) {
              $bullet.next().addClass("".concat(params.bulletActiveClass, "-next")).next().addClass("".concat(params.bulletActiveClass, "-next-next"));
            }
          }
        });
      } else {
        var $bullet = bullets.eq(current);
        $bullet.addClass(params.bulletActiveClass);

        if (params.dynamicBullets) {
          var $firstDisplayedBullet = bullets.eq(firstIndex);
          var $lastDisplayedBullet = bullets.eq(lastIndex);

          for (var i = firstIndex; i <= lastIndex; i += 1) {
            bullets.eq(i).addClass("".concat(params.bulletActiveClass, "-main"));
          }

          $firstDisplayedBullet.prev().addClass("".concat(params.bulletActiveClass, "-prev")).prev().addClass("".concat(params.bulletActiveClass, "-prev-prev"));
          $lastDisplayedBullet.next().addClass("".concat(params.bulletActiveClass, "-next")).next().addClass("".concat(params.bulletActiveClass, "-next-next"));
        }
      }

      if (params.dynamicBullets) {
        var dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);
        var bulletsOffset = (swiper.pagination.bulletSize * dynamicBulletsLength - swiper.pagination.bulletSize) / 2 - midIndex * swiper.pagination.bulletSize;
        var offsetProp = rtl ? 'right' : 'left';
        bullets.css(swiper.isHorizontal() ? offsetProp : 'top', "".concat(bulletsOffset, "px"));
      }
    }

    if (params.type === 'fraction') {
      $el.find(".".concat(params.currentClass)).text(params.formatFractionCurrent(current + 1));
      $el.find(".".concat(params.totalClass)).text(params.formatFractionTotal(total));
    }

    if (params.type === 'progressbar') {
      var progressbarDirection;

      if (params.progressbarOpposite) {
        progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';
      } else {
        progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';
      }

      var scale = (current + 1) / total;
      var scaleX = 1;
      var scaleY = 1;

      if (progressbarDirection === 'horizontal') {
        scaleX = scale;
      } else {
        scaleY = scale;
      }

      $el.find(".".concat(params.progressbarFillClass)).transform("translate3d(0,0,0) scaleX(".concat(scaleX, ") scaleY(").concat(scaleY, ")")).transition(swiper.params.speed);
    }

    if (params.type === 'custom' && params.renderCustom) {
      $el.html(params.renderCustom(swiper, current + 1, total));
      swiper.emit('paginationRender', swiper, $el[0]);
    } else {
      swiper.emit('paginationUpdate', swiper, $el[0]);
    }

    $el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
  },
  render: function render() {
    // Render Container
    var swiper = this;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
    var $el = swiper.pagination.$el;
    var paginationHTML = '';

    if (params.type === 'bullets') {
      var numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;

      for (var i = 0; i < numberOfBullets; i += 1) {
        if (params.renderBullet) {
          paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);
        } else {
          paginationHTML += "<".concat(params.bulletElement, " class=\"").concat(params.bulletClass, "\"></").concat(params.bulletElement, ">");
        }
      }

      $el.html(paginationHTML);
      swiper.pagination.bullets = $el.find(".".concat(params.bulletClass));
    }

    if (params.type === 'fraction') {
      if (params.renderFraction) {
        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);
      } else {
        paginationHTML = "<span class=\"".concat(params.currentClass, "\"></span>") + ' / ' + "<span class=\"".concat(params.totalClass, "\"></span>");
      }

      $el.html(paginationHTML);
    }

    if (params.type === 'progressbar') {
      if (params.renderProgressbar) {
        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);
      } else {
        paginationHTML = "<span class=\"".concat(params.progressbarFillClass, "\"></span>");
      }

      $el.html(paginationHTML);
    }

    if (params.type !== 'custom') {
      swiper.emit('paginationRender', swiper.pagination.$el[0]);
    }
  },
  init: function init() {
    var swiper = this;
    var params = swiper.params.pagination;
    if (!params.el) return;
    var $el = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(params.el);
    if ($el.length === 0) return;

    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && swiper.$el.find(params.el).length === 1) {
      $el = swiper.$el.find(params.el);
    }

    if (params.type === 'bullets' && params.clickable) {
      $el.addClass(params.clickableClass);
    }

    $el.addClass(params.modifierClass + params.type);

    if (params.type === 'bullets' && params.dynamicBullets) {
      $el.addClass("".concat(params.modifierClass).concat(params.type, "-dynamic"));
      swiper.pagination.dynamicBulletIndex = 0;

      if (params.dynamicMainBullets < 1) {
        params.dynamicMainBullets = 1;
      }
    }

    if (params.type === 'progressbar' && params.progressbarOpposite) {
      $el.addClass(params.progressbarOppositeClass);
    }

    if (params.clickable) {
      $el.on('click', ".".concat(params.bulletClass), function onClick(e) {
        e.preventDefault();
        var index = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(this).index() * swiper.params.slidesPerGroup;
        if (swiper.params.loop) index += swiper.loopedSlides;
        swiper.slideTo(index);
      });
    }

    Utils.extend(swiper.pagination, {
      $el: $el,
      el: $el[0]
    });
  },
  destroy: function destroy() {
    var swiper = this;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    var $el = swiper.pagination.$el;
    $el.removeClass(params.hiddenClass);
    $el.removeClass(params.modifierClass + params.type);
    if (swiper.pagination.bullets) swiper.pagination.bullets.removeClass(params.bulletActiveClass);

    if (params.clickable) {
      $el.off('click', ".".concat(params.bulletClass));
    }
  }
};
var Pagination$1 = {
  name: 'pagination',
  params: {
    pagination: {
      el: null,
      bulletElement: 'span',
      clickable: false,
      hideOnClick: false,
      renderBullet: null,
      renderProgressbar: null,
      renderFraction: null,
      renderCustom: null,
      progressbarOpposite: false,
      type: 'bullets',
      // 'bullets' or 'progressbar' or 'fraction' or 'custom'
      dynamicBullets: false,
      dynamicMainBullets: 1,
      formatFractionCurrent: function formatFractionCurrent(number) {
        return number;
      },
      formatFractionTotal: function formatFractionTotal(number) {
        return number;
      },
      bulletClass: 'swiper-pagination-bullet',
      bulletActiveClass: 'swiper-pagination-bullet-active',
      modifierClass: 'swiper-pagination-',
      // NEW
      currentClass: 'swiper-pagination-current',
      totalClass: 'swiper-pagination-total',
      hiddenClass: 'swiper-pagination-hidden',
      progressbarFillClass: 'swiper-pagination-progressbar-fill',
      progressbarOppositeClass: 'swiper-pagination-progressbar-opposite',
      clickableClass: 'swiper-pagination-clickable',
      // NEW
      lockClass: 'swiper-pagination-lock'
    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      pagination: {
        init: Pagination.init.bind(swiper),
        render: Pagination.render.bind(swiper),
        update: Pagination.update.bind(swiper),
        destroy: Pagination.destroy.bind(swiper),
        dynamicBulletIndex: 0
      }
    });
  },
  on: {
    init: function init() {
      var swiper = this;
      swiper.pagination.init();
      swiper.pagination.render();
      swiper.pagination.update();
    },
    activeIndexChange: function activeIndexChange() {
      var swiper = this;

      if (swiper.params.loop) {
        swiper.pagination.update();
      } else if (typeof swiper.snapIndex === 'undefined') {
        swiper.pagination.update();
      }
    },
    snapIndexChange: function snapIndexChange() {
      var swiper = this;

      if (!swiper.params.loop) {
        swiper.pagination.update();
      }
    },
    slidesLengthChange: function slidesLengthChange() {
      var swiper = this;

      if (swiper.params.loop) {
        swiper.pagination.render();
        swiper.pagination.update();
      }
    },
    snapGridLengthChange: function snapGridLengthChange() {
      var swiper = this;

      if (!swiper.params.loop) {
        swiper.pagination.render();
        swiper.pagination.update();
      }
    },
    destroy: function destroy() {
      var swiper = this;
      swiper.pagination.destroy();
    },
    click: function click(e) {
      var swiper = this;

      if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && swiper.pagination.$el.length > 0 && !Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target).hasClass(swiper.params.pagination.bulletClass)) {
        var isHidden = swiper.pagination.$el.hasClass(swiper.params.pagination.hiddenClass);

        if (isHidden === true) {
          swiper.emit('paginationShow', swiper);
        } else {
          swiper.emit('paginationHide', swiper);
        }

        swiper.pagination.$el.toggleClass(swiper.params.pagination.hiddenClass);
      }
    }
  }
};
var Scrollbar = {
  setTranslate: function setTranslate() {
    var swiper = this;
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
    var scrollbar = swiper.scrollbar,
        rtl = swiper.rtlTranslate,
        progress = swiper.progress;
    var dragSize = scrollbar.dragSize,
        trackSize = scrollbar.trackSize,
        $dragEl = scrollbar.$dragEl,
        $el = scrollbar.$el;
    var params = swiper.params.scrollbar;
    var newSize = dragSize;
    var newPos = (trackSize - dragSize) * progress;

    if (rtl) {
      newPos = -newPos;

      if (newPos > 0) {
        newSize = dragSize - newPos;
        newPos = 0;
      } else if (-newPos + dragSize > trackSize) {
        newSize = trackSize + newPos;
      }
    } else if (newPos < 0) {
      newSize = dragSize + newPos;
      newPos = 0;
    } else if (newPos + dragSize > trackSize) {
      newSize = trackSize - newPos;
    }

    if (swiper.isHorizontal()) {
      if (Support.transforms3d) {
        $dragEl.transform("translate3d(".concat(newPos, "px, 0, 0)"));
      } else {
        $dragEl.transform("translateX(".concat(newPos, "px)"));
      }

      $dragEl[0].style.width = "".concat(newSize, "px");
    } else {
      if (Support.transforms3d) {
        $dragEl.transform("translate3d(0px, ".concat(newPos, "px, 0)"));
      } else {
        $dragEl.transform("translateY(".concat(newPos, "px)"));
      }

      $dragEl[0].style.height = "".concat(newSize, "px");
    }

    if (params.hide) {
      clearTimeout(swiper.scrollbar.timeout);
      $el[0].style.opacity = 1;
      swiper.scrollbar.timeout = setTimeout(function () {
        $el[0].style.opacity = 0;
        $el.transition(400);
      }, 1000);
    }
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
    swiper.scrollbar.$dragEl.transition(duration);
  },
  updateSize: function updateSize() {
    var swiper = this;
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
    var scrollbar = swiper.scrollbar;
    var $dragEl = scrollbar.$dragEl,
        $el = scrollbar.$el;
    $dragEl[0].style.width = '';
    $dragEl[0].style.height = '';
    var trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;
    var divider = swiper.size / swiper.virtualSize;
    var moveDivider = divider * (trackSize / swiper.size);
    var dragSize;

    if (swiper.params.scrollbar.dragSize === 'auto') {
      dragSize = trackSize * divider;
    } else {
      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);
    }

    if (swiper.isHorizontal()) {
      $dragEl[0].style.width = "".concat(dragSize, "px");
    } else {
      $dragEl[0].style.height = "".concat(dragSize, "px");
    }

    if (divider >= 1) {
      $el[0].style.display = 'none';
    } else {
      $el[0].style.display = '';
    }

    if (swiper.params.scrollbar.hide) {
      $el[0].style.opacity = 0;
    }

    Utils.extend(scrollbar, {
      trackSize: trackSize,
      divider: divider,
      moveDivider: moveDivider,
      dragSize: dragSize
    });
    scrollbar.$el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](swiper.params.scrollbar.lockClass);
  },
  setDragPosition: function setDragPosition(e) {
    var swiper = this;
    var scrollbar = swiper.scrollbar,
        rtl = swiper.rtlTranslate;
    var $el = scrollbar.$el,
        dragSize = scrollbar.dragSize,
        trackSize = scrollbar.trackSize;
    var pointerPosition;

    if (swiper.isHorizontal()) {
      pointerPosition = e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX || e.clientX;
    } else {
      pointerPosition = e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY || e.clientY;
    }

    var positionRatio;
    positionRatio = (pointerPosition - $el.offset()[swiper.isHorizontal() ? 'left' : 'top'] - dragSize / 2) / (trackSize - dragSize);
    positionRatio = Math.max(Math.min(positionRatio, 1), 0);

    if (rtl) {
      positionRatio = 1 - positionRatio;
    }

    var position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;
    swiper.updateProgress(position);
    swiper.setTranslate(position);
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  },
  onDragStart: function onDragStart(e) {
    var swiper = this;
    var params = swiper.params.scrollbar;
    var scrollbar = swiper.scrollbar,
        $wrapperEl = swiper.$wrapperEl;
    var $el = scrollbar.$el,
        $dragEl = scrollbar.$dragEl;
    swiper.scrollbar.isTouched = true;
    e.preventDefault();
    e.stopPropagation();
    $wrapperEl.transition(100);
    $dragEl.transition(100);
    scrollbar.setDragPosition(e);
    clearTimeout(swiper.scrollbar.dragTimeout);
    $el.transition(0);

    if (params.hide) {
      $el.css('opacity', 1);
    }

    swiper.emit('scrollbarDragStart', e);
  },
  onDragMove: function onDragMove(e) {
    var swiper = this;
    var scrollbar = swiper.scrollbar,
        $wrapperEl = swiper.$wrapperEl;
    var $el = scrollbar.$el,
        $dragEl = scrollbar.$dragEl;
    if (!swiper.scrollbar.isTouched) return;
    if (e.preventDefault) e.preventDefault();else e.returnValue = false;
    scrollbar.setDragPosition(e);
    $wrapperEl.transition(0);
    $el.transition(0);
    $dragEl.transition(0);
    swiper.emit('scrollbarDragMove', e);
  },
  onDragEnd: function onDragEnd(e) {
    var swiper = this;
    var params = swiper.params.scrollbar;
    var scrollbar = swiper.scrollbar;
    var $el = scrollbar.$el;
    if (!swiper.scrollbar.isTouched) return;
    swiper.scrollbar.isTouched = false;

    if (params.hide) {
      clearTimeout(swiper.scrollbar.dragTimeout);
      swiper.scrollbar.dragTimeout = Utils.nextTick(function () {
        $el.css('opacity', 0);
        $el.transition(400);
      }, 1000);
    }

    swiper.emit('scrollbarDragEnd', e);

    if (params.snapOnRelease) {
      swiper.slideToClosest();
    }
  },
  enableDraggable: function enableDraggable() {
    var swiper = this;
    if (!swiper.params.scrollbar.el) return;
    var scrollbar = swiper.scrollbar,
        touchEventsTouch = swiper.touchEventsTouch,
        touchEventsDesktop = swiper.touchEventsDesktop,
        params = swiper.params;
    var $el = scrollbar.$el;
    var target = $el[0];
    var activeListener = Support.passiveListener && params.passiveListeners ? {
      passive: false,
      capture: false
    } : false;
    var passiveListener = Support.passiveListener && params.passiveListeners ? {
      passive: true,
      capture: false
    } : false;

    if (!Support.touch) {
      target.addEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].addEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].addEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
    } else {
      target.addEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);
      target.addEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);
      target.addEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);
    }
  },
  disableDraggable: function disableDraggable() {
    var swiper = this;
    if (!swiper.params.scrollbar.el) return;
    var scrollbar = swiper.scrollbar,
        touchEventsTouch = swiper.touchEventsTouch,
        touchEventsDesktop = swiper.touchEventsDesktop,
        params = swiper.params;
    var $el = scrollbar.$el;
    var target = $el[0];
    var activeListener = Support.passiveListener && params.passiveListeners ? {
      passive: false,
      capture: false
    } : false;
    var passiveListener = Support.passiveListener && params.passiveListeners ? {
      passive: true,
      capture: false
    } : false;

    if (!Support.touch) {
      target.removeEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].removeEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].removeEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
    } else {
      target.removeEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);
      target.removeEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);
      target.removeEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);
    }
  },
  init: function init() {
    var swiper = this;
    if (!swiper.params.scrollbar.el) return;
    var scrollbar = swiper.scrollbar,
        $swiperEl = swiper.$el;
    var params = swiper.params.scrollbar;
    var $el = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(params.el);

    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && $swiperEl.find(params.el).length === 1) {
      $el = $swiperEl.find(params.el);
    }

    var $dragEl = $el.find(".".concat(swiper.params.scrollbar.dragClass));

    if ($dragEl.length === 0) {
      $dragEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])("<div class=\"".concat(swiper.params.scrollbar.dragClass, "\"></div>"));
      $el.append($dragEl);
    }

    Utils.extend(scrollbar, {
      $el: $el,
      el: $el[0],
      $dragEl: $dragEl,
      dragEl: $dragEl[0]
    });

    if (params.draggable) {
      scrollbar.enableDraggable();
    }
  },
  destroy: function destroy() {
    var swiper = this;
    swiper.scrollbar.disableDraggable();
  }
};
var Scrollbar$1 = {
  name: 'scrollbar',
  params: {
    scrollbar: {
      el: null,
      dragSize: 'auto',
      hide: false,
      draggable: false,
      snapOnRelease: true,
      lockClass: 'swiper-scrollbar-lock',
      dragClass: 'swiper-scrollbar-drag'
    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      scrollbar: {
        init: Scrollbar.init.bind(swiper),
        destroy: Scrollbar.destroy.bind(swiper),
        updateSize: Scrollbar.updateSize.bind(swiper),
        setTranslate: Scrollbar.setTranslate.bind(swiper),
        setTransition: Scrollbar.setTransition.bind(swiper),
        enableDraggable: Scrollbar.enableDraggable.bind(swiper),
        disableDraggable: Scrollbar.disableDraggable.bind(swiper),
        setDragPosition: Scrollbar.setDragPosition.bind(swiper),
        onDragStart: Scrollbar.onDragStart.bind(swiper),
        onDragMove: Scrollbar.onDragMove.bind(swiper),
        onDragEnd: Scrollbar.onDragEnd.bind(swiper),
        isTouched: false,
        timeout: null,
        dragTimeout: null
      }
    });
  },
  on: {
    init: function init() {
      var swiper = this;
      swiper.scrollbar.init();
      swiper.scrollbar.updateSize();
      swiper.scrollbar.setTranslate();
    },
    update: function update() {
      var swiper = this;
      swiper.scrollbar.updateSize();
    },
    resize: function resize() {
      var swiper = this;
      swiper.scrollbar.updateSize();
    },
    observerUpdate: function observerUpdate() {
      var swiper = this;
      swiper.scrollbar.updateSize();
    },
    setTranslate: function setTranslate() {
      var swiper = this;
      swiper.scrollbar.setTranslate();
    },
    setTransition: function setTransition(duration) {
      var swiper = this;
      swiper.scrollbar.setTransition(duration);
    },
    destroy: function destroy() {
      var swiper = this;
      swiper.scrollbar.destroy();
    }
  }
};
var Parallax = {
  setTransform: function setTransform(el, progress) {
    var swiper = this;
    var rtl = swiper.rtl;
    var $el = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(el);
    var rtlFactor = rtl ? -1 : 1;
    var p = $el.attr('data-swiper-parallax') || '0';
    var x = $el.attr('data-swiper-parallax-x');
    var y = $el.attr('data-swiper-parallax-y');
    var scale = $el.attr('data-swiper-parallax-scale');
    var opacity = $el.attr('data-swiper-parallax-opacity');

    if (x || y) {
      x = x || '0';
      y = y || '0';
    } else if (swiper.isHorizontal()) {
      x = p;
      y = '0';
    } else {
      y = p;
      x = '0';
    }

    if (x.indexOf('%') >= 0) {
      x = "".concat(parseInt(x, 10) * progress * rtlFactor, "%");
    } else {
      x = "".concat(x * progress * rtlFactor, "px");
    }

    if (y.indexOf('%') >= 0) {
      y = "".concat(parseInt(y, 10) * progress, "%");
    } else {
      y = "".concat(y * progress, "px");
    }

    if (typeof opacity !== 'undefined' && opacity !== null) {
      var currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));
      $el[0].style.opacity = currentOpacity;
    }

    if (typeof scale === 'undefined' || scale === null) {
      $el.transform("translate3d(".concat(x, ", ").concat(y, ", 0px)"));
    } else {
      var currentScale = scale - (scale - 1) * (1 - Math.abs(progress));
      $el.transform("translate3d(".concat(x, ", ").concat(y, ", 0px) scale(").concat(currentScale, ")"));
    }
  },
  setTranslate: function setTranslate() {
    var swiper = this;
    var $el = swiper.$el,
        slides = swiper.slides,
        progress = swiper.progress,
        snapGrid = swiper.snapGrid;
    $el.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function (index, el) {
      swiper.parallax.setTransform(el, progress);
    });
    slides.each(function (slideIndex, slideEl) {
      var slideProgress = slideEl.progress;

      if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {
        slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);
      }

      slideProgress = Math.min(Math.max(slideProgress, -1), 1);
      Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(slideEl).find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function (index, el) {
        swiper.parallax.setTransform(el, slideProgress);
      });
    });
  },
  setTransition: function setTransition() {
    var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.params.speed;
    var swiper = this;
    var $el = swiper.$el;
    $el.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function (index, parallaxEl) {
      var $parallaxEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(parallaxEl);
      var parallaxDuration = parseInt($parallaxEl.attr('data-swiper-parallax-duration'), 10) || duration;
      if (duration === 0) parallaxDuration = 0;
      $parallaxEl.transition(parallaxDuration);
    });
  }
};
var Parallax$1 = {
  name: 'parallax',
  params: {
    parallax: {
      enabled: false
    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      parallax: {
        setTransform: Parallax.setTransform.bind(swiper),
        setTranslate: Parallax.setTranslate.bind(swiper),
        setTransition: Parallax.setTransition.bind(swiper)
      }
    });
  },
  on: {
    beforeInit: function beforeInit() {
      var swiper = this;
      if (!swiper.params.parallax.enabled) return;
      swiper.params.watchSlidesProgress = true;
      swiper.originalParams.watchSlidesProgress = true;
    },
    init: function init() {
      var swiper = this;
      if (!swiper.params.parallax.enabled) return;
      swiper.parallax.setTranslate();
    },
    setTranslate: function setTranslate() {
      var swiper = this;
      if (!swiper.params.parallax.enabled) return;
      swiper.parallax.setTranslate();
    },
    setTransition: function setTransition(duration) {
      var swiper = this;
      if (!swiper.params.parallax.enabled) return;
      swiper.parallax.setTransition(duration);
    }
  }
};
var Zoom = {
  // Calc Scale From Multi-touches
  getDistanceBetweenTouches: function getDistanceBetweenTouches(e) {
    if (e.targetTouches.length < 2) return 1;
    var x1 = e.targetTouches[0].pageX;
    var y1 = e.targetTouches[0].pageY;
    var x2 = e.targetTouches[1].pageX;
    var y2 = e.targetTouches[1].pageY;
    var distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    return distance;
  },
  // Events
  onGestureStart: function onGestureStart(e) {
    var swiper = this;
    var params = swiper.params.zoom;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;
    zoom.fakeGestureTouched = false;
    zoom.fakeGestureMoved = false;

    if (!Support.gestures) {
      if (e.type !== 'touchstart' || e.type === 'touchstart' && e.targetTouches.length < 2) {
        return;
      }

      zoom.fakeGestureTouched = true;
      gesture.scaleStart = Zoom.getDistanceBetweenTouches(e);
    }

    if (!gesture.$slideEl || !gesture.$slideEl.length) {
      gesture.$slideEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target).closest('.swiper-slide');
      if (gesture.$slideEl.length === 0) gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);
      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
      gesture.$imageWrapEl = gesture.$imageEl.parent(".".concat(params.containerClass));
      gesture.maxRatio = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;

      if (gesture.$imageWrapEl.length === 0) {
        gesture.$imageEl = undefined;
        return;
      }
    }

    gesture.$imageEl.transition(0);
    swiper.zoom.isScaling = true;
  },
  onGestureChange: function onGestureChange(e) {
    var swiper = this;
    var params = swiper.params.zoom;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;

    if (!Support.gestures) {
      if (e.type !== 'touchmove' || e.type === 'touchmove' && e.targetTouches.length < 2) {
        return;
      }

      zoom.fakeGestureMoved = true;
      gesture.scaleMove = Zoom.getDistanceBetweenTouches(e);
    }

    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;

    if (Support.gestures) {
      zoom.scale = e.scale * zoom.currentScale;
    } else {
      zoom.scale = gesture.scaleMove / gesture.scaleStart * zoom.currentScale;
    }

    if (zoom.scale > gesture.maxRatio) {
      zoom.scale = gesture.maxRatio - 1 + Math.pow(zoom.scale - gesture.maxRatio + 1, 0.5);
    }

    if (zoom.scale < params.minRatio) {
      zoom.scale = params.minRatio + 1 - Math.pow(params.minRatio - zoom.scale + 1, 0.5);
    }

    gesture.$imageEl.transform("translate3d(0,0,0) scale(".concat(zoom.scale, ")"));
  },
  onGestureEnd: function onGestureEnd(e) {
    var swiper = this;
    var params = swiper.params.zoom;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;

    if (!Support.gestures) {
      if (!zoom.fakeGestureTouched || !zoom.fakeGestureMoved) {
        return;
      }

      if (e.type !== 'touchend' || e.type === 'touchend' && e.changedTouches.length < 2 && !Device.android) {
        return;
      }

      zoom.fakeGestureTouched = false;
      zoom.fakeGestureMoved = false;
    }

    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);
    gesture.$imageEl.transition(swiper.params.speed).transform("translate3d(0,0,0) scale(".concat(zoom.scale, ")"));
    zoom.currentScale = zoom.scale;
    zoom.isScaling = false;
    if (zoom.scale === 1) gesture.$slideEl = undefined;
  },
  onTouchStart: function onTouchStart(e) {
    var swiper = this;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture,
        image = zoom.image;
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    if (image.isTouched) return;
    if (Device.android) e.preventDefault();
    image.isTouched = true;
    image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
    image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
  },
  onTouchMove: function onTouchMove(e) {
    var swiper = this;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture,
        image = zoom.image,
        velocity = zoom.velocity;
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    swiper.allowClick = false;
    if (!image.isTouched || !gesture.$slideEl) return;

    if (!image.isMoved) {
      image.width = gesture.$imageEl[0].offsetWidth;
      image.height = gesture.$imageEl[0].offsetHeight;
      image.startX = Utils.getTranslate(gesture.$imageWrapEl[0], 'x') || 0;
      image.startY = Utils.getTranslate(gesture.$imageWrapEl[0], 'y') || 0;
      gesture.slideWidth = gesture.$slideEl[0].offsetWidth;
      gesture.slideHeight = gesture.$slideEl[0].offsetHeight;
      gesture.$imageWrapEl.transition(0);

      if (swiper.rtl) {
        image.startX = -image.startX;
        image.startY = -image.startY;
      }
    } // Define if we need image drag


    var scaledWidth = image.width * zoom.scale;
    var scaledHeight = image.height * zoom.scale;
    if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) return;
    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
    image.maxX = -image.minX;
    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);
    image.maxY = -image.minY;
    image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
    image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;

    if (!image.isMoved && !zoom.isScaling) {
      if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {
        image.isTouched = false;
        return;
      }

      if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {
        image.isTouched = false;
        return;
      }
    }

    e.preventDefault();
    e.stopPropagation();
    image.isMoved = true;
    image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX;
    image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY;

    if (image.currentX < image.minX) {
      image.currentX = image.minX + 1 - Math.pow(image.minX - image.currentX + 1, 0.8);
    }

    if (image.currentX > image.maxX) {
      image.currentX = image.maxX - 1 + Math.pow(image.currentX - image.maxX + 1, 0.8);
    }

    if (image.currentY < image.minY) {
      image.currentY = image.minY + 1 - Math.pow(image.minY - image.currentY + 1, 0.8);
    }

    if (image.currentY > image.maxY) {
      image.currentY = image.maxY - 1 + Math.pow(image.currentY - image.maxY + 1, 0.8);
    } // Velocity


    if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;
    if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;
    if (!velocity.prevTime) velocity.prevTime = Date.now();
    velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;
    velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;
    if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;
    if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;
    velocity.prevPositionX = image.touchesCurrent.x;
    velocity.prevPositionY = image.touchesCurrent.y;
    velocity.prevTime = Date.now();
    gesture.$imageWrapEl.transform("translate3d(".concat(image.currentX, "px, ").concat(image.currentY, "px,0)"));
  },
  onTouchEnd: function onTouchEnd() {
    var swiper = this;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture,
        image = zoom.image,
        velocity = zoom.velocity;
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;

    if (!image.isTouched || !image.isMoved) {
      image.isTouched = false;
      image.isMoved = false;
      return;
    }

    image.isTouched = false;
    image.isMoved = false;
    var momentumDurationX = 300;
    var momentumDurationY = 300;
    var momentumDistanceX = velocity.x * momentumDurationX;
    var newPositionX = image.currentX + momentumDistanceX;
    var momentumDistanceY = velocity.y * momentumDurationY;
    var newPositionY = image.currentY + momentumDistanceY; // Fix duration

    if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);
    if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);
    var momentumDuration = Math.max(momentumDurationX, momentumDurationY);
    image.currentX = newPositionX;
    image.currentY = newPositionY; // Define if we need image drag

    var scaledWidth = image.width * zoom.scale;
    var scaledHeight = image.height * zoom.scale;
    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
    image.maxX = -image.minX;
    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);
    image.maxY = -image.minY;
    image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);
    image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);
    gesture.$imageWrapEl.transition(momentumDuration).transform("translate3d(".concat(image.currentX, "px, ").concat(image.currentY, "px,0)"));
  },
  onTransitionEnd: function onTransitionEnd() {
    var swiper = this;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;

    if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {
      gesture.$imageEl.transform('translate3d(0,0,0) scale(1)');
      gesture.$imageWrapEl.transform('translate3d(0,0,0)');
      zoom.scale = 1;
      zoom.currentScale = 1;
      gesture.$slideEl = undefined;
      gesture.$imageEl = undefined;
      gesture.$imageWrapEl = undefined;
    }
  },
  // Toggle Zoom
  toggle: function toggle(e) {
    var swiper = this;
    var zoom = swiper.zoom;

    if (zoom.scale && zoom.scale !== 1) {
      // Zoom Out
      zoom.out();
    } else {
      // Zoom In
      zoom["in"](e);
    }
  },
  "in": function _in(e) {
    var swiper = this;
    var zoom = swiper.zoom;
    var params = swiper.params.zoom;
    var gesture = zoom.gesture,
        image = zoom.image;

    if (!gesture.$slideEl) {
      gesture.$slideEl = swiper.clickedSlide ? Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(swiper.clickedSlide) : swiper.slides.eq(swiper.activeIndex);
      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
      gesture.$imageWrapEl = gesture.$imageEl.parent(".".concat(params.containerClass));
    }

    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    gesture.$slideEl.addClass("".concat(params.zoomedSlideClass));
    var touchX;
    var touchY;
    var offsetX;
    var offsetY;
    var diffX;
    var diffY;
    var translateX;
    var translateY;
    var imageWidth;
    var imageHeight;
    var scaledWidth;
    var scaledHeight;
    var translateMinX;
    var translateMinY;
    var translateMaxX;
    var translateMaxY;
    var slideWidth;
    var slideHeight;

    if (typeof image.touchesStart.x === 'undefined' && e) {
      touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;
      touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;
    } else {
      touchX = image.touchesStart.x;
      touchY = image.touchesStart.y;
    }

    zoom.scale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
    zoom.currentScale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;

    if (e) {
      slideWidth = gesture.$slideEl[0].offsetWidth;
      slideHeight = gesture.$slideEl[0].offsetHeight;
      offsetX = gesture.$slideEl.offset().left;
      offsetY = gesture.$slideEl.offset().top;
      diffX = offsetX + slideWidth / 2 - touchX;
      diffY = offsetY + slideHeight / 2 - touchY;
      imageWidth = gesture.$imageEl[0].offsetWidth;
      imageHeight = gesture.$imageEl[0].offsetHeight;
      scaledWidth = imageWidth * zoom.scale;
      scaledHeight = imageHeight * zoom.scale;
      translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);
      translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);
      translateMaxX = -translateMinX;
      translateMaxY = -translateMinY;
      translateX = diffX * zoom.scale;
      translateY = diffY * zoom.scale;

      if (translateX < translateMinX) {
        translateX = translateMinX;
      }

      if (translateX > translateMaxX) {
        translateX = translateMaxX;
      }

      if (translateY < translateMinY) {
        translateY = translateMinY;
      }

      if (translateY > translateMaxY) {
        translateY = translateMaxY;
      }
    } else {
      translateX = 0;
      translateY = 0;
    }

    gesture.$imageWrapEl.transition(300).transform("translate3d(".concat(translateX, "px, ").concat(translateY, "px,0)"));
    gesture.$imageEl.transition(300).transform("translate3d(0,0,0) scale(".concat(zoom.scale, ")"));
  },
  out: function out() {
    var swiper = this;
    var zoom = swiper.zoom;
    var params = swiper.params.zoom;
    var gesture = zoom.gesture;

    if (!gesture.$slideEl) {
      gesture.$slideEl = swiper.clickedSlide ? Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(swiper.clickedSlide) : swiper.slides.eq(swiper.activeIndex);
      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
      gesture.$imageWrapEl = gesture.$imageEl.parent(".".concat(params.containerClass));
    }

    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    zoom.scale = 1;
    zoom.currentScale = 1;
    gesture.$imageWrapEl.transition(300).transform('translate3d(0,0,0)');
    gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(1)');
    gesture.$slideEl.removeClass("".concat(params.zoomedSlideClass));
    gesture.$slideEl = undefined;
  },
  // Attach/Detach Events
  enable: function enable() {
    var swiper = this;
    var zoom = swiper.zoom;
    if (zoom.enabled) return;
    zoom.enabled = true;
    var passiveListener = swiper.touchEvents.start === 'touchstart' && Support.passiveListener && swiper.params.passiveListeners ? {
      passive: true,
      capture: false
    } : false; // Scale image

    if (Support.gestures) {
      swiper.$wrapperEl.on('gesturestart', '.swiper-slide', zoom.onGestureStart, passiveListener);
      swiper.$wrapperEl.on('gesturechange', '.swiper-slide', zoom.onGestureChange, passiveListener);
      swiper.$wrapperEl.on('gestureend', '.swiper-slide', zoom.onGestureEnd, passiveListener);
    } else if (swiper.touchEvents.start === 'touchstart') {
      swiper.$wrapperEl.on(swiper.touchEvents.start, '.swiper-slide', zoom.onGestureStart, passiveListener);
      swiper.$wrapperEl.on(swiper.touchEvents.move, '.swiper-slide', zoom.onGestureChange, passiveListener);
      swiper.$wrapperEl.on(swiper.touchEvents.end, '.swiper-slide', zoom.onGestureEnd, passiveListener);
    } // Move image


    swiper.$wrapperEl.on(swiper.touchEvents.move, ".".concat(swiper.params.zoom.containerClass), zoom.onTouchMove);
  },
  disable: function disable() {
    var swiper = this;
    var zoom = swiper.zoom;
    if (!zoom.enabled) return;
    swiper.zoom.enabled = false;
    var passiveListener = swiper.touchEvents.start === 'touchstart' && Support.passiveListener && swiper.params.passiveListeners ? {
      passive: true,
      capture: false
    } : false; // Scale image

    if (Support.gestures) {
      swiper.$wrapperEl.off('gesturestart', '.swiper-slide', zoom.onGestureStart, passiveListener);
      swiper.$wrapperEl.off('gesturechange', '.swiper-slide', zoom.onGestureChange, passiveListener);
      swiper.$wrapperEl.off('gestureend', '.swiper-slide', zoom.onGestureEnd, passiveListener);
    } else if (swiper.touchEvents.start === 'touchstart') {
      swiper.$wrapperEl.off(swiper.touchEvents.start, '.swiper-slide', zoom.onGestureStart, passiveListener);
      swiper.$wrapperEl.off(swiper.touchEvents.move, '.swiper-slide', zoom.onGestureChange, passiveListener);
      swiper.$wrapperEl.off(swiper.touchEvents.end, '.swiper-slide', zoom.onGestureEnd, passiveListener);
    } // Move image


    swiper.$wrapperEl.off(swiper.touchEvents.move, ".".concat(swiper.params.zoom.containerClass), zoom.onTouchMove);
  }
};
var Zoom$1 = {
  name: 'zoom',
  params: {
    zoom: {
      enabled: false,
      maxRatio: 3,
      minRatio: 1,
      toggle: true,
      containerClass: 'swiper-zoom-container',
      zoomedSlideClass: 'swiper-slide-zoomed'
    }
  },
  create: function create() {
    var swiper = this;
    var zoom = {
      enabled: false,
      scale: 1,
      currentScale: 1,
      isScaling: false,
      gesture: {
        $slideEl: undefined,
        slideWidth: undefined,
        slideHeight: undefined,
        $imageEl: undefined,
        $imageWrapEl: undefined,
        maxRatio: 3
      },
      image: {
        isTouched: undefined,
        isMoved: undefined,
        currentX: undefined,
        currentY: undefined,
        minX: undefined,
        minY: undefined,
        maxX: undefined,
        maxY: undefined,
        width: undefined,
        height: undefined,
        startX: undefined,
        startY: undefined,
        touchesStart: {},
        touchesCurrent: {}
      },
      velocity: {
        x: undefined,
        y: undefined,
        prevPositionX: undefined,
        prevPositionY: undefined,
        prevTime: undefined
      }
    };
    'onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out'.split(' ').forEach(function (methodName) {
      zoom[methodName] = Zoom[methodName].bind(swiper);
    });
    Utils.extend(swiper, {
      zoom: zoom
    });
    var scale = 1;
    Object.defineProperty(swiper.zoom, 'scale', {
      get: function get() {
        return scale;
      },
      set: function set(value) {
        if (scale !== value) {
          var imageEl = swiper.zoom.gesture.$imageEl ? swiper.zoom.gesture.$imageEl[0] : undefined;
          var slideEl = swiper.zoom.gesture.$slideEl ? swiper.zoom.gesture.$slideEl[0] : undefined;
          swiper.emit('zoomChange', value, imageEl, slideEl);
        }

        scale = value;
      }
    });
  },
  on: {
    init: function init() {
      var swiper = this;

      if (swiper.params.zoom.enabled) {
        swiper.zoom.enable();
      }
    },
    destroy: function destroy() {
      var swiper = this;
      swiper.zoom.disable();
    },
    touchStart: function touchStart(e) {
      var swiper = this;
      if (!swiper.zoom.enabled) return;
      swiper.zoom.onTouchStart(e);
    },
    touchEnd: function touchEnd(e) {
      var swiper = this;
      if (!swiper.zoom.enabled) return;
      swiper.zoom.onTouchEnd(e);
    },
    doubleTap: function doubleTap(e) {
      var swiper = this;

      if (swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {
        swiper.zoom.toggle(e);
      }
    },
    transitionEnd: function transitionEnd() {
      var swiper = this;

      if (swiper.zoom.enabled && swiper.params.zoom.enabled) {
        swiper.zoom.onTransitionEnd();
      }
    }
  }
};
var Lazy = {
  loadInSlide: function loadInSlide(index) {
    var loadInDuplicate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var swiper = this;
    var params = swiper.params.lazy;
    if (typeof index === 'undefined') return;
    if (swiper.slides.length === 0) return;
    var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
    var $slideEl = isVirtual ? swiper.$wrapperEl.children(".".concat(swiper.params.slideClass, "[data-swiper-slide-index=\"").concat(index, "\"]")) : swiper.slides.eq(index);
    var $images = $slideEl.find(".".concat(params.elementClass, ":not(.").concat(params.loadedClass, "):not(.").concat(params.loadingClass, ")"));

    if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {
      $images = $images.add($slideEl[0]);
    }

    if ($images.length === 0) return;
    $images.each(function (imageIndex, imageEl) {
      var $imageEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(imageEl);
      $imageEl.addClass(params.loadingClass);
      var background = $imageEl.attr('data-background');
      var src = $imageEl.attr('data-src');
      var srcset = $imageEl.attr('data-srcset');
      var sizes = $imageEl.attr('data-sizes');
      swiper.loadImage($imageEl[0], src || background, srcset, sizes, false, function () {
        if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper && !swiper.params || swiper.destroyed) return;

        if (background) {
          $imageEl.css('background-image', "url(\"".concat(background, "\")"));
          $imageEl.removeAttr('data-background');
        } else {
          if (srcset) {
            $imageEl.attr('srcset', srcset);
            $imageEl.removeAttr('data-srcset');
          }

          if (sizes) {
            $imageEl.attr('sizes', sizes);
            $imageEl.removeAttr('data-sizes');
          }

          if (src) {
            $imageEl.attr('src', src);
            $imageEl.removeAttr('data-src');
          }
        }

        $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);
        $slideEl.find(".".concat(params.preloaderClass)).remove();

        if (swiper.params.loop && loadInDuplicate) {
          var slideOriginalIndex = $slideEl.attr('data-swiper-slide-index');

          if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {
            var originalSlide = swiper.$wrapperEl.children("[data-swiper-slide-index=\"".concat(slideOriginalIndex, "\"]:not(.").concat(swiper.params.slideDuplicateClass, ")"));
            swiper.lazy.loadInSlide(originalSlide.index(), false);
          } else {
            var duplicatedSlide = swiper.$wrapperEl.children(".".concat(swiper.params.slideDuplicateClass, "[data-swiper-slide-index=\"").concat(slideOriginalIndex, "\"]"));
            swiper.lazy.loadInSlide(duplicatedSlide.index(), false);
          }
        }

        swiper.emit('lazyImageReady', $slideEl[0], $imageEl[0]);
      });
      swiper.emit('lazyImageLoad', $slideEl[0], $imageEl[0]);
    });
  },
  load: function load() {
    var swiper = this;
    var $wrapperEl = swiper.$wrapperEl,
        swiperParams = swiper.params,
        slides = swiper.slides,
        activeIndex = swiper.activeIndex;
    var isVirtual = swiper.virtual && swiperParams.virtual.enabled;
    var params = swiperParams.lazy;
    var slidesPerView = swiperParams.slidesPerView;

    if (slidesPerView === 'auto') {
      slidesPerView = 0;
    }

    function slideExist(index) {
      if (isVirtual) {
        if ($wrapperEl.children(".".concat(swiperParams.slideClass, "[data-swiper-slide-index=\"").concat(index, "\"]")).length) {
          return true;
        }
      } else if (slides[index]) return true;

      return false;
    }

    function slideIndex(slideEl) {
      if (isVirtual) {
        return Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(slideEl).attr('data-swiper-slide-index');
      }

      return Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(slideEl).index();
    }

    if (!swiper.lazy.initialImageLoaded) swiper.lazy.initialImageLoaded = true;

    if (swiper.params.watchSlidesVisibility) {
      $wrapperEl.children(".".concat(swiperParams.slideVisibleClass)).each(function (elIndex, slideEl) {
        var index = isVirtual ? Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(slideEl).attr('data-swiper-slide-index') : Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(slideEl).index();
        swiper.lazy.loadInSlide(index);
      });
    } else if (slidesPerView > 1) {
      for (var i = activeIndex; i < activeIndex + slidesPerView; i += 1) {
        if (slideExist(i)) swiper.lazy.loadInSlide(i);
      }
    } else {
      swiper.lazy.loadInSlide(activeIndex);
    }

    if (params.loadPrevNext) {
      if (slidesPerView > 1 || params.loadPrevNextAmount && params.loadPrevNextAmount > 1) {
        var amount = params.loadPrevNextAmount;
        var spv = slidesPerView;
        var maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);
        var minIndex = Math.max(activeIndex - Math.max(spv, amount), 0); // Next Slides

        for (var _i10 = activeIndex + slidesPerView; _i10 < maxIndex; _i10 += 1) {
          if (slideExist(_i10)) swiper.lazy.loadInSlide(_i10);
        } // Prev Slides


        for (var _i11 = minIndex; _i11 < activeIndex; _i11 += 1) {
          if (slideExist(_i11)) swiper.lazy.loadInSlide(_i11);
        }
      } else {
        var nextSlide = $wrapperEl.children(".".concat(swiperParams.slideNextClass));
        if (nextSlide.length > 0) swiper.lazy.loadInSlide(slideIndex(nextSlide));
        var prevSlide = $wrapperEl.children(".".concat(swiperParams.slidePrevClass));
        if (prevSlide.length > 0) swiper.lazy.loadInSlide(slideIndex(prevSlide));
      }
    }
  }
};
var Lazy$1 = {
  name: 'lazy',
  params: {
    lazy: {
      enabled: false,
      loadPrevNext: false,
      loadPrevNextAmount: 1,
      loadOnTransitionStart: false,
      elementClass: 'swiper-lazy',
      loadingClass: 'swiper-lazy-loading',
      loadedClass: 'swiper-lazy-loaded',
      preloaderClass: 'swiper-lazy-preloader'
    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      lazy: {
        initialImageLoaded: false,
        load: Lazy.load.bind(swiper),
        loadInSlide: Lazy.loadInSlide.bind(swiper)
      }
    });
  },
  on: {
    beforeInit: function beforeInit() {
      var swiper = this;

      if (swiper.params.lazy.enabled && swiper.params.preloadImages) {
        swiper.params.preloadImages = false;
      }
    },
    init: function init() {
      var swiper = this;

      if (swiper.params.lazy.enabled && !swiper.params.loop && swiper.params.initialSlide === 0) {
        swiper.lazy.load();
      }
    },
    scroll: function scroll() {
      var swiper = this;

      if (swiper.params.freeMode && !swiper.params.freeModeSticky) {
        swiper.lazy.load();
      }
    },
    resize: function resize() {
      var swiper = this;

      if (swiper.params.lazy.enabled) {
        swiper.lazy.load();
      }
    },
    scrollbarDragMove: function scrollbarDragMove() {
      var swiper = this;

      if (swiper.params.lazy.enabled) {
        swiper.lazy.load();
      }
    },
    transitionStart: function transitionStart() {
      var swiper = this;

      if (swiper.params.lazy.enabled) {
        if (swiper.params.lazy.loadOnTransitionStart || !swiper.params.lazy.loadOnTransitionStart && !swiper.lazy.initialImageLoaded) {
          swiper.lazy.load();
        }
      }
    },
    transitionEnd: function transitionEnd() {
      var swiper = this;

      if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {
        swiper.lazy.load();
      }
    }
  }
};
/* eslint no-bitwise: ["error", { "allow": [">>"] }] */

var Controller = {
  LinearSpline: function LinearSpline(x, y) {
    var binarySearch = function search() {
      var maxIndex;
      var minIndex;
      var guess;
      return function (array, val) {
        minIndex = -1;
        maxIndex = array.length;

        while (maxIndex - minIndex > 1) {
          guess = maxIndex + minIndex >> 1;

          if (array[guess] <= val) {
            minIndex = guess;
          } else {
            maxIndex = guess;
          }
        }

        return maxIndex;
      };
    }();

    this.x = x;
    this.y = y;
    this.lastIndex = x.length - 1; // Given an x value (x2), return the expected y2 value:
    // (x1,y1) is the known point before given value,
    // (x3,y3) is the known point after given value.

    var i1;
    var i3;

    this.interpolate = function interpolate(x2) {
      if (!x2) return 0; // Get the indexes of x1 and x3 (the array indexes before and after given x2):

      i3 = binarySearch(this.x, x2);
      i1 = i3 - 1; // We have our indexes i1 & i3, so we can calculate already:
      // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1

      return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];
    };

    return this;
  },
  // xxx: for now i will just save one spline function to to
  getInterpolateFunction: function getInterpolateFunction(c) {
    var swiper = this;

    if (!swiper.controller.spline) {
      swiper.controller.spline = swiper.params.loop ? new Controller.LinearSpline(swiper.slidesGrid, c.slidesGrid) : new Controller.LinearSpline(swiper.snapGrid, c.snapGrid);
    }
  },
  setTranslate: function setTranslate(_setTranslate, byController) {
    var swiper = this;
    var controlled = swiper.controller.control;
    var multiplier;
    var controlledTranslate;

    function setControlledTranslate(c) {
      // this will create an Interpolate function based on the snapGrids
      // x is the Grid of the scrolled scroller and y will be the controlled scroller
      // it makes sense to create this only once and recall it for the interpolation
      // the function does a lot of value caching for performance
      var translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;

      if (swiper.params.controller.by === 'slide') {
        swiper.controller.getInterpolateFunction(c); // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
        // but it did not work out

        controlledTranslate = -swiper.controller.spline.interpolate(-translate);
      }

      if (!controlledTranslate || swiper.params.controller.by === 'container') {
        multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());
        controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();
      }

      if (swiper.params.controller.inverse) {
        controlledTranslate = c.maxTranslate() - controlledTranslate;
      }

      c.updateProgress(controlledTranslate);
      c.setTranslate(controlledTranslate, swiper);
      c.updateActiveIndex();
      c.updateSlidesClasses();
    }

    if (Array.isArray(controlled)) {
      for (var i = 0; i < controlled.length; i += 1) {
        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
          setControlledTranslate(controlled[i]);
        }
      }
    } else if (controlled instanceof Swiper && byController !== controlled) {
      setControlledTranslate(controlled);
    }
  },
  setTransition: function setTransition(duration, byController) {
    var swiper = this;
    var controlled = swiper.controller.control;
    var i;

    function setControlledTransition(c) {
      c.setTransition(duration, swiper);

      if (duration !== 0) {
        c.transitionStart();

        if (c.params.autoHeight) {
          Utils.nextTick(function () {
            c.updateAutoHeight();
          });
        }

        c.$wrapperEl.transitionEnd(function () {
          if (!controlled) return;

          if (c.params.loop && swiper.params.controller.by === 'slide') {
            c.loopFix();
          }

          c.transitionEnd();
        });
      }
    }

    if (Array.isArray(controlled)) {
      for (i = 0; i < controlled.length; i += 1) {
        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
          setControlledTransition(controlled[i]);
        }
      }
    } else if (controlled instanceof Swiper && byController !== controlled) {
      setControlledTransition(controlled);
    }
  }
};
var Controller$1 = {
  name: 'controller',
  params: {
    controller: {
      control: undefined,
      inverse: false,
      by: 'slide' // or 'container'

    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      controller: {
        control: swiper.params.controller.control,
        getInterpolateFunction: Controller.getInterpolateFunction.bind(swiper),
        setTranslate: Controller.setTranslate.bind(swiper),
        setTransition: Controller.setTransition.bind(swiper)
      }
    });
  },
  on: {
    update: function update() {
      var swiper = this;
      if (!swiper.controller.control) return;

      if (swiper.controller.spline) {
        swiper.controller.spline = undefined;
        delete swiper.controller.spline;
      }
    },
    resize: function resize() {
      var swiper = this;
      if (!swiper.controller.control) return;

      if (swiper.controller.spline) {
        swiper.controller.spline = undefined;
        delete swiper.controller.spline;
      }
    },
    observerUpdate: function observerUpdate() {
      var swiper = this;
      if (!swiper.controller.control) return;

      if (swiper.controller.spline) {
        swiper.controller.spline = undefined;
        delete swiper.controller.spline;
      }
    },
    setTranslate: function setTranslate(translate, byController) {
      var swiper = this;
      if (!swiper.controller.control) return;
      swiper.controller.setTranslate(translate, byController);
    },
    setTransition: function setTransition(duration, byController) {
      var swiper = this;
      if (!swiper.controller.control) return;
      swiper.controller.setTransition(duration, byController);
    }
  }
};
var a11y = {
  makeElFocusable: function makeElFocusable($el) {
    $el.attr('tabIndex', '0');
    return $el;
  },
  addElRole: function addElRole($el, role) {
    $el.attr('role', role);
    return $el;
  },
  addElLabel: function addElLabel($el, label) {
    $el.attr('aria-label', label);
    return $el;
  },
  disableEl: function disableEl($el) {
    $el.attr('aria-disabled', true);
    return $el;
  },
  enableEl: function enableEl($el) {
    $el.attr('aria-disabled', false);
    return $el;
  },
  onEnterKey: function onEnterKey(e) {
    var swiper = this;
    var params = swiper.params.a11y;
    if (e.keyCode !== 13) return;
    var $targetEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target);

    if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {
      if (!(swiper.isEnd && !swiper.params.loop)) {
        swiper.slideNext();
      }

      if (swiper.isEnd) {
        swiper.a11y.notify(params.lastSlideMessage);
      } else {
        swiper.a11y.notify(params.nextSlideMessage);
      }
    }

    if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {
      if (!(swiper.isBeginning && !swiper.params.loop)) {
        swiper.slidePrev();
      }

      if (swiper.isBeginning) {
        swiper.a11y.notify(params.firstSlideMessage);
      } else {
        swiper.a11y.notify(params.prevSlideMessage);
      }
    }

    if (swiper.pagination && $targetEl.is(".".concat(swiper.params.pagination.bulletClass))) {
      $targetEl[0].click();
    }
  },
  notify: function notify(message) {
    var swiper = this;
    var notification = swiper.a11y.liveRegion;
    if (notification.length === 0) return;
    notification.html('');
    notification.html(message);
  },
  updateNavigation: function updateNavigation() {
    var swiper = this;
    if (swiper.params.loop) return;
    var _swiper$navigation4 = swiper.navigation,
        $nextEl = _swiper$navigation4.$nextEl,
        $prevEl = _swiper$navigation4.$prevEl;

    if ($prevEl && $prevEl.length > 0) {
      if (swiper.isBeginning) {
        swiper.a11y.disableEl($prevEl);
      } else {
        swiper.a11y.enableEl($prevEl);
      }
    }

    if ($nextEl && $nextEl.length > 0) {
      if (swiper.isEnd) {
        swiper.a11y.disableEl($nextEl);
      } else {
        swiper.a11y.enableEl($nextEl);
      }
    }
  },
  updatePagination: function updatePagination() {
    var swiper = this;
    var params = swiper.params.a11y;

    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
      swiper.pagination.bullets.each(function (bulletIndex, bulletEl) {
        var $bulletEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(bulletEl);
        swiper.a11y.makeElFocusable($bulletEl);
        swiper.a11y.addElRole($bulletEl, 'button');
        swiper.a11y.addElLabel($bulletEl, params.paginationBulletMessage.replace(/{{index}}/, $bulletEl.index() + 1));
      });
    }
  },
  init: function init() {
    var swiper = this;
    swiper.$el.append(swiper.a11y.liveRegion); // Navigation

    var params = swiper.params.a11y;
    var $nextEl;
    var $prevEl;

    if (swiper.navigation && swiper.navigation.$nextEl) {
      $nextEl = swiper.navigation.$nextEl;
    }

    if (swiper.navigation && swiper.navigation.$prevEl) {
      $prevEl = swiper.navigation.$prevEl;
    }

    if ($nextEl) {
      swiper.a11y.makeElFocusable($nextEl);
      swiper.a11y.addElRole($nextEl, 'button');
      swiper.a11y.addElLabel($nextEl, params.nextSlideMessage);
      $nextEl.on('keydown', swiper.a11y.onEnterKey);
    }

    if ($prevEl) {
      swiper.a11y.makeElFocusable($prevEl);
      swiper.a11y.addElRole($prevEl, 'button');
      swiper.a11y.addElLabel($prevEl, params.prevSlideMessage);
      $prevEl.on('keydown', swiper.a11y.onEnterKey);
    } // Pagination


    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
      swiper.pagination.$el.on('keydown', ".".concat(swiper.params.pagination.bulletClass), swiper.a11y.onEnterKey);
    }
  },
  destroy: function destroy() {
    var swiper = this;
    if (swiper.a11y.liveRegion && swiper.a11y.liveRegion.length > 0) swiper.a11y.liveRegion.remove();
    var $nextEl;
    var $prevEl;

    if (swiper.navigation && swiper.navigation.$nextEl) {
      $nextEl = swiper.navigation.$nextEl;
    }

    if (swiper.navigation && swiper.navigation.$prevEl) {
      $prevEl = swiper.navigation.$prevEl;
    }

    if ($nextEl) {
      $nextEl.off('keydown', swiper.a11y.onEnterKey);
    }

    if ($prevEl) {
      $prevEl.off('keydown', swiper.a11y.onEnterKey);
    } // Pagination


    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
      swiper.pagination.$el.off('keydown', ".".concat(swiper.params.pagination.bulletClass), swiper.a11y.onEnterKey);
    }
  }
};
var A11y = {
  name: 'a11y',
  params: {
    a11y: {
      enabled: true,
      notificationClass: 'swiper-notification',
      prevSlideMessage: 'Previous slide',
      nextSlideMessage: 'Next slide',
      firstSlideMessage: 'This is the first slide',
      lastSlideMessage: 'This is the last slide',
      paginationBulletMessage: 'Go to slide {{index}}'
    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      a11y: {
        liveRegion: Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])("<span class=\"".concat(swiper.params.a11y.notificationClass, "\" aria-live=\"assertive\" aria-atomic=\"true\"></span>"))
      }
    });
    Object.keys(a11y).forEach(function (methodName) {
      swiper.a11y[methodName] = a11y[methodName].bind(swiper);
    });
  },
  on: {
    init: function init() {
      var swiper = this;
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.init();
      swiper.a11y.updateNavigation();
    },
    toEdge: function toEdge() {
      var swiper = this;
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.updateNavigation();
    },
    fromEdge: function fromEdge() {
      var swiper = this;
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.updateNavigation();
    },
    paginationUpdate: function paginationUpdate() {
      var swiper = this;
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.updatePagination();
    },
    destroy: function destroy() {
      var swiper = this;
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.destroy();
    }
  }
};
var History = {
  init: function init() {
    var swiper = this;
    if (!swiper.params.history) return;

    if (!ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].history || !ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].history.pushState) {
      swiper.params.history.enabled = false;
      swiper.params.hashNavigation.enabled = true;
      return;
    }

    var history = swiper.history;
    history.initialized = true;
    history.paths = History.getPathValues();
    if (!history.paths.key && !history.paths.value) return;
    history.scrollToSlide(0, history.paths.value, swiper.params.runCallbacksOnInit);

    if (!swiper.params.history.replaceState) {
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].addEventListener('popstate', swiper.history.setHistoryPopState);
    }
  },
  destroy: function destroy() {
    var swiper = this;

    if (!swiper.params.history.replaceState) {
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].removeEventListener('popstate', swiper.history.setHistoryPopState);
    }
  },
  setHistoryPopState: function setHistoryPopState() {
    var swiper = this;
    swiper.history.paths = History.getPathValues();
    swiper.history.scrollToSlide(swiper.params.speed, swiper.history.paths.value, false);
  },
  getPathValues: function getPathValues() {
    var pathArray = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].location.pathname.slice(1).split('/').filter(function (part) {
      return part !== '';
    });
    var total = pathArray.length;
    var key = pathArray[total - 2];
    var value = pathArray[total - 1];
    return {
      key: key,
      value: value
    };
  },
  setHistory: function setHistory(key, index) {
    var swiper = this;
    if (!swiper.history.initialized || !swiper.params.history.enabled) return;
    var slide = swiper.slides.eq(index);
    var value = History.slugify(slide.attr('data-history'));

    if (!ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].location.pathname.includes(key)) {
      value = "".concat(key, "/").concat(value);
    }

    var currentState = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].history.state;

    if (currentState && currentState.value === value) {
      return;
    }

    if (swiper.params.history.replaceState) {
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].history.replaceState({
        value: value
      }, null, value);
    } else {
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].history.pushState({
        value: value
      }, null, value);
    }
  },
  slugify: function slugify(text) {
    return text.toString().replace(/\s+/g, '-').replace(/[^\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');
  },
  scrollToSlide: function scrollToSlide(speed, value, runCallbacks) {
    var swiper = this;

    if (value) {
      for (var i = 0, length = swiper.slides.length; i < length; i += 1) {
        var _slide3 = swiper.slides.eq(i);

        var slideHistory = History.slugify(_slide3.attr('data-history'));

        if (slideHistory === value && !_slide3.hasClass(swiper.params.slideDuplicateClass)) {
          var _index2 = _slide3.index();

          swiper.slideTo(_index2, speed, runCallbacks);
        }
      }
    } else {
      swiper.slideTo(0, speed, runCallbacks);
    }
  }
};
var History$1 = {
  name: 'history',
  params: {
    history: {
      enabled: false,
      replaceState: false,
      key: 'slides'
    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      history: {
        init: History.init.bind(swiper),
        setHistory: History.setHistory.bind(swiper),
        setHistoryPopState: History.setHistoryPopState.bind(swiper),
        scrollToSlide: History.scrollToSlide.bind(swiper),
        destroy: History.destroy.bind(swiper)
      }
    });
  },
  on: {
    init: function init() {
      var swiper = this;

      if (swiper.params.history.enabled) {
        swiper.history.init();
      }
    },
    destroy: function destroy() {
      var swiper = this;

      if (swiper.params.history.enabled) {
        swiper.history.destroy();
      }
    },
    transitionEnd: function transitionEnd() {
      var swiper = this;

      if (swiper.history.initialized) {
        swiper.history.setHistory(swiper.params.history.key, swiper.activeIndex);
      }
    }
  }
};
var HashNavigation = {
  onHashCange: function onHashCange() {
    var swiper = this;
    var newHash = ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].location.hash.replace('#', '');
    var activeSlideHash = swiper.slides.eq(swiper.activeIndex).attr('data-hash');

    if (newHash !== activeSlideHash) {
      var newIndex = swiper.$wrapperEl.children(".".concat(swiper.params.slideClass, "[data-hash=\"").concat(newHash, "\"]")).index();
      if (typeof newIndex === 'undefined') return;
      swiper.slideTo(newIndex);
    }
  },
  setHash: function setHash() {
    var swiper = this;
    if (!swiper.hashNavigation.initialized || !swiper.params.hashNavigation.enabled) return;

    if (swiper.params.hashNavigation.replaceState && ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].history && ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].history.replaceState) {
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].history.replaceState(null, null, "#".concat(swiper.slides.eq(swiper.activeIndex).attr('data-hash')) || false);
    } else {
      var _slide4 = swiper.slides.eq(swiper.activeIndex);

      var hash = _slide4.attr('data-hash') || _slide4.attr('data-history');

      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].location.hash = hash || '';
    }
  },
  init: function init() {
    var swiper = this;
    if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) return;
    swiper.hashNavigation.initialized = true;
    var hash = ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].location.hash.replace('#', '');

    if (hash) {
      var speed = 0;

      for (var i = 0, length = swiper.slides.length; i < length; i += 1) {
        var _slide5 = swiper.slides.eq(i);

        var slideHash = _slide5.attr('data-hash') || _slide5.attr('data-history');

        if (slideHash === hash && !_slide5.hasClass(swiper.params.slideDuplicateClass)) {
          var _index3 = _slide5.index();

          swiper.slideTo(_index3, speed, swiper.params.runCallbacksOnInit, true);
        }
      }
    }

    if (swiper.params.hashNavigation.watchState) {
      Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"]).on('hashchange', swiper.hashNavigation.onHashCange);
    }
  },
  destroy: function destroy() {
    var swiper = this;

    if (swiper.params.hashNavigation.watchState) {
      Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"]).off('hashchange', swiper.hashNavigation.onHashCange);
    }
  }
};
var HashNavigation$1 = {
  name: 'hash-navigation',
  params: {
    hashNavigation: {
      enabled: false,
      replaceState: false,
      watchState: false
    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      hashNavigation: {
        initialized: false,
        init: HashNavigation.init.bind(swiper),
        destroy: HashNavigation.destroy.bind(swiper),
        setHash: HashNavigation.setHash.bind(swiper),
        onHashCange: HashNavigation.onHashCange.bind(swiper)
      }
    });
  },
  on: {
    init: function init() {
      var swiper = this;

      if (swiper.params.hashNavigation.enabled) {
        swiper.hashNavigation.init();
      }
    },
    destroy: function destroy() {
      var swiper = this;

      if (swiper.params.hashNavigation.enabled) {
        swiper.hashNavigation.destroy();
      }
    },
    transitionEnd: function transitionEnd() {
      var swiper = this;

      if (swiper.hashNavigation.initialized) {
        swiper.hashNavigation.setHash();
      }
    }
  }
};
/* eslint no-underscore-dangle: "off" */

var Autoplay = {
  run: function run() {
    var swiper = this;
    var $activeSlideEl = swiper.slides.eq(swiper.activeIndex);
    var delay = swiper.params.autoplay.delay;

    if ($activeSlideEl.attr('data-swiper-autoplay')) {
      delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;
    }

    swiper.autoplay.timeout = Utils.nextTick(function () {
      if (swiper.params.autoplay.reverseDirection) {
        if (swiper.params.loop) {
          swiper.loopFix();
          swiper.slidePrev(swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else if (!swiper.isBeginning) {
          swiper.slidePrev(swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else if (!swiper.params.autoplay.stopOnLastSlide) {
          swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else {
          swiper.autoplay.stop();
        }
      } else if (swiper.params.loop) {
        swiper.loopFix();
        swiper.slideNext(swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else if (!swiper.isEnd) {
        swiper.slideNext(swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else if (!swiper.params.autoplay.stopOnLastSlide) {
        swiper.slideTo(0, swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else {
        swiper.autoplay.stop();
      }
    }, delay);
  },
  start: function start() {
    var swiper = this;
    if (typeof swiper.autoplay.timeout !== 'undefined') return false;
    if (swiper.autoplay.running) return false;
    swiper.autoplay.running = true;
    swiper.emit('autoplayStart');
    swiper.autoplay.run();
    return true;
  },
  stop: function stop() {
    var swiper = this;
    if (!swiper.autoplay.running) return false;
    if (typeof swiper.autoplay.timeout === 'undefined') return false;

    if (swiper.autoplay.timeout) {
      clearTimeout(swiper.autoplay.timeout);
      swiper.autoplay.timeout = undefined;
    }

    swiper.autoplay.running = false;
    swiper.emit('autoplayStop');
    return true;
  },
  pause: function pause(speed) {
    var swiper = this;
    if (!swiper.autoplay.running) return;
    if (swiper.autoplay.paused) return;
    if (swiper.autoplay.timeout) clearTimeout(swiper.autoplay.timeout);
    swiper.autoplay.paused = true;

    if (speed === 0 || !swiper.params.autoplay.waitForTransition) {
      swiper.autoplay.paused = false;
      swiper.autoplay.run();
    } else {
      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.autoplay.onTransitionEnd);
      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.autoplay.onTransitionEnd);
    }
  }
};
var Autoplay$1 = {
  name: 'autoplay',
  params: {
    autoplay: {
      enabled: false,
      delay: 3000,
      waitForTransition: true,
      disableOnInteraction: true,
      stopOnLastSlide: false,
      reverseDirection: false
    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      autoplay: {
        running: false,
        paused: false,
        run: Autoplay.run.bind(swiper),
        start: Autoplay.start.bind(swiper),
        stop: Autoplay.stop.bind(swiper),
        pause: Autoplay.pause.bind(swiper),
        onTransitionEnd: function onTransitionEnd(e) {
          if (!swiper || swiper.destroyed || !swiper.$wrapperEl) return;
          if (e.target !== this) return;
          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.autoplay.onTransitionEnd);
          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.autoplay.onTransitionEnd);
          swiper.autoplay.paused = false;

          if (!swiper.autoplay.running) {
            swiper.autoplay.stop();
          } else {
            swiper.autoplay.run();
          }
        }
      }
    });
  },
  on: {
    init: function init() {
      var swiper = this;

      if (swiper.params.autoplay.enabled) {
        swiper.autoplay.start();
      }
    },
    beforeTransitionStart: function beforeTransitionStart(speed, internal) {
      var swiper = this;

      if (swiper.autoplay.running) {
        if (internal || !swiper.params.autoplay.disableOnInteraction) {
          swiper.autoplay.pause(speed);
        } else {
          swiper.autoplay.stop();
        }
      }
    },
    sliderFirstMove: function sliderFirstMove() {
      var swiper = this;

      if (swiper.autoplay.running) {
        if (swiper.params.autoplay.disableOnInteraction) {
          swiper.autoplay.stop();
        } else {
          swiper.autoplay.pause();
        }
      }
    },
    destroy: function destroy() {
      var swiper = this;

      if (swiper.autoplay.running) {
        swiper.autoplay.stop();
      }
    }
  }
};
var Fade = {
  setTranslate: function setTranslate() {
    var swiper = this;
    var slides = swiper.slides;

    for (var i = 0; i < slides.length; i += 1) {
      var $slideEl = swiper.slides.eq(i);
      var _offset = $slideEl[0].swiperSlideOffset;
      var tx = -_offset;
      if (!swiper.params.virtualTranslate) tx -= swiper.translate;
      var ty = 0;

      if (!swiper.isHorizontal()) {
        ty = tx;
        tx = 0;
      }

      var slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs($slideEl[0].progress), 0) : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);
      $slideEl.css({
        opacity: slideOpacity
      }).transform("translate3d(".concat(tx, "px, ").concat(ty, "px, 0px)"));
    }
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    var slides = swiper.slides,
        $wrapperEl = swiper.$wrapperEl;
    slides.transition(duration);

    if (swiper.params.virtualTranslate && duration !== 0) {
      var eventTriggered = false;
      slides.transitionEnd(function () {
        if (eventTriggered) return;
        if (!swiper || swiper.destroyed) return;
        eventTriggered = true;
        swiper.animating = false;
        var triggerEvents = ['webkitTransitionEnd', 'transitionend'];

        for (var i = 0; i < triggerEvents.length; i += 1) {
          $wrapperEl.trigger(triggerEvents[i]);
        }
      });
    }
  }
};
var EffectFade = {
  name: 'effect-fade',
  params: {
    fadeEffect: {
      crossFade: false
    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      fadeEffect: {
        setTranslate: Fade.setTranslate.bind(swiper),
        setTransition: Fade.setTransition.bind(swiper)
      }
    });
  },
  on: {
    beforeInit: function beforeInit() {
      var swiper = this;
      if (swiper.params.effect !== 'fade') return;
      swiper.classNames.push("".concat(swiper.params.containerModifierClass, "fade"));
      var overwriteParams = {
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        spaceBetween: 0,
        virtualTranslate: true
      };
      Utils.extend(swiper.params, overwriteParams);
      Utils.extend(swiper.originalParams, overwriteParams);
    },
    setTranslate: function setTranslate() {
      var swiper = this;
      if (swiper.params.effect !== 'fade') return;
      swiper.fadeEffect.setTranslate();
    },
    setTransition: function setTransition(duration) {
      var swiper = this;
      if (swiper.params.effect !== 'fade') return;
      swiper.fadeEffect.setTransition(duration);
    }
  }
};
var Cube = {
  setTranslate: function setTranslate() {
    var swiper = this;
    var $el = swiper.$el,
        $wrapperEl = swiper.$wrapperEl,
        slides = swiper.slides,
        swiperWidth = swiper.width,
        swiperHeight = swiper.height,
        rtl = swiper.rtlTranslate,
        swiperSize = swiper.size;
    var params = swiper.params.cubeEffect;
    var isHorizontal = swiper.isHorizontal();
    var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
    var wrapperRotate = 0;
    var $cubeShadowEl;

    if (params.shadow) {
      if (isHorizontal) {
        $cubeShadowEl = $wrapperEl.find('.swiper-cube-shadow');

        if ($cubeShadowEl.length === 0) {
          $cubeShadowEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])('<div class="swiper-cube-shadow"></div>');
          $wrapperEl.append($cubeShadowEl);
        }

        $cubeShadowEl.css({
          height: "".concat(swiperWidth, "px")
        });
      } else {
        $cubeShadowEl = $el.find('.swiper-cube-shadow');

        if ($cubeShadowEl.length === 0) {
          $cubeShadowEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])('<div class="swiper-cube-shadow"></div>');
          $el.append($cubeShadowEl);
        }
      }
    }

    for (var i = 0; i < slides.length; i += 1) {
      var $slideEl = slides.eq(i);
      var slideIndex = i;

      if (isVirtual) {
        slideIndex = parseInt($slideEl.attr('data-swiper-slide-index'), 10);
      }

      var slideAngle = slideIndex * 90;
      var round = Math.floor(slideAngle / 360);

      if (rtl) {
        slideAngle = -slideAngle;
        round = Math.floor(-slideAngle / 360);
      }

      var progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
      var tx = 0;
      var ty = 0;
      var tz = 0;

      if (slideIndex % 4 === 0) {
        tx = -round * 4 * swiperSize;
        tz = 0;
      } else if ((slideIndex - 1) % 4 === 0) {
        tx = 0;
        tz = -round * 4 * swiperSize;
      } else if ((slideIndex - 2) % 4 === 0) {
        tx = swiperSize + round * 4 * swiperSize;
        tz = swiperSize;
      } else if ((slideIndex - 3) % 4 === 0) {
        tx = -swiperSize;
        tz = 3 * swiperSize + swiperSize * 4 * round;
      }

      if (rtl) {
        tx = -tx;
      }

      if (!isHorizontal) {
        ty = tx;
        tx = 0;
      }

      var _transform = "rotateX(".concat(isHorizontal ? 0 : -slideAngle, "deg) rotateY(").concat(isHorizontal ? slideAngle : 0, "deg) translate3d(").concat(tx, "px, ").concat(ty, "px, ").concat(tz, "px)");

      if (progress <= 1 && progress > -1) {
        wrapperRotate = slideIndex * 90 + progress * 90;
        if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;
      }

      $slideEl.transform(_transform);

      if (params.slideShadows) {
        // Set shadows
        var shadowBefore = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
        var shadowAfter = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');

        if (shadowBefore.length === 0) {
          shadowBefore = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])("<div class=\"swiper-slide-shadow-".concat(isHorizontal ? 'left' : 'top', "\"></div>"));
          $slideEl.append(shadowBefore);
        }

        if (shadowAfter.length === 0) {
          shadowAfter = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])("<div class=\"swiper-slide-shadow-".concat(isHorizontal ? 'right' : 'bottom', "\"></div>"));
          $slideEl.append(shadowAfter);
        }

        if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);
        if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);
      }
    }

    $wrapperEl.css({
      '-webkit-transform-origin': "50% 50% -".concat(swiperSize / 2, "px"),
      '-moz-transform-origin': "50% 50% -".concat(swiperSize / 2, "px"),
      '-ms-transform-origin': "50% 50% -".concat(swiperSize / 2, "px"),
      'transform-origin': "50% 50% -".concat(swiperSize / 2, "px")
    });

    if (params.shadow) {
      if (isHorizontal) {
        $cubeShadowEl.transform("translate3d(0px, ".concat(swiperWidth / 2 + params.shadowOffset, "px, ").concat(-swiperWidth / 2, "px) rotateX(90deg) rotateZ(0deg) scale(").concat(params.shadowScale, ")"));
      } else {
        var shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;
        var multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);
        var scale1 = params.shadowScale;
        var scale2 = params.shadowScale / multiplier;
        var _offset2 = params.shadowOffset;
        $cubeShadowEl.transform("scale3d(".concat(scale1, ", 1, ").concat(scale2, ") translate3d(0px, ").concat(swiperHeight / 2 + _offset2, "px, ").concat(-swiperHeight / 2 / scale2, "px) rotateX(-90deg)"));
      }
    }

    var zFactor = Browser.isSafari || Browser.isUiWebView ? -swiperSize / 2 : 0;
    $wrapperEl.transform("translate3d(0px,0,".concat(zFactor, "px) rotateX(").concat(swiper.isHorizontal() ? 0 : wrapperRotate, "deg) rotateY(").concat(swiper.isHorizontal() ? -wrapperRotate : 0, "deg)"));
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    var $el = swiper.$el,
        slides = swiper.slides;
    slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);

    if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {
      $el.find('.swiper-cube-shadow').transition(duration);
    }
  }
};
var EffectCube = {
  name: 'effect-cube',
  params: {
    cubeEffect: {
      slideShadows: true,
      shadow: true,
      shadowOffset: 20,
      shadowScale: 0.94
    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      cubeEffect: {
        setTranslate: Cube.setTranslate.bind(swiper),
        setTransition: Cube.setTransition.bind(swiper)
      }
    });
  },
  on: {
    beforeInit: function beforeInit() {
      var swiper = this;
      if (swiper.params.effect !== 'cube') return;
      swiper.classNames.push("".concat(swiper.params.containerModifierClass, "cube"));
      swiper.classNames.push("".concat(swiper.params.containerModifierClass, "3d"));
      var overwriteParams = {
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        resistanceRatio: 0,
        spaceBetween: 0,
        centeredSlides: false,
        virtualTranslate: true
      };
      Utils.extend(swiper.params, overwriteParams);
      Utils.extend(swiper.originalParams, overwriteParams);
    },
    setTranslate: function setTranslate() {
      var swiper = this;
      if (swiper.params.effect !== 'cube') return;
      swiper.cubeEffect.setTranslate();
    },
    setTransition: function setTransition(duration) {
      var swiper = this;
      if (swiper.params.effect !== 'cube') return;
      swiper.cubeEffect.setTransition(duration);
    }
  }
};
var Flip = {
  setTranslate: function setTranslate() {
    var swiper = this;
    var slides = swiper.slides,
        rtl = swiper.rtlTranslate;

    for (var i = 0; i < slides.length; i += 1) {
      var $slideEl = slides.eq(i);
      var progress = $slideEl[0].progress;

      if (swiper.params.flipEffect.limitRotation) {
        progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
      }

      var _offset3 = $slideEl[0].swiperSlideOffset;
      var rotate = -180 * progress;
      var rotateY = rotate;
      var rotateX = 0;
      var tx = -_offset3;
      var ty = 0;

      if (!swiper.isHorizontal()) {
        ty = tx;
        tx = 0;
        rotateX = -rotateY;
        rotateY = 0;
      } else if (rtl) {
        rotateY = -rotateY;
      }

      $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;

      if (swiper.params.flipEffect.slideShadows) {
        // Set shadows
        var shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
        var shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');

        if (shadowBefore.length === 0) {
          shadowBefore = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])("<div class=\"swiper-slide-shadow-".concat(swiper.isHorizontal() ? 'left' : 'top', "\"></div>"));
          $slideEl.append(shadowBefore);
        }

        if (shadowAfter.length === 0) {
          shadowAfter = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])("<div class=\"swiper-slide-shadow-".concat(swiper.isHorizontal() ? 'right' : 'bottom', "\"></div>"));
          $slideEl.append(shadowAfter);
        }

        if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);
        if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);
      }

      $slideEl.transform("translate3d(".concat(tx, "px, ").concat(ty, "px, 0px) rotateX(").concat(rotateX, "deg) rotateY(").concat(rotateY, "deg)"));
    }
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    var slides = swiper.slides,
        activeIndex = swiper.activeIndex,
        $wrapperEl = swiper.$wrapperEl;
    slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);

    if (swiper.params.virtualTranslate && duration !== 0) {
      var eventTriggered = false; // eslint-disable-next-line

      slides.eq(activeIndex).transitionEnd(function onTransitionEnd() {
        if (eventTriggered) return;
        if (!swiper || swiper.destroyed) return; // if (!$(this).hasClass(swiper.params.slideActiveClass)) return;

        eventTriggered = true;
        swiper.animating = false;
        var triggerEvents = ['webkitTransitionEnd', 'transitionend'];

        for (var i = 0; i < triggerEvents.length; i += 1) {
          $wrapperEl.trigger(triggerEvents[i]);
        }
      });
    }
  }
};
var EffectFlip = {
  name: 'effect-flip',
  params: {
    flipEffect: {
      slideShadows: true,
      limitRotation: true
    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      flipEffect: {
        setTranslate: Flip.setTranslate.bind(swiper),
        setTransition: Flip.setTransition.bind(swiper)
      }
    });
  },
  on: {
    beforeInit: function beforeInit() {
      var swiper = this;
      if (swiper.params.effect !== 'flip') return;
      swiper.classNames.push("".concat(swiper.params.containerModifierClass, "flip"));
      swiper.classNames.push("".concat(swiper.params.containerModifierClass, "3d"));
      var overwriteParams = {
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        spaceBetween: 0,
        virtualTranslate: true
      };
      Utils.extend(swiper.params, overwriteParams);
      Utils.extend(swiper.originalParams, overwriteParams);
    },
    setTranslate: function setTranslate() {
      var swiper = this;
      if (swiper.params.effect !== 'flip') return;
      swiper.flipEffect.setTranslate();
    },
    setTransition: function setTransition(duration) {
      var swiper = this;
      if (swiper.params.effect !== 'flip') return;
      swiper.flipEffect.setTransition(duration);
    }
  }
};
var Coverflow = {
  setTranslate: function setTranslate() {
    var swiper = this;
    var swiperWidth = swiper.width,
        swiperHeight = swiper.height,
        slides = swiper.slides,
        $wrapperEl = swiper.$wrapperEl,
        slidesSizesGrid = swiper.slidesSizesGrid;
    var params = swiper.params.coverflowEffect;
    var isHorizontal = swiper.isHorizontal();
    var transform = swiper.translate;
    var center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;
    var rotate = isHorizontal ? params.rotate : -params.rotate;
    var translate = params.depth; // Each slide offset from center

    for (var i = 0, length = slides.length; i < length; i += 1) {
      var $slideEl = slides.eq(i);
      var slideSize = slidesSizesGrid[i];
      var slideOffset = $slideEl[0].swiperSlideOffset;
      var offsetMultiplier = (center - slideOffset - slideSize / 2) / slideSize * params.modifier;
      var rotateY = isHorizontal ? rotate * offsetMultiplier : 0;
      var rotateX = isHorizontal ? 0 : rotate * offsetMultiplier; // var rotateZ = 0

      var translateZ = -translate * Math.abs(offsetMultiplier);
      var translateY = isHorizontal ? 0 : params.stretch * offsetMultiplier;
      var translateX = isHorizontal ? params.stretch * offsetMultiplier : 0; // Fix for ultra small values

      if (Math.abs(translateX) < 0.001) translateX = 0;
      if (Math.abs(translateY) < 0.001) translateY = 0;
      if (Math.abs(translateZ) < 0.001) translateZ = 0;
      if (Math.abs(rotateY) < 0.001) rotateY = 0;
      if (Math.abs(rotateX) < 0.001) rotateX = 0;
      var slideTransform = "translate3d(".concat(translateX, "px,").concat(translateY, "px,").concat(translateZ, "px)  rotateX(").concat(rotateX, "deg) rotateY(").concat(rotateY, "deg)");
      $slideEl.transform(slideTransform);
      $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;

      if (params.slideShadows) {
        // Set shadows
        var $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
        var $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');

        if ($shadowBeforeEl.length === 0) {
          $shadowBeforeEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])("<div class=\"swiper-slide-shadow-".concat(isHorizontal ? 'left' : 'top', "\"></div>"));
          $slideEl.append($shadowBeforeEl);
        }

        if ($shadowAfterEl.length === 0) {
          $shadowAfterEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])("<div class=\"swiper-slide-shadow-".concat(isHorizontal ? 'right' : 'bottom', "\"></div>"));
          $slideEl.append($shadowAfterEl);
        }

        if ($shadowBeforeEl.length) $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;
        if ($shadowAfterEl.length) $shadowAfterEl[0].style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;
      }
    } // Set correct perspective for IE10


    if (Support.pointerEvents || Support.prefixedPointerEvents) {
      var ws = $wrapperEl[0].style;
      ws.perspectiveOrigin = "".concat(center, "px 50%");
    }
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    swiper.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);
  }
};
var EffectCoverflow = {
  name: 'effect-coverflow',
  params: {
    coverflowEffect: {
      rotate: 50,
      stretch: 0,
      depth: 100,
      modifier: 1,
      slideShadows: true
    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      coverflowEffect: {
        setTranslate: Coverflow.setTranslate.bind(swiper),
        setTransition: Coverflow.setTransition.bind(swiper)
      }
    });
  },
  on: {
    beforeInit: function beforeInit() {
      var swiper = this;
      if (swiper.params.effect !== 'coverflow') return;
      swiper.classNames.push("".concat(swiper.params.containerModifierClass, "coverflow"));
      swiper.classNames.push("".concat(swiper.params.containerModifierClass, "3d"));
      swiper.params.watchSlidesProgress = true;
      swiper.originalParams.watchSlidesProgress = true;
    },
    setTranslate: function setTranslate() {
      var swiper = this;
      if (swiper.params.effect !== 'coverflow') return;
      swiper.coverflowEffect.setTranslate();
    },
    setTransition: function setTransition(duration) {
      var swiper = this;
      if (swiper.params.effect !== 'coverflow') return;
      swiper.coverflowEffect.setTransition(duration);
    }
  }
};
var Thumbs = {
  init: function init() {
    var swiper = this;
    var thumbsParams = swiper.params.thumbs;
    var SwiperClass = swiper.constructor;

    if (thumbsParams.swiper instanceof SwiperClass) {
      swiper.thumbs.swiper = thumbsParams.swiper;
      Utils.extend(swiper.thumbs.swiper.originalParams, {
        watchSlidesProgress: true,
        slideToClickedSlide: false
      });
      Utils.extend(swiper.thumbs.swiper.params, {
        watchSlidesProgress: true,
        slideToClickedSlide: false
      });
    } else if (Utils.isObject(thumbsParams.swiper)) {
      swiper.thumbs.swiper = new SwiperClass(Utils.extend({}, thumbsParams.swiper, {
        watchSlidesVisibility: true,
        watchSlidesProgress: true,
        slideToClickedSlide: false
      }));
      swiper.thumbs.swiperCreated = true;
    }

    swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);
    swiper.thumbs.swiper.on('tap', swiper.thumbs.onThumbClick);
  },
  onThumbClick: function onThumbClick() {
    var swiper = this;
    var thumbsSwiper = swiper.thumbs.swiper;
    if (!thumbsSwiper) return;
    var clickedIndex = thumbsSwiper.clickedIndex;
    var clickedSlide = thumbsSwiper.clickedSlide;
    if (clickedSlide && Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) return;
    if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;
    var slideToIndex;

    if (thumbsSwiper.params.loop) {
      slideToIndex = parseInt(Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);
    } else {
      slideToIndex = clickedIndex;
    }

    if (swiper.params.loop) {
      var currentIndex = swiper.activeIndex;

      if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {
        swiper.loopFix(); // eslint-disable-next-line

        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
        currentIndex = swiper.activeIndex;
      }

      var prevIndex = swiper.slides.eq(currentIndex).prevAll("[data-swiper-slide-index=\"".concat(slideToIndex, "\"]")).eq(0).index();
      var nextIndex = swiper.slides.eq(currentIndex).nextAll("[data-swiper-slide-index=\"".concat(slideToIndex, "\"]")).eq(0).index();
      if (typeof prevIndex === 'undefined') slideToIndex = nextIndex;else if (typeof nextIndex === 'undefined') slideToIndex = prevIndex;else if (nextIndex - currentIndex < currentIndex - prevIndex) slideToIndex = nextIndex;else slideToIndex = prevIndex;
    }

    swiper.slideTo(slideToIndex);
  },
  update: function update(initial) {
    var swiper = this;
    var thumbsSwiper = swiper.thumbs.swiper;
    if (!thumbsSwiper) return;
    var slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;

    if (swiper.realIndex !== thumbsSwiper.realIndex) {
      var currentThumbsIndex = thumbsSwiper.activeIndex;
      var newThumbsIndex;

      if (thumbsSwiper.params.loop) {
        if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {
          thumbsSwiper.loopFix(); // eslint-disable-next-line

          thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;
          currentThumbsIndex = thumbsSwiper.activeIndex;
        } // Find actual thumbs index to slide to


        var prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll("[data-swiper-slide-index=\"".concat(swiper.realIndex, "\"]")).eq(0).index();
        var nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll("[data-swiper-slide-index=\"".concat(swiper.realIndex, "\"]")).eq(0).index();
        if (typeof prevThumbsIndex === 'undefined') newThumbsIndex = nextThumbsIndex;else if (typeof nextThumbsIndex === 'undefined') newThumbsIndex = prevThumbsIndex;else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) newThumbsIndex = currentThumbsIndex;else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) newThumbsIndex = nextThumbsIndex;else newThumbsIndex = prevThumbsIndex;
      } else {
        newThumbsIndex = swiper.realIndex;
      }

      if (thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {
        if (thumbsSwiper.params.centeredSlides) {
          if (newThumbsIndex > currentThumbsIndex) {
            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;
          } else {
            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;
          }
        } else if (newThumbsIndex > currentThumbsIndex) {
          newThumbsIndex = newThumbsIndex - slidesPerView + 1;
        }

        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);
      }
    } // Activate thumbs


    var thumbsToActivate = 1;
    var thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;

    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {
      thumbsToActivate = swiper.params.slidesPerView;
    }

    thumbsSwiper.slides.removeClass(thumbActiveClass);

    if (thumbsSwiper.params.loop) {
      for (var i = 0; i < thumbsToActivate; i += 1) {
        thumbsSwiper.$wrapperEl.children("[data-swiper-slide-index=\"".concat(swiper.realIndex + i, "\"]")).addClass(thumbActiveClass);
      }
    } else {
      for (var _i12 = 0; _i12 < thumbsToActivate; _i12 += 1) {
        thumbsSwiper.slides.eq(swiper.realIndex + _i12).addClass(thumbActiveClass);
      }
    }
  }
};
var Thumbs$1 = {
  name: 'thumbs',
  params: {
    thumbs: {
      swiper: null,
      slideThumbActiveClass: 'swiper-slide-thumb-active',
      thumbsContainerClass: 'swiper-container-thumbs'
    }
  },
  create: function create() {
    var swiper = this;
    Utils.extend(swiper, {
      thumbs: {
        swiper: null,
        init: Thumbs.init.bind(swiper),
        update: Thumbs.update.bind(swiper),
        onThumbClick: Thumbs.onThumbClick.bind(swiper)
      }
    });
  },
  on: {
    beforeInit: function beforeInit() {
      var swiper = this;
      var thumbs = swiper.params.thumbs;
      if (!thumbs || !thumbs.swiper) return;
      swiper.thumbs.init();
      swiper.thumbs.update(true);
    },
    slideChange: function slideChange() {
      var swiper = this;
      if (!swiper.thumbs.swiper) return;
      swiper.thumbs.update();
    },
    update: function update() {
      var swiper = this;
      if (!swiper.thumbs.swiper) return;
      swiper.thumbs.update();
    },
    resize: function resize() {
      var swiper = this;
      if (!swiper.thumbs.swiper) return;
      swiper.thumbs.update();
    },
    observerUpdate: function observerUpdate() {
      var swiper = this;
      if (!swiper.thumbs.swiper) return;
      swiper.thumbs.update();
    },
    setTransition: function setTransition(duration) {
      var swiper = this;
      var thumbsSwiper = swiper.thumbs.swiper;
      if (!thumbsSwiper) return;
      thumbsSwiper.setTransition(duration);
    },
    beforeDestroy: function beforeDestroy() {
      var swiper = this;
      var thumbsSwiper = swiper.thumbs.swiper;
      if (!thumbsSwiper) return;

      if (swiper.thumbs.swiperCreated && thumbsSwiper) {
        thumbsSwiper.destroy();
      }
    }
  }
}; // Swiper Class

var components = [Device$1, Support$1, Browser$1, Resize, Observer$1, Virtual$1, Keyboard$1, Mousewheel$1, Navigation$1, Pagination$1, Scrollbar$1, Parallax$1, Zoom$1, Lazy$1, Controller$1, A11y, History$1, HashNavigation$1, Autoplay$1, EffectFade, EffectCube, EffectFlip, EffectCoverflow, Thumbs$1];

if (typeof Swiper.use === 'undefined') {
  Swiper.use = Swiper.Class.use;
  Swiper.installModule = Swiper.Class.installModule;
}

Swiper.use(components);
/* harmony default export */ __webpack_exports__["default"] = (Swiper);

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
var apply = Function.prototype.apply; // DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};

exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};

exports.clearTimeout = exports.clearInterval = function (timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}

Timeout.prototype.unref = Timeout.prototype.ref = function () {};

Timeout.prototype.close = function () {
  this._clearFn.call(scope, this._id);
}; // Does not start the time, just sets up the members needed.


exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);
  var msecs = item._idleTimeout;

  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
}; // setimmediate attaches itself to the global object


__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js"); // On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.


exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || this && this.setImmediate;
exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || this && this.clearImmediate;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/vue/dist/vue.runtime.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/vue/dist/vue.runtime.esm.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global, setImmediate) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */

/*  */
var emptyObject = Object.freeze({}); // These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}
/**
 * Check if value is primitive.
 */


function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
  _typeof(value) === 'symbol' || typeof value === 'boolean';
}
/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */


function isObject(obj) {
  return obj !== null && _typeof(obj) === 'object';
}
/**
 * Get the raw type string of a value, e.g., [object Object].
 */


var _toString = Object.prototype.toString;

function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */


function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp(v) {
  return _toString.call(v) === '[object RegExp]';
}
/**
 * Check if val is a valid array index.
 */


function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}

function isPromise(val) {
  return isDef(val) && typeof val.then === 'function' && typeof val["catch"] === 'function';
}
/**
 * Convert a value to a string that is actually rendered.
 */


function toString(val) {
  return val == null ? '' : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
}
/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */


function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */


function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}
/**
 * Check if a tag is a built-in tag.
 */


var isBuiltInTag = makeMap('slot,component', true);
/**
 * Check if an attribute is a reserved attribute.
 */

var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
/**
 * Remove an item from an array.
 */

function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);

    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}
/**
 * Check whether an object has the property.
 */


var hasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
/**
 * Create a cached version of a pure function.
 */


function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
/**
 * Camelize a hyphen-delimited string.
 */


var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
/**
 * Capitalize a string.
 */

var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
/**
 * Hyphenate a camelCase string.
 */

var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
});
/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */

function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }

  boundFn._length = fn.length;
  return boundFn;
}

function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}

var bind = Function.prototype.bind ? nativeBind : polyfillBind;
/**
 * Convert an Array-like object to a real Array.
 */

function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);

  while (i--) {
    ret[i] = list[i + start];
  }

  return ret;
}
/**
 * Mix properties into target object.
 */


function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }

  return to;
}
/**
 * Merge an Array of Objects into a single Object.
 */


function toObject(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}
/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */


function noop(a, b, c) {}
/**
 * Always return false.
 */


var no = function no(a, b, c) {
  return false;
};
/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */


var identity = function identity(_) {
  return _;
};
/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */


function looseEqual(a, b) {
  if (a === b) {
    return true;
  }

  var isObjectA = isObject(a);
  var isObjectB = isObject(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */


function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }

  return -1;
}
/**
 * Ensure a function is called only once.
 */


function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}

var SSR_ATTR = 'data-server-rendered';
var ASSET_TYPES = ['component', 'directive', 'filter'];
var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured', 'serverPrefetch'];
/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};
/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */

var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
/**
 * Check if a string starts with $ or _
 */

function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}
/**
 * Define a property.
 */


function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
/**
 * Parse simple path.
 */


var bailRE = new RegExp("[^" + unicodeRegExp.source + ".$_\\d]");

function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }

  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }

      obj = obj[segments[i]];
    }

    return obj;
  };
}
/*  */
// can we use __proto__?


var hasProto = '__proto__' in {}; // Browser environment sniffing

var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/); // Firefox has a "watch" function on Object.prototype...

var nativeWatch = {}.watch;
var supportsPassive = false;

if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    }); // https://github.com/facebook/flow/issues/285

    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
} // this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV


var _isServer;

var isServerRendering = function isServerRendering() {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }

  return _isServer;
}; // detect devtools


var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
/* istanbul ignore next */

function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */
// $flow-disable-line


if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set =
  /*@__PURE__*/
  function () {
    function Set() {
      this.set = Object.create(null);
    }

    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };

    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };

    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}
/*  */


var warn = noop;
var tip = noop;
var generateComponentTrace = noop; // work around flow check

var formatComponentName = noop;

if (true) {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;

  var classify = function classify(str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function warn(msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function tip(msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function formatComponentName(vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }

    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;

    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function repeat(str, n) {
    var res = '';

    while (n) {
      if (n % 2 === 1) {
        res += str;
      }

      if (n > 1) {
        str += str;
      }

      n >>= 1;
    }

    return res;
  };

  generateComponentTrace = function generateComponentTrace(vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;

      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];

          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }

        tree.push(vm);
        vm = vm.$parent;
      }

      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}
/*  */


var uid = 0;
/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */

var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();

  if ( true && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) {
      return a.id - b.id;
    });
  }

  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
}; // The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.


Dep.target = null;
var targetStack = [];

function pushTarget(target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
/*  */


var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = {
  child: {
    configurable: true
  }
}; // DEPRECATED: alias for componentInstance for backwards compat.

/* istanbul ignore next */

prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function createEmptyVNode(text) {
  if (text === void 0) text = '';
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
} // optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.


function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, // #7975
  // clone children array to avoid mutating original in case of cloning
  // a child.
  vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */


var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
/**
 * Intercept mutating methods and emit events
 */

methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;

    while (len--) {
      args[len] = arguments[len];
    }

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;

    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;

      case 'splice':
        inserted = args.slice(2);
        break;
    }

    if (inserted) {
      ob.observeArray(inserted);
    } // notify change


    ob.dep.notify();
    return result;
  });
});
/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

var shouldObserve = true;

function toggleObserving(value) {
  shouldObserve = value;
}
/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */


var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);

  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }

    this.observeArray(value);
  } else {
    this.walk(value);
  }
};
/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */


Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};
/**
 * Observe a list of Array items.
 */


Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
}; // helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */


function protoAugment(target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}
/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */

/* istanbul ignore next */


function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}
/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */


function observe(value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return;
  }

  var ob;

  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }

  if (asRootData && ob) {
    ob.vmCount++;
  }

  return ob;
}
/**
 * Define a reactive property on an Object.
 */


function defineReactive$$1(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);

  if (property && property.configurable === false) {
    return;
  } // cater for pre-defined getter/setters


  var getter = property && property.get;
  var setter = property && property.set;

  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;

      if (Dep.target) {
        dep.depend();

        if (childOb) {
          childOb.dep.depend();

          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }

      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */

      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */


      if ( true && customSetter) {
        customSetter();
      } // #7981: for accessor properties without setter


      if (getter && !setter) {
        return;
      }

      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }

      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */


function set(target, key, val) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }

  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }

  if (!ob) {
    target[key] = val;
    return val;
  }

  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}
/**
 * Delete a property and trigger change if necessary.
 */


function del(target, key) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }

  if (!hasOwn(target, key)) {
    return;
  }

  delete target[key];

  if (!ob) {
    return;
  }

  ob.dep.notify();
}
/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */


function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();

    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */


var strats = config.optionMergeStrategies;
/**
 * Options with restrictions
 */

if (true) {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }

    return defaultStrat(parent, child);
  };
}
/**
 * Helper that recursively merges two data objects together.
 */


function mergeData(to, from) {
  if (!from) {
    return to;
  }

  var key, toVal, fromVal;
  var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i]; // in case the object is already observed...

    if (key === '__ob__') {
      continue;
    }

    toVal = to[key];
    fromVal = from[key];

    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }

  return to;
}
/**
 * Data
 */


function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }

    if (!parentVal) {
      return childVal;
    } // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.


    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
       true && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return parentVal;
    }

    return mergeDataOrFn(parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};
/**
 * Hooks and props are merged as arrays.
 */


function mergeHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}

function dedupeHooks(hooks) {
  var res = [];

  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }

  return res;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});
/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);

  if (childVal) {
     true && assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});
/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

strats.watch = function (parentVal, childVal, vm, key) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }

  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */


  if (!childVal) {
    return Object.create(parentVal || null);
  }

  if (true) {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = {};
  extend(ret, parentVal);

  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];

    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }

    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }

  return ret;
};
/**
 * Other object hashes.
 */


strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = Object.create(null);
  extend(ret, parentVal);

  if (childVal) {
    extend(ret, childVal);
  }

  return ret;
};

strats.provide = mergeDataOrFn;
/**
 * Default strategy.
 */

var defaultStrat = function defaultStrat(parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};
/**
 * Validate component names
 */


function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName(name) {
  if (!new RegExp("^[a-zA-Z][\\-\\.0-9_" + unicodeRegExp.source + "]*$").test(name)) {
    warn('Invalid component name: "' + name + '". Component names ' + 'should conform to valid custom element name in html5 specification.');
  }

  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
  }
}
/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */


function normalizeProps(options, vm) {
  var props = options.props;

  if (!props) {
    return;
  }

  var res = {};
  var i, val, name;

  if (Array.isArray(props)) {
    i = props.length;

    while (i--) {
      val = props[i];

      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = {
          type: null
        };
      } else if (true) {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : {
        type: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
  }

  options.props = res;
}
/**
 * Normalize all injections into Object-based format
 */


function normalizeInject(options, vm) {
  var inject = options.inject;

  if (!inject) {
    return;
  }

  var normalized = options.inject = {};

  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = {
        from: inject[i]
      };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({
        from: key
      }, val) : {
        from: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
  }
}
/**
 * Normalize raw function directives into object format.
 */


function normalizeDirectives(options) {
  var dirs = options.directives;

  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];

      if (typeof def$$1 === 'function') {
        dirs[key] = {
          bind: def$$1,
          update: def$$1
        };
      }
    }
  }
}

function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
  }
}
/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */


function mergeOptions(parent, child, vm) {
  if (true) {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child); // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.

  if (!child._base) {
    if (child["extends"]) {
      parent = mergeOptions(parent, child["extends"], vm);
    }

    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;

  for (key in parent) {
    mergeField(key);
  }

  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }

  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }

  return options;
}
/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */


function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }

  var assets = options[type]; // check local registration variations first

  if (hasOwn(assets, id)) {
    return assets[id];
  }

  var camelizedId = camelize(id);

  if (hasOwn(assets, camelizedId)) {
    return assets[camelizedId];
  }

  var PascalCaseId = capitalize(camelizedId);

  if (hasOwn(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  } // fallback to prototype chain


  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

  if ( true && warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }

  return res;
}
/*  */


function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key]; // boolean casting

  var booleanIndex = getTypeIndex(Boolean, prop.type);

  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);

      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  } // check default value


  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
    // make sure to observe it.

    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }

  if (true) {
    assertProp(prop, key, value, vm, absent);
  }

  return value;
}
/**
 * Get the default value of a prop.
 */


function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined;
  }

  var def = prop["default"]; // warn against non-factory defaults for Object & Array

  if ( true && isObject(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  } // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger


  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  } // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context


  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}
/**
 * Assert whether a prop is valid.
 */


function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }

  if (value == null && !prop.required) {
    return;
  }

  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];

  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }

    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }

  var validator = prop.validator;

  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);

  if (simpleCheckRE.test(expectedType)) {
    var t = _typeof(value);

    valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }

  return {
    valid: valid,
    expectedType: expectedType
  };
}
/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */


function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isSameType(a, b) {
  return getType(a) === getType(b);
}

function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }

  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }

  return -1;
}

function getInvalidTypeMessage(name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ');
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType); // check if we need to specify expected value

  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }

  message += ", got " + receivedType + " "; // check if we need to specify received value

  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }

  return message;
}

function styleValue(value, type) {
  if (type === 'String') {
    return "\"" + value + "\"";
  } else if (type === 'Number') {
    return "" + Number(value);
  } else {
    return "" + value;
  }
}

function isExplicable(value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) {
    return value.toLowerCase() === elem;
  });
}

function isBoolean() {
  var args = [],
      len = arguments.length;

  while (len--) {
    args[len] = arguments[len];
  }

  return args.some(function (elem) {
    return elem.toLowerCase() === 'boolean';
  });
}
/*  */


function handleError(err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();

  try {
    if (vm) {
      var cur = vm;

      while (cur = cur.$parent) {
        var hooks = cur.$options.errorCaptured;

        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;

              if (capture) {
                return;
              }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }

    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling(handler, context, args, vm, info) {
  var res;

  try {
    res = args ? handler.apply(context, args) : handler.call(context);

    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res["catch"](function (e) {
        return handleError(e, vm, info + " (Promise/async)");
      }); // issue #9511
      // avoid catch triggering multiple times when nested calls

      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }

  return res;
}

function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }

  logError(err, vm, info);
}

function logError(err, vm, info) {
  if (true) {
    warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
  }
  /* istanbul ignore else */


  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err;
  }
}
/*  */


var isUsingMicroTask = false;
var callbacks = [];
var pending = false;

function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;

  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
} // Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).


var timerFunc; // The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:

/* istanbul ignore next, $flow-disable-line */

if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();

  timerFunc = function timerFunc() {
    p.then(flushCallbacks); // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.

    if (isIOS) {
      setTimeout(noop);
    }
  };

  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) || // PhantomJS and iOS 7.x
MutationObserver.toString() === '[object MutationObserverConstructor]')) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });

  timerFunc = function timerFunc() {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };

  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Techinically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function timerFunc() {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function timerFunc() {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick(cb, ctx) {
  var _resolve;

  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });

  if (!pending) {
    pending = true;
    timerFunc();
  } // $flow-disable-line


  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    });
  }
}
/*  */

/* not type checking this file because flow doesn't play well with Proxy */


var initProxy;

if (true) {
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function warnNonPresent(target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
  };

  var warnReservedPrefix = function warnReservedPrefix(target, key) {
    warn("Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " + 'properties starting with "$" or "_" are not proxied in the Vue instance to ' + 'prevent conflicts with Vue internals' + 'See: https://vuejs.org/v2/api/#data', target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data);

      if (!has && !isAllowed) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return has || !isAllowed;
    }
  };
  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
/*  */


var seenObjects = new _Set();
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

function traverse(val) {
  _traverse(val, seenObjects);

  seenObjects.clear();
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);

  if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }

  if (val.__ob__) {
    var depId = val.__ob__.dep.id;

    if (seen.has(depId)) {
      return;
    }

    seen.add(depId);
  }

  if (isA) {
    i = val.length;

    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;

    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}

var mark;
var measure;

if (true) {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */

  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = function mark(tag) {
      return perf.mark(tag);
    };

    measure = function measure(name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag); // perf.clearMeasures(name)
    };
  }
}
/*  */


var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first

  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns, vm) {
  function invoker() {
    var arguments$1 = arguments;
    var fns = invoker.fns;

    if (Array.isArray(fns)) {
      var cloned = fns.slice();

      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler");
    }
  }

  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove$$1, createOnceHandler, vm) {
  var name, def$$1, cur, old, event;

  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);

    if (isUndef(cur)) {
       true && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }

      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }

      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }

  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}
/*  */


function mergeVNodeHook(def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }

  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
    // and prevent memory leak

    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}
/*  */


function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;

  if (isUndef(propOptions)) {
    return;
  }

  var res = {};
  var attrs = data.attrs;
  var props = data.props;

  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);

      if (true) {
        var keyInLowerCase = key.toLowerCase();

        if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }

      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }

  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];

      if (!preserve) {
        delete hash[key];
      }

      return true;
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];

      if (!preserve) {
        delete hash[altKey];
      }

      return true;
    }
  }

  return false;
}
/*  */
// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.


function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }

  return children;
} // 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.


function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;

  for (i = 0; i < children.length; i++) {
    c = children[i];

    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }

    lastIndex = res.length - 1;
    last = res[lastIndex]; //  nested

    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }

        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }

        res.push(c);
      }
    }
  }

  return res;
}
/*  */


function initProvide(vm) {
  var provide = vm.$options.provide;

  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);

  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (true) {
        defineReactive$$1(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      } else {}
    });
    toggleObserving(true);
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i]; // #6574 in case the inject object is observed...

      if (key === '__ob__') {
        continue;
      }

      var provideKey = inject[key].from;
      var source = vm;

      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }

        source = source.$parent;
      }

      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key]["default"];
          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
        } else if (true) {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
    }

    return result;
  }
}
/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */


function resolveSlots(children, context) {
  if (!children || !children.length) {
    return {};
  }

  var slots = {};

  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    } // named slots should only be respected if the vnode was rendered in the
    // same context.


    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);

      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots["default"] || (slots["default"] = [])).push(child);
    }
  } // ignore slots that contains only whitespace


  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }

  return slots;
}

function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === ' ';
}
/*  */


function normalizeScopedSlots(slots, normalSlots, prevSlots) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;

  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized;
  } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots;
  } else {
    res = {};

    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  } // expose normal slots on scopedSlots


  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  } // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error


  if (slots && Object.isExtensible(slots)) {
    slots._normalized = res;
  }

  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res;
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function normalized() {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && _typeof(res) === 'object' && !Array.isArray(res) ? [res] // single vnode
    : normalizeChildren(res);
    return res && (res.length === 0 || res.length === 1 && res[0].isComment // #9658
    ) ? undefined : res;
  }; // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.


  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }

  return normalized;
}

function proxyNormalSlot(slots, key) {
  return function () {
    return slots[key];
  };
}
/*  */

/**
 * Runtime helper for rendering v-for lists.
 */


function renderList(val, render) {
  var ret, i, l, keys, key;

  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);

    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);

    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();

      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);

      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }

  if (!isDef(ret)) {
    ret = [];
  }

  ret._isVList = true;
  return ret;
}
/*  */

/**
 * Runtime helper for rendering <slot>
 */


function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;

  if (scopedSlotFn) {
    // scoped slot
    props = props || {};

    if (bindObject) {
      if ( true && !isObject(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }

      props = extend(extend({}, bindObject), props);
    }

    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;

  if (target) {
    return this.$createElement('template', {
      slot: target
    }, nodes);
  } else {
    return nodes;
  }
}
/*  */

/**
 * Runtime helper for resolving filters
 */


function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}
/*  */


function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */


function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;

  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
}
/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */


function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject(value)) {
       true && warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }

      var hash;

      var loop = function loop(key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }

        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);

        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});

            on["update:" + key] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) {
        loop(key);
      }
    }
  }

  return data;
}
/*  */

/**
 * Runtime helper for rendering static trees.
 */


function renderStatic(index, isInFor) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.

  if (tree && !isInFor) {
    return tree;
  } // otherwise, render a fresh tree.


  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
  );
  markStatic(tree, "__static__" + index, false);
  return tree;
}
/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */


function markOnce(tree, index, key) {
  markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
/*  */


function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
       true && warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};

      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }

  return data;
}
/*  */


function resolveScopedSlots(fns, // see flow/vnode
res, // the following are added in 2.6
hasDynamicKeys, contentHashKey) {
  res = res || {
    $stable: !hasDynamicKeys
  };

  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];

    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }

      res[slot.key] = slot.fn;
    }
  }

  if (contentHashKey) {
    res.$key = contentHashKey;
  }

  return res;
}
/*  */


function bindDynamicKeys(baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];

    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if ( true && key !== '' && key !== null) {
      // null is a speical value for explicitly removing a binding
      warn("Invalid value for dynamic directive argument (expected string or null): " + key, this);
    }
  }

  return baseObj;
} // helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.


function prependModifier(value, symbol) {
  return typeof value === 'string' ? symbol + value : value;
}
/*  */


function installRenderHelpers(target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}
/*  */


function FunctionalRenderContext(data, props, children, parent, Ctor) {
  var this$1 = this;
  var options = Ctor.options; // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check

  var contextVm;

  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent); // $flow-disable-line

    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent; // $flow-disable-line

    parent = parent._original;
  }

  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);

  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(data.scopedSlots, this$1.$slots = resolveSlots(children, parent));
    }

    return this$1.$slots;
  };

  Object.defineProperty(this, 'scopedSlots', {
    enumerable: true,
    get: function get() {
      return normalizeScopedSlots(data.scopedSlots, this.slots());
    }
  }); // support for compiled functional template

  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options; // pre-resolve slots for renderSlot()

    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);

      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }

      return vnode;
    };
  } else {
    this._c = function (a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;

  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }

    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }

  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);

    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }

    return res;
  }
}

function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;

  if (true) {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }

  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }

  return clone;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
/*  */

/*  */

/*  */

/*  */
// inline hooks to be invoked on component VNodes during patch


var componentVNodeHooks = {
  init: function init(vnode, hydrating) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow

      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },
  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },
  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }

    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  },
  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base; // plain options object: turn it into a constructor

  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  } // if at this stage it's not a constructor or an async component factory,
  // reject.


  if (typeof Ctor !== 'function') {
    if (true) {
      warn("Invalid Component definition: " + String(Ctor), context);
    }

    return;
  } // async component


  var asyncFactory;

  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);

    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {}; // resolve constructor options in case global mixins are applied after
  // component constructor creation

  resolveConstructorOptions(Ctor); // transform component v-model data into props & events

  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  } // extract props


  var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  } // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners


  var listeners = data.on; // replace with listeners with .native modifier
  // so it gets processed during parent component patch.

  data.on = data.nativeOn;

  if (isTrue(Ctor.options["abstract"])) {
    // abstract components do not keep anything
    // other than props & listeners & slot
    // work around flow
    var slot = data.slot;
    data = {};

    if (slot) {
      data.slot = slot;
    }
  } // install component management hooks onto the placeholder node


  installComponentHooks(data); // return a placeholder vnode

  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
    Ctor: Ctor,
    propsData: propsData,
    listeners: listeners,
    tag: tag,
    children: children
  }, asyncFactory);
  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  }; // check inline-template render functions

  var inlineTemplate = vnode.data.inlineTemplate;

  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }

  return new vnode.componentOptions.Ctor(options);
}

function installComponentHooks(data) {
  var hooks = data.hook || (data.hook = {});

  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];

    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1(f1, f2) {
  var merged = function merged(a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };

  merged._merged = true;
  return merged;
} // transform component v-model info (value and callback) into
// prop and event handler respectively.


function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';
  (data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;

  if (isDef(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}
/*  */


var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
// without getting yelled at by flow

function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }

  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }

  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
     true && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  } // object syntax in v-bind


  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }

  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  } // warn against non-primitive key


  if ( true && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
  } // support single function children as default scoped slot


  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = {
      "default": children[0]
    };
    children.length = 0;
  }

  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }

  var vnode, ns;

  if (typeof tag === 'string') {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);

    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }

  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }

    if (isDef(data)) {
      registerDeepBindings(data);
    }

    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns, force) {
  vnode.ns = ns;

  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }

  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];

      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
        applyNS(child, ns, force);
      }
    }
  }
} // ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes


function registerDeepBindings(data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }

  if (isObject(data["class"])) {
    traverse(data["class"]);
  }
}
/*  */


function initRender(vm) {
  vm._vnode = null; // the root of the child tree

  vm._staticTrees = null; // v-once cached trees

  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates

  vm._c = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  }; // normalization is always applied for the public version, used in
  // user-written render functions.


  vm.$createElement = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  }; // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated


  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */

  if (true) {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {}
}

var currentRenderingInstance = null;

function renderMixin(Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
    } // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.


    vm.$vnode = _parentVnode; // render self

    var vnode;

    try {
      // There's no need to maintain a stack becaues all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render"); // return error render result,
      // or previous vnode to prevent render error causing blank component

      /* istanbul ignore else */

      if ( true && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    } // if the returned array contains only a single node, allow it


    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    } // return empty vnode in case the render function errored out


    if (!(vnode instanceof VNode)) {
      if ( true && Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }

      vnode = createEmptyVNode();
    } // set parent


    vnode.parent = _parentVnode;
    return vnode;
  };
}
/*  */


function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
    comp = comp["default"];
  }

  return isObject(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = {
    data: data,
    context: context,
    children: children,
    tag: tag
  };
  return node;
}

function resolveAsyncComponent(factory, baseCtor) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  var owner = currentRenderingInstance;

  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null;
    owner.$on('hook:destroyed', function () {
      return remove(owners, owner);
    });

    var forceRender = function forceRender(renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        owners[i].$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;

        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }

        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)

      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });
    var reject = once(function (reason) {
       true && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);

          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;

              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;

            if (isUndef(factory.resolved)) {
              reject( true ? "timeout (" + res.timeout + "ms)" : undefined);
            }
          }, res.timeout);
        }
      }
    }

    sync = false; // return in case resolved synchronously

    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
/*  */


function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
/*  */


function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];

      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
/*  */

/*  */


function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false; // init parent attached events

  var listeners = vm.$options._parentListeners;

  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn) {
  target.$on(event, fn);
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function createOnceHandler(event, fn) {
  var _target = target;
  return function onceHandler() {
    var res = fn.apply(null, arguments);

    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;

  Vue.prototype.$on = function (event, fn) {
    var vm = this;

    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup

      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }

    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;

    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }

    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this; // all

    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    } // array of events


    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }

      return vm;
    } // specific event


    var cbs = vm._events[event];

    if (!cbs) {
      return vm;
    }

    if (!fn) {
      vm._events[event] = null;
      return vm;
    } // specific handler


    var cb;
    var i = cbs.length;

    while (i--) {
      cb = cbs[i];

      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }

    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;

    if (true) {
      var lowerCaseEvent = event.toLowerCase();

      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }

    var cbs = vm._events[event];

    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";

      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }

    return vm;
  };
}
/*  */


var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  };
}

function initLifecycle(vm) {
  var options = vm.$options; // locate first non-abstract parent

  var parent = options.parent;

  if (parent && !options["abstract"]) {
    while (parent.$options["abstract"] && parent.$parent) {
      parent = parent.$parent;
    }

    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.

    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
      /* removeOnly */
      );
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }

    restoreActiveInstance(); // update __vue__ reference

    if (prevEl) {
      prevEl.__vue__ = null;
    }

    if (vm.$el) {
      vm.$el.__vue__ = vm;
    } // if parent is an HOC, update its $el as well


    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    } // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.

  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;

    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;

    if (vm._isBeingDestroyed) {
      return;
    }

    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true; // remove self from parent

    var parent = vm.$parent;

    if (parent && !parent._isBeingDestroyed && !vm.$options["abstract"]) {
      remove(parent.$children, vm);
    } // teardown watchers


    if (vm._watcher) {
      vm._watcher.teardown();
    }

    var i = vm._watchers.length;

    while (i--) {
      vm._watchers[i].teardown();
    } // remove reference from data ob
    // frozen object may not have observer.


    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    } // call the last hook...


    vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

    vm.__patch__(vm._vnode, null); // fire destroyed hook


    callHook(vm, 'destroyed'); // turn off all instance listeners.

    vm.$off(); // remove __vue__ reference

    if (vm.$el) {
      vm.$el.__vue__ = null;
    } // release circular reference (#6759)


    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;

  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;

    if (true) {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }

  callHook(vm, 'beforeMount');
  var updateComponent;
  /* istanbul ignore if */

  if ( true && config.performance && mark) {
    updateComponent = function updateComponent() {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;
      mark(startTag);

      var vnode = vm._render();

      mark(endTag);
      measure("vue " + name + " render", startTag, endTag);
      mark(startTag);

      vm._update(vnode, hydrating);

      mark(endTag);
      measure("vue " + name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function updateComponent() {
      vm._update(vm._render(), hydrating);
    };
  } // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined


  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true
  /* isRenderWatcher */
  );
  hydrating = false; // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook

  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }

  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if (true) {
    isUpdatingChildComponent = true;
  } // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.
  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.


  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key); // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.

  var needsForceUpdate = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  hasDynamicScopedSlot);
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }

  vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render

  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject; // update props

  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];

    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?

      props[key] = validateProp(key, propOptions, propsData, vm);
    }

    toggleObserving(true); // keep a copy of raw propsData

    vm.$options.propsData = propsData;
  } // update listeners


  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (true) {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }

  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;

    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }

  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;

    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;

    if (isInInactiveTree(vm)) {
      return;
    }
  }

  if (!vm._inactive) {
    vm._inactive = true;

    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";

  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }

  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }

  popTarget();
}
/*  */


var MAX_UPDATE_COUNT = 100;
var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;
/**
 * Reset the scheduler's state.
 */

function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has = {};

  if (true) {
    circular = {};
  }

  waiting = flushing = false;
} // Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.


var currentFlushTimestamp = 0; // Async edge case fix requires storing an event listener's attach timestamp.

var getNow = Date.now; // Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)

if (inBrowser && !isIE) {
  var performance = window.performance;

  if (performance && typeof performance.now === 'function' && getNow() > document.createEvent('Event').timeStamp) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function getNow() {
      return performance.now();
    };
  }
}
/**
 * Flush both queues and run the watchers.
 */


function flushSchedulerQueue() {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id; // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.

  queue.sort(function (a, b) {
    return a.id - b.id;
  }); // do not cache length because more watchers might be pushed
  // as we run existing watchers

  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];

    if (watcher.before) {
      watcher.before();
    }

    id = watcher.id;
    has[id] = null;
    watcher.run(); // in dev build, check and stop circular updates.

    if ( true && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;

      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  } // keep copies of post queues before resetting state


  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState(); // call component updated and activated hooks

  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue); // devtool hook

  /* istanbul ignore if */

  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;

  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;

    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}
/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */


function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true
    /* true */
    );
  }
}
/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */


function queueWatcher(watcher) {
  var id = watcher.id;

  if (has[id] == null) {
    has[id] = true;

    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;

      while (i > index && queue[i].id > watcher.id) {
        i--;
      }

      queue.splice(i + 1, 0, watcher);
    } // queue the flush


    if (!waiting) {
      waiting = true;

      if ( true && !config.async) {
        flushSchedulerQueue();
        return;
      }

      nextTick(flushSchedulerQueue);
    }
  }
}
/*  */


var uid$2 = 0;
/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
  this.vm = vm;

  if (isRenderWatcher) {
    vm._watcher = this;
  }

  vm._watchers.push(this); // options


  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }

  this.cb = cb;
  this.id = ++uid$2; // uid for batching

  this.active = true;
  this.dirty = this.lazy; // for lazy watchers

  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  true ? expOrFn.toString() : undefined; // parse expression for getter

  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);

    if (!this.getter) {
      this.getter = noop;
       true && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }

  this.value = this.lazy ? undefined : this.get();
};
/**
 * Evaluate the getter, and re-collect dependencies.
 */


Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;

  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }

    popTarget();
    this.cleanupDeps();
  }

  return value;
};
/**
 * Add a dependency to this directive.
 */


Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;

  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);

    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};
/**
 * Clean up for dependency collection.
 */


Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var i = this.deps.length;

  while (i--) {
    var dep = this.deps[i];

    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }

  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};
/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */


Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};
/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */


Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();

    if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;

      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};
/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */


Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};
/**
 * Depend on all deps collected by this watcher.
 */


Watcher.prototype.depend = function depend() {
  var i = this.deps.length;

  while (i--) {
    this.deps[i].depend();
  }
};
/**
 * Remove self from all dependencies' subscriber list.
 */


Watcher.prototype.teardown = function teardown() {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }

    var i = this.deps.length;

    while (i--) {
      this.deps[i].removeSub(this);
    }

    this.active = false;
  }
};
/*  */


var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };

  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;

  if (opts.props) {
    initProps(vm, opts.props);
  }

  if (opts.methods) {
    initMethods(vm, opts.methods);
  }

  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true
    /* asRootData */
    );
  }

  if (opts.computed) {
    initComputed(vm, opts.computed);
  }

  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.

  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent; // root instance props should be converted

  if (!isRoot) {
    toggleObserving(false);
  }

  var loop = function loop(key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */

    if (true) {
      var hyphenatedKey = hyphenate(key);

      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }

      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } else {} // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.


    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) {
    loop(key);
  }

  toggleObserving(true);
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

  if (!isPlainObject(data)) {
    data = {};
     true && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  } // proxy data on instance


  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;

  while (i--) {
    var key = keys[i];

    if (true) {
      if (methods && hasOwn(methods, key)) {
        warn("Method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }

    if (props && hasOwn(props, key)) {
       true && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  } // observe data


  observe(data, true
  /* asRootData */
  );
}

function getData(data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();

  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = {
  lazy: true
};

function initComputed(vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;

    if ( true && getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    } // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.


    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  var shouldCache = !isServerRendering();

  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }

  if ( true && sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];

    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }

      if (Dep.target) {
        watcher.depend();
      }

      return watcher.value;
    }
  };
}

function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}

function initMethods(vm, methods) {
  var props = vm.$options.props;

  for (var key in methods) {
    if (true) {
      if (typeof methods[key] !== 'function') {
        warn("Method \"" + key + "\" has type \"" + _typeof(methods[key]) + "\" in the component definition. " + "Did you reference the function correctly?", vm);
      }

      if (props && hasOwn(props, key)) {
        warn("Method \"" + key + "\" has already been defined as a prop.", vm);
      }

      if (key in vm && isReserved(key)) {
        warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
      }
    }

    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];

    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }

  if (typeof handler === 'string') {
    handler = vm[handler];
  }

  return vm.$watch(expOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};

  dataDef.get = function () {
    return this._data;
  };

  var propsDef = {};

  propsDef.get = function () {
    return this._props;
  };

  if (true) {
    dataDef.set = function () {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };

    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }

  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);
  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;

    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }

    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);

    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, "callback for immediate watcher \"" + watcher.expression + "\"");
      }
    }

    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
/*  */


var uid$3 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this; // a uid

    vm._uid = uid$3++;
    var startTag, endTag;
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      startTag = "vue-perf-start:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    } // a flag to avoid this being observed


    vm._isVue = true; // merge options

    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */


    if (true) {
      initProxy(vm);
    } else {} // expose real self


    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props

    initState(vm);
    initProvide(vm); // resolve provide after data/props

    callHook(vm, 'created');
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue " + vm._name + " init", startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;

  if (Ctor["super"]) {
    var superOptions = resolveConstructorOptions(Ctor["super"]);
    var cachedSuperOptions = Ctor.superOptions;

    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

      var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }

      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }

  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;

  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }

      modified[key] = latest[key];
    }
  }

  return modified;
}

function Vue(options) {
  if ( true && !(this instanceof Vue)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }

  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    } // additional parameters


    var args = toArray(arguments, 1);
    args.unshift(this);

    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }

    installedPlugins.push(plugin);
    return this;
  };
}
/*  */


function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
/*  */


function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;
  /**
   * Class inheritance
   */

  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;

    if ( true && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };

    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.

    if (Sub.options.props) {
      initProps$1(Sub);
    }

    if (Sub.options.computed) {
      initComputed$1(Sub);
    } // allow further extension/mixin/plugin usage


    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use; // create asset registers, so extended classes
    // can have their private assets too.

    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    }); // enable recursive self-lookup

    if (name) {
      Sub.options.components[name] = Sub;
    } // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.


    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options); // cache constructor

    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;

  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;

  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
/*  */


function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if ( true && type === 'component') {
          validateComponentName(id);
        }

        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }

        if (type === 'directive' && typeof definition === 'function') {
          definition = {
            bind: definition,
            update: definition
          };
        }

        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}
/*  */


function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */


  return false;
}

function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;

  for (var key in cache) {
    var cachedNode = cache[key];

    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);

      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry(cache, key, keys, current) {
  var cached$$1 = cache[key];

  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }

  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: 'keep-alive',
  "abstract": true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  created: function created() {
    this.cache = Object.create(null);
    this.keys = [];
  },
  destroyed: function destroyed() {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) {
        return matches(val, name);
      });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) {
        return !matches(val, name);
      });
    });
  },
  render: function render() {
    var slot = this.$slots["default"];
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;

    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;

      if ( // not included
      include && (!name || !matches(include, name)) || // excluded
      exclude && name && matches(exclude, name)) {
        return vnode;
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance; // make current key freshest

        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key); // prune oldest entry

        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }

    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive: KeepAlive
};
/*  */

function initGlobalAPI(Vue) {
  // config
  var configDef = {};

  configDef.get = function () {
    return config;
  };

  if (true) {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }

  Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.

  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };
  Vue.set = set;
  Vue["delete"] = del;
  Vue.nextTick = nextTick; // 2.6 explicit observable API

  Vue.observable = function (obj) {
    observe(obj);
    return obj;
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  }); // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.

  Vue.options._base = Vue;
  extend(Vue.options.components, builtInComponents);
  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
}); // expose FunctionalRenderContext for ssr runtime helper installation

Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});
Vue.version = '2.6.10';
/*  */
// these are reserved for web because they are directly compiled away
// during template compilation

var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

var acceptValue = makeMap('input,textarea,option,select,progress');

var mustUseProp = function mustUseProp(tag, type, attr) {
  return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function convertEnumeratedValue(key, value) {
  return isFalsyAttrValue(value) || value === 'false' ? 'false' // allow arbitrary string value for contenteditable
  : key === 'contenteditable' && isValidContentEditableValue(value) ? value : 'true';
};

var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');
var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function isXlink(name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
};

var getXlinkProp = function getXlinkProp(name) {
  return isXlink(name) ? name.slice(6, name.length) : '';
};

var isFalsyAttrValue = function isFalsyAttrValue(val) {
  return val == null || val === false;
};
/*  */


function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;

  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;

    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }

  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }

  return renderClass(data.staticClass, data["class"]);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    "class": isDef(child["class"]) ? [child["class"], parent["class"]] : parent["class"]
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */


  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }

  if (isObject(value)) {
    return stringifyObject(value);
  }

  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */


  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;

  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }

      res += stringified;
    }
  }

  return res;
}

function stringifyObject(value) {
  var res = '';

  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }

      res += key;
    }
  }

  return res;
}
/*  */


var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};
var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
// contain child elements.

var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

var isReservedTag = function isReservedTag(tag) {
  return isHTMLTag(tag) || isSVG(tag);
};

function getTagNamespace(tag) {
  if (isSVG(tag)) {
    return 'svg';
  } // basic support for MathML
  // note it doesn't support other MathML elements being component roots


  if (tag === 'math') {
    return 'math';
  }
}

var unknownElementCache = Object.create(null);

function isUnknownElement(tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true;
  }

  if (isReservedTag(tag)) {
    return false;
  }

  tag = tag.toLowerCase();
  /* istanbul ignore if */

  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag];
  }

  var el = document.createElement(tag);

  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');
/*  */

/**
 * Query an element selector if it's not an element already.
 */

function query(el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);

    if (!selected) {
       true && warn('Cannot find element: ' + el);
      return document.createElement('div');
    }

    return selected;
  } else {
    return el;
  }
}
/*  */


function createElement$1(tagName, vnode) {
  var elm = document.createElement(tagName);

  if (tagName !== 'select') {
    return elm;
  } // false or null will remove the attribute but undefined will not


  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }

  return elm;
}

function createElementNS(namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName);
}

function createTextNode(text) {
  return document.createTextNode(text);
}

function createComment(text) {
  return document.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild(node, child) {
  node.removeChild(child);
}

function appendChild(node, child) {
  node.appendChild(child);
}

function parentNode(node) {
  return node.parentNode;
}

function nextSibling(node) {
  return node.nextSibling;
}

function tagName(node) {
  return node.tagName;
}

function setTextContent(node, text) {
  node.textContent = text;
}

function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps =
/*#__PURE__*/
Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});
/*  */

var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;

  if (!isDef(key)) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;

  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}
/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */


var emptyNode = new VNode('', {}, []);
var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }

  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;

    if (isDef(key)) {
      map[key] = i;
    }
  }

  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];

    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove$$1() {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }

    remove$$1.listeners = listeners;
    return remove$$1;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
      return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }

  var creatingElmInVPre = 0;

  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check

    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;

    if (isDef(tag)) {
      if (true) {
        if (data && data.pre) {
          creatingElmInVPre++;
        }

        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }

      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);
      /* istanbul ignore if */

      {
        createChildren(vnode, children, insertedVnodeQueue);

        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }

        insert(parentElm, vnode.elm, refElm);
      }

      if ( true && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;

    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false
        /* hydrating */
        );
      } // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.


      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);

        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }

        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }

    vnode.elm = vnode.componentInstance.$el;

    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode); // make sure to invoke the insert hook

      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i; // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.

    var innerNode = vnode;

    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;

      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }

        insertedVnodeQueue.push(innerNode);
        break;
      }
    } // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself


    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (true) {
        checkDuplicateKeys(children);
      }

      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }

    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }

    i = vnode.data.hook; // Reuse variable

    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }

      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  } // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.


  function setScope(vnode) {
    var i;

    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;

      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }

        ancestor = ancestor.parent;
      }
    } // for slot content they should also get the scopeId from the host instance.


    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }

      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }

    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];

      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;

      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      } // recursively invoke hooks on child component root node


      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }

      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }

      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions

    var canMove = !removeOnly;

    if (true) {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }

        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];

          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }

        newStartVnode = newCh[++newStartIdx];
      }
    }

    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys(children) {
    var seenKeys = {};

    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;

      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld(node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];

      if (isDef(c) && sameVnode(node, c)) {
        return i;
      }
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }

      return;
    } // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.


    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;

    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;

    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }

      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }

    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if (true) {
          checkDuplicateKeys(ch);
        }

        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }

        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).

  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    } // assert node match


    if (true) {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true
        /* hydrating */
        );
      }

      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }

    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }

              return false;
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;

            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }

              childNode = childNode.nextSibling;
            } // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.


            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }

              return false;
            }
          }
        }
      }

      if (isDef(data)) {
        var fullInvoke = false;

        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }

        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }

    return true;
  }

  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }

      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);

      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }

          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if (true) {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          } // either not server-rendered, or hydration failed.
          // create an empty node and replace it


          oldVnode = emptyNodeAt(oldVnode);
        } // replacing existing element


        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm); // create new node

        createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);

          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }

            ancestor.elm = vnode.elm;

            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              } // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.


              var insert = ancestor.data.hook.insert;

              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }

            ancestor = ancestor.parent;
          }
        } // destroy old node


        if (isDef(parentElm)) {
          removeVnodes(parentElm, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
/*  */


var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;

  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];

    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);

      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);

      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function callInsert() {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };

    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);

  if (!dirs) {
    // $flow-disable-line
    return res;
  }

  var i, dir;

  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];

    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }

    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  } // $flow-disable-line


  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];

  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];
/*  */

function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;

  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }

  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }

  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];

    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  } // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max

  /* istanbul ignore if */


  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }

  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr(el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr(el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.

    /* istanbul ignore if */
    if (isIE && !isIE9 && el.tagName === 'TEXTAREA' && key === 'placeholder' && value !== '' && !el.__ieph) {
      var blocker = function blocker(e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };

      el.addEventListener('input', blocker); // $flow-disable-line

      el.__ieph = true;
      /* IE placeholder patched */
    }

    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
/*  */

function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticClass) && isUndef(data["class"]) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData["class"]))) {
    return;
  }

  var cls = genClassForVnode(vnode); // handle transition classes

  var transitionClass = el._transitionClasses;

  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  } // set the class


  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};
/*  */

/*  */

/*  */

/*  */
// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.

var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';
/*  */
// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.

function normalizeEvents(on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  } // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4

  /* istanbul ignore if */


  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1(event, handler, capture) {
  var _target = target$1; // save current target element in closure

  return function onceHandler() {
    var res = handler.apply(null, arguments);

    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  };
} // #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.


var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1(name, handler, capture, passive) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;

    handler = original._wrapper = function (e) {
      if ( // no bubbling, should always fire.
      // this is just a safety net in case event.timeStamp is unreliable in
      // certain weird environments...
      e.target === e.currentTarget || // event is fired after handler attachment
      e.timeStamp >= attachedTimestamp || // bail for environments that have buggy event.timeStamp implementations
      // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
      // #9681 QtWebEngine event.timeStamp is negative value
      e.timeStamp <= 0 || // #9448 bail if event is fired in another document in a multi-page
      // electron/nw.js app, since event.timeStamp will be using a different
      // starting reference
      e.target.ownerDocument !== document) {
        return original.apply(this, arguments);
      }
    };
  }

  target$1.addEventListener(name, handler, supportsPassive ? {
    capture: capture,
    passive: passive
  } : capture);
}

function remove$2(name, handler, capture, _target) {
  (_target || target$1).removeEventListener(name, handler._wrapper || handler, capture);
}

function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }

  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};
/*  */

var svgContainer;

function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }

  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key]; // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)

    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) {
        vnode.children.length = 0;
      }

      if (cur === oldProps[key]) {
        continue;
      } // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property


      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur; // avoid resetting cursor position when value is the same

      var strCur = isUndef(cur) ? '' : String(cur);

      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;

      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }

      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if ( // skip the update if old and new VDOM state is the same.
    // `value` is handled separately because the DOM value may be temporarily
    // out of sync with VDOM state due to focus, composition and modifiers.
    // This  #4521 by skipping the unnecesarry `checked` update.
    cur !== oldProps[key]) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
} // check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue(elm, checkVal) {
  return !elm.composing && (elm.tagName === 'OPTION' || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
}

function isNotInFocusAndDirty(elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true; // #6157
  // work around IE bug when accessing document.activeElement in an iframe

  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {}

  return notInFocus && elm.value !== checkVal;
}

function isDirtyWithModifiers(elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime

  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal);
    }

    if (modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
  }

  return value !== newVal;
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};
/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res;
}); // merge static and dynamic style data on the same vnode

function normalizeStyleData(data) {
  var style = normalizeStyleBinding(data.style); // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it

  return data.staticStyle ? extend(data.staticStyle, style) : style;
} // normalize possible array / string values into Object


function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle);
  }

  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle);
  }

  return bindingStyle;
}
/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */


function getStyle(vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;

    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;

      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }

  var parentNode = vnode;

  while (parentNode = parentNode.parent) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }

  return res;
}
/*  */


var cssVarRE = /^--/;
var importantRE = /\s*!important$/;

var setProp = function setProp(el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);

    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];
var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);

  if (prop !== 'filter' && prop in emptyStyle) {
    return prop;
  }

  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);

  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;

    if (name in emptyStyle) {
      return name;
    }
  }
});

function updateStyle(oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {}; // if static style exists, stylebinding already merged into it when doing normalizeStyleData

  var oldStyle = oldStaticStyle || oldStyleBinding;
  var style = normalizeStyleBinding(vnode.data.style) || {}; // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.

  vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;
  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }

  for (name in newStyle) {
    cur = newStyle[name];

    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};
/*  */

var whitespaceRE = /\s+/;
/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";

    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}
/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */


function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }

    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';

    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }

    cur = cur.trim();

    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}
/*  */


function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  /* istanbul ignore else */


  if (_typeof(def$$1) === 'object') {
    var res = {};

    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }

    extend(res, def$$1);
    return res;
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});
var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation'; // Transition property/event sniffing

var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';

if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }

  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
} // binding to window is necessary to make hot reload work in IE in strict mode


var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
/* istanbul ignore next */
function (fn) {
  return fn();
};

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }

  removeClass(el, cls);
}

function whenTransitionEnds(el, expectedType, cb) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;

  if (!type) {
    return cb();
  }

  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;

  var end = function end() {
    el.removeEventListener(event, onEnd);
    cb();
  };

  var onEnd = function onEnd(e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };

  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo(el, expectedType) {
  var styles = window.getComputedStyle(el); // JSDOM may return undefined for transition properties

  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);
  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */

  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }

  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  };
}

function getTimeout(delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
} // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors


function toMs(s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000;
}
/*  */


function enter(vnode, toggleDisplay) {
  var el = vnode.elm; // call leave callback now

  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;

    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data)) {
    return;
  }
  /* istanbul ignore if */


  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration; // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.

  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;

  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

  if ( true && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }

      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }

    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];

      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }

      enterHook && enterHook(el, cb);
    });
  } // start enter transition


  beforeEnterHook && beforeEnterHook(el);

  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);

      if (!cb.cancelled) {
        addTransitionClass(el, toClass);

        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm; // call enter callback now

  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;

    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  /* istanbul ignore if */


  if (isDef(el._leaveCb)) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);
  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

  if ( true && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }

    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }

      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }

    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    } // record leaving element


    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }

    beforeLeave && beforeLeave(el);

    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);

        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);

          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }

    leave && leave(el, cb);

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
} // only used in dev mode


function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}
/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */


function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }

  var invokerFns = fn.fns;

  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};
var platformModules = [attrs, klass, events, domProps, style, transition];
/*  */
// the directive module should be applied last, after all
// built-in modules have been applied.

var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({
  nodeOps: nodeOps,
  modules: modules
});
/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */

if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;

    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted(el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }

      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;

      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd); // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.

        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */

        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated(el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context); // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.

      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);

      if (curOptions.some(function (o, i) {
        return !looseEqual(o, prevOptions[i]);
      })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple ? binding.value.some(function (v) {
          return hasNoMatchingOption(v, curOptions);
        }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);

        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected(el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */

  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected(el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;

  if (isMultiple && !Array.isArray(value)) {
     true && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
    return;
  }

  var selected, option;

  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];

    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;

      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }

        return;
      }
    }
  }

  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption(value, options) {
  return options.every(function (o) {
    return !looseEqual(o, value);
  });
}

function getValue(option) {
  return '_value' in option ? option._value : option.value;
}

function onCompositionStart(e) {
  e.target.composing = true;
}

function onCompositionEnd(e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) {
    return;
  }

  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger(el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}
/*  */
// recursively search for possible transition defined inside the component root


function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;

    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },
  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;
    /* istanbul ignore if */

    if (!value === !oldValue) {
      return;
    }

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;

    if (transition$$1) {
      vnode.data.show = true;

      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },
  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};
var platformDirectives = {
  model: directive,
  show: show
};
/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
}; // in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered

function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;

  if (compOptions && compOptions.Ctor.options["abstract"]) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options; // props

  for (var key in options.propsData) {
    data[key] = comp[key];
  } // events.
  // extract listeners and pass them directly to the transition methods


  var listeners = options._parentListeners;

  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }

  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

var isNotTextNode = function isNotTextNode(c) {
  return c.tag || isAsyncPlaceholder(c);
};

var isVShowDirective = function isVShowDirective(d) {
  return d.name === 'show';
};

var Transition = {
  name: 'transition',
  props: transitionProps,
  "abstract": true,
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots["default"];

    if (!children) {
      return;
    } // filter out text nodes (possible whitespaces)


    children = children.filter(isNotTextNode);
    /* istanbul ignore if */

    if (!children.length) {
      return;
    } // warn multiple elements


    if ( true && children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode; // warn invalid mode

    if ( true && mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0]; // if this is a component root node and the component's
    // parent container node also has transition, skip.

    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    } // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive


    var child = getRealChild(rawChild);
    /* istanbul ignore if */

    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    } // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.


    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild); // mark v-show
    // so that the transition module can hand over the control to the directive

    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data); // handle transition mode

      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }

        var delayedLeave;

        var performLeave = function performLeave() {
          delayedLeave();
        };

        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
};
/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);
delete props.mode;
var TransitionGroup = {
  props: props,
  beforeMount: function beforeMount() {
    var this$1 = this;
    var update = this._update;

    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1); // force removing pass

      this$1.__patch__(this$1._vnode, this$1.kept, false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
      );

      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },
  render: function render(h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots["default"] || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];

      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c;
          (c.data || (c.data = {})).transition = transitionData;
        } else if (true) {
          var opts = c.componentOptions;
          var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
          warn("<transition-group> children must be keyed: <" + name + ">");
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];

      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();

        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }

      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children);
  },
  updated: function updated() {
    var children = this.prevChildren;
    var moveClass = this.moveClass || (this.name || 'v') + '-move';

    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return;
    } // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.


    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation); // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line

    this._reflow = document.body.offsetHeight;
    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
          if (e && e.target !== el) {
            return;
          }

          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },
  methods: {
    hasMove: function hasMove(el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false;
      }
      /* istanbul ignore if */


      if (this._hasMove) {
        return this._hasMove;
      } // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.


      var clone = el.cloneNode();

      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) {
          removeClass(clone, cls);
        });
      }

      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return this._hasMove = info.hasTransform;
    }
  }
};

function callPendingCbs(c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */


  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;

  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};
/*  */
// install platform specific utils

Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement; // install platform runtime directives & components

extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents); // install platform patch function

Vue.prototype.__patch__ = inBrowser ? patch : noop; // public mount method

Vue.prototype.$mount = function (el, hydrating) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating);
}; // devtools global hook

/* istanbul ignore next */


if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if (true) {
        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }

    if ( true && config.productionTip !== false && typeof console !== 'undefined') {
      console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
    }
  }, 0);
}
/*  */


/* harmony default export */ __webpack_exports__["default"] = (Vue);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./node_modules/zenscroll/zenscroll.js":
/*!*********************************************!*\
  !*** ./node_modules/zenscroll/zenscroll.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Zenscroll 4.0.2
 * https://github.com/zengabor/zenscroll/
 *
 * Copyright 2015–2018 Gabor Lenard
 *
 * This is free and unencumbered software released into the public domain.
 * 
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 * 
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 * 
 * For more information, please refer to <http://unlicense.org>
 * 
 */

/*jshint devel:true, asi:true */

/*global define, module */
(function (root, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory()),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function () {
  "use strict"; // Detect if the browser already supports native smooth scrolling (e.g., Firefox 36+ and Chrome 49+) and it is enabled:

  var isNativeSmoothScrollEnabledOn = function isNativeSmoothScrollEnabledOn(elem) {
    return elem && "getComputedStyle" in window && window.getComputedStyle(elem)["scroll-behavior"] === "smooth";
  }; // Exit if it’s not a browser environment:


  if (typeof window === "undefined" || !("document" in window)) {
    return {};
  }

  var makeScroller = function makeScroller(container, defaultDuration, edgeOffset) {
    // Use defaults if not provided
    defaultDuration = defaultDuration || 999; //ms

    if (!edgeOffset && edgeOffset !== 0) {
      // When scrolling, this amount of distance is kept from the edges of the container:
      edgeOffset = 9; //px
    } // Handling the life-cycle of the scroller


    var scrollTimeoutId;

    var setScrollTimeoutId = function setScrollTimeoutId(newValue) {
      scrollTimeoutId = newValue;
    };
    /**
     * Stop the current smooth scroll operation immediately
     */


    var stopScroll = function stopScroll() {
      clearTimeout(scrollTimeoutId);
      setScrollTimeoutId(0);
    };

    var getTopWithEdgeOffset = function getTopWithEdgeOffset(elem) {
      return Math.max(0, container.getTopOf(elem) - edgeOffset);
    };
    /**
     * Scrolls to a specific vertical position in the document.
     *
     * @param {targetY} The vertical position within the document.
     * @param {duration} Optionally the duration of the scroll operation.
     *        If not provided the default duration is used.
     * @param {onDone} An optional callback function to be invoked once the scroll finished.
     */


    var scrollToY = function scrollToY(targetY, duration, onDone) {
      stopScroll();

      if (duration === 0 || duration && duration < 0 || isNativeSmoothScrollEnabledOn(container.body)) {
        container.toY(targetY);

        if (onDone) {
          onDone();
        }
      } else {
        var startY = container.getY();
        var distance = Math.max(0, targetY) - startY;
        var startTime = new Date().getTime();
        duration = duration || Math.min(Math.abs(distance), defaultDuration);

        (function loopScroll() {
          setScrollTimeoutId(setTimeout(function () {
            // Calculate percentage:
            var p = Math.min(1, (new Date().getTime() - startTime) / duration); // Calculate the absolute vertical position:

            var y = Math.max(0, Math.floor(startY + distance * (p < 0.5 ? 2 * p * p : p * (4 - p * 2) - 1)));
            container.toY(y);

            if (p < 1 && container.getHeight() + y < container.body.scrollHeight) {
              loopScroll();
            } else {
              setTimeout(stopScroll, 99); // with cooldown time

              if (onDone) {
                onDone();
              }
            }
          }, 9));
        })();
      }
    };
    /**
     * Scrolls to the top of a specific element.
     *
     * @param {elem} The element to scroll to.
     * @param {duration} Optionally the duration of the scroll operation.
     * @param {onDone} An optional callback function to be invoked once the scroll finished.
     */


    var scrollToElem = function scrollToElem(elem, duration, onDone) {
      scrollToY(getTopWithEdgeOffset(elem), duration, onDone);
    };
    /**
     * Scrolls an element into view if necessary.
     *
     * @param {elem} The element.
     * @param {duration} Optionally the duration of the scroll operation.
     * @param {onDone} An optional callback function to be invoked once the scroll finished.
     */


    var scrollIntoView = function scrollIntoView(elem, duration, onDone) {
      var elemHeight = elem.getBoundingClientRect().height;
      var elemBottom = container.getTopOf(elem) + elemHeight;
      var containerHeight = container.getHeight();
      var y = container.getY();
      var containerBottom = y + containerHeight;

      if (getTopWithEdgeOffset(elem) < y || elemHeight + edgeOffset > containerHeight) {
        // Element is clipped at top or is higher than screen.
        scrollToElem(elem, duration, onDone);
      } else if (elemBottom + edgeOffset > containerBottom) {
        // Element is clipped at the bottom.
        scrollToY(elemBottom - containerHeight + edgeOffset, duration, onDone);
      } else if (onDone) {
        onDone();
      }
    };
    /**
     * Scrolls to the center of an element.
     *
     * @param {elem} The element.
     * @param {duration} Optionally the duration of the scroll operation.
     * @param {offset} Optionally the offset of the top of the element from the center of the screen.
     *        A value of 0 is ignored.
     * @param {onDone} An optional callback function to be invoked once the scroll finished.
     */


    var scrollToCenterOf = function scrollToCenterOf(elem, duration, offset, onDone) {
      scrollToY(Math.max(0, container.getTopOf(elem) - container.getHeight() / 2 + (offset || elem.getBoundingClientRect().height / 2)), duration, onDone);
    };
    /**
     * Changes default settings for this scroller.
     *
     * @param {newDefaultDuration} Optionally a new value for default duration, used for each scroll method by default.
     *        Ignored if null or undefined.
     * @param {newEdgeOffset} Optionally a new value for the edge offset, used by each scroll method by default. Ignored if null or undefined.
     * @returns An object with the current values.
     */


    var setup = function setup(newDefaultDuration, newEdgeOffset) {
      if (newDefaultDuration === 0 || newDefaultDuration) {
        defaultDuration = newDefaultDuration;
      }

      if (newEdgeOffset === 0 || newEdgeOffset) {
        edgeOffset = newEdgeOffset;
      }

      return {
        defaultDuration: defaultDuration,
        edgeOffset: edgeOffset
      };
    };

    return {
      setup: setup,
      to: scrollToElem,
      toY: scrollToY,
      intoView: scrollIntoView,
      center: scrollToCenterOf,
      stop: stopScroll,
      moving: function moving() {
        return !!scrollTimeoutId;
      },
      getY: container.getY,
      getTopOf: container.getTopOf
    };
  };

  var docElem = document.documentElement;

  var getDocY = function getDocY() {
    return window.scrollY || docElem.scrollTop;
  }; // Create a scroller for the document:


  var zenscroll = makeScroller({
    body: document.scrollingElement || document.body,
    toY: function toY(y) {
      window.scrollTo(0, y);
    },
    getY: getDocY,
    getHeight: function getHeight() {
      return window.innerHeight || docElem.clientHeight;
    },
    getTopOf: function getTopOf(elem) {
      return elem.getBoundingClientRect().top + getDocY() - docElem.offsetTop;
    }
  });
  /**
   * Creates a scroller from the provided container element (e.g., a DIV)
   *
   * @param {scrollContainer} The vertical position within the document.
   * @param {defaultDuration} Optionally a value for default duration, used for each scroll method by default.
   *        Ignored if 0 or null or undefined.
   * @param {edgeOffset} Optionally a value for the edge offset, used by each scroll method by default. 
   *        Ignored if null or undefined.
   * @returns A scroller object, similar to `zenscroll` but controlling the provided element.
   */

  zenscroll.createScroller = function (scrollContainer, defaultDuration, edgeOffset) {
    return makeScroller({
      body: scrollContainer,
      toY: function toY(y) {
        scrollContainer.scrollTop = y;
      },
      getY: function getY() {
        return scrollContainer.scrollTop;
      },
      getHeight: function getHeight() {
        return Math.min(scrollContainer.clientHeight, window.innerHeight || docElem.clientHeight);
      },
      getTopOf: function getTopOf(elem) {
        return elem.offsetTop;
      }
    }, defaultDuration, edgeOffset);
  }; // Automatic link-smoothing on achors
  // Exclude IE8- or when native is enabled or Zenscroll auto- is disabled


  if ("addEventListener" in window && !window.noZensmooth && !isNativeSmoothScrollEnabledOn(document.body)) {
    var isHistorySupported = "history" in window && "pushState" in history;
    var isScrollRestorationSupported = isHistorySupported && "scrollRestoration" in history; // On first load & refresh make sure the browser restores the position first

    if (isScrollRestorationSupported) {
      history.scrollRestoration = "auto";
    }

    window.addEventListener("load", function () {
      if (isScrollRestorationSupported) {
        // Set it to manual
        setTimeout(function () {
          history.scrollRestoration = "manual";
        }, 9);
        window.addEventListener("popstate", function (event) {
          if (event.state && "zenscrollY" in event.state) {
            zenscroll.toY(event.state.zenscrollY);
          }
        }, false);
      } // Add edge offset on first load if necessary
      // This may not work on IE (or older computer?) as it requires more timeout, around 100 ms


      if (window.location.hash) {
        setTimeout(function () {
          // Adjustment is only needed if there is an edge offset:
          var edgeOffset = zenscroll.setup().edgeOffset;

          if (edgeOffset) {
            var targetElem = document.getElementById(window.location.href.split("#")[1]);

            if (targetElem) {
              var targetY = Math.max(0, zenscroll.getTopOf(targetElem) - edgeOffset);
              var diff = zenscroll.getY() - targetY; // Only do the adjustment if the browser is very close to the element:

              if (0 <= diff && diff < 9) {
                window.scrollTo(0, targetY);
              }
            }
          }
        }, 9);
      }
    }, false); // Handling clicks on anchors

    var RE_noZensmooth = new RegExp("(^|\\s)noZensmooth(\\s|$)");
    window.addEventListener("click", function (event) {
      var anchor = event.target;

      while (anchor && anchor.tagName !== "A") {
        anchor = anchor.parentNode;
      } // Let the browser handle the click if it wasn't with the primary button, or with some modifier keys:


      if (!anchor || event.which !== 1 || event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {
        return;
      } // Save the current scrolling position so it can be used for scroll restoration:


      if (isScrollRestorationSupported) {
        var historyState = history.state && _typeof(history.state) === "object" ? history.state : {};
        historyState.zenscrollY = zenscroll.getY();

        try {
          history.replaceState(historyState, "");
        } catch (e) {// Avoid the Chrome Security exception on file protocol, e.g., file://index.html
        }
      } // Find the referenced ID:


      var href = anchor.getAttribute("href") || "";

      if (href.indexOf("#") === 0 && !RE_noZensmooth.test(anchor.className)) {
        var targetY = 0;
        var targetElem = document.getElementById(href.substring(1));

        if (href !== "#") {
          if (!targetElem) {
            // Let the browser handle the click if the target ID is not found.
            return;
          }

          targetY = zenscroll.getTopOf(targetElem);
        }

        event.preventDefault(); // By default trigger the browser's `hashchange` event...

        var onDone = function onDone() {
          window.location = href;
        }; // ...unless there is an edge offset specified


        var edgeOffset = zenscroll.setup().edgeOffset;

        if (edgeOffset) {
          targetY = Math.max(0, targetY - edgeOffset);

          if (isHistorySupported) {
            onDone = function onDone() {
              history.pushState({}, "", href);
            };
          }
        }

        zenscroll.toY(targetY, null, onDone);
      }
    }, false);
  }

  return zenscroll;
});

/***/ }),

/***/ "./theme/src/css/style.css":
/*!*********************************!*\
  !*** ./theme/src/css/style.css ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./theme/src/index.js":
/*!****************************!*\
  !*** ./theme/src/index.js ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _js_main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/main.js */ "./theme/src/js/main.js");
/* harmony import */ var _js_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./js/components */ "./theme/src/js/components/index.js");
/* harmony import */ var _js_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./js/layout */ "./theme/src/js/layout/index.js");
/* harmony import */ var _css_style_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./css/style.css */ "./theme/src/css/style.css");
/* harmony import */ var _css_style_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_css_style_css__WEBPACK_IMPORTED_MODULE_3__);




window.addEventListener('DOMContentLoaded', function (event) {
  _js_main_js__WEBPACK_IMPORTED_MODULE_0__["siteManager"].init();
  console.log(_js_main_js__WEBPACK_IMPORTED_MODULE_0__["siteManager"]);
}); // EXAMPLE: integrate Vue components
//
// import Vue from 'vue'
// import Button from './js/vue/button.vue'
// import Counter from './js/vue/counter.vue'
//
// let buttons = Array.from(document.querySelectorAll('.button'))
// buttons.forEach((button) => {
//   new Vue({
//     render: (h) => h(Button)
//   }).$mount(button)
// })
//
// let counters = Array.from(document.querySelectorAll('.counter'))
// counters.forEach((counter) => {
//   new Vue({
//     render: (h) => h(Counter)
//   }).$mount(counter)
// })
//
// END EXAMPLE

/***/ }),

/***/ "./theme/src/js/components/anime-manager.js":
/*!**************************************************!*\
  !*** ./theme/src/js/components/anime-manager.js ***!
  \**************************************************/
/*! exports provided: animeManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animeManager", function() { return animeManager; });
/* harmony import */ var animejs_lib_anime_es__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! animejs/lib/anime.es */ "./node_modules/animejs/lib/anime.es.js");
/* harmony import */ var scrollmagic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! scrollmagic */ "./node_modules/scrollmagic/scrollmagic/uncompressed/ScrollMagic.js");
/* harmony import */ var scrollmagic__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(scrollmagic__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core */ "./theme/src/js/core/index.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }





var AnimeManager =
/*#__PURE__*/
function () {
  function AnimeManager() {
    _classCallCheck(this, AnimeManager);
  }

  _createClass(AnimeManager, [{
    key: "init",
    value: function init() {
      this.addSlideIn();
    }
  }, {
    key: "addSlideIn",
    value: function addSlideIn() {
      var elements = document.querySelectorAll('.anime-slide-in');
      elements.forEach(function (element) {
        var child = document.createElement('span');
        var slider = document.createElement('span');
        child.innerText = element.innerText;
        slider.innerText = element.innerText;
        var lineHeight = window.getComputedStyle(element).lineHeight;
        var lineHeightNumber = lineHeight.substr(0, lineHeight.length - 2);
        element.classList.add('pointer-events-none', 'text-transparent');
        element.classList.add('relative');
        child.classList.add('absolute', 'block', 'inset-0', 'text-black');
        slider.classList.add('absolute', 'block', 'top-0', 'left-0', 'bg-white');
        element.appendChild(child);
        element.appendChild(slider);
        var childAnime = Object(animejs_lib_anime_es__WEBPACK_IMPORTED_MODULE_0__["default"])({
          targets: child,
          translateY: ['0.5em', 0],
          lineHeight: [lineHeightNumber * 1.5, lineHeightNumber],
          duration: 600,
          autoplay: false,
          easing: 'easeOutSine',
          complete: function complete(anime) {
            element.classList.add('anime-completed');
          }
        });
        var sliderAnime = Object(animejs_lib_anime_es__WEBPACK_IMPORTED_MODULE_0__["default"])({
          targets: slider,
          translateY: ['0.5em', 0],
          lineHeight: [lineHeightNumber * 1.5 + 8, 0],
          duration: 600,
          autoplay: false,
          easing: 'easeOutSine',
          complete: function complete(anime) {
            element.classList.add('anime-completed');
            element.removeChild(slider);
          }
        });
        var scene = new scrollmagic__WEBPACK_IMPORTED_MODULE_1___default.a.Scene({
          triggerElement: element,
          triggerHook: 0.9
        });
        scene.on('enter', function (event) {
          var element = event.currentTarget.triggerElement();

          if (!element.classList.contains('anime-completed')) {
            childAnime.play();
            sliderAnime.play();
          }
        });
        scene.addTo(_core__WEBPACK_IMPORTED_MODULE_2__["scrollController"]);
      });
    }
  }]);

  return AnimeManager;
}();

var animeManager = new AnimeManager();

/***/ }),

/***/ "./theme/src/js/components/fietsen-swiper.js":
/*!***************************************************!*\
  !*** ./theme/src/js/components/fietsen-swiper.js ***!
  \***************************************************/
/*! exports provided: fietsenSwiper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fietsenSwiper", function() { return fietsenSwiper; });
/* harmony import */ var swiper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! swiper */ "./node_modules/swiper/dist/js/swiper.esm.bundle.js");
/* harmony import */ var swiper_dist_css_swiper_min_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! swiper/dist/css/swiper.min.css */ "./node_modules/swiper/dist/css/swiper.min.css");
/* harmony import */ var swiper_dist_css_swiper_min_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(swiper_dist_css_swiper_min_css__WEBPACK_IMPORTED_MODULE_1__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }




var FietsenSwiper =
/*#__PURE__*/
function () {
  function FietsenSwiper() {
    _classCallCheck(this, FietsenSwiper);
  }

  _createClass(FietsenSwiper, [{
    key: "init",
    value: function init() {
      var section = document.querySelector('.fietsen-swiper-section');

      if (section) {
        var swipers = [{
          slug: 'urban',
          container: section.querySelector('.urban.swiper-container'),
          navigator: section.querySelector('.urban.swiper-navigator')
        }, {
          slug: 'cross',
          container: section.querySelector('.cross.swiper-container'),
          navigator: section.querySelector('.cross.swiper-navigator')
        }, {
          slug: 'race',
          container: section.querySelector('.race.swiper-container'),
          navigator: section.querySelector('.race.swiper-navigator')
        }];
        console.log(swipers);
        swipers.forEach(function (fietsSwiper) {
          var slidesPerView = fietsSwiper.container.getAttribute('data-slides-per-view') ? container.getAttribute('data-slides-per-view') : 1;
          var spaceBetween = fietsSwiper.container.getAttribute('data-space-between') ? container.getAttribute('data-space-between') * 4 : 0;
          var freeMode = fietsSwiper.container.getAttribute('data-free-mode') ? container.getAttribute('data-free-mode') == 'true' : false;
          var autoplay = fietsSwiper.container.getAttribute('data-autoplay') ? container.getAttribute('data-autoplay') == 'true' : false;
          var instance = new swiper__WEBPACK_IMPORTED_MODULE_0__["default"](fietsSwiper.container, {
            loop: true,
            autoplay: autoplay,
            slidesPerView: slidesPerView,
            spaceBetween: spaceBetween,
            freeMode: freeMode
          });
          fietsSwiper.navigator.addEventListener('click', function (event) {
            swipers.forEach(function (other) {
              other.navigator.classList.remove('active');
              other.container.classList.remove('active');
            });
            fietsSwiper.navigator.classList.add('active');
            fietsSwiper.container.classList.add('active');
          });
          var navItems = fietsSwiper.navigator.querySelectorAll('.nav-item');
          navItems.forEach(function (item, key) {
            item.addEventListener('click', function (event) {
              instance.slideTo(key + 1);
            });
          });
          instance.on('slideChange', function () {
            navItems.forEach(function (item) {
              item.classList.remove('active');
            });
            navItems[instance.realIndex].classList.add('active');
          });
        });
      }
    }
  }]);

  return FietsenSwiper;
}();

var fietsenSwiper = new FietsenSwiper();

/***/ }),

/***/ "./theme/src/js/components/image-manager.js":
/*!**************************************************!*\
  !*** ./theme/src/js/components/image-manager.js ***!
  \**************************************************/
/*! exports provided: imageManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "imageManager", function() { return imageManager; });
/* harmony import */ var object_fit_images__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! object-fit-images */ "./node_modules/object-fit-images/dist/ofi.common-js.js");
/* harmony import */ var object_fit_images__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(object_fit_images__WEBPACK_IMPORTED_MODULE_0__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var ImageManager =
/*#__PURE__*/
function () {
  function ImageManager() {
    _classCallCheck(this, ImageManager);
  }

  _createClass(ImageManager, [{
    key: "init",
    value: function init() {
      object_fit_images__WEBPACK_IMPORTED_MODULE_0___default()();
    }
  }]);

  return ImageManager;
}();

var imageManager = new ImageManager();

/***/ }),

/***/ "./theme/src/js/components/index.js":
/*!******************************************!*\
  !*** ./theme/src/js/components/index.js ***!
  \******************************************/
/*! exports provided: animeManager, imageManager, swiperManager, fietsenSwiper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _js_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/js/core */ "./theme/src/js/core/index.js");
/* harmony import */ var _anime_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./anime-manager */ "./theme/src/js/components/anime-manager.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "animeManager", function() { return _anime_manager__WEBPACK_IMPORTED_MODULE_1__["animeManager"]; });

/* harmony import */ var _image_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./image-manager */ "./theme/src/js/components/image-manager.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "imageManager", function() { return _image_manager__WEBPACK_IMPORTED_MODULE_2__["imageManager"]; });

/* harmony import */ var _swiper_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./swiper-manager */ "./theme/src/js/components/swiper-manager.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "swiperManager", function() { return _swiper_manager__WEBPACK_IMPORTED_MODULE_3__["swiperManager"]; });

/* harmony import */ var _fietsen_swiper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fietsen-swiper */ "./theme/src/js/components/fietsen-swiper.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fietsenSwiper", function() { return _fietsen_swiper__WEBPACK_IMPORTED_MODULE_4__["fietsenSwiper"]; });






_js_core__WEBPACK_IMPORTED_MODULE_0__["eventBus"].$on('init', function () {
  _anime_manager__WEBPACK_IMPORTED_MODULE_1__["animeManager"].init();
  _image_manager__WEBPACK_IMPORTED_MODULE_2__["imageManager"].init();
  _swiper_manager__WEBPACK_IMPORTED_MODULE_3__["swiperManager"].init();
  _fietsen_swiper__WEBPACK_IMPORTED_MODULE_4__["fietsenSwiper"].init();
});
_js_core__WEBPACK_IMPORTED_MODULE_0__["eventBus"].$on('barba-page-change', function () {
  _swiper_manager__WEBPACK_IMPORTED_MODULE_3__["swiperManager"].init();
  _fietsen_swiper__WEBPACK_IMPORTED_MODULE_4__["fietsenSwiper"].init();
});


/***/ }),

/***/ "./theme/src/js/components/swiper-manager.js":
/*!***************************************************!*\
  !*** ./theme/src/js/components/swiper-manager.js ***!
  \***************************************************/
/*! exports provided: swiperManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "swiperManager", function() { return swiperManager; });
/* harmony import */ var swiper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! swiper */ "./node_modules/swiper/dist/js/swiper.esm.bundle.js");
/* harmony import */ var swiper_dist_css_swiper_min_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! swiper/dist/css/swiper.min.css */ "./node_modules/swiper/dist/css/swiper.min.css");
/* harmony import */ var swiper_dist_css_swiper_min_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(swiper_dist_css_swiper_min_css__WEBPACK_IMPORTED_MODULE_1__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }




var SwiperManager =
/*#__PURE__*/
function () {
  function SwiperManager() {
    _classCallCheck(this, SwiperManager);
  }

  _createClass(SwiperManager, [{
    key: "init",
    value: function init() {
      var sections = document.querySelectorAll('.swiper-section');
      sections.forEach(function (section) {
        var containers = section.querySelectorAll('.swiper-container');
        containers.forEach(function (container) {
          var navigation = section.querySelector('.swiper-navigation');
          var slidesPerView = container.getAttribute('data-slides-per-view') ? container.getAttribute('data-slides-per-view') : 1;
          var spaceBetween = container.getAttribute('data-space-between') ? container.getAttribute('data-space-between') * 4 : 0;
          var freeMode = container.getAttribute('data-free-mode') ? container.getAttribute('data-free-mode') == 'true' : false;
          var autoplay = container.getAttribute('data-autoplay') ? container.getAttribute('data-autoplay') == 'true' : false;
          var instance = new swiper__WEBPACK_IMPORTED_MODULE_0__["default"](container, {
            loop: true,
            autoplay: autoplay,
            slidesPerView: slidesPerView,
            spaceBetween: spaceBetween,
            freeMode: freeMode,
            pagination: {
              el: container.querySelector('.swiper-pagination')
            }
          });

          if (navigation) {
            var navItems = navigation.querySelectorAll('.nav-item');
            navItems.forEach(function (item, key) {
              item.addEventListener('click', function (event) {
                instance.slideTo(key + 1);
              });
            });
            instance.on('slideChange', function () {
              navItems.forEach(function (item) {
                item.classList.remove('active');
              });
              navItems[instance.realIndex].classList.add('active');
            });
          }
        });
      });
    }
  }]);

  return SwiperManager;
}();

var swiperManager = new SwiperManager();

/***/ }),

/***/ "./theme/src/js/core/config.js":
/*!*************************************!*\
  !*** ./theme/src/js/core/config.js ***!
  \*************************************/
/*! exports provided: config */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "config", function() { return config; });
var config = {
  offsetFromTop: 32,
  animation: {
    duration: {
      "short": 300,
      medium: 600,
      "long": 900
    }
  }
};

/***/ }),

/***/ "./theme/src/js/core/event-bus.js":
/*!****************************************!*\
  !*** ./theme/src/js/core/event-bus.js ***!
  \****************************************/
/*! exports provided: eventBus */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eventBus", function() { return eventBus; });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm.js");

var eventBus = new vue__WEBPACK_IMPORTED_MODULE_0__["default"]();

/***/ }),

/***/ "./theme/src/js/core/index.js":
/*!************************************!*\
  !*** ./theme/src/js/core/index.js ***!
  \************************************/
/*! exports provided: config, eventBus, scrollController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ "./theme/src/js/core/config.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "config", function() { return _config__WEBPACK_IMPORTED_MODULE_0__["config"]; });

/* harmony import */ var _event_bus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event-bus */ "./theme/src/js/core/event-bus.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eventBus", function() { return _event_bus__WEBPACK_IMPORTED_MODULE_1__["eventBus"]; });

/* harmony import */ var _scroll_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scroll-controller */ "./theme/src/js/core/scroll-controller.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scrollController", function() { return _scroll_controller__WEBPACK_IMPORTED_MODULE_2__["scrollController"]; });





/***/ }),

/***/ "./theme/src/js/core/scroll-controller.js":
/*!************************************************!*\
  !*** ./theme/src/js/core/scroll-controller.js ***!
  \************************************************/
/*! exports provided: scrollController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scrollController", function() { return scrollController; });
/* harmony import */ var scrollmagic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! scrollmagic */ "./node_modules/scrollmagic/scrollmagic/uncompressed/ScrollMagic.js");
/* harmony import */ var scrollmagic__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(scrollmagic__WEBPACK_IMPORTED_MODULE_0__);

var scrollController = new scrollmagic__WEBPACK_IMPORTED_MODULE_0___default.a.Controller({
  globalSceneOptions: {
    duration: 0
  }
});

/***/ }),

/***/ "./theme/src/js/layout/barba-manager.js":
/*!**********************************************!*\
  !*** ./theme/src/js/layout/barba-manager.js ***!
  \**********************************************/
/*! exports provided: barbaManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "barbaManager", function() { return barbaManager; });
/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core */ "./theme/src/js/core/index.js");
/* harmony import */ var _barba_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @barba/core */ "./node_modules/@barba/core/dist/barba.umd.js");
/* harmony import */ var _barba_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_barba_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _barba_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @barba/css */ "./node_modules/@barba/css/dist/barba-css.umd.js");
/* harmony import */ var _barba_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_barba_css__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_3__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }




 // tell Barba to use the css module

_barba_core__WEBPACK_IMPORTED_MODULE_1___default.a.use(_barba_css__WEBPACK_IMPORTED_MODULE_2___default.a);

var BarbaManager =
/*#__PURE__*/
function () {
  function BarbaManager() {
    _classCallCheck(this, BarbaManager);
  }

  _createClass(BarbaManager, [{
    key: "init",
    value: function init() {
      _barba_core__WEBPACK_IMPORTED_MODULE_1___default.a.init({
        transitions: [{
          name: 'barba-fade',
          beforeLeave: function beforeLeave() {
            document.body.classList.remove('barba-enter');
            document.body.classList.add('barba-leave');
          },
          beforeEnter: function beforeEnter() {
            document.body.classList.add('barba-enter');
            document.body.classList.remove('barba-leave');
            var main = document.querySelector('.main');
            var scripts = Array.from(main.querySelectorAll('script'));
            scripts.forEach(function (script) {
              axios__WEBPACK_IMPORTED_MODULE_3___default.a.get(script.getAttribute('src')).then(function (response) {
                eval(response.data);
              })["catch"](function (error) {
                console.log(error);
              });
            });
            _core__WEBPACK_IMPORTED_MODULE_0__["eventBus"].$emit('barba-page-change');
            console.log('barba-page-change');
          },
          afterEnter: function afterEnter() {
            document.body.classList.remove('barba-enter');
            document.body.classList.remove('barba-leave');
          }
        }]
      });
    }
  }]);

  return BarbaManager;
}();

var barbaManager = new BarbaManager();

/***/ }),

/***/ "./theme/src/js/layout/footer.ts":
/*!***************************************!*\
  !*** ./theme/src/js/layout/footer.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var anime_es_1 = __webpack_require__(/*! animejs/lib/anime.es */ "./node_modules/animejs/lib/anime.es.js");
var ScrollMagic = __webpack_require__(/*! scrollmagic */ "./node_modules/scrollmagic/scrollmagic/uncompressed/ScrollMagic.js");
var core_1 = __webpack_require__(/*! ../core */ "./theme/src/js/core/index.js");
var utilities_1 = __webpack_require__(/*! ../utilities */ "./theme/src/js/utilities.js");
var scroll_controller_js_1 = __webpack_require__(/*! ../core/scroll-controller.js */ "./theme/src/js/core/scroll-controller.js");
var Footer = /** @class */ (function () {
    function Footer() {
    }
    Footer.prototype.init = function (element, wrapper) {
        this.element = element;
        this.wrapper = wrapper;
        this.wrapper.style.minHeight = this.element.clientHeight + 'px';
        this.addSceneFooterTouchesHeader();
        this.addEventListeners();
    };
    Footer.prototype.pin = function () {
        this.element.classList.add('pinned');
    };
    Footer.prototype.unpin = function () {
        this.element.classList.remove('pinned');
        this.element.removeAttribute('style');
    };
    Footer.prototype.slideIn = function () {
        var _this = this;
        this.element.classList.add('animating');
        var scrollOffsetBottom = window.scrollY + window.innerHeight;
        var offset = Math.max(Math.min(120, scrollOffsetBottom - utilities_1.documentOffset(this.wrapper).top), 0);
        // can't slide in if offset equals own height
        if (offset === this.element.clientHeight)
            return;
        this.element.style.bottom =
            -1 * (this.element.clientHeight - offset) + 'px';
        this.element.style.position = 'fixed';
        anime_es_1["default"]({
            targets: this.element,
            bottom: [-1 * this.element.clientHeight - offset, 0],
            duration: core_1.config.animation.duration.medium,
            easing: 'easeOutQuad',
            complete: function (anim) {
                _this.element.classList.remove('animating');
                _this.pin();
            }
        });
    };
    Footer.prototype.slideOut = function () {
        var _this = this;
        this.element.classList.add('animating', 'pinned');
        var scrollOffsetBottom = window.scrollY + window.innerHeight;
        var offset = Math.max(Math.min(120, scrollOffsetBottom - utilities_1.documentOffset(this.wrapper).top), 0);
        anime_es_1["default"]({
            targets: this.element,
            bottom: [0, -1 * this.element.clientHeight - offset],
            duration: core_1.config.animation.duration.short,
            easing: 'easeOutQuad',
            complete: function (anim) {
                _this.element.classList.remove('animating');
                _this.unpin();
            }
        });
    };
    Footer.prototype.addSceneFooterTouchesHeader = function () {
        var nav = document.getElementById('nav-main');
        if (nav) {
            this.sceneFooterTouchesHeader = new ScrollMagic.Scene({
                offset: document.body.clientHeight - this.element.clientHeight - nav.clientHeight
            }).addTo(scroll_controller_js_1.scrollController);
            this.sceneFooterTouchesHeader.on('enter', function (event) {
                core_1.eventBus.$emit('footer-touched-header');
            });
            this.sceneFooterTouchesHeader.on('leave', function (event) {
                core_1.eventBus.$emit('footer-released-header');
            });
        }
    };
    Footer.prototype.addEventListeners = function () {
        var _this = this;
        core_1.eventBus.$on('toggle-footer', function (event) {
            // return if it's already animating
            // if (this.element.classList.contains('animating')) {
            //   return;
            // }
            // if (this.element.classList.contains('pinned')) {
            //   this.slideOut();
            // } else {
            //   this.slideIn();
            // }
        });
        core_1.eventBus.$on('scrolled-to-bottom', function (event) {
            _this.unpin();
        });
        core_1.eventBus.$on('barba-page-change', function (event) {
            scroll_controller_js_1.scrollController.removeScene(_this.sceneFooterTouchesHeader);
            _this.addSceneFooterTouchesHeader();
        });
    };
    return Footer;
}());
exports.footer = new Footer();


/***/ }),

/***/ "./theme/src/js/layout/header.ts":
/*!***************************************!*\
  !*** ./theme/src/js/layout/header.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var event_bus_1 = __webpack_require__(/*! ../core/event-bus */ "./theme/src/js/core/event-bus.js");
var config_1 = __webpack_require__(/*! ../core/config */ "./theme/src/js/core/config.js");
var Header = /** @class */ (function () {
    function Header() {
    }
    Header.prototype.init = function (element) {
        this.element = element;
        this.burgerWrapper = element.querySelector('.nav-burger-wrapper');
        if (window.scrollY > config_1.config.offsetFromTop) {
            this.pin();
        }
        this.setColor();
        this.addEventListeners();
    };
    Header.prototype.addEventListeners = function () {
        var _this = this;
        event_bus_1.eventBus.$on('scrolled-from-top', function (event) {
            _this.pin();
        });
        event_bus_1.eventBus.$on('scrolled-to-top', function (event) {
            _this.unpin();
        });
        event_bus_1.eventBus.$on('barba-page-change', function (event) {
            _this.setColor();
        });
    };
    Header.prototype.pin = function () {
        this.element.classList.add('pinned');
    };
    Header.prototype.unpin = function () {
        this.element.classList.remove('pinned');
    };
    Header.prototype.setColor = function () {
        var color = document.querySelector('.main').getAttribute('data-header-color');
        if (color) {
            this.element.classList.remove('text-blue');
            this.element.classList.add('text-orange');
            this.burgerWrapper.classList.remove('bg-blue');
            this.burgerWrapper.classList.add('bg-orange');
        }
        else {
            this.element.classList.remove('text-orange-light');
            this.element.classList.remove('text-orange');
            this.element.classList.add('text-blue');
            this.burgerWrapper.classList.remove('bg-orange');
            this.burgerWrapper.classList.add('bg-blue');
        }
    };
    Header.prototype.stickToFooter = function () {
        this.element.style.position = 'absolute';
        this.element.style.bottom = '0';
    };
    Header.prototype.unstickFromFooter = function () {
        this.element.style.position = '';
        this.element.style.bottom = '';
    };
    return Header;
}());
exports.header = new Header();


/***/ }),

/***/ "./theme/src/js/layout/index.js":
/*!**************************************!*\
  !*** ./theme/src/js/layout/index.js ***!
  \**************************************/
/*! exports provided: header, navMenu, footer, barbaManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var zenscroll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zenscroll */ "./node_modules/zenscroll/zenscroll.js");
/* harmony import */ var zenscroll__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(zenscroll__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _js_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/js/core */ "./theme/src/js/core/index.js");
/* harmony import */ var _header_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./header.ts */ "./theme/src/js/layout/header.ts");
/* harmony import */ var _header_ts__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_header_ts__WEBPACK_IMPORTED_MODULE_2__);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "header", function() { return _header_ts__WEBPACK_IMPORTED_MODULE_2__["header"]; });

/* harmony import */ var _nav_menu_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nav-menu.ts */ "./theme/src/js/layout/nav-menu.ts");
/* harmony import */ var _nav_menu_ts__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_nav_menu_ts__WEBPACK_IMPORTED_MODULE_3__);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "navMenu", function() { return _nav_menu_ts__WEBPACK_IMPORTED_MODULE_3__["navMenu"]; });

/* harmony import */ var _footer_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./footer.ts */ "./theme/src/js/layout/footer.ts");
/* harmony import */ var _footer_ts__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_footer_ts__WEBPACK_IMPORTED_MODULE_4__);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "footer", function() { return _footer_ts__WEBPACK_IMPORTED_MODULE_4__["footer"]; });

/* harmony import */ var _barba_manager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./barba-manager */ "./theme/src/js/layout/barba-manager.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "barbaManager", function() { return _barba_manager__WEBPACK_IMPORTED_MODULE_5__["barbaManager"]; });








function initHeader() {
  var headerElement = document.querySelector('.header-main');

  if (headerElement) {
    _header_ts__WEBPACK_IMPORTED_MODULE_2__["header"].init(headerElement);
  }
}

function initNavMenu() {
  var navElement = document.querySelector('.nav-main');

  if (navElement) {
    _nav_menu_ts__WEBPACK_IMPORTED_MODULE_3__["navMenu"].init(navElement);
  }
}

function initFooter() {
  var footerElement = document.querySelector('.footer-main');
  var footerWrapper = document.querySelector('.footer-wrapper');

  if (footerElement) {
    _footer_ts__WEBPACK_IMPORTED_MODULE_4__["footer"].init(footerElement, footerWrapper);
  }
}

_js_core__WEBPACK_IMPORTED_MODULE_1__["eventBus"].$on('init', function (event) {
  initHeader();
  initNavMenu();
  initFooter();
  _barba_manager__WEBPACK_IMPORTED_MODULE_5__["barbaManager"].init();
  console.log('init layout');
});


/***/ }),

/***/ "./theme/src/js/layout/nav-menu.ts":
/*!*****************************************!*\
  !*** ./theme/src/js/layout/nav-menu.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var event_bus_1 = __webpack_require__(/*! ../core/event-bus */ "./theme/src/js/core/event-bus.js");
var config_1 = __webpack_require__(/*! ../core/config */ "./theme/src/js/core/config.js");
var NavMenu = /** @class */ (function () {
    function NavMenu() {
    }
    NavMenu.prototype.init = function (element) {
        this.element = element;
        this.addEventListeners();
    };
    NavMenu.prototype.addEventListeners = function () {
        var _this = this;
        event_bus_1.eventBus.$on('toggle-menu', function (event) {
            // return if it's already animating
            if (_this.element.classList.contains('animating')) {
                return;
            }
            if (_this.element.classList.contains('active')) {
                _this.element.classList.add('animating');
                setTimeout(function () {
                    _this.element.classList.remove('animating');
                }, config_1.config.animation.duration.medium);
                _this.element.classList.remove('active');
            }
            else {
                _this.element.classList.add('animating');
                setTimeout(function () {
                    _this.element.classList.remove('animating');
                }, config_1.config.animation.duration.medium);
                _this.element.classList.add('active');
            }
        });
        event_bus_1.eventBus.$on('window-resized', function (event) {
            if (window.innerWidth >= 1024) {
                _this.element.classList.remove('active');
            }
        });
        event_bus_1.eventBus.$on('barba-page-change', function (event) {
            if (_this.element.classList.contains('active')) {
                event_bus_1.eventBus.$emit('toggle-menu');
            }
        });
    };
    return NavMenu;
}());
exports.navMenu = new NavMenu();


/***/ }),

/***/ "./theme/src/js/main.js":
/*!******************************!*\
  !*** ./theme/src/js/main.js ***!
  \******************************/
/*! exports provided: siteManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "siteManager", function() { return siteManager; });
/* harmony import */ var scrollmagic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! scrollmagic */ "./node_modules/scrollmagic/scrollmagic/uncompressed/ScrollMagic.js");
/* harmony import */ var scrollmagic__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(scrollmagic__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/debounce */ "./node_modules/lodash/debounce.js");
/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_debounce__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/index.js */ "./theme/src/js/core/index.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }





var SiteManager =
/*#__PURE__*/
function () {
  function SiteManager() {
    _classCallCheck(this, SiteManager);

    this.sceneScrolledTop;
    this.sceneScrolledBottom;
  }

  _createClass(SiteManager, [{
    key: "init",
    value: function init() {
      _core_index_js__WEBPACK_IMPORTED_MODULE_2__["eventBus"].$emit('init', event);
      this.addToggleMenu();
      this.addToggleFooter();
      this.addSceneScrolledTop();
      this.addSceneScrolledBottom();
      this.addEventListeners();
    }
  }, {
    key: "addToggleMenu",
    value: function addToggleMenu() {
      var toggles = document.querySelectorAll('.toggle-menu');
      console.log(toggles);
      toggles.forEach(function (toggle) {
        toggle.addEventListener('click', function (event) {
          _core_index_js__WEBPACK_IMPORTED_MODULE_2__["eventBus"].$emit('toggle-menu');
        });
      });
    }
  }, {
    key: "addToggleFooter",
    value: function addToggleFooter() {
      var toggles = document.querySelectorAll('.toggle-footer');
      console.log(toggles);
      toggles.forEach(function (toggle) {
        toggle.addEventListener('click', function (event) {
          _core_index_js__WEBPACK_IMPORTED_MODULE_2__["eventBus"].$emit('toggle-footer');
        });
      });
    }
  }, {
    key: "addSceneScrolledTop",
    value: function addSceneScrolledTop() {
      this.sceneScrolledTop = new scrollmagic__WEBPACK_IMPORTED_MODULE_0___default.a.Scene({
        offset: _core_index_js__WEBPACK_IMPORTED_MODULE_2__["config"].offsetFromTop
      }).addTo(_core_index_js__WEBPACK_IMPORTED_MODULE_2__["scrollController"]);
      this.sceneScrolledTop.on('enter', function (event) {
        _core_index_js__WEBPACK_IMPORTED_MODULE_2__["eventBus"].$emit('scrolled-from-top');
      });
      this.sceneScrolledTop.on('leave', function (event) {
        _core_index_js__WEBPACK_IMPORTED_MODULE_2__["eventBus"].$emit('scrolled-to-top');
      });
    }
  }, {
    key: "addSceneScrolledBottom",
    value: function addSceneScrolledBottom() {
      this.sceneScrolledBottom = new scrollmagic__WEBPACK_IMPORTED_MODULE_0___default.a.Scene({
        offset: document.body.clientHeight - window.innerHeight
      }).addTo(_core_index_js__WEBPACK_IMPORTED_MODULE_2__["scrollController"]);
      this.sceneScrolledBottom.on('enter', function (event) {
        _core_index_js__WEBPACK_IMPORTED_MODULE_2__["eventBus"].$emit('scrolled-to-bottom');
      });
      this.sceneScrolledBottom.on('leave', function (event) {
        _core_index_js__WEBPACK_IMPORTED_MODULE_2__["eventBus"].$emit('scrolled-from-bottom');
      });
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this = this;

      window.addEventListener('resize', lodash_debounce__WEBPACK_IMPORTED_MODULE_1___default()(function (event) {
        _core_index_js__WEBPACK_IMPORTED_MODULE_2__["eventBus"].$emit('window-resized', event);
      }, 400));
      _core_index_js__WEBPACK_IMPORTED_MODULE_2__["eventBus"].$on('barba-page-change', function (event) {
        if (_this.sceneScrolledBottom) {
          _core_index_js__WEBPACK_IMPORTED_MODULE_2__["scrollController"].removeScene(_this.sceneScrolledBottom);

          _this.addSceneScrolledBottom();
        }
      });
    }
  }]);

  return SiteManager;
}();

var siteManager = new SiteManager();

/***/ }),

/***/ "./theme/src/js/utilities.js":
/*!***********************************!*\
  !*** ./theme/src/js/utilities.js ***!
  \***********************************/
/*! exports provided: documentOffset, getLineHeight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "documentOffset", function() { return documentOffset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLineHeight", function() { return getLineHeight; });
var documentOffset = function documentOffset(element) {
  var rect = element.getBoundingClientRect(),
      scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,
      scrollTop = window.pageYOffset || document.documentElement.scrollTop;
  return {
    top: rect.top + scrollTop,
    left: rect.left + scrollLeft
  };
};
var getLineHeight = function getLineHeight(element) {
  var temp = document.createElement(element.nodeName);
  temp.setAttribute("style", "margin:0px;padding:0px;font-family:" + element.style.fontFamily + ";font-size:" + element.style.fontSize);
  temp.innerHTML = "lorem";
  temp = element.parentNode.appendChild(temp);
  var lineHeight = temp.clientHeight;
  temp.parentNode.removeChild(temp);
  return lineHeight;
};

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1wbHVnaW4tdHJhbnNmb3JtLWFzeW5jLXRvLXByb21pc2VzL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9pcy1wcm9taXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9zcmMvbW9kdWxlcy9Mb2dnZXIudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9ydW4tYXN5bmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9ob29rcy50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9zcmMvc2NoZW1hcy9hdHRyaWJ1dGUudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9kb20udHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9oaXN0b3J5LnRzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvaGVscGVycy50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL3VybC50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL21vZHVsZXMvSWdub3JlLnRzIiwid2VicGFjazovLy8uLi9zcmMvbW9kdWxlcy9DYWNoZS50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL3JlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tb2R1bGVzL1ByZXZlbnQudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tb2R1bGVzL1N0b3JlLnRzIiwid2VicGFjazovLy8uLi9zcmMvbW9kdWxlcy9UcmFuc2l0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL21vZHVsZXMvVmlld3MudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9wb2x5ZmlsbHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zY2hlbWFzL3BhZ2UudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jb3JlLnRzIiwid2VicGFjazovLy8uLi9zcmMvY3NzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbmltZWpzL2xpYi9hbmltZS5lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3Mvbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tNy9kaXN0L2RvbTcubW9kdWxhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9OdW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1maXQtaW1hZ2VzL2Rpc3Qvb2ZpLmNvbW1vbi1qcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY3JvbGxtYWdpYy9zY3JvbGxtYWdpYy91bmNvbXByZXNzZWQvU2Nyb2xsTWFnaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Nzci13aW5kb3cvZGlzdC9zc3Itd2luZG93LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2Rpc3QvY3NzL3N3aXBlci5taW4uY3NzPzc0NjYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9kaXN0L2pzL3N3aXBlci5lc20uYnVuZGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUvZGlzdC92dWUucnVudGltZS5lc20uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvemVuc2Nyb2xsL3plbnNjcm9sbC5qcyIsIndlYnBhY2s6Ly8vLi90aGVtZS9zcmMvY3NzL3N0eWxlLmNzcz82NjEwIiwid2VicGFjazovLy8uL3RoZW1lL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi90aGVtZS9zcmMvanMvY29tcG9uZW50cy9hbmltZS1tYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL3RoZW1lL3NyYy9qcy9jb21wb25lbnRzL2ZpZXRzZW4tc3dpcGVyLmpzIiwid2VicGFjazovLy8uL3RoZW1lL3NyYy9qcy9jb21wb25lbnRzL2ltYWdlLW1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vdGhlbWUvc3JjL2pzL2NvbXBvbmVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vdGhlbWUvc3JjL2pzL2NvbXBvbmVudHMvc3dpcGVyLW1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vdGhlbWUvc3JjL2pzL2NvcmUvY29uZmlnLmpzIiwid2VicGFjazovLy8uL3RoZW1lL3NyYy9qcy9jb3JlL2V2ZW50LWJ1cy5qcyIsIndlYnBhY2s6Ly8vLi90aGVtZS9zcmMvanMvY29yZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi90aGVtZS9zcmMvanMvY29yZS9zY3JvbGwtY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi90aGVtZS9zcmMvanMvbGF5b3V0L2JhcmJhLW1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vdGhlbWUvc3JjL2pzL2xheW91dC9mb290ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vdGhlbWUvc3JjL2pzL2xheW91dC9oZWFkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vdGhlbWUvc3JjL2pzL2xheW91dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi90aGVtZS9zcmMvanMvbGF5b3V0L25hdi1tZW51LnRzIiwid2VicGFjazovLy8uL3RoZW1lL3NyYy9qcy9tYWluLmpzIiwid2VicGFjazovLy8uL3RoZW1lL3NyYy9qcy91dGlsaXRpZXMuanMiXSwibmFtZXMiOlsiY29uc3QiLCJfUGFjdCIsInByb3RvdHlwZSIsInRoZW4iLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJyZXN1bHQiLCJzdGF0ZSIsInRoaXMiLCJzIiwiY2FsbGJhY2siLCJfc2V0dGxlIiwidiIsImUiLCJvIiwiX3RoaXMiLCJ2YWx1ZSIsInBhY3QiLCJiaW5kIiwib2JzZXJ2ZXIiLCJfY2F0Y2giLCJib2R5IiwicmVjb3ZlciIsIl9lYXJseVJldHVybiIsIl9Bc3luY0dlbmVyYXRvciIsImVudHJ5IiwiX2VudHJ5IiwiX3BhY3QiLCJfcmVzb2x2ZSIsIl9yZXR1cm4iLCJfcHJvbWlzZSIsIl93cmFwUmV0dXJuZWRWYWx1ZSIsImRvbmUiLCJfd3JhcFlpZWxkZWRWYWx1ZSIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJfeWllbGQiLCJuZXh0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZXR1cm5WYWx1ZSIsImVycm9yIiwicmVqZWN0IiwiTG9nTGV2ZWxzIiwicnVuQXN5bmMiLCJtb2R1bGUiLCJmdW5jIiwiY2IiLCJhc3luYyIsImFyZ3MiLCJhcmd1bWVudHMiLCJwcm9taXNlIiwib2JqIiwiYW5zd2VyIiwiYXBwbHkiLCJlcnIiLCJBcnJheSIsInNsaWNlIiwiY2FsbCIsImxlbmd0aCIsInB1c2giLCJsZXQiLCJfbGV2ZWwiLCJvZmYiLCJMb2dnZXIiLCJjb25zdHJ1Y3RvciIsInNvdXJjZSIsIl9zb3VyY2UiLCJwcmludCIsImdldExldmVsIiwic2V0TGV2ZWwiLCJuYW1lIiwiX2xvZyIsImNvbnNvbGUiLCJpbmZvIiwib2JqZWN0cyIsIndhcm4iLCJ3YXJuaW5nIiwiZGVidWciLCJsb2ciLCJmbiIsImxldmVsIiwiY29uY2F0IiwiSG9va3MiLCJNYXAiLCJpbml0IiwicmVnaXN0ZXJlZCIsImNsZWFyIiwiYWxsIiwiZm9yRWFjaCIsImhvb2siLCJjdHgiLCJoYXMiLCJzZXQiLCJTZXQiLCJnZXQiLCJhZGQiLCJkbyIsImNoYWluIiwiaGVscCIsImxvZ2dlciIsImpvaW4iLCJrZXkiLCJob29rcyIsInBhdGhUb1JlZ2V4cCIsInBhdGgiLCJrZXlzIiwib3B0aW9ucyIsIlJlZ0V4cCIsImdyb3VwcyIsIm1hdGNoIiwiaSIsInByZWZpeCIsImRlbGltaXRlciIsIm9wdGlvbmFsIiwicmVwZWF0IiwicGF0dGVybiIsInJlZ2V4cFRvUmVnZXhwIiwiaXNBcnJheSIsInBhcnRzIiwiZmxhZ3MiLCJhcnJheVRvUmVnZXhwIiwidG9rZW5zVG9SZWdFeHAiLCJwYXJzZSIsInN0cmluZ1RvUmVnZXhwIiwidG9rZW5zVG9GdW5jdGlvbiIsIkRFRkFVTFRfREVMSU1JVEVSIiwiUEFUSF9SRUdFWFAiLCJzdHIiLCJyZXMiLCJ0b2tlbnMiLCJpbmRleCIsImRlZmF1bHREZWxpbWl0ZXIiLCJ3aGl0ZWxpc3QiLCJ1bmRlZmluZWQiLCJwYXRoRXNjYXBlZCIsImV4ZWMiLCJtIiwiZXNjYXBlZCIsIm9mZnNldCIsInByZXYiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImsiLCJjIiwiaW5kZXhPZiIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwic3Vic3RyIiwibWF0Y2hlcyIsImRhdGEiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b2tlbiIsInNlZ21lbnQiLCJUeXBlRXJyb3IiLCJqIiwidGVzdCIsIlN0cmluZyIsInJlcGxhY2UiLCJzZW5zaXRpdmUiLCJzdHJpY3QiLCJzdGFydCIsImVuZCIsImVuZHNXaXRoIiwibWFwIiwicm91dGUiLCJlbmRUb2tlbiIsImlzRW5kRGVsaW1pdGVkIiwic2NoZW1hQXR0cmlidXRlIiwiY29udGFpbmVyIiwibmFtZXNwYWNlIiwicHJldmVudCIsIndyYXBwZXIiLCJEb20iLCJET01QYXJzZXIiLCJ0b1N0cmluZyIsImVsIiwib3V0ZXJIVE1MIiwidG9Eb2N1bWVudCIsImh0bWxTdHJpbmciLCJfcGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwidG9FbGVtZW50IiwiZGl2IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiZ2V0SHRtbCIsImRvYyIsImRvY3VtZW50RWxlbWVudCIsImdldFdyYXBwZXIiLCJzY29wZSIsInF1ZXJ5U2VsZWN0b3IiLCJfYXR0ciIsImdldENvbnRhaW5lciIsImdldE5hbWVzcGFjZSIsIm5zIiwiZ2V0QXR0cmlidXRlIiwiZ2V0SHJlZiIsImhyZWYiLCJkb20iLCJIaXN0b3J5IiwidXJsIiwiX3N0YXRlIiwicmVtb3ZlIiwicG9wIiwid2luZG93IiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsImNhbmNlbCIsImJhY2siLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJjdXJyZW50IiwicHJldmlvdXMiLCJ1cGRhdGUiLCJwYWdlIiwiaHRtbCIsIm5leHREb2N1bWVudCIsInRyaWdnZXIiLCJ0aXRsZSIsIm5leHRUaWNrIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicHRyIiwiZ2V0T3JpZ2luIiwibG9jYXRpb24iLCJvcmlnaW4iLCJnZXRQb3J0IiwicCIsInBvcnQiLCJwYXJzZUludCIsInByb3RvY29sIiwiaGFzaCIsInF1ZXJ5IiwiaGFzaEluZGV4IiwicXVlcnlJbmRleCIsInBhcnNlUXVlcnkiLCJzcGxpdCIsInJlZHVjZSIsImFjYyIsImNsZWFuIiwiSWdub3JlIiwiaWdub3JlIiwiX2lnbm9yZUFsbCIsInBhdGhzIiwiX2lnbm9yZVJlZ2V4ZXMiLCJjaGVja1VybCIsInNvbWUiLCJyZWdleCIsIkNhY2hlIiwicmVxdWVzdCIsImFjdGlvbiIsImdldFJlcXVlc3QiLCJnZXRBY3Rpb24iLCJkZWxldGUiLCJPYmplY3QiLCJ0dGwiLCJyZXF1ZXN0RXJyb3IiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJET05FIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9udGltZW91dCIsIkVycm9yIiwib25lcnJvciIsIm9wZW4iLCJ0aW1lb3V0Iiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJleGlzdHMiLCJyZWYiLCJuZXdUYWIiLCJldmVudCIsIndoaWNoIiwibWV0YUtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsImJsYW5rIiwiaGFzQXR0cmlidXRlIiwidGFyZ2V0IiwiY29yc0RvbWFpbiIsImhvc3RuYW1lIiwiY29yc1BvcnQiLCJkb3dubG9hZCIsInByZXZlbnRTZWxmIiwicHJldmVudEFsbCIsIkJvb2xlYW4iLCJjbG9zZXN0Iiwic2FtZVVybCIsIlByZXZlbnQiLCJjaGVjayIsInN1aXRlIiwidGVzdHMiLCJydW4iLCJjaGVja0xpbmsiLCJTdG9yZSIsInRyYW5zaXRpb25zIiwidHlwZSIsIl9ydWxlcyIsInNwbGljZSIsInBvc2l0aW9uIiwiZmlsdGVycyIsImFwcGVhciIsImZpbHRlciIsInNlbGYiLCJ0IiwibWF0Y2hpbmciLCJhY3RpdmUiLCJmaW5kIiwidmFsaWQiLCJyZXZlcnNlIiwicnVsZSIsIl9jaGVjayIsImZyb20iLCJ0byIsImFjdGl2ZU1hdGNoIiwidHJhbnNpdGlvblR5cGUiLCJpbmZvcyIsIl9hZGRQcmlvcml0eSIsInNvcnQiLCJhIiwiYiIsInByaW9yaXR5IiwidHJhbnNpdGlvbiIsImRpcmVjdGlvbiIsImlzVmFsaWQiLCJoYXNNYXRjaCIsInN0clJ1bGUiLCJvYmpSdWxlIiwiZm5OYW1lIiwiYmFzZSIsIm5hbWVzIiwiX2NhbGN1bGF0ZVByaW9yaXR5IiwicnVsZU5hbWUiLCJydWxlSW5kZXgiLCJNYXRoIiwicG93IiwiVHJhbnNpdGlvbnMiLCJzdG9yZSIsImlzUnVubmluZyIsIl9ydW5uaW5nIiwiaGFzQXBwZWFyIiwiaGFzU2VsZiIsInNob3VsZFdhaXQiLCJzeW5jIiwiZG9BcHBlYXIiLCJfZG9Bc3luY0hvb2siLCJkb1BhZ2UiLCJfdGhpczIiLCJsZWF2ZSIsImVudGVyIiwibGVhdmVSZXN1bHQiLCJoZWxwZXJzIiwidmFsdWVzIiwiYXBwZW5kQ2hpbGQiLCJjb250YWlucyIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsIlZpZXdzIiwidmlld3MiLCJ2aWV3IiwiYnlOYW1lc3BhY2UiLCJfY3JlYXRlSG9vayIsInJlYWR5IiwiRWxlbWVudCIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwicGFyZW50RWxlbWVudCIsIm5vZGVUeXBlIiwic2NoZW1hUGFnZSIsIkNvcmUiLCJ1c2UiLCJwbHVnaW4iLCJpbnN0YWxsZWRQbHVnaW5zIiwicGx1Z2lucyIsImluc3RhbGwiLCJsb2dMZXZlbCIsInZlcnNpb24iLCJzY2hlbWEiLCJfcmVxdWVzdEN1c3RvbUVycm9yIiwiY2FjaGVJZ25vcmUiLCJwcmVmZXRjaElnbm9yZSIsIl93cmFwcGVyIiwic2V0QXR0cmlidXRlIiwiX3Jlc2V0RGF0YSIsImNhY2hlIiwicHJldmVudEN1c3RvbSIsIl9vbkxpbmtFbnRlciIsIl9vbkxpbmtDbGljayIsIl9vblN0YXRlQ2hhbmdlIiwiX2JpbmQiLCJyZWFkeURhdGEiLCJkZXN0cm95IiwiX3VuYmluZCIsIl9kYXRhIiwiZm9yY2UiLCJhc3NpZ24iLCJnbyIsImdldFBhdGgiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsIm9uUmVxdWVzdEVycm9yIiwicmVzcG9uc2UiLCJwcmVmZXRjaCIsImNhdGNoIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJsaW5rIiwiX2dldExpbmtFbGVtZW50IiwiQ3NzIiwiYmFyYmEiLCJfYXBwZWFyIiwiX2xlYXZlIiwiX2VudGVyIiwiYmVmb3JlIiwiX2dldFByZWZpeCIsImJlZm9yZUFwcGVhciIsIl9iZWZvcmVBcHBlYXIiLCJhZnRlckFwcGVhciIsIl9hZnRlckFwcGVhciIsImJlZm9yZUxlYXZlIiwiX2JlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsIl9hZnRlckxlYXZlIiwiYmVmb3JlRW50ZXIiLCJfYmVmb3JlRW50ZXIiLCJhZnRlckVudGVyIiwiX2FmdGVyRW50ZXIiLCJ1bnNoaWZ0Iiwia2luZCIsIl9oYXNUcmFuc2l0aW9uIiwiX2NoZWNrVHJhbnNpdGlvbiIsImNhbGxiYWNrcyIsInN0ZXAiLCJjbGFzc0xpc3QiLCJnZXRDb21wdXRlZFN0eWxlIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiX3RoaXM0IiwiX3RoaXM1IiwiX3RoaXM2IiwiZGVmYXVsdEluc3RhbmNlU2V0dGluZ3MiLCJiZWdpbiIsImxvb3BCZWdpbiIsImNoYW5nZUJlZ2luIiwiY2hhbmdlIiwiY2hhbmdlQ29tcGxldGUiLCJsb29wQ29tcGxldGUiLCJjb21wbGV0ZSIsImxvb3AiLCJhdXRvcGxheSIsInRpbWVsaW5lT2Zmc2V0IiwiZGVmYXVsdFR3ZWVuU2V0dGluZ3MiLCJkdXJhdGlvbiIsImRlbGF5IiwiZW5kRGVsYXkiLCJlYXNpbmciLCJyb3VuZCIsInZhbGlkVHJhbnNmb3JtcyIsIkNTUyIsInNwcmluZ3MiLCJtaW5NYXgiLCJ2YWwiLCJtaW4iLCJtYXgiLCJzdHJpbmdDb250YWlucyIsInRleHQiLCJhcHBseUFyZ3VtZW50cyIsImlzIiwiYXJyIiwicHRoIiwiaGFzT3duUHJvcGVydHkiLCJzdmciLCJTVkdFbGVtZW50IiwiaW5wIiwiSFRNTElucHV0RWxlbWVudCIsImZuYyIsInVuZCIsImhleCIsInJnYiIsImhzbCIsImNvbCIsInBhcnNlRWFzaW5nUGFyYW1ldGVycyIsInN0cmluZyIsInBhcnNlRmxvYXQiLCJzcHJpbmciLCJwYXJhbXMiLCJtYXNzIiwic3RpZmZuZXNzIiwiZGFtcGluZyIsInZlbG9jaXR5IiwidzAiLCJzcXJ0IiwiemV0YSIsIndkIiwic29sdmVyIiwicHJvZ3Jlc3MiLCJleHAiLCJjb3MiLCJzaW4iLCJnZXREdXJhdGlvbiIsImNhY2hlZCIsImZyYW1lIiwiZWxhcHNlZCIsInJlc3QiLCJlbGFzdGljIiwiYW1wbGl0dWRlIiwicGVyaW9kIiwiUEkiLCJhc2luIiwic3RlcHMiLCJiZXppZXIiLCJrU3BsaW5lVGFibGVTaXplIiwia1NhbXBsZVN0ZXBTaXplIiwiQSIsImFBMSIsImFBMiIsIkIiLCJDIiwiY2FsY0JlemllciIsImFUIiwiZ2V0U2xvcGUiLCJiaW5hcnlTdWJkaXZpZGUiLCJhWCIsImFBIiwiYUIiLCJtWDEiLCJtWDIiLCJjdXJyZW50WCIsImN1cnJlbnRUIiwiYWJzIiwibmV3dG9uUmFwaHNvbkl0ZXJhdGUiLCJhR3Vlc3NUIiwiY3VycmVudFNsb3BlIiwibVkxIiwibVkyIiwic2FtcGxlVmFsdWVzIiwiRmxvYXQzMkFycmF5IiwiZ2V0VEZvclgiLCJpbnRlcnZhbFN0YXJ0IiwiY3VycmVudFNhbXBsZSIsImxhc3RTYW1wbGUiLCJkaXN0IiwiZ3Vlc3NGb3JUIiwiaW5pdGlhbFNsb3BlIiwieCIsInBlbm5lciIsImN1cnZlcyIsIkluIiwiT3V0IiwiSW5PdXQiLCJlYXNlcyIsImxpbmVhciIsImNvb3JkcyIsImVhc2UiLCJwYXJzZUVhc2luZ3MiLCJzZWxlY3RTdHJpbmciLCJub2RlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaWx0ZXJBcnJheSIsImxlbiIsInRoaXNBcmciLCJmbGF0dGVuQXJyYXkiLCJ0b0FycmF5IiwiTm9kZUxpc3QiLCJIVE1MQ29sbGVjdGlvbiIsImFycmF5Q29udGFpbnMiLCJjbG9uZU9iamVjdCIsImNsb25lIiwicmVwbGFjZU9iamVjdFByb3BzIiwibzEiLCJvMiIsIm1lcmdlT2JqZWN0cyIsInJnYlRvUmdiYSIsInJnYlZhbHVlIiwiaGV4VG9SZ2JhIiwiaGV4VmFsdWUiLCJyZ3giLCJyIiwiZyIsImhzbFRvUmdiYSIsImhzbFZhbHVlIiwiaCIsImwiLCJodWUycmdiIiwicSIsImNvbG9yVG9SZ2IiLCJnZXRVbml0IiwiZ2V0VHJhbnNmb3JtVW5pdCIsInByb3BOYW1lIiwiZ2V0RnVuY3Rpb25WYWx1ZSIsImFuaW1hdGFibGUiLCJpZCIsInRvdGFsIiwicHJvcCIsImNvbnZlcnRQeFRvVW5pdCIsInVuaXQiLCJ2YWx1ZVVuaXQiLCJiYXNlbGluZSIsInRlbXBFbCIsInRhZ05hbWUiLCJwYXJlbnRFbCIsInN0eWxlIiwid2lkdGgiLCJmYWN0b3IiLCJvZmZzZXRXaWR0aCIsImNvbnZlcnRlZFVuaXQiLCJnZXRDU1NWYWx1ZSIsInVwcGVyY2FzZVByb3BOYW1lIiwidG9Mb3dlckNhc2UiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZ2V0QW5pbWF0aW9uVHlwZSIsImdldEVsZW1lbnRUcmFuc2Zvcm1zIiwidHJhbnNmb3JtIiwicmVnIiwidHJhbnNmb3JtcyIsImdldFRyYW5zZm9ybVZhbHVlIiwiZGVmYXVsdFZhbCIsImxpc3QiLCJnZXRPcmlnaW5hbFRhcmdldFZhbHVlIiwiZ2V0UmVsYXRpdmVWYWx1ZSIsIm9wZXJhdG9yIiwidSIsInkiLCJ2YWxpZGF0ZVZhbHVlIiwib3JpZ2luYWxVbml0IiwidW5pdExlc3MiLCJnZXREaXN0YW5jZSIsInAxIiwicDIiLCJnZXRDaXJjbGVMZW5ndGgiLCJnZXRSZWN0TGVuZ3RoIiwiZ2V0TGluZUxlbmd0aCIsImdldFBvbHlsaW5lTGVuZ3RoIiwicG9pbnRzIiwidG90YWxMZW5ndGgiLCJwcmV2aW91c1BvcyIsIm51bWJlck9mSXRlbXMiLCJjdXJyZW50UG9zIiwiZ2V0SXRlbSIsImdldFBvbHlnb25MZW5ndGgiLCJnZXRUb3RhbExlbmd0aCIsInNldERhc2hvZmZzZXQiLCJwYXRoTGVuZ3RoIiwiZ2V0UGFyZW50U3ZnRWwiLCJnZXRQYXJlbnRTdmciLCJwYXRoRWwiLCJzdmdEYXRhIiwicGFyZW50U3ZnRWwiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwidmlld0JveEF0dHIiLCJoZWlnaHQiLCJ2aWV3Qm94IiwidyIsInBlcmNlbnQiLCJwcm9wZXJ0eSIsImdldFBhdGhQcm9ncmVzcyIsInBvaW50IiwiZ2V0UG9pbnRBdExlbmd0aCIsInAwIiwiYXRhbjIiLCJkZWNvbXBvc2VWYWx1ZSIsIm9yaWdpbmFsIiwibnVtYmVycyIsIk51bWJlciIsInN0cmluZ3MiLCJwYXJzZVRhcmdldHMiLCJ0YXJnZXRzIiwidGFyZ2V0c0FycmF5IiwiaXRlbSIsInBvcyIsImdldEFuaW1hdGFibGVzIiwicGFyc2VkIiwibm9ybWFsaXplUHJvcGVydHlUd2VlbnMiLCJ0d2VlblNldHRpbmdzIiwic2V0dGluZ3MiLCJpc0Zyb21UbyIsInByb3BBcnJheSIsImZsYXR0ZW5LZXlmcmFtZXMiLCJrZXlmcmFtZXMiLCJwcm9wZXJ0eU5hbWVzIiwicHJvcGVydGllcyIsIm5ld0tleSIsImdldFByb3BlcnRpZXMiLCJ0d2VlbnMiLCJub3JtYWxpemVUd2VlblZhbHVlcyIsInR3ZWVuIiwibm9ybWFsaXplVHdlZW5zIiwicHJldmlvdXNUd2VlbiIsInR3ZWVuVmFsdWUiLCJ0b1VuaXQiLCJvcmlnaW5hbFZhbHVlIiwicHJldmlvdXNWYWx1ZSIsImZyb21Vbml0IiwiaXNQYXRoIiwiaXNDb2xvciIsInNldFByb2dyZXNzVmFsdWUiLCJjc3MiLCJhdHRyaWJ1dGUiLCJvYmplY3QiLCJtYW51YWwiLCJsYXN0Iiwic2V0VGFyZ2V0c1ZhbHVlIiwiYW5pbWF0YWJsZXMiLCJhbmltVHlwZSIsImNyZWF0ZUFuaW1hdGlvbiIsImxhc3RUd2VlbiIsImdldEFuaW1hdGlvbnMiLCJnZXRJbnN0YW5jZVRpbWluZ3MiLCJhbmltYXRpb25zIiwiYW5pbUxlbmd0aCIsImdldFRsT2Zmc2V0IiwiYW5pbSIsInRpbWluZ3MiLCJpbnN0YW5jZUlEIiwiY3JlYXRlTmV3SW5zdGFuY2UiLCJpbnN0YW5jZVNldHRpbmdzIiwiY2hpbGRyZW4iLCJhY3RpdmVJbnN0YW5jZXMiLCJwYXVzZWRJbnN0YW5jZXMiLCJyYWYiLCJlbmdpbmUiLCJwbGF5IiwiYWN0aXZlSW5zdGFuY2VzTGVuZ3RoIiwiYWN0aXZlSW5zdGFuY2UiLCJwYXVzZWQiLCJ0aWNrIiwiaW5zdGFuY2VJbmRleCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSIsImhpZGRlbiIsImlucyIsInBhdXNlIiwiYW5pbWUiLCJzdGFydFRpbWUiLCJsYXN0VGltZSIsIm5vdyIsImNoaWxkcmVuTGVuZ3RoIiwibWFrZVByb21pc2UiLCJpbnN0YW5jZSIsImZpbmlzaGVkIiwidG9nZ2xlSW5zdGFuY2VEaXJlY3Rpb24iLCJyZXZlcnNlZCIsImNoaWxkIiwiYWRqdXN0VGltZSIsInRpbWUiLCJyZXNldFRpbWUiLCJjdXJyZW50VGltZSIsInNwZWVkIiwic2Vla0NpbGQiLCJzZWVrIiwic3luY0luc3RhbmNlQ2hpbGRyZW4iLCJyZXZlcnNlUGxheWJhY2siLCJpJDEiLCJzZXRBbmltYXRpb25zUHJvZ3Jlc3MiLCJpbnNUaW1lIiwiYW5pbWF0aW9uc0xlbmd0aCIsInR3ZWVuTGVuZ3RoIiwiZWFzZWQiLCJpc05hTiIsInRvTnVtYmVyc0xlbmd0aCIsIm4iLCJ0b051bWJlciIsImZyb21OdW1iZXIiLCJzdHJpbmdzTGVuZ3RoIiwibiQxIiwiY3VycmVudFZhbHVlIiwic2V0Q2FsbGJhY2siLCJwYXNzVGhyb3VnaCIsImNvdW50SXRlcmF0aW9uIiwicmVtYWluaW5nIiwic2V0SW5zdGFuY2VQcm9ncmVzcyIsImVuZ2luZVRpbWUiLCJpbnNEdXJhdGlvbiIsImluc0RlbGF5IiwiaW5zRW5kRGVsYXkiLCJiZWdhbiIsImNoYW5nZUJlZ2FuIiwiY2hhbmdlQ29tcGxldGVkIiwiY29tcGxldGVkIiwicmVzZXQiLCJyZXN0YXJ0IiwicmVtb3ZlVGFyZ2V0c0Zyb21BbmltYXRpb25zIiwicmVtb3ZlVGFyZ2V0cyIsImNoaWxkQW5pbWF0aW9ucyIsInN0YWdnZXIiLCJncmlkIiwiYXhpcyIsImZyb21JbmRleCIsImZyb21GaXJzdCIsImZyb21DZW50ZXIiLCJmcm9tTGFzdCIsImlzUmFuZ2UiLCJ2YWwxIiwidmFsMiIsIm1heFZhbHVlIiwiZnJvbVgiLCJmcm9tWSIsImZsb29yIiwidG9YIiwidG9ZIiwiZGlzdGFuY2VYIiwiZGlzdGFuY2VZIiwic3BhY2luZyIsInRpbWVsaW5lIiwidGwiLCJpbnN0YW5jZVBhcmFtcyIsInRsSW5kZXgiLCJpbnNQYXJhbXMiLCJ0bER1cmF0aW9uIiwicnVubmluZyIsImNvbnZlcnRQeCIsInJhbmRvbSIsImV4cG9ydHMiLCJyZXF1aXJlIiwidXRpbHMiLCJzZXR0bGUiLCJidWlsZFVSTCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwieGhyQWRhcHRlciIsImNvbmZpZyIsImRpc3BhdGNoWGhyUmVxdWVzdCIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJoZWFkZXJzIiwiaXNGb3JtRGF0YSIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJtZXRob2QiLCJ0b1VwcGVyQ2FzZSIsInBhcmFtc1NlcmlhbGl6ZXIiLCJoYW5kbGVMb2FkIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZURhdGEiLCJyZXNwb25zZVR5cGUiLCJvbmFib3J0IiwiaGFuZGxlQWJvcnQiLCJoYW5kbGVFcnJvciIsImhhbmRsZVRpbWVvdXQiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsImNvb2tpZXMiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ4c3JmQ29va2llTmFtZSIsInJlYWQiLCJ4c3JmSGVhZGVyTmFtZSIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsIm9uQ2FuY2VsZWQiLCJhYm9ydCIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJkZWZhdWx0cyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImNvbnRleHQiLCJleHRlbmQiLCJheGlvcyIsImNyZWF0ZSIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsInByb21pc2VzIiwic3ByZWFkIiwibWVzc2FnZSIsIl9fQ0FOQ0VMX18iLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwicHJvbWlzZUV4ZWN1dG9yIiwicmVhc29uIiwidGhyb3dJZlJlcXVlc3RlZCIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsInVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInB1c2hSZXNwb25zZUludGVyY2VwdG9ycyIsInNoaWZ0IiwiZ2V0VXJpIiwiZm9yRWFjaE1ldGhvZE5vRGF0YSIsIm1lcmdlIiwiZm9yRWFjaE1ldGhvZFdpdGhEYXRhIiwiaGFuZGxlcnMiLCJlamVjdCIsImZvckVhY2hIYW5kbGVyIiwiZW5oYW5jZUVycm9yIiwiY29kZSIsInRyYW5zZm9ybURhdGEiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwiYmFzZVVSTCIsInRyYW5zZm9ybVJlcXVlc3QiLCJjb21tb24iLCJjbGVhbkhlYWRlckNvbmZpZyIsImFkYXB0ZXIiLCJvbkFkYXB0ZXJSZXNvbHV0aW9uIiwidHJhbnNmb3JtUmVzcG9uc2UiLCJvbkFkYXB0ZXJSZWplY3Rpb24iLCJpc0F4aW9zRXJyb3IiLCJ0b0pTT04iLCJkZXNjcmlwdGlvbiIsIm51bWJlciIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsInN0YWNrIiwiY29uZmlnMSIsImNvbmZpZzIiLCJ2YWx1ZUZyb21Db25maWcyIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsImlzT2JqZWN0IiwiZGVlcE1lcmdlIiwiZGVmYXVsdFRvQ29uZmlnMiIsInZhbGlkYXRlU3RhdHVzIiwiZm5zIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiaXNVbmRlZmluZWQiLCJnZXREZWZhdWx0QWRhcHRlciIsInByb2Nlc3MiLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJpc1N0cmVhbSIsImlzRmlsZSIsImlzQmxvYiIsImlzQXJyYXlCdWZmZXJWaWV3IiwiYnVmZmVyIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJKU09OIiwic3RyaW5naWZ5IiwibWF4Q29udGVudExlbmd0aCIsIndyYXAiLCJzZXJpYWxpemVkUGFyYW1zIiwic2VyaWFsaXplIiwicGFyc2VWYWx1ZSIsImlzRGF0ZSIsInRvSVNPU3RyaW5nIiwiaGFzaG1hcmtJbmRleCIsInJlbGF0aXZlVVJMIiwic3RhbmRhcmRCcm93c2VyRW52Iiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwiaXNOdW1iZXIiLCJEYXRlIiwidG9HTVRTdHJpbmciLCJpc1N0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsIm5vblN0YW5kYXJkQnJvd3NlckVudiIsIm1zaWUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsIm9yaWdpblVSTCIsInJlc29sdmVVUkwiLCJob3N0Iiwic2VhcmNoIiwicGF0aG5hbWUiLCJjaGFyQXQiLCJyZXF1ZXN0VVJMIiwibm9ybWFsaXplZE5hbWUiLCJwcm9jZXNzSGVhZGVyIiwiaWdub3JlRHVwbGljYXRlT2YiLCJwYXJzZXIiLCJsaW5lIiwidHJpbSIsIkZvcm1EYXRhIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJpc0Z1bmN0aW9uIiwicGlwZSIsIlVSTFNlYXJjaFBhcmFtcyIsInByb2R1Y3QiLCJhc3NpZ25WYWx1ZSIsIkRvbTciLCIkIiwic2VsZWN0b3IiLCJlbHMiLCJ0ZW1wUGFyZW50IiwidG9DcmVhdGUiLCJjaGlsZE5vZGVzIiwiZ2V0RWxlbWVudEJ5SWQiLCJDbGFzcyIsInVuaXF1ZSIsInVuaXF1ZUFycmF5IiwidG9DYW1lbENhc2UiLCJncm91cDEiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0Iiwid2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjbGVhclRpbWVvdXQiLCJhZGRDbGFzcyIsImNsYXNzTmFtZSIsImNsYXNzZXMiLCJyZW1vdmVDbGFzcyIsImhhc0NsYXNzIiwidG9nZ2xlQ2xhc3MiLCJ0b2dnbGUiLCJhdHRyIiwiYXR0cnMiLCJhdHRyTmFtZSIsInJlbW92ZUF0dHIiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwcm9wcyIsImRvbTdFbGVtZW50RGF0YVN0b3JhZ2UiLCJkYXRhS2V5IiwicmVtb3ZlRGF0YSIsImRhdGFzZXQiLCJhdHRyaWJ1dGVzIiwibXVsdGlwbGUiLCJub2RlTmFtZSIsInNlbGVjdGVkT3B0aW9ucyIsInNlbGVjdGVkIiwiZWxTdHlsZSIsIndlYmtpdFRyYW5zZm9ybSIsIndlYmtpdFRyYW5zaXRpb25EdXJhdGlvbiIsIm9uIiwiZXZlbnRUeXBlIiwidGFyZ2V0U2VsZWN0b3IiLCJsaXN0ZW5lciIsImhhbmRsZUxpdmVFdmVudCIsImV2ZW50RGF0YSIsImRvbTdFdmVudERhdGEiLCJwYXJlbnRzIiwiaGFuZGxlRXZlbnQiLCJldmVudHMiLCJkb203TGlzdGVuZXJzIiwicHJveHlMaXN0ZW5lciIsImRvbTdMaXZlTGlzdGVuZXJzIiwiaGFuZGxlciIsImRvbTdwcm94eSIsIm9uY2UiLCJldmVudE5hbWUiLCJvbmNlSGFuZGxlciIsImV2ZW50QXJncyIsImV2dCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImRhdGFJbmRleCIsImRpc3BhdGNoRXZlbnQiLCJ0cmFuc2l0aW9uRW5kIiwiZmlyZUNhbGxCYWNrIiwiYW5pbWF0aW9uRW5kIiwiaW5uZXJXaWR0aCIsIm91dGVyV2lkdGgiLCJpbmNsdWRlTWFyZ2lucyIsInN0eWxlcyIsImlubmVySGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJib3giLCJjbGllbnRUb3AiLCJjbGllbnRMZWZ0Iiwic2Nyb2xsVG9wIiwic2Nyb2xsWSIsInNjcm9sbExlZnQiLCJzY3JvbGxYIiwidG9wIiwibGVmdCIsImhpZGUiLCJkaXNwbGF5Iiwic2hvdyIsImVhY2giLCJtYXRjaGVkSXRlbXMiLCJtb2RpZmllZEl0ZW1zIiwidGV4dENvbnRlbnQiLCJjb21wYXJlV2l0aCIsInByZXZpb3VzU2libGluZyIsImVxIiwicmV0dXJuSW5kZXgiLCJhcHBlbmQiLCJuZXdDaGlsZCIsInRlbXBEaXYiLCJmaXJzdENoaWxkIiwiYXBwZW5kVG8iLCJwYXJlbnQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwicHJlcGVuZFRvIiwiY2xvbmVOb2RlIiwiaW5zZXJ0QWZ0ZXIiLCJhZnRlciIsIm5leHRTaWJsaW5nIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibmV4dEFsbCIsIm5leHRFbHMiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwicHJldkFsbCIsInByZXZFbHMiLCJzaWJsaW5ncyIsImZvdW5kRWxlbWVudHMiLCJmb3VuZCIsImRldGFjaCIsInRvQWRkIiwiZW1wdHkiLCJzY3JvbGxUbyIsImFuaW1hdGUiLCJjdXJyZW50VG9wIiwiY3VycmVudExlZnQiLCJtYXhUb3AiLCJtYXhMZWZ0IiwibmV3VG9wIiwibmV3TGVmdCIsImFuaW1hdGVUb3AiLCJhbmltYXRlTGVmdCIsInNjcm9sbEhlaWdodCIsInNjcm9sbFdpZHRoIiwicmVuZGVyIiwiZ2V0VGltZSIsImVhc2VQcm9ncmVzcyIsImluaXRpYWxQcm9wcyIsImluaXRpYWxQYXJhbXMiLCJlbGVtZW50cyIsImFuaW1hdGluZyIsInF1ZSIsImVhc2luZ1Byb2dyZXNzIiwic3RvcCIsImZyYW1lSWQiLCJlbGVtZW50IiwiZG9tN0FuaW1hdGVJbnN0YW5jZSIsImluaXRpYWxGdWxsVmFsdWUiLCJpbml0aWFsVmFsdWUiLCJmaW5hbFZhbHVlIiwiZmluYWxGdWxsVmFsdWUiLCJlbGVtZW50c0RvbmUiLCJwcm9wc0RvbmUiLCJhbmltYXRlSW5zdGFuY2UiLCJub1RyaWdnZXIiLCJldmVudFNob3J0Y3V0IiwiY2xpY2siLCJibHVyIiwiZm9jdXMiLCJmb2N1c2luIiwiZm9jdXNvdXQiLCJrZXl1cCIsImtleWRvd24iLCJrZXlwcmVzcyIsInN1Ym1pdCIsIm1vdXNlZG93biIsIm1vdXNlbW92ZSIsIm1vdXNldXAiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsIm1vdXNlb3V0IiwibW91c2VvdmVyIiwidG91Y2hzdGFydCIsInRvdWNoZW5kIiwidG91Y2htb3ZlIiwicmVzaXplIiwic2Nyb2xsIiwicm9vdCIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwibnVsbFRhZyIsInVuZGVmaW5lZFRhZyIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJiYXNlR2V0VGFnIiwiZnJlZUdsb2JhbCIsImdsb2JhbCIsIm9iamVjdFByb3RvIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJpc093biIsInRhZyIsInVubWFza2VkIiwiZnJlZVNlbGYiLCJGdW5jdGlvbiIsIkZVTkNfRVJST1JfVEVYVCIsIm5hdGl2ZU1heCIsIm5hdGl2ZU1pbiIsImRlYm91bmNlIiwid2FpdCIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibGVhZGluZyIsIm1heGluZyIsInRyYWlsaW5nIiwiaW52b2tlRnVuYyIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwicmVtYWluaW5nV2FpdCIsInRpbWVTaW5jZUxhc3RDYWxsIiwidGltZVNpbmNlTGFzdEludm9rZSIsInRpbWVXYWl0aW5nIiwic2hvdWxkSW52b2tlIiwidHJhaWxpbmdFZGdlIiwiZmx1c2giLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiaXNPYmplY3RMaWtlIiwic3ltYm9sVGFnIiwiaXNTeW1ib2wiLCJOQU4iLCJyZVRyaW0iLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNPY3RhbCIsImZyZWVQYXJzZUludCIsIm90aGVyIiwidmFsdWVPZiIsImlzQmluYXJ5IiwiT0ZJIiwicHJvcFJlZ2V4IiwidGVzdEltZyIsIkltYWdlIiwic3VwcG9ydHNPYmplY3RGaXQiLCJzdXBwb3J0c09iamVjdFBvc2l0aW9uIiwic3VwcG9ydHNPRkkiLCJzdXBwb3J0c0N1cnJlbnRTcmMiLCJjdXJyZW50U3JjIiwibmF0aXZlR2V0QXR0cmlidXRlIiwibmF0aXZlU2V0QXR0cmlidXRlIiwiYXV0b01vZGVFbmFibGVkIiwiY3JlYXRlUGxhY2Vob2xkZXIiLCJwb2x5ZmlsbEN1cnJlbnRTcmMiLCJzcmNzZXQiLCJwaWN0dXJlZmlsbCIsInBmIiwiXyIsImV2YWxlZCIsImZpbGxJbWciLCJyZXNlbGVjdCIsImN1clNyYyIsInN1cHBvcnRlZCIsInNyYyIsImdldFN0eWxlIiwiZm9udEZhbWlseSIsInNldFBsYWNlaG9sZGVyIiwiaW1nIiwicGxhY2Vob2xkZXIiLCJvbkltYWdlUmVhZHkiLCJuYXR1cmFsV2lkdGgiLCJmaXhPbmUiLCJvZmkiLCJza2lwVGVzdCIsIm5hdHVyYWxIZWlnaHQiLCJrZWVwU3JjVXNhYmxlIiwiYmFja2dyb3VuZEltYWdlIiwiYmFja2dyb3VuZFBvc2l0aW9uIiwiYmFja2dyb3VuZFJlcGVhdCIsImJhY2tncm91bmRPcmlnaW4iLCJiYWNrZ3JvdW5kU2l6ZSIsImRlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydHkiLCJzcyIsImhpamFja0F0dHJpYnV0ZXMiLCJnZXRPZmlJbWFnZU1heWJlIiwiSFRNTEltYWdlRWxlbWVudCIsImZpeCIsImltZ3MiLCJvcHRzIiwic3RhcnRBdXRvTW9kZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwid2F0Y2hNUSIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJxdWV1ZSIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJJdGVtIiwiYXJyYXkiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb25zIiwibm9vcCIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiZmFjdG9yeSIsImRlZmluZSIsIlNjcm9sbE1hZ2ljIiwiX3V0aWwiLCJQSU5fU1BBQ0VSX0FUVFJJQlVURSIsIkNvbnRyb2xsZXIiLCJOQU1FU1BBQ0UiLCJTQ1JPTExfRElSRUNUSU9OX0ZPUldBUkQiLCJTQ1JPTExfRElSRUNUSU9OX1JFVkVSU0UiLCJTQ1JPTExfRElSRUNUSU9OX1BBVVNFRCIsIkRFRkFVTFRfT1BUSU9OUyIsIkNPTlRST0xMRVJfT1BUSU9OUyIsIl9vcHRpb25zIiwiX3NjZW5lT2JqZWN0cyIsIl91cGRhdGVTY2VuZXNPbk5leHRDeWNsZSIsIl9zY3JvbGxQb3MiLCJfc2Nyb2xsRGlyZWN0aW9uIiwiX2lzRG9jdW1lbnQiLCJfdmlld1BvcnRTaXplIiwiX2VuYWJsZWQiLCJfdXBkYXRlVGltZW91dCIsIl9yZWZyZXNoVGltZW91dCIsImNvbnN0cnVjdCIsImdldFZpZXdwb3J0U2l6ZSIsIm9uQ2hhbmdlIiwicmkiLCJyZWZyZXNoSW50ZXJ2YWwiLCJzY2hlZHVsZVJlZnJlc2giLCJyZWZyZXNoIiwiZ2V0U2Nyb2xsUG9zIiwidmVydGljYWwiLCJzZXRTY3JvbGxQb3MiLCJfc2V0U2Nyb2xsUG9zIiwidXBkYXRlU2NlbmVzIiwic2NlbmVzVG9VcGRhdGUiLCJvbGRTY3JvbGxQb3MiLCJzY3JvbGxQb3MiLCJkZWx0YVNjcm9sbCIsInNjZW5lIiwibG9nbGV2ZWwiLCJkZWJvdW5jZVVwZGF0ZSIsInJBRiIsInJlc2l6ZUV2ZW50IiwiRXZlbnQiLCJvdXRwdXQiLCJzb3J0U2NlbmVzIiwiU2NlbmVzQXJyYXkiLCJzY2VuZXMiLCJzY3JvbGxPZmZzZXQiLCJhZGRTY2VuZSIsIm5ld1NjZW5lIiwiU2NlbmUiLCJjb250cm9sbGVyIiwiYWRkVG8iLCJnbG9iYWxTY2VuZU9wdGlvbnMiLCJyZW1vdmVTY2VuZSIsInVwZGF0ZVNjZW5lIiwiaW1tZWRpYXRlbHkiLCJzY3JvbGxUYXJnZXQiLCJhZGRpdGlvbmFsUGFyYW1ldGVyIiwiZWxlbSIsInBhcmFtIiwiY29udGFpbmVyT2Zmc2V0IiwiZWxlbWVudE9mZnNldCIsInNjcm9sbFBvc01ldGhvZCIsImFib3V0Iiwic2l6ZSIsInNjcm9sbERpcmVjdGlvbiIsImlzRG9jdW1lbnQiLCJuZXdMb2dsZXZlbCIsImVuYWJsZWQiLCJuZXdTdGF0ZSIsInJlc2V0U2NlbmVzIiwiY0FGIiwiYWRkT3B0aW9uIiwiZGVmYXVsdFZhbHVlIiwiZXh0ZW5zaW9uIiwib2xkQ2xhc3MiLCIkc3VwZXIiLCJTQ0VORV9TVEFURV9CRUZPUkUiLCJTQ0VORV9TVEFURV9EVVJJTkciLCJTQ0VORV9TVEFURV9BRlRFUiIsIlNDRU5FX09QVElPTlMiLCJfcHJvZ3Jlc3MiLCJfc2Nyb2xsT2Zmc2V0IiwiX3RyaWdnZXJQb3MiLCJfZHVyYXRpb25VcGRhdGVNZXRob2QiLCJfY29udHJvbGxlciIsIm9wdGlvbk5hbWUiLCJhZGRTY2VuZU9wdGlvbiIsInZhbGlkYXRlT3B0aW9uIiwiX2xpc3RlbmVycyIsImZ1bGxuYW1lIiwibmFtZXBhcnRzIiwiZXZlbnRuYW1lIiwicmVtb3ZlTGlzdCIsInZhcnMiLCJ3aGF0IiwidXBkYXRlVHJpZ2dlckVsZW1lbnRQb3NpdGlvbiIsInVwZGF0ZVNjcm9sbE9mZnNldCIsInVwZGF0ZUR1cmF0aW9uIiwib25Db250YWluZXJSZXNpemUiLCJ0bXBQYXJlbnQiLCJuZXdQcm9ncmVzcyIsInN0YXJ0UG9zIiwiZW5kUG9zIiwiX3BpbiIsInVwZGF0ZVBpblN0YXRlIiwiZG9VcGRhdGUiLCJvbGRTdGF0ZSIsInJldmVyc2VPckZvcndhcmQiLCJldmVudFZhcnMiLCJzdGF0ZUNoYW5nZWQiLCJ0cmlnZ2VyRWxlbWVudCIsInRyaWdnZXJIb29rIiwic3VwcHJlc3NFdmVudHMiLCJ2YXJuYW1lIiwiY2hhbmdlT3B0aW9uIiwibmV3dmFsIiwiZWxlbWVudFBvcyIsInRlbGVtIiwiY29udHJvbGxlckluZm8iLCJjaGFuZ2VkIiwiX3ZhbGlkYXRlIiwidmFsaWRhdGUiLCJwZXJjIiwibG9nTVNHIiwib2xkdmFsIiwibmV3VmFsIiwic2hpZnRzIiwidHJpZ2dlclBvc2l0aW9uIiwiX3Bpbk9wdGlvbnMiLCJkdXJhdGlvbkNoYW5nZWQiLCJ1cGRhdGVQaW5EaW1lbnNpb25zIiwicmVtb3ZlUGluIiwiZm9yY2VVbnBpbiIsImNvbnRhaW5lckluZm8iLCJwaW5UYXJnZXQiLCJzcGFjZXIiLCJmaXhlZFBvcyIsInNjcm9sbERpc3RhbmNlIiwibmV3Q1NTIiwiaW5GbG93IiwicHVzaEZvbGxvd2VycyIsImR1cmluZyIsIm1hcmdpbkNvbGxhcHNlIiwiaXNNYXJnaW5Db2xsYXBzZVR5cGUiLCJyZWxTaXplIiwiYXV0b0Z1bGxXaWR0aCIsInVwZGF0ZVBpbkluQ29udGFpbmVyIiwidXBkYXRlUmVsYXRpdmVQaW5TcGFjZXIiLCJvbk1vdXNld2hlZWxPdmVyUGluIiwid2hlZWxEZWx0YSIsInNldFBpbiIsImRlZmF1bHRTZXR0aW5ncyIsInNwYWNlckNsYXNzIiwicHVzaEZvbGxvd2Vyc0FjdGl2ZWx5U2V0IiwicGFyZW50RGlzcGxheSIsImJvdW5kc1BhcmFtcyIsInBpbkNTUyIsInNpemVDU1MiLCJzcGFjZXJDU1MiLCJib3hTaXppbmciLCJtb3pCb3hTaXppbmciLCJ3ZWJraXRCb3hTaXppbmciLCJfX19vcmlnU3R5bGUiLCJwaW5JbmxpbmVDU1MiLCJjb3B5U3R5bGVzIiwibWFyZ2luIiwiYm90dG9tIiwicmlnaHQiLCJtYXJnaW5zIiwiX2Nzc0NsYXNzZXMiLCJfY3NzQ2xhc3NFbGVtcyIsInJlbW92ZUNsYXNzVG9nZ2xlIiwic2V0Q2xhc3NUb2dnbGUiLCJlbGVtcyIsInRyYW5zbGF0ZSIsInZhbGlkYXRpb25DYWxsYmFjayIsImN1cnJlbnRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJ0aW1lc3RhbXAiLCJVIiwiZmxvYXR2YWwiLCJfZ2V0Q29tcHV0ZWRTdHlsZSIsImN1cnJlbnRTdHlsZSIsIl9kaW1lbnNpb24iLCJvdXRlciIsImluY2x1ZGVNYXJnaW4iLCJfdHlwZSIsIkRvbUVsZW1lbnQiLCJkaW1lbnNpb24iLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJfY2FtZWxDYXNlIiwidmVuZG9ycyIsIl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJfY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjdXJyVGltZSIsInRpbWVUb0NhbGwiLCJsb2dsZXZlbHMiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiSFRNTEVsZW1lbnQiLCJfZ2V0IiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsInJlbGF0aXZlVG9WaWV3cG9ydCIsImNsYXNzbmFtZSIsIm9wdGlvbiIsImFkZEluZGljYXRvcnMiLCJyZW1vdmVJbmRpY2F0b3JzIiwic2V0VHdlZW4iLCJyZW1vdmVUd2VlbiIsInNldFZlbG9jaXR5IiwicmVtb3ZlVmVsb2NpdHkiLCJzZXRJbW1lZGlhdGUiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsInJlZ2lzdGVySW1tZWRpYXRlIiwidGFzayIsImNsZWFySW1tZWRpYXRlIiwiaGFuZGxlIiwicnVuSWZQcmVzZW50IiwiaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24iLCJjYW5Vc2VQb3N0TWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbiIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJhdHRhY2hFdmVudCIsImluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uIiwiY2hhbm5lbCIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJwb3J0MiIsImluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24iLCJzY3JpcHQiLCJpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uIiwiYXR0YWNoVG8iLCJnZXRQcm90b3R5cGVPZiIsImFjdGl2ZUVsZW1lbnQiLCJ3aW4iLCJzY3JlZW4iLCJNZXRob2RzIiwidHJhbnNpdGlvbiQxIiwidHJhbnNpdGlvbkVuZCQxIiwibWV0aG9kTmFtZSIsIlV0aWxzIiwiZGVsZXRlUHJvcHMiLCJnZXRUcmFuc2xhdGUiLCJtYXRyaXgiLCJjdXJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1NYXRyaXgiLCJjdXJTdHlsZSIsIldlYktpdENTU01hdHJpeCIsIk1velRyYW5zZm9ybSIsIk9UcmFuc2Zvcm0iLCJNc1RyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwibTQxIiwibTQyIiwicGFyc2VVcmxRdWVyeSIsInVybFRvUGFyc2UiLCJwYXJhbXNQYXJ0IiwibmV4dFNvdXJjZSIsImtleXNBcnJheSIsIm5leHRJbmRleCIsIm5leHRLZXkiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsIlN1cHBvcnQiLCJ0ZXN0RGl2IiwidG91Y2giLCJNb2Rlcm5penIiLCJjaGVja1RvdWNoIiwibWF4VG91Y2hQb2ludHMiLCJEb2N1bWVudFRvdWNoIiwicG9pbnRlckV2ZW50cyIsInBvaW50ZXJFbmFibGVkIiwiUG9pbnRlckV2ZW50IiwicHJlZml4ZWRQb2ludGVyRXZlbnRzIiwibXNQb2ludGVyRW5hYmxlZCIsImNoZWNrVHJhbnNpdGlvbiIsInRyYW5zZm9ybXMzZCIsImNzc3RyYW5zZm9ybXMzZCIsImNoZWNrVHJhbnNmb3JtczNkIiwiZmxleGJveCIsImNoZWNrRmxleGJveCIsImNoZWNrT2JzZXJ2ZXIiLCJwYXNzaXZlTGlzdGVuZXIiLCJjaGVja1Bhc3NpdmVMaXN0ZW5lciIsInN1cHBvcnRzUGFzc2l2ZSIsImdlc3R1cmVzIiwiY2hlY2tHZXN0dXJlcyIsIkJyb3dzZXIiLCJpc1NhZmFyaSIsInVhIiwiaXNJRSIsImlzRWRnZSIsImlzVWlXZWJWaWV3IiwiU3dpcGVyQ2xhc3MiLCJldmVudHNMaXN0ZW5lcnMiLCJmN3Byb3h5IiwiZXZlbnRIYW5kbGVyIiwiZXZlbnRzQXJyYXkiLCJtb2R1bGVzIiwibW9kdWxlTmFtZSIsIm1vZHVsZXNQYXJhbXMiLCJtb2R1bGVQYXJhbXMiLCJtb2R1bGVQcm9wTmFtZSIsIm1vZHVsZVByb3AiLCJtb2R1bGVFdmVudE5hbWUiLCJwcm90byIsImluc3RhbGxNb2R1bGUiLCJjb21wb25lbnRzIiwidXBkYXRlU2l6ZSIsInN3aXBlciIsIiRlbCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiaXNIb3Jpem9udGFsIiwiaXNWZXJ0aWNhbCIsInVwZGF0ZVNsaWRlcyIsIiR3cmFwcGVyRWwiLCJzd2lwZXJTaXplIiwicnRsIiwicnRsVHJhbnNsYXRlIiwid3JvbmdSVEwiLCJpc1ZpcnR1YWwiLCJ2aXJ0dWFsIiwicHJldmlvdXNTbGlkZXNMZW5ndGgiLCJzbGlkZXMiLCJzbGlkZUNsYXNzIiwic2xpZGVzTGVuZ3RoIiwic25hcEdyaWQiLCJzbGlkZXNHcmlkIiwic2xpZGVzU2l6ZXNHcmlkIiwib2Zmc2V0QmVmb3JlIiwic2xpZGVzT2Zmc2V0QmVmb3JlIiwib2Zmc2V0QWZ0ZXIiLCJzbGlkZXNPZmZzZXRBZnRlciIsInByZXZpb3VzU25hcEdyaWRMZW5ndGgiLCJwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgiLCJzcGFjZUJldHdlZW4iLCJzbGlkZVBvc2l0aW9uIiwicHJldlNsaWRlU2l6ZSIsInZpcnR1YWxTaXplIiwic2xpZGVzTnVtYmVyRXZlblRvUm93cyIsInNsaWRlc1BlckNvbHVtbiIsImNlaWwiLCJzbGlkZXNQZXJWaWV3Iiwic2xpZGVzUGVyQ29sdW1uRmlsbCIsInNsaWRlU2l6ZSIsInNsaWRlc1BlclJvdyIsIm51bUZ1bGxDb2x1bW5zIiwic2xpZGUiLCJuZXdTbGlkZU9yZGVySW5kZXgiLCJjb2x1bW4iLCJyb3ciLCJvcmRlciIsInNsaWRlU3R5bGVzIiwiY3VycmVudFRyYW5zZm9ybSIsImN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0iLCJyb3VuZExlbmd0aHMiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwic3dpcGVyU2xpZGVTaXplIiwiY2VudGVyZWRTbGlkZXMiLCJzbGlkZXNQZXJHcm91cCIsIm5ld1NsaWRlc0dyaWQiLCJlZmZlY3QiLCJzZXRXcmFwcGVyU2l6ZSIsInNsaWRlc0dyaWRJdGVtIiwiY2VudGVySW5zdWZmaWNpZW50U2xpZGVzIiwiYWxsU2xpZGVzU2l6ZSIsInNsaWRlU2l6ZVZhbHVlIiwiYWxsU2xpZGVzT2Zmc2V0Iiwic25hcCIsInNuYXBJbmRleCIsIndhdGNoT3ZlcmZsb3ciLCJjaGVja092ZXJmbG93Iiwid2F0Y2hTbGlkZXNQcm9ncmVzcyIsIndhdGNoU2xpZGVzVmlzaWJpbGl0eSIsInVwZGF0ZVNsaWRlc09mZnNldCIsInVwZGF0ZUF1dG9IZWlnaHQiLCJhY3RpdmVTbGlkZXMiLCJuZXdIZWlnaHQiLCJzZXRUcmFuc2l0aW9uIiwiYWN0aXZlSW5kZXgiLCJzd2lwZXJTbGlkZU9mZnNldCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJ1cGRhdGVTbGlkZXNQcm9ncmVzcyIsIm9mZnNldENlbnRlciIsInNsaWRlVmlzaWJsZUNsYXNzIiwidmlzaWJsZVNsaWRlc0luZGV4ZXMiLCJ2aXNpYmxlU2xpZGVzIiwic2xpZGVQcm9ncmVzcyIsIm1pblRyYW5zbGF0ZSIsInNsaWRlQmVmb3JlIiwic2xpZGVBZnRlciIsImlzVmlzaWJsZSIsInVwZGF0ZVByb2dyZXNzIiwidHJhbnNsYXRlc0RpZmYiLCJtYXhUcmFuc2xhdGUiLCJpc0JlZ2lubmluZyIsImlzRW5kIiwid2FzQmVnaW5uaW5nIiwid2FzRW5kIiwidXBkYXRlU2xpZGVzQ2xhc3NlcyIsInJlYWxJbmRleCIsInNsaWRlQWN0aXZlQ2xhc3MiLCJzbGlkZU5leHRDbGFzcyIsInNsaWRlUHJldkNsYXNzIiwic2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyIsInNsaWRlRHVwbGljYXRlTmV4dENsYXNzIiwic2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MiLCJhY3RpdmVTbGlkZSIsInNsaWRlRHVwbGljYXRlQ2xhc3MiLCJuZXh0U2xpZGUiLCJwcmV2U2xpZGUiLCJ1cGRhdGVBY3RpdmVJbmRleCIsIm5ld0FjdGl2ZUluZGV4IiwicHJldmlvdXNJbmRleCIsInByZXZpb3VzUmVhbEluZGV4IiwicHJldmlvdXNTbmFwSW5kZXgiLCJub3JtYWxpemVTbGlkZUluZGV4IiwidXBkYXRlQ2xpY2tlZFNsaWRlIiwic2xpZGVGb3VuZCIsImNsaWNrZWRTbGlkZSIsImNsaWNrZWRJbmRleCIsInNsaWRlVG9DbGlja2VkU2xpZGUiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwiY3VycmVudFRyYW5zbGF0ZSIsInNldFRyYW5zbGF0ZSIsImJ5Q29udHJvbGxlciIsInoiLCJwcmV2aW91c1RyYW5zbGF0ZSIsInRyYW5zaXRpb25TdGFydCIsInJ1bkNhbGxiYWNrcyIsImF1dG9IZWlnaHQiLCJzbGlkZVRvIiwiaW50ZXJuYWwiLCJzbGlkZUluZGV4IiwicHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIiwiaW5pdGlhbFNsaWRlIiwiaW5pdGlhbGl6ZWQiLCJhbGxvd1NsaWRlTmV4dCIsImFsbG93U2xpZGVQcmV2Iiwib25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJkZXN0cm95ZWQiLCJzbGlkZVRvTG9vcCIsIm5ld0luZGV4IiwibG9vcGVkU2xpZGVzIiwic2xpZGVOZXh0IiwibG9vcEZpeCIsIl9jbGllbnRMZWZ0Iiwic2xpZGVQcmV2Iiwibm9ybWFsaXplIiwibm9ybWFsaXplZFRyYW5zbGF0ZSIsIm5vcm1hbGl6ZWRTbmFwR3JpZCIsIm5vcm1hbGl6ZWRTbGlkZXNHcmlkIiwiY3VycmVudFNuYXAiLCJwcmV2U25hcCIsInByZXZJbmRleCIsInNsaWRlUmVzZXQiLCJzbGlkZVRvQ2xvc2VzdCIsIm5leHRTbmFwIiwic2xpZGVzUGVyVmlld0R5bmFtaWMiLCJzbGlkZVRvSW5kZXgiLCJsb29wQ3JlYXRlIiwibG9vcEZpbGxHcm91cFdpdGhCbGFuayIsImJsYW5rU2xpZGVzTnVtIiwiYmxhbmtOb2RlIiwic2xpZGVCbGFua0NsYXNzIiwibG9vcEFkZGl0aW9uYWxTbGlkZXMiLCJwcmVwZW5kU2xpZGVzIiwiYXBwZW5kU2xpZGVzIiwic25hcFRyYW5zbGF0ZSIsImRpZmYiLCJzbGlkZUNoYW5nZWQiLCJsb29wRGVzdHJveSIsInNldEdyYWJDdXJzb3IiLCJtb3ZpbmciLCJzaW11bGF0ZVRvdWNoIiwiaXNMb2NrZWQiLCJjdXJzb3IiLCJ1bnNldEdyYWJDdXJzb3IiLCJncmFiQ3Vyc29yIiwiYXBwZW5kU2xpZGUiLCJwcmVwZW5kU2xpZGUiLCJhZGRTbGlkZSIsImFjdGl2ZUluZGV4QnVmZmVyIiwiYmFzZUxlbmd0aCIsInNsaWRlc0J1ZmZlciIsImN1cnJlbnRTbGlkZSIsInJlbW92ZVNsaWRlIiwic2xpZGVzSW5kZXhlcyIsImluZGV4VG9SZW1vdmUiLCJyZW1vdmVBbGxTbGlkZXMiLCJtYW5pcHVsYXRpb24iLCJEZXZpY2UiLCJkZXZpY2UiLCJpb3MiLCJhbmRyb2lkIiwiYW5kcm9pZENocm9tZSIsImRlc2t0b3AiLCJ3aW5kb3dzIiwiaXBob25lIiwiaXBvZCIsImlwYWQiLCJjb3Jkb3ZhIiwicGhvbmVnYXAiLCJvcyIsIm9zVmVyc2lvbiIsIndlYlZpZXciLCJvc1ZlcnNpb25BcnIiLCJtZXRhVmlld3BvcnQiLCJtaW5pbWFsVWkiLCJwaXhlbFJhdGlvIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIm9uVG91Y2hTdGFydCIsInRvdWNoRXZlbnRzRGF0YSIsInRvdWNoZXMiLCJvcmlnaW5hbEV2ZW50IiwiaXNUb3VjaEV2ZW50IiwiYnV0dG9uIiwiaXNUb3VjaGVkIiwiaXNNb3ZlZCIsIm5vU3dpcGluZyIsIm5vU3dpcGluZ1NlbGVjdG9yIiwibm9Td2lwaW5nQ2xhc3MiLCJhbGxvd0NsaWNrIiwic3dpcGVIYW5kbGVyIiwidGFyZ2V0VG91Y2hlcyIsInBhZ2VYIiwiY3VycmVudFkiLCJwYWdlWSIsInN0YXJ0WCIsInN0YXJ0WSIsImVkZ2VTd2lwZURldGVjdGlvbiIsImlPU0VkZ2VTd2lwZURldGVjdGlvbiIsImVkZ2VTd2lwZVRocmVzaG9sZCIsImlPU0VkZ2VTd2lwZVRocmVzaG9sZCIsImFsbG93VG91Y2hDYWxsYmFja3MiLCJpc1Njcm9sbGluZyIsInN0YXJ0TW92aW5nIiwidG91Y2hTdGFydFRpbWUiLCJzd2lwZURpcmVjdGlvbiIsInRocmVzaG9sZCIsImFsbG93VGhyZXNob2xkTW92ZSIsImZvcm1FbGVtZW50cyIsInNob3VsZFByZXZlbnREZWZhdWx0IiwiYWxsb3dUb3VjaE1vdmUiLCJ0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQiLCJ0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdCIsIm9uVG91Y2hNb3ZlIiwicHJldmVudGVkQnlOZXN0ZWRTd2lwZXIiLCJ0b3VjaFJlbGVhc2VPbkVkZ2VzIiwiZGlmZlgiLCJkaWZmWSIsInRvdWNoQW5nbGUiLCJ0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24iLCJuZXN0ZWQiLCJzdGFydFRyYW5zbGF0ZSIsImFsbG93TW9tZW50dW1Cb3VuY2UiLCJ0b3VjaFJhdGlvIiwiZGlzYWJsZVBhcmVudFN3aXBlciIsInJlc2lzdGFuY2VSYXRpbyIsInJlc2lzdGFuY2UiLCJmb2xsb3dGaW5nZXIiLCJmcmVlTW9kZSIsInZlbG9jaXRpZXMiLCJvblRvdWNoRW5kIiwidG91Y2hFbmRUaW1lIiwidGltZURpZmYiLCJsYXN0Q2xpY2tUaW1lIiwiY2xpY2tUaW1lb3V0IiwiZnJlZU1vZGVNb21lbnR1bSIsImxhc3RNb3ZlRXZlbnQiLCJ2ZWxvY2l0eUV2ZW50IiwiZGlzdGFuY2UiLCJmcmVlTW9kZU1pbmltdW1WZWxvY2l0eSIsImZyZWVNb2RlTW9tZW50dW1WZWxvY2l0eVJhdGlvIiwibW9tZW50dW1EdXJhdGlvbiIsImZyZWVNb2RlTW9tZW50dW1SYXRpbyIsIm1vbWVudHVtRGlzdGFuY2UiLCJuZXdQb3NpdGlvbiIsImRvQm91bmNlIiwiYWZ0ZXJCb3VuY2VQb3NpdGlvbiIsImJvdW5jZUFtb3VudCIsImZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbyIsIm5lZWRzTG9vcEZpeCIsImZyZWVNb2RlTW9tZW50dW1Cb3VuY2UiLCJmcmVlTW9kZVN0aWNreSIsImxvbmdTd2lwZXNNcyIsInN0b3BJbmRleCIsImdyb3VwU2l6ZSIsInJhdGlvIiwibG9uZ1N3aXBlcyIsImxvbmdTd2lwZXNSYXRpbyIsInNob3J0U3dpcGVzIiwib25SZXNpemUiLCJicmVha3BvaW50cyIsInNldEJyZWFrcG9pbnQiLCJuZXdUcmFuc2xhdGUiLCJvbkNsaWNrIiwicHJldmVudENsaWNrcyIsInByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImF0dGFjaEV2ZW50cyIsInRvdWNoRXZlbnRzIiwid3JhcHBlckVsIiwidG91Y2hFdmVudHNUYXJnZXQiLCJtb3ZlIiwicGFzc2l2ZUxpc3RlbmVycyIsInBhc3NpdmUiLCJkZXRhY2hFdmVudHMiLCJicmVha3BvaW50IiwiZ2V0QnJlYWtwb2ludCIsImN1cnJlbnRCcmVha3BvaW50IiwiYnJlYWtwb2ludE9ubHlQYXJhbXMiLCJwYXJhbVZhbHVlIiwiYnJlYWtwb2ludFBhcmFtcyIsIm9yaWdpbmFsUGFyYW1zIiwiZGlyZWN0aW9uQ2hhbmdlZCIsIm5lZWRzUmVMb29wIiwiY2hhbmdlRGlyZWN0aW9uIiwiYnJlYWtwb2ludHNJbnZlcnNlIiwiYWRkQ2xhc3NlcyIsImNsYXNzTmFtZXMiLCJzdWZmaXhlcyIsInN1ZmZpeCIsImNvbnRhaW5lck1vZGlmaWVyQ2xhc3MiLCJyZW1vdmVDbGFzc2VzIiwibG9hZEltYWdlIiwiaW1hZ2VFbCIsInNpemVzIiwiY2hlY2tGb3JDb21wbGV0ZSIsImltYWdlIiwib25SZWFkeSIsIm9ubG9hZCIsInByZWxvYWRJbWFnZXMiLCJpbWFnZXNUb0xvYWQiLCJpbWFnZXNMb2FkZWQiLCJ1cGRhdGVPbkltYWdlc1JlYWR5IiwiaW1hZ2VzIiwid2FzTG9ja2VkIiwibmF2aWdhdGlvbiIsImNoZWNrT3ZlcmZsb3ckMSIsInVuaXF1ZU5hdkVsZW1lbnRzIiwid3JhcHBlckNsYXNzIiwicnVuQ2FsbGJhY2tzT25Jbml0IiwicHJvdG90eXBlcyIsImV4dGVuZGVkRGVmYXVsdHMiLCJTd2lwZXIiLCJwcm90b3R5cGVHcm91cCIsInByb3RvTWV0aG9kIiwibW9kdWxlUGFyYW1OYW1lIiwic3dpcGVyUGFyYW1zIiwidXNlTW9kdWxlc1BhcmFtcyIsInBhc3NlZFBhcmFtcyIsInN3aXBlcnMiLCJjb250YWluZXJFbCIsIm5ld1BhcmFtcyIsInRvdWNoRXZlbnRzVG91Y2giLCJ0b3VjaEV2ZW50c0Rlc2t0b3AiLCJ1c2VNb2R1bGVzIiwic3B2IiwiYnJlYWtMb29wIiwidHJhbnNsYXRlVmFsdWUiLCJ0cmFuc2xhdGVkIiwibmV3RGlyZWN0aW9uIiwibmVlZFVwZGF0ZSIsImN1cnJlbnREaXJlY3Rpb24iLCJzbGlkZUVsIiwiZGVsZXRlSW5zdGFuY2UiLCJjbGVhblN0eWxlcyIsIm5ld0RlZmF1bHRzIiwiRGV2aWNlJDEiLCJTdXBwb3J0JDEiLCJzdXBwb3J0IiwiQnJvd3NlciQxIiwiUmVzaXplIiwicmVzaXplSGFuZGxlciIsIm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlciIsIk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIiLCJhdHRhY2giLCJPYnNlcnZlckZ1bmMiLCJtdXRhdGlvbnMiLCJvYnNlcnZlclVwZGF0ZSIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwib2JzZXJ2ZXJzIiwib2JzZXJ2ZVBhcmVudHMiLCJjb250YWluZXJQYXJlbnRzIiwib2JzZXJ2ZVNsaWRlQ2hpbGRyZW4iLCJkaXNjb25uZWN0IiwiT2JzZXJ2ZXIkMSIsIlZpcnR1YWwiLCJhZGRTbGlkZXNCZWZvcmUiLCJhZGRTbGlkZXNBZnRlciIsInByZXZpb3VzRnJvbSIsInByZXZpb3VzVG8iLCJwcmV2aW91c1NsaWRlc0dyaWQiLCJyZW5kZXJTbGlkZSIsInByZXZpb3VzT2Zmc2V0Iiwib2Zmc2V0UHJvcCIsInNsaWRlc0FmdGVyIiwic2xpZGVzQmVmb3JlIiwib25SZW5kZXJlZCIsImxhenkiLCJsb2FkIiwicmVuZGVyRXh0ZXJuYWwiLCJnZXRTbGlkZXMiLCJzbGlkZXNUb1JlbmRlciIsInByZXBlbmRJbmRleGVzIiwiYXBwZW5kSW5kZXhlcyIsIiRzbGlkZUVsIiwibnVtYmVyT2ZOZXdTbGlkZXMiLCJuZXdDYWNoZSIsImNhY2hlZEluZGV4IiwiVmlydHVhbCQxIiwiYmVmb3JlSW5pdCIsIm92ZXJ3cml0ZVBhcmFtcyIsIktleWJvYXJkIiwia2MiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJrZXlib2FyZCIsIm9ubHlJblZpZXdwb3J0IiwiaW5WaWV3Iiwid2luZG93V2lkdGgiLCJ3aW5kb3dIZWlnaHQiLCJzd2lwZXJPZmZzZXQiLCJzd2lwZXJDb29yZCIsImVuYWJsZSIsImRpc2FibGUiLCJLZXlib2FyZCQxIiwiaXNFdmVudFN1cHBvcnRlZCIsImlzU3VwcG9ydGVkIiwiaW1wbGVtZW50YXRpb24iLCJoYXNGZWF0dXJlIiwiTW91c2V3aGVlbCIsImxhc3RTY3JvbGxUaW1lIiwiZ2V0RXZlbnQiLCJQSVhFTF9TVEVQIiwiTElORV9IRUlHSFQiLCJQQUdFX0hFSUdIVCIsInNYIiwic1kiLCJwWCIsInBZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhWCIsIkhPUklaT05UQUxfQVhJUyIsImRlbHRhWSIsImRlbHRhWCIsImRlbHRhTW9kZSIsInNwaW5YIiwic3BpblkiLCJwaXhlbFgiLCJwaXhlbFkiLCJoYW5kbGVNb3VzZUVudGVyIiwibW91c2VFbnRlcmVkIiwiaGFuZGxlTW91c2VMZWF2ZSIsIm1vdXNld2hlZWwiLCJyZWxlYXNlT25FZGdlcyIsImRlbHRhIiwicnRsRmFjdG9yIiwiZm9yY2VUb0F4aXMiLCJpbnZlcnQiLCJzZW5zaXRpdml0eSIsImF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb24iLCJldmVudHNUYXJnZWQiLCJNb3VzZXdoZWVsJDEiLCJOYXZpZ2F0aW9uIiwiJG5leHRFbCIsIiRwcmV2RWwiLCJkaXNhYmxlZENsYXNzIiwibG9ja0NsYXNzIiwib25QcmV2Q2xpY2siLCJvbk5leHRDbGljayIsIm5leHRFbCIsInByZXZFbCIsIk5hdmlnYXRpb24kMSIsImhpZGVPbkNsaWNrIiwiaGlkZGVuQ2xhc3MiLCJ0b0VkZ2UiLCJmcm9tRWRnZSIsImlzSGlkZGVuIiwiUGFnaW5hdGlvbiIsInBhZ2luYXRpb24iLCJwYWdpbmF0aW9uVHlwZSIsImJ1bGxldHMiLCJmaXJzdEluZGV4IiwibGFzdEluZGV4IiwibWlkSW5kZXgiLCJkeW5hbWljQnVsbGV0cyIsImJ1bGxldFNpemUiLCJkeW5hbWljTWFpbkJ1bGxldHMiLCJkeW5hbWljQnVsbGV0SW5kZXgiLCJidWxsZXRBY3RpdmVDbGFzcyIsImJ1bGxldCIsIiRidWxsZXQiLCJidWxsZXRJbmRleCIsIiRmaXJzdERpc3BsYXllZEJ1bGxldCIsIiRsYXN0RGlzcGxheWVkQnVsbGV0IiwiZHluYW1pY0J1bGxldHNMZW5ndGgiLCJidWxsZXRzT2Zmc2V0IiwiY3VycmVudENsYXNzIiwiZm9ybWF0RnJhY3Rpb25DdXJyZW50IiwidG90YWxDbGFzcyIsImZvcm1hdEZyYWN0aW9uVG90YWwiLCJwcm9ncmVzc2JhckRpcmVjdGlvbiIsInByb2dyZXNzYmFyT3Bwb3NpdGUiLCJzY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsInByb2dyZXNzYmFyRmlsbENsYXNzIiwicmVuZGVyQ3VzdG9tIiwicGFnaW5hdGlvbkhUTUwiLCJudW1iZXJPZkJ1bGxldHMiLCJyZW5kZXJCdWxsZXQiLCJidWxsZXRDbGFzcyIsImJ1bGxldEVsZW1lbnQiLCJyZW5kZXJGcmFjdGlvbiIsInJlbmRlclByb2dyZXNzYmFyIiwiY2xpY2thYmxlIiwiY2xpY2thYmxlQ2xhc3MiLCJtb2RpZmllckNsYXNzIiwicHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzIiwiUGFnaW5hdGlvbiQxIiwiYWN0aXZlSW5kZXhDaGFuZ2UiLCJzbmFwSW5kZXhDaGFuZ2UiLCJzbGlkZXNMZW5ndGhDaGFuZ2UiLCJzbmFwR3JpZExlbmd0aENoYW5nZSIsIlNjcm9sbGJhciIsInNjcm9sbGJhciIsImRyYWdTaXplIiwidHJhY2tTaXplIiwiJGRyYWdFbCIsIm5ld1NpemUiLCJuZXdQb3MiLCJvcGFjaXR5IiwiZGl2aWRlciIsIm1vdmVEaXZpZGVyIiwic2V0RHJhZ1Bvc2l0aW9uIiwicG9pbnRlclBvc2l0aW9uIiwiY2xpZW50WCIsImNsaWVudFkiLCJwb3NpdGlvblJhdGlvIiwib25EcmFnU3RhcnQiLCJkcmFnVGltZW91dCIsIm9uRHJhZ01vdmUiLCJvbkRyYWdFbmQiLCJzbmFwT25SZWxlYXNlIiwiZW5hYmxlRHJhZ2dhYmxlIiwiYWN0aXZlTGlzdGVuZXIiLCJkaXNhYmxlRHJhZ2dhYmxlIiwiJHN3aXBlckVsIiwiZHJhZ0NsYXNzIiwiZHJhZ0VsIiwiZHJhZ2dhYmxlIiwiU2Nyb2xsYmFyJDEiLCJQYXJhbGxheCIsInNldFRyYW5zZm9ybSIsImN1cnJlbnRPcGFjaXR5IiwiY3VycmVudFNjYWxlIiwicGFyYWxsYXgiLCJwYXJhbGxheEVsIiwiJHBhcmFsbGF4RWwiLCJwYXJhbGxheER1cmF0aW9uIiwiUGFyYWxsYXgkMSIsIlpvb20iLCJnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzIiwieDEiLCJ5MSIsIngyIiwieTIiLCJvbkdlc3R1cmVTdGFydCIsInpvb20iLCJnZXN0dXJlIiwiZmFrZUdlc3R1cmVUb3VjaGVkIiwiZmFrZUdlc3R1cmVNb3ZlZCIsInNjYWxlU3RhcnQiLCIkaW1hZ2VFbCIsIiRpbWFnZVdyYXBFbCIsImNvbnRhaW5lckNsYXNzIiwibWF4UmF0aW8iLCJpc1NjYWxpbmciLCJvbkdlc3R1cmVDaGFuZ2UiLCJzY2FsZU1vdmUiLCJtaW5SYXRpbyIsIm9uR2VzdHVyZUVuZCIsImNoYW5nZWRUb3VjaGVzIiwidG91Y2hlc1N0YXJ0Iiwic2xpZGVXaWR0aCIsInNsaWRlSGVpZ2h0Iiwic2NhbGVkV2lkdGgiLCJzY2FsZWRIZWlnaHQiLCJtaW5YIiwibWF4WCIsIm1pblkiLCJtYXhZIiwidG91Y2hlc0N1cnJlbnQiLCJwcmV2UG9zaXRpb25YIiwicHJldlBvc2l0aW9uWSIsInByZXZUaW1lIiwibW9tZW50dW1EdXJhdGlvblgiLCJtb21lbnR1bUR1cmF0aW9uWSIsIm1vbWVudHVtRGlzdGFuY2VYIiwibmV3UG9zaXRpb25YIiwibW9tZW50dW1EaXN0YW5jZVkiLCJuZXdQb3NpdGlvblkiLCJvblRyYW5zaXRpb25FbmQiLCJvdXQiLCJ6b29tZWRTbGlkZUNsYXNzIiwidG91Y2hYIiwidG91Y2hZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsImltYWdlV2lkdGgiLCJpbWFnZUhlaWdodCIsInRyYW5zbGF0ZU1pblgiLCJ0cmFuc2xhdGVNaW5ZIiwidHJhbnNsYXRlTWF4WCIsInRyYW5zbGF0ZU1heFkiLCJab29tJDEiLCJ0b3VjaFN0YXJ0IiwidG91Y2hFbmQiLCJkb3VibGVUYXAiLCJMYXp5IiwibG9hZEluU2xpZGUiLCJsb2FkSW5EdXBsaWNhdGUiLCIkaW1hZ2VzIiwiZWxlbWVudENsYXNzIiwibG9hZGVkQ2xhc3MiLCJsb2FkaW5nQ2xhc3MiLCJpbWFnZUluZGV4IiwiYmFja2dyb3VuZCIsInByZWxvYWRlckNsYXNzIiwic2xpZGVPcmlnaW5hbEluZGV4Iiwib3JpZ2luYWxTbGlkZSIsImR1cGxpY2F0ZWRTbGlkZSIsInNsaWRlRXhpc3QiLCJpbml0aWFsSW1hZ2VMb2FkZWQiLCJlbEluZGV4IiwibG9hZFByZXZOZXh0IiwibG9hZFByZXZOZXh0QW1vdW50IiwiYW1vdW50IiwibWF4SW5kZXgiLCJtaW5JbmRleCIsIkxhenkkMSIsImxvYWRPblRyYW5zaXRpb25TdGFydCIsInNjcm9sbGJhckRyYWdNb3ZlIiwiTGluZWFyU3BsaW5lIiwiYmluYXJ5U2VhcmNoIiwiZ3Vlc3MiLCJpMSIsImkzIiwiaW50ZXJwb2xhdGUiLCJnZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uIiwic3BsaW5lIiwiY29udHJvbGxlZCIsImNvbnRyb2wiLCJtdWx0aXBsaWVyIiwiY29udHJvbGxlZFRyYW5zbGF0ZSIsInNldENvbnRyb2xsZWRUcmFuc2xhdGUiLCJieSIsImludmVyc2UiLCJzZXRDb250cm9sbGVkVHJhbnNpdGlvbiIsIkNvbnRyb2xsZXIkMSIsImExMXkiLCJtYWtlRWxGb2N1c2FibGUiLCJhZGRFbFJvbGUiLCJyb2xlIiwiYWRkRWxMYWJlbCIsImxhYmVsIiwiZGlzYWJsZUVsIiwiZW5hYmxlRWwiLCJvbkVudGVyS2V5IiwiJHRhcmdldEVsIiwibm90aWZ5IiwibGFzdFNsaWRlTWVzc2FnZSIsIm5leHRTbGlkZU1lc3NhZ2UiLCJmaXJzdFNsaWRlTWVzc2FnZSIsInByZXZTbGlkZU1lc3NhZ2UiLCJub3RpZmljYXRpb24iLCJsaXZlUmVnaW9uIiwidXBkYXRlTmF2aWdhdGlvbiIsInVwZGF0ZVBhZ2luYXRpb24iLCJidWxsZXRFbCIsIiRidWxsZXRFbCIsInBhZ2luYXRpb25CdWxsZXRNZXNzYWdlIiwiQTExeSIsIm5vdGlmaWNhdGlvbkNsYXNzIiwicGFnaW5hdGlvblVwZGF0ZSIsImhhc2hOYXZpZ2F0aW9uIiwiZ2V0UGF0aFZhbHVlcyIsInNjcm9sbFRvU2xpZGUiLCJyZXBsYWNlU3RhdGUiLCJzZXRIaXN0b3J5UG9wU3RhdGUiLCJwYXRoQXJyYXkiLCJwYXJ0Iiwic2V0SGlzdG9yeSIsInNsdWdpZnkiLCJpbmNsdWRlcyIsImN1cnJlbnRTdGF0ZSIsInNsaWRlSGlzdG9yeSIsIkhpc3RvcnkkMSIsIkhhc2hOYXZpZ2F0aW9uIiwib25IYXNoQ2FuZ2UiLCJuZXdIYXNoIiwiYWN0aXZlU2xpZGVIYXNoIiwic2V0SGFzaCIsInNsaWRlSGFzaCIsIndhdGNoU3RhdGUiLCJIYXNoTmF2aWdhdGlvbiQxIiwiQXV0b3BsYXkiLCIkYWN0aXZlU2xpZGVFbCIsInJldmVyc2VEaXJlY3Rpb24iLCJzdG9wT25MYXN0U2xpZGUiLCJ3YWl0Rm9yVHJhbnNpdGlvbiIsIkF1dG9wbGF5JDEiLCJkaXNhYmxlT25JbnRlcmFjdGlvbiIsImJlZm9yZVRyYW5zaXRpb25TdGFydCIsInNsaWRlckZpcnN0TW92ZSIsIkZhZGUiLCJ0eCIsInR5Iiwic2xpZGVPcGFjaXR5IiwiZmFkZUVmZmVjdCIsImNyb3NzRmFkZSIsImV2ZW50VHJpZ2dlcmVkIiwidHJpZ2dlckV2ZW50cyIsIkVmZmVjdEZhZGUiLCJDdWJlIiwic3dpcGVyV2lkdGgiLCJzd2lwZXJIZWlnaHQiLCJjdWJlRWZmZWN0Iiwid3JhcHBlclJvdGF0ZSIsIiRjdWJlU2hhZG93RWwiLCJzaGFkb3ciLCJzbGlkZUFuZ2xlIiwidHoiLCJzbGlkZVNoYWRvd3MiLCJzaGFkb3dCZWZvcmUiLCJzaGFkb3dBZnRlciIsInNoYWRvd09mZnNldCIsInNoYWRvd1NjYWxlIiwic2hhZG93QW5nbGUiLCJzY2FsZTEiLCJzY2FsZTIiLCJ6RmFjdG9yIiwiRWZmZWN0Q3ViZSIsIkZsaXAiLCJmbGlwRWZmZWN0IiwibGltaXRSb3RhdGlvbiIsInJvdGF0ZSIsInJvdGF0ZVkiLCJyb3RhdGVYIiwiekluZGV4IiwiRWZmZWN0RmxpcCIsIkNvdmVyZmxvdyIsImNvdmVyZmxvd0VmZmVjdCIsImNlbnRlciIsImRlcHRoIiwic2xpZGVPZmZzZXQiLCJvZmZzZXRNdWx0aXBsaWVyIiwidHJhbnNsYXRlWiIsInN0cmV0Y2giLCJzbGlkZVRyYW5zZm9ybSIsIiRzaGFkb3dCZWZvcmVFbCIsIiRzaGFkb3dBZnRlckVsIiwid3MiLCJwZXJzcGVjdGl2ZU9yaWdpbiIsIkVmZmVjdENvdmVyZmxvdyIsIlRodW1icyIsInRodW1ic1BhcmFtcyIsInRodW1icyIsInN3aXBlckNyZWF0ZWQiLCJ0aHVtYnNDb250YWluZXJDbGFzcyIsIm9uVGh1bWJDbGljayIsInRodW1ic1N3aXBlciIsInNsaWRlVGh1bWJBY3RpdmVDbGFzcyIsImN1cnJlbnRJbmRleCIsImluaXRpYWwiLCJjdXJyZW50VGh1bWJzSW5kZXgiLCJuZXdUaHVtYnNJbmRleCIsInByZXZUaHVtYnNJbmRleCIsIm5leHRUaHVtYnNJbmRleCIsInRodW1ic1RvQWN0aXZhdGUiLCJ0aHVtYkFjdGl2ZUNsYXNzIiwiVGh1bWJzJDEiLCJzbGlkZUNoYW5nZSIsImJlZm9yZURlc3Ryb3kiLCJUaW1lb3V0Iiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiY2xvc2UiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJ1bnJlZiIsImVucm9sbCIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsIm9uVGltZW91dCIsIl9vblRpbWVvdXQiLCJlbXB0eU9iamVjdCIsImZyZWV6ZSIsImlzVW5kZWYiLCJpc0RlZiIsImlzVHJ1ZSIsImlzRmFsc2UiLCJpc1ByaW1pdGl2ZSIsIl90b1N0cmluZyIsInRvUmF3VHlwZSIsImlzUGxhaW5PYmplY3QiLCJpc1JlZ0V4cCIsImlzVmFsaWRBcnJheUluZGV4IiwiaXNGaW5pdGUiLCJpc1Byb21pc2UiLCJtYWtlTWFwIiwiZXhwZWN0c0xvd2VyQ2FzZSIsImlzQnVpbHRJblRhZyIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJoYXNPd24iLCJjYWNoZWRGbiIsImhpdCIsImNhbWVsaXplUkUiLCJjYW1lbGl6ZSIsImNhcGl0YWxpemUiLCJoeXBoZW5hdGVSRSIsImh5cGhlbmF0ZSIsInBvbHlmaWxsQmluZCIsImJvdW5kRm4iLCJfbGVuZ3RoIiwibmF0aXZlQmluZCIsInJldCIsIl9mcm9tIiwidG9PYmplY3QiLCJubyIsImlkZW50aXR5IiwibG9vc2VFcXVhbCIsImlzT2JqZWN0QSIsImlzT2JqZWN0QiIsImlzQXJyYXlBIiwiaXNBcnJheUIiLCJldmVyeSIsImtleXNBIiwia2V5c0IiLCJsb29zZUluZGV4T2YiLCJjYWxsZWQiLCJTU1JfQVRUUiIsIkFTU0VUX1RZUEVTIiwiTElGRUNZQ0xFX0hPT0tTIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwic2lsZW50IiwicHJvZHVjdGlvblRpcCIsImRldnRvb2xzIiwicGVyZm9ybWFuY2UiLCJlcnJvckhhbmRsZXIiLCJ3YXJuSGFuZGxlciIsImlnbm9yZWRFbGVtZW50cyIsImtleUNvZGVzIiwiaXNSZXNlcnZlZFRhZyIsImlzUmVzZXJ2ZWRBdHRyIiwiaXNVbmtub3duRWxlbWVudCIsImdldFRhZ05hbWVzcGFjZSIsInBhcnNlUGxhdGZvcm1UYWdOYW1lIiwibXVzdFVzZVByb3AiLCJfbGlmZWN5Y2xlSG9va3MiLCJ1bmljb2RlUmVnRXhwIiwiaXNSZXNlcnZlZCIsImNoYXJDb2RlQXQiLCJkZWYiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImJhaWxSRSIsInBhcnNlUGF0aCIsInNlZ21lbnRzIiwiaGFzUHJvdG8iLCJpbkJyb3dzZXIiLCJpbldlZXgiLCJXWEVudmlyb25tZW50IiwicGxhdGZvcm0iLCJ3ZWV4UGxhdGZvcm0iLCJVQSIsImlzSUU5IiwiaXNBbmRyb2lkIiwiaXNJT1MiLCJpc0Nocm9tZSIsImlzUGhhbnRvbUpTIiwiaXNGRiIsIm5hdGl2ZVdhdGNoIiwid2F0Y2giLCJfaXNTZXJ2ZXIiLCJpc1NlcnZlclJlbmRlcmluZyIsIlZVRV9FTlYiLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNOYXRpdmUiLCJDdG9yIiwiaGFzU3ltYm9sIiwiUmVmbGVjdCIsIm93bktleXMiLCJfU2V0IiwidGlwIiwiZ2VuZXJhdGVDb21wb25lbnRUcmFjZSIsImZvcm1hdENvbXBvbmVudE5hbWUiLCJoYXNDb25zb2xlIiwiY2xhc3NpZnlSRSIsImNsYXNzaWZ5IiwibXNnIiwidm0iLCJ0cmFjZSIsImluY2x1ZGVGaWxlIiwiJHJvb3QiLCJjaWQiLCJfaXNWdWUiLCIkb3B0aW9ucyIsIl9jb21wb25lbnRUYWciLCJmaWxlIiwiX19maWxlIiwiJHBhcmVudCIsInRyZWUiLCJjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UiLCJ1aWQiLCJEZXAiLCJzdWJzIiwiYWRkU3ViIiwic3ViIiwicmVtb3ZlU3ViIiwiZGVwZW5kIiwiYWRkRGVwIiwidGFyZ2V0U3RhY2siLCJwdXNoVGFyZ2V0IiwicG9wVGFyZ2V0IiwiVk5vZGUiLCJlbG0iLCJjb21wb25lbnRPcHRpb25zIiwiYXN5bmNGYWN0b3J5IiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiY29tcG9uZW50SW5zdGFuY2UiLCJyYXciLCJpc1N0YXRpYyIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwiYXN5bmNNZXRhIiwiaXNBc3luY1BsYWNlaG9sZGVyIiwiZGVmaW5lUHJvcGVydGllcyIsImNyZWF0ZUVtcHR5Vk5vZGUiLCJub2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsIm1ldGhvZHNUb1BhdGNoIiwibXV0YXRvciIsIm9iIiwiX19vYl9fIiwiaW5zZXJ0ZWQiLCJvYnNlcnZlQXJyYXkiLCJkZXAiLCJhcnJheUtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwic2hvdWxkT2JzZXJ2ZSIsInRvZ2dsZU9ic2VydmluZyIsInZtQ291bnQiLCJwcm90b0F1Z21lbnQiLCJjb3B5QXVnbWVudCIsIndhbGsiLCJkZWZpbmVSZWFjdGl2ZSQkMSIsIml0ZW1zIiwiX19wcm90b19fIiwiYXNSb290RGF0YSIsImlzRXh0ZW5zaWJsZSIsImN1c3RvbVNldHRlciIsInNoYWxsb3ciLCJnZXR0ZXIiLCJzZXR0ZXIiLCJjaGlsZE9iIiwicmVhY3RpdmVHZXR0ZXIiLCJkZXBlbmRBcnJheSIsInJlYWN0aXZlU2V0dGVyIiwiZGVsIiwic3RyYXRzIiwicHJvcHNEYXRhIiwiZGVmYXVsdFN0cmF0IiwibWVyZ2VEYXRhIiwidG9WYWwiLCJmcm9tVmFsIiwibWVyZ2VEYXRhT3JGbiIsInBhcmVudFZhbCIsImNoaWxkVmFsIiwibWVyZ2VkRGF0YUZuIiwibWVyZ2VkSW5zdGFuY2VEYXRhRm4iLCJpbnN0YW5jZURhdGEiLCJkZWZhdWx0RGF0YSIsIm1lcmdlSG9vayIsImRlZHVwZUhvb2tzIiwibWVyZ2VBc3NldHMiLCJhc3NlcnRPYmplY3RUeXBlIiwia2V5JDEiLCJtZXRob2RzIiwiaW5qZWN0IiwiY29tcHV0ZWQiLCJwcm92aWRlIiwiY2hlY2tDb21wb25lbnRzIiwidmFsaWRhdGVDb21wb25lbnROYW1lIiwibm9ybWFsaXplUHJvcHMiLCJub3JtYWxpemVJbmplY3QiLCJub3JtYWxpemVkIiwibm9ybWFsaXplRGlyZWN0aXZlcyIsImRpcnMiLCJkaXJlY3RpdmVzIiwiZGVmJCQxIiwibWVyZ2VPcHRpb25zIiwiX2Jhc2UiLCJtaXhpbnMiLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJhYnNlbnQiLCJib29sZWFuSW5kZXgiLCJnZXRUeXBlSW5kZXgiLCJzdHJpbmdJbmRleCIsImdldFByb3BEZWZhdWx0VmFsdWUiLCJwcmV2U2hvdWxkT2JzZXJ2ZSIsImFzc2VydFByb3AiLCJfcHJvcHMiLCJnZXRUeXBlIiwicmVxdWlyZWQiLCJleHBlY3RlZFR5cGVzIiwiYXNzZXJ0ZWRUeXBlIiwiYXNzZXJ0VHlwZSIsImV4cGVjdGVkVHlwZSIsImdldEludmFsaWRUeXBlTWVzc2FnZSIsInZhbGlkYXRvciIsInNpbXBsZUNoZWNrUkUiLCJpc1NhbWVUeXBlIiwicmVjZWl2ZWRUeXBlIiwiZXhwZWN0ZWRWYWx1ZSIsInN0eWxlVmFsdWUiLCJyZWNlaXZlZFZhbHVlIiwiaXNFeHBsaWNhYmxlIiwiaXNCb29sZWFuIiwiZXhwbGljaXRUeXBlcyIsImN1ciIsImVycm9yQ2FwdHVyZWQiLCJnbG9iYWxIYW5kbGVFcnJvciIsImludm9rZVdpdGhFcnJvckhhbmRsaW5nIiwiX2hhbmRsZWQiLCJsb2dFcnJvciIsImlzVXNpbmdNaWNyb1Rhc2siLCJwZW5kaW5nIiwiZmx1c2hDYWxsYmFja3MiLCJjb3BpZXMiLCJ0aW1lckZ1bmMiLCJjb3VudGVyIiwidGV4dE5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImluaXRQcm94eSIsImFsbG93ZWRHbG9iYWxzIiwid2Fybk5vblByZXNlbnQiLCJ3YXJuUmVzZXJ2ZWRQcmVmaXgiLCJoYXNQcm94eSIsIlByb3h5IiwiaXNCdWlsdEluTW9kaWZpZXIiLCJoYXNIYW5kbGVyIiwiaXNBbGxvd2VkIiwiJGRhdGEiLCJnZXRIYW5kbGVyIiwiX3dpdGhTdHJpcHBlZCIsIl9yZW5kZXJQcm94eSIsInNlZW5PYmplY3RzIiwidHJhdmVyc2UiLCJfdHJhdmVyc2UiLCJzZWVuIiwiaXNBIiwiaXNGcm96ZW4iLCJkZXBJZCIsIm1hcmsiLCJtZWFzdXJlIiwicGVyZiIsImNsZWFyTWFya3MiLCJjbGVhck1lYXN1cmVzIiwic3RhcnRUYWciLCJlbmRUYWciLCJub3JtYWxpemVFdmVudCIsIm9uY2UkJDEiLCJjcmVhdGVGbkludm9rZXIiLCJpbnZva2VyIiwiYXJndW1lbnRzJDEiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJvbGRPbiIsInJlbW92ZSQkMSIsImNyZWF0ZU9uY2VIYW5kbGVyIiwib2xkIiwibWVyZ2VWTm9kZUhvb2siLCJob29rS2V5Iiwib2xkSG9vayIsIndyYXBwZWRIb29rIiwibWVyZ2VkIiwiZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSIsImtleUluTG93ZXJDYXNlIiwiY2hlY2tQcm9wIiwicHJlc2VydmUiLCJzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQXJyYXlDaGlsZHJlbiIsImlzVGV4dE5vZGUiLCJuZXN0ZWRJbmRleCIsIl9pc1ZMaXN0IiwiaW5pdFByb3ZpZGUiLCJfcHJvdmlkZWQiLCJpbml0SW5qZWN0aW9ucyIsInJlc29sdmVJbmplY3QiLCJwcm92aWRlS2V5IiwicHJvdmlkZURlZmF1bHQiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsInNsb3QiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJub3JtYWxpemVTY29wZWRTbG90cyIsIm5vcm1hbFNsb3RzIiwicHJldlNsb3RzIiwiaGFzTm9ybWFsU2xvdHMiLCJpc1N0YWJsZSIsIiRzdGFibGUiLCIka2V5IiwiX25vcm1hbGl6ZWQiLCIkaGFzTm9ybWFsIiwibm9ybWFsaXplU2NvcGVkU2xvdCIsImtleSQyIiwicHJveHlOb3JtYWxTbG90IiwicHJveHkiLCJyZW5kZXJMaXN0IiwiaXRlcmF0b3IiLCJyZW5kZXJTbG90IiwiZmFsbGJhY2siLCJiaW5kT2JqZWN0Iiwic2NvcGVkU2xvdEZuIiwiJHNjb3BlZFNsb3RzIiwiJHNsb3RzIiwiJGNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlRmlsdGVyIiwiaXNLZXlOb3RNYXRjaCIsImV4cGVjdCIsImFjdHVhbCIsImNoZWNrS2V5Q29kZXMiLCJldmVudEtleUNvZGUiLCJidWlsdEluS2V5Q29kZSIsImV2ZW50S2V5TmFtZSIsImJ1aWx0SW5LZXlOYW1lIiwibWFwcGVkS2V5Q29kZSIsImJpbmRPYmplY3RQcm9wcyIsImFzUHJvcCIsImlzU3luYyIsImRvbVByb3BzIiwiY2FtZWxpemVkS2V5IiwiaHlwaGVuYXRlZEtleSIsIiRldmVudCIsInJlbmRlclN0YXRpYyIsImlzSW5Gb3IiLCJfc3RhdGljVHJlZXMiLCJzdGF0aWNSZW5kZXJGbnMiLCJtYXJrU3RhdGljIiwibWFya09uY2UiLCJtYXJrU3RhdGljTm9kZSIsImJpbmRPYmplY3RMaXN0ZW5lcnMiLCJleGlzdGluZyIsIm91cnMiLCJyZXNvbHZlU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljS2V5cyIsImNvbnRlbnRIYXNoS2V5IiwiYmluZER5bmFtaWNLZXlzIiwiYmFzZU9iaiIsInByZXBlbmRNb2RpZmllciIsInN5bWJvbCIsImluc3RhbGxSZW5kZXJIZWxwZXJzIiwiX28iLCJfbiIsIl9zIiwiX2wiLCJfdCIsIl9xIiwiX2kiLCJfbSIsIl9mIiwiX2siLCJfYiIsIl92IiwiX2UiLCJfdSIsIl9nIiwiX2QiLCJfcCIsIkZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IiwidGhpcyQxIiwiY29udGV4dFZtIiwiX29yaWdpbmFsIiwiaXNDb21waWxlZCIsIl9jb21waWxlZCIsIm5lZWROb3JtYWxpemF0aW9uIiwiaW5qZWN0aW9ucyIsInNjb3BlZFNsb3RzIiwiX3Njb3BlSWQiLCJfYyIsImQiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwibWVyZ2VQcm9wcyIsInJlbmRlckNvbnRleHQiLCJjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0Iiwidm5vZGVzIiwiZGV2dG9vbHNNZXRhIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImh5ZHJhdGluZyIsIl9pc0Rlc3Ryb3llZCIsImtlZXBBbGl2ZSIsIm1vdW50ZWROb2RlIiwicHJlcGF0Y2giLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIiwiJG1vdW50Iiwib2xkVm5vZGUiLCJ1cGRhdGVDaGlsZENvbXBvbmVudCIsImluc2VydCIsIl9pc01vdW50ZWQiLCJjYWxsSG9vayIsInF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50IiwiYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsIiRkZXN0cm95IiwiZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiaG9va3NUb01lcmdlIiwiY3JlYXRlQ29tcG9uZW50IiwiYmFzZUN0b3IiLCJyZXNvbHZlQXN5bmNDb21wb25lbnQiLCJjcmVhdGVBc3luY1BsYWNlaG9sZGVyIiwicmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyIsIm1vZGVsIiwidHJhbnNmb3JtTW9kZWwiLCJmdW5jdGlvbmFsIiwibmF0aXZlT24iLCJpbnN0YWxsQ29tcG9uZW50SG9va3MiLCJfaXNDb21wb25lbnQiLCJfcGFyZW50Vm5vZGUiLCJpbmxpbmVUZW1wbGF0ZSIsInRvTWVyZ2UiLCJfbWVyZ2VkIiwibWVyZ2VIb29rJDEiLCJmMSIsImYyIiwiU0lNUExFX05PUk1BTElaRSIsIkFMV0FZU19OT1JNQUxJWkUiLCJub3JtYWxpemF0aW9uVHlwZSIsImFsd2F5c05vcm1hbGl6ZSIsIl9jcmVhdGVFbGVtZW50IiwiJHZub2RlIiwicHJlIiwiYXBwbHlOUyIsInJlZ2lzdGVyRGVlcEJpbmRpbmdzIiwiaW5pdFJlbmRlciIsIl92bm9kZSIsInBhcmVudFZub2RlIiwiX3JlbmRlckNoaWxkcmVuIiwicGFyZW50RGF0YSIsImlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCIsIl9wYXJlbnRMaXN0ZW5lcnMiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJyZW5kZXJNaXhpbiIsIlZ1ZSIsIiRuZXh0VGljayIsIl9yZW5kZXIiLCJyZW5kZXJFcnJvciIsImVuc3VyZUN0b3IiLCJjb21wIiwiX19lc01vZHVsZSIsImVycm9yQ29tcCIsInJlc29sdmVkIiwib3duZXIiLCJvd25lcnMiLCJsb2FkaW5nIiwibG9hZGluZ0NvbXAiLCJ0aW1lckxvYWRpbmciLCJ0aW1lclRpbWVvdXQiLCIkb24iLCJmb3JjZVJlbmRlciIsInJlbmRlckNvbXBsZXRlZCIsIiRmb3JjZVVwZGF0ZSIsImNvbXBvbmVudCIsImdldEZpcnN0Q29tcG9uZW50Q2hpbGQiLCJpbml0RXZlbnRzIiwiX2V2ZW50cyIsIl9oYXNIb29rRXZlbnQiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCJyZW1vdmUkMSIsIiRvZmYiLCJfdGFyZ2V0Iiwib2xkTGlzdGVuZXJzIiwiZXZlbnRzTWl4aW4iLCJob29rUkUiLCIkb25jZSIsImNicyIsIiRlbWl0IiwibG93ZXJDYXNlRXZlbnQiLCJzZXRBY3RpdmVJbnN0YW5jZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsImluaXRMaWZlY3ljbGUiLCIkY2hpbGRyZW4iLCIkcmVmcyIsIl93YXRjaGVyIiwiX2luYWN0aXZlIiwiX2RpcmVjdEluYWN0aXZlIiwiX2lzQmVpbmdEZXN0cm95ZWQiLCJsaWZlY3ljbGVNaXhpbiIsIl91cGRhdGUiLCJwcmV2Vm5vZGUiLCJyZXN0b3JlQWN0aXZlSW5zdGFuY2UiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwidGVhcmRvd24iLCJfd2F0Y2hlcnMiLCJtb3VudENvbXBvbmVudCIsInRlbXBsYXRlIiwidXBkYXRlQ29tcG9uZW50IiwiX25hbWUiLCJfdWlkIiwiV2F0Y2hlciIsInJlbmRlckNoaWxkcmVuIiwibmV3U2NvcGVkU2xvdHMiLCJvbGRTY29wZWRTbG90cyIsImhhc0R5bmFtaWNTY29wZWRTbG90IiwibmVlZHNGb3JjZVVwZGF0ZSIsIiRhdHRycyIsIiRsaXN0ZW5lcnMiLCJwcm9wS2V5cyIsIl9wcm9wS2V5cyIsImlzSW5JbmFjdGl2ZVRyZWUiLCJkaXJlY3QiLCJNQVhfVVBEQVRFX0NPVU5UIiwiYWN0aXZhdGVkQ2hpbGRyZW4iLCJjaXJjdWxhciIsIndhaXRpbmciLCJmbHVzaGluZyIsInJlc2V0U2NoZWR1bGVyU3RhdGUiLCJjdXJyZW50Rmx1c2hUaW1lc3RhbXAiLCJnZXROb3ciLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsInVzZXIiLCJleHByZXNzaW9uIiwiYWN0aXZhdGVkUXVldWUiLCJ1cGRhdGVkUXVldWUiLCJjYWxsQWN0aXZhdGVkSG9va3MiLCJjYWxsVXBkYXRlZEhvb2tzIiwicXVldWVXYXRjaGVyIiwidWlkJDIiLCJleHBPckZuIiwiaXNSZW5kZXJXYXRjaGVyIiwiZGVlcCIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJjbGVhbnVwRGVwcyIsInRtcCIsIm9sZFZhbHVlIiwiZXZhbHVhdGUiLCJzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24iLCJzb3VyY2VLZXkiLCJwcm94eUdldHRlciIsInByb3h5U2V0dGVyIiwiaW5pdFN0YXRlIiwiaW5pdFByb3BzIiwiaW5pdE1ldGhvZHMiLCJpbml0RGF0YSIsImluaXRDb21wdXRlZCIsImluaXRXYXRjaCIsInByb3BzT3B0aW9ucyIsImlzUm9vdCIsImdldERhdGEiLCJjb21wdXRlZFdhdGNoZXJPcHRpb25zIiwid2F0Y2hlcnMiLCJfY29tcHV0ZWRXYXRjaGVycyIsImlzU1NSIiwidXNlckRlZiIsImRlZmluZUNvbXB1dGVkIiwic2hvdWxkQ2FjaGUiLCJjcmVhdGVDb21wdXRlZEdldHRlciIsImNyZWF0ZUdldHRlckludm9rZXIiLCJjb21wdXRlZEdldHRlciIsImNyZWF0ZVdhdGNoZXIiLCIkd2F0Y2giLCJzdGF0ZU1peGluIiwiZGF0YURlZiIsInByb3BzRGVmIiwiJHNldCIsIiRkZWxldGUiLCJpbW1lZGlhdGUiLCJ1bndhdGNoRm4iLCJ1aWQkMyIsImluaXRNaXhpbiIsIl9pbml0IiwiaW5pdEludGVybmFsQ29tcG9uZW50IiwiX3NlbGYiLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJzdXBlck9wdGlvbnMiLCJjYWNoZWRTdXBlck9wdGlvbnMiLCJtb2RpZmllZE9wdGlvbnMiLCJyZXNvbHZlTW9kaWZpZWRPcHRpb25zIiwiZXh0ZW5kT3B0aW9ucyIsIm1vZGlmaWVkIiwibGF0ZXN0Iiwic2VhbGVkIiwic2VhbGVkT3B0aW9ucyIsImluaXRVc2UiLCJfaW5zdGFsbGVkUGx1Z2lucyIsImluaXRNaXhpbiQxIiwibWl4aW4iLCJpbml0RXh0ZW5kIiwiU3VwZXIiLCJTdXBlcklkIiwiY2FjaGVkQ3RvcnMiLCJfQ3RvciIsIlN1YiIsIlZ1ZUNvbXBvbmVudCIsImluaXRQcm9wcyQxIiwiaW5pdENvbXB1dGVkJDEiLCJDb21wIiwiaW5pdEFzc2V0UmVnaXN0ZXJzIiwiZGVmaW5pdGlvbiIsImdldENvbXBvbmVudE5hbWUiLCJwcnVuZUNhY2hlIiwia2VlcEFsaXZlSW5zdGFuY2UiLCJjYWNoZWROb2RlIiwicHJ1bmVDYWNoZUVudHJ5IiwiY2FjaGVkJCQxIiwicGF0dGVyblR5cGVzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJjcmVhdGVkIiwibW91bnRlZCIsInJlZiQxIiwiYnVpbHRJbkNvbXBvbmVudHMiLCJpbml0R2xvYmFsQVBJIiwiY29uZmlnRGVmIiwidXRpbCIsImRlZmluZVJlYWN0aXZlIiwib2JzZXJ2YWJsZSIsInNzckNvbnRleHQiLCJhY2NlcHRWYWx1ZSIsImlzRW51bWVyYXRlZEF0dHIiLCJpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUiLCJjb252ZXJ0RW51bWVyYXRlZFZhbHVlIiwiaXNGYWxzeUF0dHJWYWx1ZSIsImlzQm9vbGVhbkF0dHIiLCJ4bGlua05TIiwiaXNYbGluayIsImdldFhsaW5rUHJvcCIsImdlbkNsYXNzRm9yVm5vZGUiLCJjaGlsZE5vZGUiLCJtZXJnZUNsYXNzRGF0YSIsInJlbmRlckNsYXNzIiwic3RhdGljQ2xhc3MiLCJkeW5hbWljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInN0cmluZ2lmeUFycmF5Iiwic3RyaW5naWZ5T2JqZWN0Iiwic3RyaW5naWZpZWQiLCJuYW1lc3BhY2VNYXAiLCJtYXRoIiwiaXNIVE1MVGFnIiwiaXNTVkciLCJ1bmtub3duRWxlbWVudENhY2hlIiwiSFRNTFVua25vd25FbGVtZW50IiwiaXNUZXh0SW5wdXRUeXBlIiwiY3JlYXRlRWxlbWVudCQxIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlQ29tbWVudCIsIm5ld05vZGUiLCJyZWZlcmVuY2VOb2RlIiwic2V0VGV4dENvbnRlbnQiLCJzZXRTdHlsZVNjb3BlIiwic2NvcGVJZCIsIm5vZGVPcHMiLCJyZWdpc3RlclJlZiIsImlzUmVtb3ZhbCIsInJlZnMiLCJyZWZJbkZvciIsImVtcHR5Tm9kZSIsInNhbWVWbm9kZSIsInNhbWVJbnB1dFR5cGUiLCJ0eXBlQSIsInR5cGVCIiwiY3JlYXRlS2V5VG9PbGRJZHgiLCJiZWdpbklkeCIsImVuZElkeCIsImNyZWF0ZVBhdGNoRnVuY3Rpb24iLCJiYWNrZW5kIiwiZW1wdHlOb2RlQXQiLCJjcmVhdGVSbUNiIiwiY2hpbGRFbG0iLCJyZW1vdmVOb2RlIiwiaXNVbmtub3duRWxlbWVudCQkMSIsImluVlByZSIsImNyZWF0aW5nRWxtSW5WUHJlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwicGFyZW50RWxtIiwicmVmRWxtIiwib3duZXJBcnJheSIsInNldFNjb3BlIiwiY3JlYXRlQ2hpbGRyZW4iLCJpbnZva2VDcmVhdGVIb29rcyIsImlzUmVhY3RpdmF0ZWQiLCJpbml0Q29tcG9uZW50IiwicmVhY3RpdmF0ZUNvbXBvbmVudCIsInBlbmRpbmdJbnNlcnQiLCJpc1BhdGNoYWJsZSIsImlubmVyTm9kZSIsImFjdGl2YXRlIiwicmVmJCQxIiwiY2hlY2tEdXBsaWNhdGVLZXlzIiwiYW5jZXN0b3IiLCJhZGRWbm9kZXMiLCJzdGFydElkeCIsImludm9rZURlc3Ryb3lIb29rIiwicmVtb3ZlVm5vZGVzIiwiY2giLCJyZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rIiwicm0iLCJ1cGRhdGVDaGlsZHJlbiIsIm9sZENoIiwibmV3Q2giLCJyZW1vdmVPbmx5Iiwib2xkU3RhcnRJZHgiLCJuZXdTdGFydElkeCIsIm9sZEVuZElkeCIsIm9sZFN0YXJ0Vm5vZGUiLCJvbGRFbmRWbm9kZSIsIm5ld0VuZElkeCIsIm5ld1N0YXJ0Vm5vZGUiLCJuZXdFbmRWbm9kZSIsIm9sZEtleVRvSWR4IiwiaWR4SW5PbGQiLCJ2bm9kZVRvTW92ZSIsImNhbk1vdmUiLCJwYXRjaFZub2RlIiwiZmluZElkeEluT2xkIiwic2VlbktleXMiLCJoeWRyYXRlIiwicG9zdHBhdGNoIiwiaW52b2tlSW5zZXJ0SG9vayIsImh5ZHJhdGlvbkJhaWxlZCIsImlzUmVuZGVyZWRNb2R1bGUiLCJhc3NlcnROb2RlTWF0Y2giLCJoYXNDaGlsZE5vZGVzIiwiY2hpbGRyZW5NYXRjaCIsImZ1bGxJbnZva2UiLCJwYXRjaCIsImlzSW5pdGlhbFBhdGNoIiwiaXNSZWFsRWxlbWVudCIsIm9sZEVsbSIsIl9sZWF2ZUNiIiwicGF0Y2hhYmxlIiwiaSQyIiwidXBkYXRlRGlyZWN0aXZlcyIsInVuYmluZERpcmVjdGl2ZXMiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZERpciIsImNhbGxIb29rJDEiLCJvbGRBcmciLCJhcmciLCJjb21wb25lbnRVcGRhdGVkIiwiY2FsbEluc2VydCIsImVtcHR5TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsInJhd05hbWUiLCJiYXNlTW9kdWxlcyIsInVwZGF0ZUF0dHJzIiwiaW5oZXJpdEF0dHJzIiwib2xkQXR0cnMiLCJzZXRBdHRyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJiYXNlU2V0QXR0ciIsInNldEF0dHJpYnV0ZU5TIiwiX19pZXBoIiwiYmxvY2tlciIsInVwZGF0ZUNsYXNzIiwib2xkRGF0YSIsImNscyIsInRyYW5zaXRpb25DbGFzcyIsIl90cmFuc2l0aW9uQ2xhc3NlcyIsIl9wcmV2Q2xhc3MiLCJrbGFzcyIsIlJBTkdFX1RPS0VOIiwiQ0hFQ0tCT1hfUkFESU9fVE9LRU4iLCJub3JtYWxpemVFdmVudHMiLCJ0YXJnZXQkMSIsImNyZWF0ZU9uY2VIYW5kbGVyJDEiLCJyZW1vdmUkMiIsInVzZU1pY3JvdGFza0ZpeCIsImFkZCQxIiwiYXR0YWNoZWRUaW1lc3RhbXAiLCJvd25lckRvY3VtZW50IiwidXBkYXRlRE9NTGlzdGVuZXJzIiwic3ZnQ29udGFpbmVyIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsIl92YWx1ZSIsInN0ckN1ciIsInNob3VsZFVwZGF0ZVZhbHVlIiwiY2hlY2tWYWwiLCJjb21wb3NpbmciLCJpc05vdEluRm9jdXNBbmREaXJ0eSIsImlzRGlydHlXaXRoTW9kaWZpZXJzIiwibm90SW5Gb2N1cyIsIl92TW9kaWZpZXJzIiwicGFyc2VTdHlsZVRleHQiLCJjc3NUZXh0IiwibGlzdERlbGltaXRlciIsInByb3BlcnR5RGVsaW1pdGVyIiwibm9ybWFsaXplU3R5bGVEYXRhIiwibm9ybWFsaXplU3R5bGVCaW5kaW5nIiwic3RhdGljU3R5bGUiLCJiaW5kaW5nU3R5bGUiLCJjaGVja0NoaWxkIiwic3R5bGVEYXRhIiwiY3NzVmFyUkUiLCJpbXBvcnRhbnRSRSIsInNldFByb3AiLCJzZXRQcm9wZXJ0eSIsInZlbmRvck5hbWVzIiwiZW1wdHlTdHlsZSIsImNhcE5hbWUiLCJ1cGRhdGVTdHlsZSIsIm9sZFN0YXRpY1N0eWxlIiwib2xkU3R5bGVCaW5kaW5nIiwibm9ybWFsaXplZFN0eWxlIiwib2xkU3R5bGUiLCJuZXdTdHlsZSIsIndoaXRlc3BhY2VSRSIsInRhciIsInJlc29sdmVUcmFuc2l0aW9uIiwiYXV0b0Nzc1RyYW5zaXRpb24iLCJlbnRlckNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImxlYXZlQ2xhc3MiLCJsZWF2ZVRvQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwiaGFzVHJhbnNpdGlvbiIsIlRSQU5TSVRJT04iLCJBTklNQVRJT04iLCJ0cmFuc2l0aW9uUHJvcCIsInRyYW5zaXRpb25FbmRFdmVudCIsImFuaW1hdGlvblByb3AiLCJhbmltYXRpb25FbmRFdmVudCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ud2Via2l0dHJhbnNpdGlvbmVuZCIsIm9uYW5pbWF0aW9uZW5kIiwib253ZWJraXRhbmltYXRpb25lbmQiLCJuZXh0RnJhbWUiLCJhZGRUcmFuc2l0aW9uQ2xhc3MiLCJ0cmFuc2l0aW9uQ2xhc3NlcyIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImdldFRyYW5zaXRpb25JbmZvIiwicHJvcENvdW50IiwiZW5kZWQiLCJvbkVuZCIsInRyYW5zZm9ybVJFIiwidHJhbnNpdGlvbkRlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZHVyYXRpb25zIiwidG9NcyIsInRvZ2dsZURpc3BsYXkiLCJjYW5jZWxsZWQiLCJfZW50ZXJDYiIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiZW50ZXJDYW5jZWxsZWQiLCJhcHBlYXJDYW5jZWxsZWQiLCJ0cmFuc2l0aW9uTm9kZSIsImlzQXBwZWFyIiwic3RhcnRDbGFzcyIsImFjdGl2ZUNsYXNzIiwidG9DbGFzcyIsImJlZm9yZUVudGVySG9vayIsImVudGVySG9vayIsImFmdGVyRW50ZXJIb29rIiwiZW50ZXJDYW5jZWxsZWRIb29rIiwiZXhwbGljaXRFbnRlckR1cmF0aW9uIiwiY2hlY2tEdXJhdGlvbiIsImV4cGVjdHNDU1MiLCJ1c2VyV2FudHNDb250cm9sIiwiZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCIsInBlbmRpbmdOb2RlIiwiX3BlbmRpbmciLCJpc1ZhbGlkRHVyYXRpb24iLCJsZWF2ZUNhbmNlbGxlZCIsImRlbGF5TGVhdmUiLCJleHBsaWNpdExlYXZlRHVyYXRpb24iLCJwZXJmb3JtTGVhdmUiLCJpbnZva2VyRm5zIiwicGxhdGZvcm1Nb2R1bGVzIiwidm1vZGVsIiwiZGlyZWN0aXZlIiwiX3ZPcHRpb25zIiwic2V0U2VsZWN0ZWQiLCJnZXRWYWx1ZSIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25FbmQiLCJwcmV2T3B0aW9ucyIsImN1ck9wdGlvbnMiLCJuZWVkUmVzZXQiLCJoYXNOb01hdGNoaW5nT3B0aW9uIiwiYWN0dWFsbHlTZXRTZWxlY3RlZCIsImlzTXVsdGlwbGUiLCJzZWxlY3RlZEluZGV4IiwibG9jYXRlTm9kZSIsInRyYW5zaXRpb24kJDEiLCJvcmlnaW5hbERpc3BsYXkiLCJfX3ZPcmlnaW5hbERpc3BsYXkiLCJ1bmJpbmQiLCJwbGF0Zm9ybURpcmVjdGl2ZXMiLCJ0cmFuc2l0aW9uUHJvcHMiLCJtb2RlIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJyYXdDaGlsZCIsImhhc1BhcmVudFRyYW5zaXRpb24iLCJpc1NhbWVDaGlsZCIsIm9sZENoaWxkIiwiaXNOb3RUZXh0Tm9kZSIsImlzVlNob3dEaXJlY3RpdmUiLCJUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsImRlbGF5ZWRMZWF2ZSIsIm1vdmVDbGFzcyIsIlRyYW5zaXRpb25Hcm91cCIsImJlZm9yZU1vdW50Iiwia2VwdCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJyZW1vdmVkIiwiYyQxIiwidXBkYXRlZCIsImhhc01vdmUiLCJjYWxsUGVuZGluZ0NicyIsInJlY29yZFBvc2l0aW9uIiwiYXBwbHlUcmFuc2xhdGlvbiIsIl9yZWZsb3ciLCJtb3ZlZCIsIldlYmtpdFRyYW5zZm9ybSIsIl9tb3ZlQ2IiLCJwcm9wZXJ0eU5hbWUiLCJfaGFzTW92ZSIsIm9sZFBvcyIsImR4IiwiZHkiLCJwbGF0Zm9ybUNvbXBvbmVudHMiLCJpc05hdGl2ZVNtb290aFNjcm9sbEVuYWJsZWRPbiIsIm1ha2VTY3JvbGxlciIsImRlZmF1bHREdXJhdGlvbiIsImVkZ2VPZmZzZXQiLCJzY3JvbGxUaW1lb3V0SWQiLCJzZXRTY3JvbGxUaW1lb3V0SWQiLCJuZXdWYWx1ZSIsInN0b3BTY3JvbGwiLCJnZXRUb3BXaXRoRWRnZU9mZnNldCIsImdldFRvcE9mIiwic2Nyb2xsVG9ZIiwidGFyZ2V0WSIsIm9uRG9uZSIsImdldFkiLCJsb29wU2Nyb2xsIiwiZ2V0SGVpZ2h0Iiwic2Nyb2xsVG9FbGVtIiwic2Nyb2xsSW50b1ZpZXciLCJlbGVtSGVpZ2h0IiwiZWxlbUJvdHRvbSIsImNvbnRhaW5lckhlaWdodCIsImNvbnRhaW5lckJvdHRvbSIsInNjcm9sbFRvQ2VudGVyT2YiLCJzZXR1cCIsIm5ld0RlZmF1bHREdXJhdGlvbiIsIm5ld0VkZ2VPZmZzZXQiLCJpbnRvVmlldyIsImRvY0VsZW0iLCJnZXREb2NZIiwiemVuc2Nyb2xsIiwic2Nyb2xsaW5nRWxlbWVudCIsImNyZWF0ZVNjcm9sbGVyIiwic2Nyb2xsQ29udGFpbmVyIiwibm9aZW5zbW9vdGgiLCJpc0hpc3RvcnlTdXBwb3J0ZWQiLCJpc1Njcm9sbFJlc3RvcmF0aW9uU3VwcG9ydGVkIiwic2Nyb2xsUmVzdG9yYXRpb24iLCJ6ZW5zY3JvbGxZIiwidGFyZ2V0RWxlbSIsIlJFX25vWmVuc21vb3RoIiwiYW5jaG9yIiwiaGlzdG9yeVN0YXRlIiwic3Vic3RyaW5nIiwic2l0ZU1hbmFnZXIiLCJBbmltZU1hbmFnZXIiLCJhZGRTbGlkZUluIiwic2xpZGVyIiwiaW5uZXJUZXh0IiwibGluZUhlaWdodCIsImxpbmVIZWlnaHROdW1iZXIiLCJjaGlsZEFuaW1lIiwic2xpZGVyQW5pbWUiLCJzY3JvbGxDb250cm9sbGVyIiwiYW5pbWVNYW5hZ2VyIiwiRmlldHNlblN3aXBlciIsInNlY3Rpb24iLCJzbHVnIiwiZmlldHNTd2lwZXIiLCJuYXZJdGVtcyIsImZpZXRzZW5Td2lwZXIiLCJJbWFnZU1hbmFnZXIiLCJvYmplY3RGaXRJbWFnZXMiLCJpbWFnZU1hbmFnZXIiLCJldmVudEJ1cyIsInN3aXBlck1hbmFnZXIiLCJTd2lwZXJNYW5hZ2VyIiwic2VjdGlvbnMiLCJjb250YWluZXJzIiwib2Zmc2V0RnJvbVRvcCIsImFuaW1hdGlvbiIsIm1lZGl1bSIsImJhcmJhQ3NzIiwiQmFyYmFNYW5hZ2VyIiwibWFpbiIsInNjcmlwdHMiLCJldmFsIiwiYmFyYmFNYW5hZ2VyIiwiaW5pdEhlYWRlciIsImhlYWRlckVsZW1lbnQiLCJoZWFkZXIiLCJpbml0TmF2TWVudSIsIm5hdkVsZW1lbnQiLCJuYXZNZW51IiwiaW5pdEZvb3RlciIsImZvb3RlckVsZW1lbnQiLCJmb290ZXJXcmFwcGVyIiwiZm9vdGVyIiwiU2l0ZU1hbmFnZXIiLCJzY2VuZVNjcm9sbGVkVG9wIiwic2NlbmVTY3JvbGxlZEJvdHRvbSIsImFkZFRvZ2dsZU1lbnUiLCJhZGRUb2dnbGVGb290ZXIiLCJhZGRTY2VuZVNjcm9sbGVkVG9wIiwiYWRkU2NlbmVTY3JvbGxlZEJvdHRvbSIsImFkZEV2ZW50TGlzdGVuZXJzIiwidG9nZ2xlcyIsImRvY3VtZW50T2Zmc2V0IiwiZ2V0TGluZUhlaWdodCIsInRlbXAiLCJmb250U2l6ZSJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0RBQTBDLGdDQUFnQztBQUMxRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdFQUF3RCxrQkFBa0I7QUFDMUU7QUFDQSx5REFBaUQsY0FBYztBQUMvRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQXlDLGlDQUFpQztBQUMxRSx3SEFBZ0gsbUJBQW1CLEVBQUU7QUFDckk7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBMkIsMEJBQTBCLEVBQUU7QUFDdkQseUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQXNELCtEQUErRDs7QUFFckg7QUFDQTs7O0FBR0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDakZPQSxNQUFNQyxJQUFTO0FBQUEsYUFDWkEsQ0FEWSxHQUNaQTs7QUFBQUEsV0FDVEEsRUFBTUMsU0FBTkQsQ0FBZ0JFLElBQWhCRixHQUF1QixVQUFTRyxDQUFULEVBQXNCQyxDQUF0QixFQUFzQkE7QUFBQUEsVUFDdENDLElBQVMsSUFBSUwsQ0FBSixFQUQ2Qkk7QUFBQUEsVUFFdENFLElBQVFDLEtBQUtDLENBRnlCSjs7QUFFekJJLFVBQ2ZGLENBRGVFLEVBQ1I7QUFBQSxZQUNKQyxJQUFtQixJQUFSSCxDQUFRLEdBQUlILENBQUosR0FBa0JDLENBRGpDOztBQUNpQ0EsWUFDdkNLLENBRHVDTCxFQUM3QjtBQUFBO0FBRVpNLGNBQVFMLENB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UixDQUFjeW9CLFVBQXBELEdBQStELGFBQS9ELEdBQTZFaEgsT0FBTyxDQUFDemhCLEtBQVIsQ0FBYzgyRixRQUFySDtBQUNBRCxNQUFJLENBQUNoeEcsU0FBTCxHQUFpQixPQUFqQjtBQUNBZ3hHLE1BQUksR0FBR3AxRSxPQUFPLENBQUM5d0IsVUFBUixDQUFtQkYsV0FBbkIsQ0FBK0JvbUcsSUFBL0IsQ0FBUDtBQUVBLE1BQUlsRCxVQUFVLEdBQUdrRCxJQUFJLENBQUM3MUQsWUFBdEI7QUFDQTYxRCxNQUFJLENBQUNsbUcsVUFBTCxDQUFnQkMsV0FBaEIsQ0FBNEJpbUcsSUFBNUI7QUFDQSxTQUFPbEQsVUFBUDtBQUNELENBVE0sQyIsImZpbGUiOiJqcy90aGVtZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vdGhlbWUvc3JjL2luZGV4LmpzXCIpO1xuIiwiLy8gQSB0eXBlIG9mIHByb21pc2UtbGlrZSB0aGF0IHJlc29sdmVzIHN5bmNocm9ub3VzbHkgYW5kIHN1cHBvcnRzIG9ubHkgb25lIG9ic2VydmVyXG5leHBvcnQgY29uc3QgX1BhY3QgPSAoZnVuY3Rpb24oKSB7XG5cdGZ1bmN0aW9uIF9QYWN0KCkge31cblx0X1BhY3QucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuXHRcdGNvbnN0IHJlc3VsdCA9IG5ldyBfUGFjdCgpO1xuXHRcdGNvbnN0IHN0YXRlID0gdGhpcy5zO1xuXHRcdGlmIChzdGF0ZSkge1xuXHRcdFx0Y29uc3QgY2FsbGJhY2sgPSBzdGF0ZSAmIDEgPyBvbkZ1bGZpbGxlZCA6IG9uUmVqZWN0ZWQ7XG5cdFx0XHRpZiAoY2FsbGJhY2spIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRfc2V0dGxlKHJlc3VsdCwgMSwgY2FsbGJhY2sodGhpcy52KSk7XG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRfc2V0dGxlKHJlc3VsdCwgMiwgZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLm8gPSBmdW5jdGlvbihfdGhpcykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29uc3QgdmFsdWUgPSBfdGhpcy52O1xuXHRcdFx0XHRpZiAoX3RoaXMucyAmIDEpIHtcblx0XHRcdFx0XHRfc2V0dGxlKHJlc3VsdCwgMSwgb25GdWxmaWxsZWQgPyBvbkZ1bGZpbGxlZCh2YWx1ZSkgOiB2YWx1ZSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAob25SZWplY3RlZCkge1xuXHRcdFx0XHRcdF9zZXR0bGUocmVzdWx0LCAxLCBvblJlamVjdGVkKHZhbHVlKSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0X3NldHRsZShyZXN1bHQsIDIsIHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRfc2V0dGxlKHJlc3VsdCwgMiwgZSk7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cdHJldHVybiBfUGFjdDtcbn0pKCk7XG5cbi8vIFNldHRsZXMgYSBwYWN0IHN5bmNocm9ub3VzbHlcbmV4cG9ydCBmdW5jdGlvbiBfc2V0dGxlKHBhY3QsIHN0YXRlLCB2YWx1ZSkge1xuXHRpZiAoIXBhY3Qucykge1xuXHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIF9QYWN0KSB7XG5cdFx0XHRpZiAodmFsdWUucykge1xuXHRcdFx0XHRpZiAoc3RhdGUgJiAxKSB7XG5cdFx0XHRcdFx0c3RhdGUgPSB2YWx1ZS5zO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhbHVlID0gdmFsdWUudjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbHVlLm8gPSBfc2V0dGxlLmJpbmQobnVsbCwgcGFjdCwgc3RhdGUpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICh2YWx1ZSAmJiB2YWx1ZS50aGVuKSB7XG5cdFx0XHR2YWx1ZS50aGVuKF9zZXR0bGUuYmluZChudWxsLCBwYWN0LCBzdGF0ZSksIF9zZXR0bGUuYmluZChudWxsLCBwYWN0LCAyKSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHBhY3QucyA9IHN0YXRlO1xuXHRcdHBhY3QudiA9IHZhbHVlO1xuXHRcdGNvbnN0IG9ic2VydmVyID0gcGFjdC5vO1xuXHRcdGlmIChvYnNlcnZlcikge1xuXHRcdFx0b2JzZXJ2ZXIocGFjdCk7XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfaXNTZXR0bGVkUGFjdCh0aGVuYWJsZSkge1xuXHRyZXR1cm4gdGhlbmFibGUgaW5zdGFuY2VvZiBfUGFjdCAmJiB0aGVuYWJsZS5zICYgMTtcbn1cblxuLy8gQ29udmVydHMgYXJndW1lbnQgdG8gYSBmdW5jdGlvbiB0aGF0IGFsd2F5cyByZXR1cm5zIGEgUHJvbWlzZVxuZXhwb3J0IGZ1bmN0aW9uIF9hc3luYyhmKSB7XG5cdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRmb3IgKHZhciBhcmdzID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuXHRcdH1cblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZShmLmFwcGx5KHRoaXMsIGFyZ3MpKTtcblx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcblx0XHR9XG5cdH1cbn1cblxuLy8gQXdhaXRzIG9uIGEgdmFsdWUgdGhhdCBtYXkgb3IgbWF5IG5vdCBiZSBhIFByb21pc2UgKGVxdWl2YWxlbnQgdG8gdGhlIGF3YWl0IGtleXdvcmQgaW4gRVMyMDE1LCB3aXRoIGNvbnRpbnVhdGlvbnMgcGFzc2VkIGV4cGxpY2l0bHkpXG5leHBvcnQgZnVuY3Rpb24gX2F3YWl0KHZhbHVlLCB0aGVuLCBkaXJlY3QpIHtcblx0aWYgKGRpcmVjdCkge1xuXHRcdHJldHVybiB0aGVuID8gdGhlbih2YWx1ZSkgOiB2YWx1ZTtcblx0fVxuXHRpZiAoIXZhbHVlIHx8ICF2YWx1ZS50aGVuKSB7XG5cdFx0dmFsdWUgPSBQcm9taXNlLnJlc29sdmUodmFsdWUpO1xuXHR9XG5cdHJldHVybiB0aGVuID8gdmFsdWUudGhlbih0aGVuKSA6IHZhbHVlO1xufVxuXG4vLyBBd2FpdHMgb24gYSB2YWx1ZSB0aGF0IG1heSBvciBtYXkgbm90IGJlIGEgUHJvbWlzZSwgdGhlbiBpZ25vcmVzIGl0XG5leHBvcnQgZnVuY3Rpb24gX2F3YWl0SWdub3JlZCh2YWx1ZSwgZGlyZWN0KSB7XG5cdGlmICghZGlyZWN0KSB7XG5cdFx0cmV0dXJuIHZhbHVlICYmIHZhbHVlLnRoZW4gPyB2YWx1ZS50aGVuKF9lbXB0eSkgOiBQcm9taXNlLnJlc29sdmUoKTtcblx0fVxufVxuXG4vLyBQcm9jZWVkcyBhZnRlciBhIHZhbHVlIGhhcyByZXNvbHZlZCwgb3IgcHJvY2VlZHMgaW1tZWRpYXRlbHkgaWYgdGhlIHZhbHVlIGlzIG5vdCB0aGVuYWJsZVxuZXhwb3J0IGZ1bmN0aW9uIF9jb250aW51ZSh2YWx1ZSwgdGhlbikge1xuXHRyZXR1cm4gdmFsdWUgJiYgdmFsdWUudGhlbiA/IHZhbHVlLnRoZW4odGhlbikgOiB0aGVuKHZhbHVlKTtcbn1cblxuLy8gUHJvY2VlZHMgYWZ0ZXIgYSB2YWx1ZSBoYXMgcmVzb2x2ZWQsIG9yIHByb2NlZWRzIGltbWVkaWF0ZWx5IGlmIHRoZSB2YWx1ZSBpcyBub3QgdGhlbmFibGVcbmV4cG9ydCBmdW5jdGlvbiBfY29udGludWVJZ25vcmVkKHZhbHVlKSB7XG5cdGlmICh2YWx1ZSAmJiB2YWx1ZS50aGVuKSB7XG5cdFx0cmV0dXJuIHZhbHVlLnRoZW4oX2VtcHR5KTtcblx0fVxufVxuXG4vLyBBc3luY2hyb25vdXNseSBpdGVyYXRlIHRocm91Z2ggYW4gb2JqZWN0IHRoYXQgaGFzIGEgbGVuZ3RoIHByb3BlcnR5LCBwYXNzaW5nIHRoZSBpbmRleCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIGNhbGxiYWNrIChldmVuIGFzIHRoZSBsZW5ndGggcHJvcGVydHkgY2hhbmdlcylcbmV4cG9ydCBmdW5jdGlvbiBfZm9yVG8oYXJyYXksIGJvZHksIGNoZWNrKSB7XG5cdHZhciBpID0gLTEsIHBhY3QsIHJlamVjdDtcblx0ZnVuY3Rpb24gX2N5Y2xlKHJlc3VsdCkge1xuXHRcdHRyeSB7XG5cdFx0XHR3aGlsZSAoKytpIDwgYXJyYXkubGVuZ3RoICYmICghY2hlY2sgfHwgIWNoZWNrKCkpKSB7XG5cdFx0XHRcdHJlc3VsdCA9IGJvZHkoaSk7XG5cdFx0XHRcdGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4pIHtcblx0XHRcdFx0XHRpZiAoX2lzU2V0dGxlZFBhY3QocmVzdWx0KSkge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0LnY7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdC50aGVuKF9jeWNsZSwgcmVqZWN0IHx8IChyZWplY3QgPSBfc2V0dGxlLmJpbmQobnVsbCwgcGFjdCA9IG5ldyBfUGFjdCgpLCAyKSkpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKHBhY3QpIHtcblx0XHRcdFx0X3NldHRsZShwYWN0LCAxLCByZXN1bHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cGFjdCA9IHJlc3VsdDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRfc2V0dGxlKHBhY3QgfHwgKHBhY3QgPSBuZXcgUGFjdCgpKSwgMiwgZSk7XG5cdFx0fVxuXHR9XG5cdF9jeWNsZSgpO1xuXHRyZXR1cm4gcGFjdDtcbn1cblxuLy8gQXN5bmNocm9ub3VzbHkgaXRlcmF0ZSB0aHJvdWdoIGFuIG9iamVjdCdzIHByb3BlcnRpZXMgKGluY2x1ZGluZyBwcm9wZXJ0aWVzIGluaGVyaXRlZCBmcm9tIHRoZSBwcm90b3R5cGUpXG4vLyBVc2VzIGEgc25hcHNob3Qgb2YgdGhlIG9iamVjdCdzIHByb3BlcnRpZXNcbmV4cG9ydCBmdW5jdGlvbiBfZm9ySW4odGFyZ2V0LCBib2R5LCBjaGVjaykge1xuXHR2YXIga2V5cyA9IFtdO1xuXHRmb3IgKHZhciBrZXkgaW4gdGFyZ2V0KSB7XG5cdFx0a2V5cy5wdXNoKGtleSk7XG5cdH1cblx0cmV0dXJuIF9mb3JUbyhrZXlzLCBmdW5jdGlvbihpKSB7IHJldHVybiBib2R5KGtleXNbaV0pOyB9LCBjaGVjayk7XG59XG5cbi8vIEFzeW5jaHJvbm91c2x5IGl0ZXJhdGUgdGhyb3VnaCBhbiBvYmplY3QncyBvd24gcHJvcGVydGllcyAoZXhjbHVkaW5nIHByb3BlcnRpZXMgaW5oZXJpdGVkIGZyb20gdGhlIHByb3RvdHlwZSlcbi8vIFVzZXMgYSBzbmFwc2hvdCBvZiB0aGUgb2JqZWN0J3MgcHJvcGVydGllc1xuZXhwb3J0IGZ1bmN0aW9uIF9mb3JPd24odGFyZ2V0LCBib2R5LCBjaGVjaykge1xuXHR2YXIga2V5cyA9IFtdO1xuXHRmb3IgKHZhciBrZXkgaW4gdGFyZ2V0KSB7XG5cdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkpIHtcblx0XHRcdGtleXMucHVzaChrZXkpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gX2ZvclRvKGtleXMsIGZ1bmN0aW9uKGkpIHsgcmV0dXJuIGJvZHkoa2V5c1tpXSk7IH0sIGNoZWNrKTtcbn1cblxuLy8gQXN5bmNocm9ub3VzbHkgaXRlcmF0ZSB0aHJvdWdoIGFuIG9iamVjdCdzIHZhbHVlc1xuLy8gVXNlcyBmb3IuLi5vZiBpZiB0aGUgcnVudGltZSBzdXBwb3J0cyBpdCwgb3RoZXJ3aXNlIGl0ZXJhdGVzIHVudGlsIGxlbmd0aCBvbiBhIGNvcHlcbmV4cG9ydCBmdW5jdGlvbiBfZm9yT2YodGFyZ2V0LCBib2R5LCBjaGVjaykge1xuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdHZhciBpdGVyYXRvclN5bWJvbCA9IFN5bWJvbC5pdGVyYXRvcjtcblx0XHRpZiAoaXRlcmF0b3JTeW1ib2wgJiYgKGl0ZXJhdG9yU3ltYm9sIGluIHRhcmdldCkpIHtcblx0XHRcdHZhciBpdGVyYXRvciA9IHRhcmdldFtpdGVyYXRvclN5bWJvbF0oKSwgc3RlcCwgcGFjdCwgcmVqZWN0O1xuXHRcdFx0ZnVuY3Rpb24gX2N5Y2xlKHJlc3VsdCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUgJiYgKCFjaGVjayB8fCAhY2hlY2soKSkpIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IGJvZHkoc3RlcC52YWx1ZSk7XG5cdFx0XHRcdFx0XHRpZiAocmVzdWx0ICYmIHJlc3VsdC50aGVuKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChfaXNTZXR0bGVkUGFjdChyZXN1bHQpKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0LnY7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnRoZW4oX2N5Y2xlLCByZWplY3QgfHwgKHJlamVjdCA9IF9zZXR0bGUuYmluZChudWxsLCBwYWN0ID0gbmV3IF9QYWN0KCksIDIpKSk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwYWN0KSB7XG5cdFx0XHRcdFx0XHRfc2V0dGxlKHBhY3QsIDEsIHJlc3VsdCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHBhY3QgPSByZXN1bHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0X3NldHRsZShwYWN0IHx8IChwYWN0ID0gbmV3IFBhY3QoKSksIDIsIGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRfY3ljbGUoKTtcblx0XHRcdGlmIChpdGVyYXRvci5yZXR1cm4pIHtcblx0XHRcdFx0dmFyIF9maXh1cCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGlmICghc3RlcC5kb25lKSB7XG5cdFx0XHRcdFx0XHRcdGl0ZXJhdG9yLnJldHVybigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHBhY3QgJiYgcGFjdC50aGVuKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhY3QudGhlbihfZml4dXAsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0XHRcdHRocm93IF9maXh1cChlKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfZml4dXAoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwYWN0O1xuXHRcdH1cblx0fVxuXHQvLyBObyBzdXBwb3J0IGZvciBTeW1ib2wuaXRlcmF0b3Jcblx0aWYgKCEoXCJsZW5ndGhcIiBpbiB0YXJnZXQpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihcInZhbHVlIGlzIG5vdCBpdGVyYWJsZVwiKTtcblx0fVxuXHQvLyBIYW5kbGUgbGl2ZSBjb2xsZWN0aW9ucyBwcm9wZXJseVxuXHR2YXIgdmFsdWVzID0gW107XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgdGFyZ2V0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFsdWVzLnB1c2godGFyZ2V0W2ldKTtcblx0fVxuXHRyZXR1cm4gX2ZvclRvKHZhbHVlcywgZnVuY3Rpb24oaSkgeyByZXR1cm4gYm9keSh2YWx1ZXNbaV0pOyB9LCBjaGVjayk7XG59XG5cbi8vIEFzeW5jaHJvbm91c2x5IGl0ZXJhdGUgb24gYSB2YWx1ZSB1c2luZyBpdCdzIGFzeW5jIGl0ZXJhdG9yIGlmIHByZXNlbnQsIG9yIGl0cyBzeW5jaHJvbm91cyBpdGVyYXRvciBpZiBtaXNzaW5nXG5leHBvcnQgZnVuY3Rpb24gX2ZvckF3YWl0T2YodGFyZ2V0LCBib2R5LCBjaGVjaykge1xuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gU3ltYm9sLmFzeW5jSXRlcmF0b3I7XG5cdFx0aWYgKGFzeW5jSXRlcmF0b3JTeW1ib2wgJiYgKGFzeW5jSXRlcmF0b3JTeW1ib2wgaW4gdGFyZ2V0KSkge1xuXHRcdFx0dmFyIHBhY3QgPSBuZXcgX1BhY3QoKTtcblx0XHRcdHZhciBpdGVyYXRvciA9IHRhcmdldFthc3luY0l0ZXJhdG9yU3ltYm9sXSgpO1xuXHRcdFx0aXRlcmF0b3IubmV4dCgpLnRoZW4oX3Jlc3VtZUFmdGVyTmV4dCkudGhlbih2b2lkIDAsIF9yZWplY3QpO1xuXHRcdFx0cmV0dXJuIHBhY3Q7XG5cdFx0XHRmdW5jdGlvbiBfcmVzdW1lQWZ0ZXJCb2R5KHJlc3VsdCkge1xuXHRcdFx0XHRpZiAoY2hlY2sgJiYgIWNoZWNrKCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gX3NldHRsZShwYWN0LCAxLCBpdGVyYXRvci5yZXR1cm4gPyBpdGVyYXRvci5yZXR1cm4oKS50aGVuKGZ1bmN0aW9uKCkgeyByZXR1cm4gcmVzdWx0OyB9KSA6IHJlc3VsdCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aXRlcmF0b3IubmV4dCgpLnRoZW4oX3Jlc3VtZUFmdGVyTmV4dCkudGhlbih2b2lkIDAsIF9yZWplY3QpO1xuXHRcdFx0fVxuXHRcdFx0ZnVuY3Rpb24gX3Jlc3VtZUFmdGVyTmV4dChzdGVwKSB7XG5cdFx0XHRcdGlmIChzdGVwLmRvbmUpIHtcblx0XHRcdFx0XHRfc2V0dGxlKHBhY3QsIDEpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFByb21pc2UucmVzb2x2ZShib2R5KHN0ZXAudmFsdWUpKS50aGVuKF9yZXN1bWVBZnRlckJvZHkpLnRoZW4odm9pZCAwLCBfcmVqZWN0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZnVuY3Rpb24gX3JlamVjdChlcnJvcikge1xuXHRcdFx0XHRfc2V0dGxlKHBhY3QsIDIsIGl0ZXJhdG9yLnJldHVybiA/IGl0ZXJhdG9yLnJldHVybigpLnRoZW4oZnVuY3Rpb24oKSB7IHJldHVybiBlcnJvcjsgfSkgOiBlcnJvcik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUoX2Zvck9mKHRhcmdldCwgZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihib2R5KTsgfSwgY2hlY2spKTtcbn1cblxuLy8gQXN5bmNocm9ub3VzbHkgaW1wbGVtZW50IGEgZ2VuZXJpYyBmb3IgbG9vcFxuZXhwb3J0IGZ1bmN0aW9uIF9mb3IodGVzdCwgdXBkYXRlLCBib2R5KSB7XG5cdHZhciBzdGFnZTtcblx0Zm9yICg7Oykge1xuXHRcdHZhciBzaG91bGRDb250aW51ZSA9IHRlc3QoKTtcblx0XHRpZiAoX2lzU2V0dGxlZFBhY3Qoc2hvdWxkQ29udGludWUpKSB7XG5cdFx0XHRzaG91bGRDb250aW51ZSA9IHNob3VsZENvbnRpbnVlLnY7XG5cdFx0fVxuXHRcdGlmICghc2hvdWxkQ29udGludWUpIHtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHRcdGlmIChzaG91bGRDb250aW51ZS50aGVuKSB7XG5cdFx0XHRzdGFnZSA9IDA7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0dmFyIHJlc3VsdCA9IGJvZHkoKTtcblx0XHRpZiAocmVzdWx0ICYmIHJlc3VsdC50aGVuKSB7XG5cdFx0XHRpZiAoX2lzU2V0dGxlZFBhY3QocmVzdWx0KSkge1xuXHRcdFx0XHRyZXN1bHQgPSByZXN1bHQucztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHN0YWdlID0gMTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICh1cGRhdGUpIHtcblx0XHRcdHZhciB1cGRhdGVWYWx1ZSA9IHVwZGF0ZSgpO1xuXHRcdFx0aWYgKHVwZGF0ZVZhbHVlICYmIHVwZGF0ZVZhbHVlLnRoZW4gJiYgIV9pc1NldHRsZWRQYWN0KHVwZGF0ZVZhbHVlKSkge1xuXHRcdFx0XHRzdGFnZSA9IDI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHR2YXIgcGFjdCA9IG5ldyBfUGFjdCgpO1xuXHR2YXIgcmVqZWN0ID0gX3NldHRsZS5iaW5kKG51bGwsIHBhY3QsIDIpO1xuXHQoc3RhZ2UgPT09IDAgPyBzaG91bGRDb250aW51ZS50aGVuKF9yZXN1bWVBZnRlclRlc3QpIDogc3RhZ2UgPT09IDEgPyByZXN1bHQudGhlbihfcmVzdW1lQWZ0ZXJCb2R5KSA6IHVwZGF0ZVZhbHVlLnRoZW4oX3Jlc3VtZUFmdGVyVXBkYXRlKSkudGhlbih2b2lkIDAsIHJlamVjdCk7XG5cdHJldHVybiBwYWN0O1xuXHRmdW5jdGlvbiBfcmVzdW1lQWZ0ZXJCb2R5KHZhbHVlKSB7XG5cdFx0cmVzdWx0ID0gdmFsdWU7XG5cdFx0ZG8ge1xuXHRcdFx0aWYgKHVwZGF0ZSkge1xuXHRcdFx0XHR1cGRhdGVWYWx1ZSA9IHVwZGF0ZSgpO1xuXHRcdFx0XHRpZiAodXBkYXRlVmFsdWUgJiYgdXBkYXRlVmFsdWUudGhlbiAmJiAhX2lzU2V0dGxlZFBhY3QodXBkYXRlVmFsdWUpKSB7XG5cdFx0XHRcdFx0dXBkYXRlVmFsdWUudGhlbihfcmVzdW1lQWZ0ZXJVcGRhdGUpLnRoZW4odm9pZCAwLCByZWplY3QpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0c2hvdWxkQ29udGludWUgPSB0ZXN0KCk7XG5cdFx0XHRpZiAoIXNob3VsZENvbnRpbnVlIHx8IChfaXNTZXR0bGVkUGFjdChzaG91bGRDb250aW51ZSkgJiYgIXNob3VsZENvbnRpbnVlLnYpKSB7XG5cdFx0XHRcdF9zZXR0bGUocGFjdCwgMSwgcmVzdWx0KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNob3VsZENvbnRpbnVlLnRoZW4pIHtcblx0XHRcdFx0c2hvdWxkQ29udGludWUudGhlbihfcmVzdW1lQWZ0ZXJUZXN0KS50aGVuKHZvaWQgMCwgcmVqZWN0KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0cmVzdWx0ID0gYm9keSgpO1xuXHRcdFx0aWYgKF9pc1NldHRsZWRQYWN0KHJlc3VsdCkpIHtcblx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0LnY7XG5cdFx0XHR9XG5cdFx0fSB3aGlsZSAoIXJlc3VsdCB8fCAhcmVzdWx0LnRoZW4pO1xuXHRcdHJlc3VsdC50aGVuKF9yZXN1bWVBZnRlckJvZHkpLnRoZW4odm9pZCAwLCByZWplY3QpO1xuXHR9XG5cdGZ1bmN0aW9uIF9yZXN1bWVBZnRlclRlc3Qoc2hvdWxkQ29udGludWUpIHtcblx0XHRpZiAoc2hvdWxkQ29udGludWUpIHtcblx0XHRcdHJlc3VsdCA9IGJvZHkoKTtcblx0XHRcdGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4pIHtcblx0XHRcdFx0cmVzdWx0LnRoZW4oX3Jlc3VtZUFmdGVyQm9keSkudGhlbih2b2lkIDAsIHJlamVjdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRfcmVzdW1lQWZ0ZXJCb2R5KHJlc3VsdCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdF9zZXR0bGUocGFjdCwgMSwgcmVzdWx0KTtcblx0XHR9XG5cdH1cblx0ZnVuY3Rpb24gX3Jlc3VtZUFmdGVyVXBkYXRlKCkge1xuXHRcdGlmIChzaG91bGRDb250aW51ZSA9IHRlc3QoKSkge1xuXHRcdFx0aWYgKHNob3VsZENvbnRpbnVlLnRoZW4pIHtcblx0XHRcdFx0c2hvdWxkQ29udGludWUudGhlbihfcmVzdW1lQWZ0ZXJUZXN0KS50aGVuKHZvaWQgMCwgcmVqZWN0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdF9yZXN1bWVBZnRlclRlc3Qoc2hvdWxkQ29udGludWUpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRfc2V0dGxlKHBhY3QsIDEsIHJlc3VsdCk7XG5cdFx0fVxuXHR9XG59XG5cbi8vIEFzeW5jaHJvbm91c2x5IGltcGxlbWVudCBhIGRvIC4uLiB3aGlsZSBsb29wXG5leHBvcnQgZnVuY3Rpb24gX2RvKGJvZHksIHRlc3QpIHtcblx0dmFyIGF3YWl0Qm9keTtcblx0ZG8ge1xuXHRcdHZhciByZXN1bHQgPSBib2R5KCk7XG5cdFx0aWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbikge1xuXHRcdFx0aWYgKF9pc1NldHRsZWRQYWN0KHJlc3VsdCkpIHtcblx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0LnY7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRhd2FpdEJvZHkgPSB0cnVlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIHNob3VsZENvbnRpbnVlID0gdGVzdCgpO1xuXHRcdGlmIChfaXNTZXR0bGVkUGFjdChzaG91bGRDb250aW51ZSkpIHtcblx0XHRcdHNob3VsZENvbnRpbnVlID0gc2hvdWxkQ29udGludWUudjtcblx0XHR9XG5cdFx0aWYgKCFzaG91bGRDb250aW51ZSkge1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH0gd2hpbGUgKCFzaG91bGRDb250aW51ZS50aGVuKTtcblx0Y29uc3QgcGFjdCA9IG5ldyBfUGFjdCgpO1xuXHRjb25zdCByZWplY3QgPSBfc2V0dGxlLmJpbmQobnVsbCwgcGFjdCwgMik7XG5cdChhd2FpdEJvZHkgPyByZXN1bHQudGhlbihfcmVzdW1lQWZ0ZXJCb2R5KSA6IHNob3VsZENvbnRpbnVlLnRoZW4oX3Jlc3VtZUFmdGVyVGVzdCkpLnRoZW4odm9pZCAwLCByZWplY3QpO1xuXHRyZXR1cm4gcGFjdDtcblx0ZnVuY3Rpb24gX3Jlc3VtZUFmdGVyQm9keSh2YWx1ZSkge1xuXHRcdHJlc3VsdCA9IHZhbHVlO1xuXHRcdGZvciAoOzspIHtcblx0XHRcdHNob3VsZENvbnRpbnVlID0gdGVzdCgpO1xuXHRcdFx0aWYgKF9pc1NldHRsZWRQYWN0KHNob3VsZENvbnRpbnVlKSkge1xuXHRcdFx0XHRzaG91bGRDb250aW51ZSA9IHNob3VsZENvbnRpbnVlLnY7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIXNob3VsZENvbnRpbnVlKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNob3VsZENvbnRpbnVlLnRoZW4pIHtcblx0XHRcdFx0c2hvdWxkQ29udGludWUudGhlbihfcmVzdW1lQWZ0ZXJUZXN0KS50aGVuKHZvaWQgMCwgcmVqZWN0KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0cmVzdWx0ID0gYm9keSgpO1xuXHRcdFx0aWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbikge1xuXHRcdFx0XHRpZiAoX2lzU2V0dGxlZFBhY3QocmVzdWx0KSkge1xuXHRcdFx0XHRcdHJlc3VsdCA9IHJlc3VsdC52O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJlc3VsdC50aGVuKF9yZXN1bWVBZnRlckJvZHkpLnRoZW4odm9pZCAwLCByZWplY3QpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRfc2V0dGxlKHBhY3QsIDEsIHJlc3VsdCk7XG5cdH1cblx0ZnVuY3Rpb24gX3Jlc3VtZUFmdGVyVGVzdChzaG91bGRDb250aW51ZSkge1xuXHRcdGlmIChzaG91bGRDb250aW51ZSkge1xuXHRcdFx0ZG8ge1xuXHRcdFx0XHRyZXN1bHQgPSBib2R5KCk7XG5cdFx0XHRcdGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4pIHtcblx0XHRcdFx0XHRpZiAoX2lzU2V0dGxlZFBhY3QocmVzdWx0KSkge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0LnY7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdC50aGVuKF9yZXN1bWVBZnRlckJvZHkpLnRoZW4odm9pZCAwLCByZWplY3QpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzaG91bGRDb250aW51ZSA9IHRlc3QoKTtcblx0XHRcdFx0aWYgKF9pc1NldHRsZWRQYWN0KHNob3VsZENvbnRpbnVlKSkge1xuXHRcdFx0XHRcdHNob3VsZENvbnRpbnVlID0gc2hvdWxkQ29udGludWUudjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXNob3VsZENvbnRpbnVlKSB7XG5cdFx0XHRcdFx0X3NldHRsZShwYWN0LCAxLCByZXN1bHQpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fSB3aGlsZSAoIXNob3VsZENvbnRpbnVlLnRoZW4pO1xuXHRcdFx0c2hvdWxkQ29udGludWUudGhlbihfcmVzdW1lQWZ0ZXJUZXN0KS50aGVuKHZvaWQgMCwgcmVqZWN0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0X3NldHRsZShwYWN0LCAxLCByZXN1bHQpO1xuXHRcdH1cblx0fVxufVxuXG4vLyBBc3luY2hyb25vdXNseSBpbXBsZW1lbnQgYSBzd2l0Y2ggc3RhdGVtZW50XG5leHBvcnQgZnVuY3Rpb24gX3N3aXRjaChkaXNjcmltaW5hbnQsIGNhc2VzKSB7XG5cdHZhciBkaXNwYXRjaEluZGV4ID0gLTE7XG5cdHZhciBhd2FpdEJvZHk7XG5cdG91dGVyOiB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjYXNlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHRlc3QgPSBjYXNlc1tpXVswXTtcblx0XHRcdGlmICh0ZXN0KSB7XG5cdFx0XHRcdHZhciB0ZXN0VmFsdWUgPSB0ZXN0KCk7XG5cdFx0XHRcdGlmICh0ZXN0VmFsdWUgJiYgdGVzdFZhbHVlLnRoZW4pIHtcblx0XHRcdFx0XHRicmVhayBvdXRlcjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGVzdFZhbHVlID09PSBkaXNjcmltaW5hbnQpIHtcblx0XHRcdFx0XHRkaXNwYXRjaEluZGV4ID0gaTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gRm91bmQgdGhlIGRlZmF1bHQgY2FzZSwgc2V0IGl0IGFzIHRoZSBwZW5kaW5nIGRpc3BhdGNoIGNhc2Vcblx0XHRcdFx0ZGlzcGF0Y2hJbmRleCA9IGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChkaXNwYXRjaEluZGV4ICE9PSAtMSkge1xuXHRcdFx0ZG8ge1xuXHRcdFx0XHR2YXIgYm9keSA9IGNhc2VzW2Rpc3BhdGNoSW5kZXhdWzFdO1xuXHRcdFx0XHR3aGlsZSAoIWJvZHkpIHtcblx0XHRcdFx0XHRkaXNwYXRjaEluZGV4Kys7XG5cdFx0XHRcdFx0Ym9keSA9IGNhc2VzW2Rpc3BhdGNoSW5kZXhdWzFdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciByZXN1bHQgPSBib2R5KCk7XG5cdFx0XHRcdGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4pIHtcblx0XHRcdFx0XHRhd2FpdEJvZHkgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrIG91dGVyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBmYWxsdGhyb3VnaENoZWNrID0gY2FzZXNbZGlzcGF0Y2hJbmRleF1bMl07XG5cdFx0XHRcdGRpc3BhdGNoSW5kZXgrKztcblx0XHRcdH0gd2hpbGUgKGZhbGx0aHJvdWdoQ2hlY2sgJiYgIWZhbGx0aHJvdWdoQ2hlY2soKSk7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXHRjb25zdCBwYWN0ID0gbmV3IF9QYWN0KCk7XG5cdGNvbnN0IHJlamVjdCA9IF9zZXR0bGUuYmluZChudWxsLCBwYWN0LCAyKTtcblx0KGF3YWl0Qm9keSA/IHJlc3VsdC50aGVuKF9yZXN1bWVBZnRlckJvZHkpIDogdGVzdFZhbHVlLnRoZW4oX3Jlc3VtZUFmdGVyVGVzdCkpLnRoZW4odm9pZCAwLCByZWplY3QpO1xuXHRyZXR1cm4gcGFjdDtcblx0ZnVuY3Rpb24gX3Jlc3VtZUFmdGVyVGVzdCh2YWx1ZSkge1xuXHRcdGZvciAoOzspIHtcblx0XHRcdGlmICh2YWx1ZSA9PT0gZGlzY3JpbWluYW50KSB7XG5cdFx0XHRcdGRpc3BhdGNoSW5kZXggPSBpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICgrK2kgPT09IGNhc2VzLmxlbmd0aCkge1xuXHRcdFx0XHRpZiAoZGlzcGF0Y2hJbmRleCAhPT0gLTEpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRfc2V0dGxlKHBhY3QsIDEsIHJlc3VsdCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0ZXN0ID0gY2FzZXNbaV1bMF07XG5cdFx0XHRpZiAodGVzdCkge1xuXHRcdFx0XHR2YWx1ZSA9IHRlc3QoKTtcblx0XHRcdFx0aWYgKHZhbHVlICYmIHZhbHVlLnRoZW4pIHtcblx0XHRcdFx0XHR2YWx1ZS50aGVuKF9yZXN1bWVBZnRlclRlc3QpLnRoZW4odm9pZCAwLCByZWplY3QpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGlzcGF0Y2hJbmRleCA9IGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvIHtcblx0XHRcdHZhciBib2R5ID0gY2FzZXNbZGlzcGF0Y2hJbmRleF1bMV07XG5cdFx0XHR3aGlsZSAoIWJvZHkpIHtcblx0XHRcdFx0ZGlzcGF0Y2hJbmRleCsrO1xuXHRcdFx0XHRib2R5ID0gY2FzZXNbZGlzcGF0Y2hJbmRleF1bMV07XG5cdFx0XHR9XG5cdFx0XHR2YXIgcmVzdWx0ID0gYm9keSgpO1xuXHRcdFx0aWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbikge1xuXHRcdFx0XHRyZXN1bHQudGhlbihfcmVzdW1lQWZ0ZXJCb2R5KS50aGVuKHZvaWQgMCwgcmVqZWN0KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGZhbGx0aHJvdWdoQ2hlY2sgPSBjYXNlc1tkaXNwYXRjaEluZGV4XVsyXTtcblx0XHRcdGRpc3BhdGNoSW5kZXgrKztcblx0XHR9IHdoaWxlIChmYWxsdGhyb3VnaENoZWNrICYmICFmYWxsdGhyb3VnaENoZWNrKCkpO1xuXHRcdF9zZXR0bGUocGFjdCwgMSwgcmVzdWx0KTtcblx0fVxuXHRmdW5jdGlvbiBfcmVzdW1lQWZ0ZXJCb2R5KHJlc3VsdCkge1xuXHRcdGZvciAoOzspIHtcblx0XHRcdHZhciBmYWxsdGhyb3VnaENoZWNrID0gY2FzZXNbZGlzcGF0Y2hJbmRleF1bMl07XG5cdFx0XHRpZiAoIWZhbGx0aHJvdWdoQ2hlY2sgfHwgZmFsbHRocm91Z2hDaGVjaygpKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0ZGlzcGF0Y2hJbmRleCsrO1xuXHRcdFx0dmFyIGJvZHkgPSBjYXNlc1tkaXNwYXRjaEluZGV4XVsxXTtcblx0XHRcdHdoaWxlICghYm9keSkge1xuXHRcdFx0XHRkaXNwYXRjaEluZGV4Kys7XG5cdFx0XHRcdGJvZHkgPSBjYXNlc1tkaXNwYXRjaEluZGV4XVsxXTtcblx0XHRcdH1cblx0XHRcdHJlc3VsdCA9IGJvZHkoKTtcblx0XHRcdGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4pIHtcblx0XHRcdFx0cmVzdWx0LnRoZW4oX3Jlc3VtZUFmdGVyQm9keSkudGhlbih2b2lkIDAsIHJlamVjdCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cdFx0X3NldHRsZShwYWN0LCAxLCByZXN1bHQpO1xuXHR9XG59XG5cbi8vIEFzeW5jaHJvbm91c2x5IGNhbGwgYSBmdW5jdGlvbiBhbmQgcGFzcyB0aGUgcmVzdWx0IHRvIGV4cGxpY2l0bHkgcGFzc2VkIGNvbnRpbnVhdGlvbnNcbmV4cG9ydCBmdW5jdGlvbiBfY2FsbChib2R5LCB0aGVuLCBkaXJlY3QpIHtcblx0aWYgKGRpcmVjdCkge1xuXHRcdHJldHVybiB0aGVuID8gdGhlbihib2R5KCkpIDogYm9keSgpO1xuXHR9XG5cdHRyeSB7XG5cdFx0dmFyIHJlc3VsdCA9IFByb21pc2UucmVzb2x2ZShib2R5KCkpO1xuXHRcdHJldHVybiB0aGVuID8gcmVzdWx0LnRoZW4odGhlbikgOiByZXN1bHQ7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XG5cdH1cbn1cblxuLy8gQXN5bmNocm9ub3VzbHkgY2FsbCBhIGZ1bmN0aW9uIGFuZCBzd2FsbG93IHRoZSByZXN1bHRcbmV4cG9ydCBmdW5jdGlvbiBfY2FsbElnbm9yZWQoYm9keSwgZGlyZWN0KSB7XG5cdHJldHVybiBfY2FsbChib2R5LCBfZW1wdHksIGRpcmVjdCk7XG59XG5cbi8vIEFzeW5jaHJvbm91c2x5IGNhbGwgYSBmdW5jdGlvbiBhbmQgcGFzcyB0aGUgcmVzdWx0IHRvIGV4cGxpY2l0bHkgcGFzc2VkIGNvbnRpbnVhdGlvbnNcbmV4cG9ydCBmdW5jdGlvbiBfaW52b2tlKGJvZHksIHRoZW4pIHtcblx0dmFyIHJlc3VsdCA9IGJvZHkoKTtcblx0aWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbikge1xuXHRcdHJldHVybiByZXN1bHQudGhlbih0aGVuKTtcblx0fVxuXHRyZXR1cm4gdGhlbihyZXN1bHQpO1xufVxuXG4vLyBBc3luY2hyb25vdXNseSBjYWxsIGEgZnVuY3Rpb24gYW5kIHN3YWxsb3cgdGhlIHJlc3VsdFxuZXhwb3J0IGZ1bmN0aW9uIF9pbnZva2VJZ25vcmVkKGJvZHkpIHtcblx0dmFyIHJlc3VsdCA9IGJvZHkoKTtcblx0aWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbikge1xuXHRcdHJldHVybiByZXN1bHQudGhlbihfZW1wdHkpO1xuXHR9XG59XG5cbi8vIEFzeW5jaHJvbm91c2x5IGNhbGwgYSBmdW5jdGlvbiBhbmQgc2VuZCBlcnJvcnMgdG8gcmVjb3ZlcnkgY29udGludWF0aW9uXG5leHBvcnQgZnVuY3Rpb24gX2NhdGNoKGJvZHksIHJlY292ZXIpIHtcblx0dHJ5IHtcblx0XHR2YXIgcmVzdWx0ID0gYm9keSgpO1xuXHR9IGNhdGNoKGUpIHtcblx0XHRyZXR1cm4gcmVjb3ZlcihlKTtcblx0fVxuXHRpZiAocmVzdWx0ICYmIHJlc3VsdC50aGVuKSB7XG5cdFx0cmV0dXJuIHJlc3VsdC50aGVuKHZvaWQgMCwgcmVjb3Zlcik7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gQXN5bmNocm9ub3VzbHkgYXdhaXQgYSBwcm9taXNlIGFuZCBwYXNzIHRoZSByZXN1bHQgdG8gYSBmaW5hbGx5IGNvbnRpbnVhdGlvblxuZXhwb3J0IGZ1bmN0aW9uIF9maW5hbGx5UmV0aHJvd3MoYm9keSwgZmluYWxpemVyKSB7XG5cdHRyeSB7XG5cdFx0dmFyIHJlc3VsdCA9IGJvZHkoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmaW5hbGl6ZXIodHJ1ZSwgZSk7XG5cdH1cblx0aWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbikge1xuXHRcdHJldHVybiByZXN1bHQudGhlbihmaW5hbGl6ZXIuYmluZChudWxsLCBmYWxzZSksIGZpbmFsaXplci5iaW5kKG51bGwsIHRydWUpKTtcblx0fVxuXHRyZXR1cm4gZmluYWxpemVyKGZhbHNlLCB2YWx1ZSk7XG59XG5cbi8vIEFzeW5jaHJvbm91c2x5IGF3YWl0IGEgcHJvbWlzZSBhbmQgaW52b2tlIGEgZmluYWxseSBjb250aW51YXRpb24gdGhhdCBhbHdheXMgb3ZlcnJpZGVzIHRoZSByZXN1bHRcbmV4cG9ydCBmdW5jdGlvbiBfZmluYWxseShib2R5LCBmaW5hbGl6ZXIpIHtcblx0dHJ5IHtcblx0XHR2YXIgcmVzdWx0ID0gYm9keSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZpbmFsaXplcigpO1xuXHR9XG5cdGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4pIHtcblx0XHRyZXR1cm4gcmVzdWx0LnRoZW4oZmluYWxpemVyLCBmaW5hbGl6ZXIpO1xuXHR9XG5cdHJldHVybiBmaW5hbGl6ZXIoKTtcbn1cblxuLy8gUmV0aHJvdyBvciByZXR1cm4gYSB2YWx1ZSBmcm9tIGEgZmluYWxseSBjb250aW51YXRpb25cbmV4cG9ydCBmdW5jdGlvbiBfcmV0aHJvdyh0aHJvd24sIHZhbHVlKSB7XG5cdGlmICh0aHJvd24pXG5cdFx0dGhyb3cgdmFsdWU7XG5cdHJldHVybiB2YWx1ZTtcbn1cblxuLy8gRW1wdHkgZnVuY3Rpb24gdG8gaW1wbGVtZW50IGJyZWFrIGFuZCBvdGhlciBjb250cm9sIGZsb3cgdGhhdCBpZ25vcmVzIGFzeW5jaHJvbm91cyByZXN1bHRzXG5leHBvcnQgZnVuY3Rpb24gX2VtcHR5KCkge1xufVxuXG4vLyBTZW50aW5lbCB2YWx1ZSBmb3IgZWFybHkgcmV0dXJucyBpbiBnZW5lcmF0b3JzIFxuZXhwb3J0IGNvbnN0IF9lYXJseVJldHVybiA9IHt9O1xuXG4vLyBBc3luY2hyb25vdXNseSBjYWxsIGEgZnVuY3Rpb24gYW5kIHNlbmQgZXJyb3JzIHRvIHJlY292ZXJ5IGNvbnRpbnVhdGlvbiwgc2tpcHBpbmcgZWFybHkgcmV0dXJuc1xuZXhwb3J0IGZ1bmN0aW9uIF9jYXRjaEluR2VuZXJhdG9yKGJvZHksIHJlY292ZXIpIHtcblx0cmV0dXJuIF9jYXRjaChib2R5LCBmdW5jdGlvbihlKSB7XG5cdFx0aWYgKGUgPT09IF9lYXJseVJldHVybikge1xuXHRcdFx0dGhyb3cgZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlY292ZXIoZSk7XG5cdH0pO1xufVxuXG4vLyBBc3luY2hyb25vdXMgZ2VuZXJhdG9yIGNsYXNzOyBhY2NlcHRzIHRoZSBlbnRyeXBvaW50IG9mIHRoZSBnZW5lcmF0b3IsIHRvIHdoaWNoIGl0IHBhc3NlcyBpdHNlbGYgd2hlbiB0aGUgZ2VuZXJhdG9yIHNob3VsZCBzdGFydFxuZXhwb3J0IGNvbnN0IF9Bc3luY0dlbmVyYXRvciA9IChmdW5jdGlvbigpIHtcblx0ZnVuY3Rpb24gX0FzeW5jR2VuZXJhdG9yKGVudHJ5KSB7XG5cdFx0dGhpcy5fZW50cnkgPSBlbnRyeTtcblx0XHR0aGlzLl9wYWN0ID0gbnVsbDtcblx0XHR0aGlzLl9yZXNvbHZlID0gbnVsbDtcblx0XHR0aGlzLl9yZXR1cm4gPSBudWxsO1xuXHRcdHRoaXMuX3Byb21pc2UgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gX3dyYXBSZXR1cm5lZFZhbHVlKHZhbHVlKSB7XG5cdFx0cmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiB0cnVlIH07XG5cdH1cblx0ZnVuY3Rpb24gX3dyYXBZaWVsZGVkVmFsdWUodmFsdWUpIHtcblx0XHRyZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6IGZhbHNlIH07XG5cdH1cblxuXHRfQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlW1N5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IChTeW1ib2wuYXN5bmNJdGVyYXRvciA9IFN5bWJvbChcIlN5bWJvbC5hc3luY0l0ZXJhdG9yXCIpKV0gPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblx0X0FzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS5feWllbGQgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdC8vIFlpZWxkIHRoZSB2YWx1ZSB0byB0aGUgcGVuZGluZyBuZXh0IGNhbGxcblx0XHR0aGlzLl9yZXNvbHZlKHZhbHVlICYmIHZhbHVlLnRoZW4gPyB2YWx1ZS50aGVuKF93cmFwWWllbGRlZFZhbHVlKSA6IF93cmFwWWllbGRlZFZhbHVlKHZhbHVlKSk7XG5cdFx0Ly8gUmV0dXJuIGEgcGFjdCBmb3IgYW4gdXBjb21pbmcgbmV4dC9yZXR1cm4vdGhyb3cgY2FsbFxuXHRcdHJldHVybiB0aGlzLl9wYWN0ID0gbmV3IF9QYWN0KCk7XG5cdH07XG5cdF9Bc3luY0dlbmVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0Ly8gQWR2YW5jZSB0aGUgZ2VuZXJhdG9yLCBzdGFydGluZyBpdCBpZiBpdCBoYXMgeWV0IHRvIGJlIHN0YXJ0ZWRcblx0XHRjb25zdCBfdGhpcyA9IHRoaXM7XG5cdFx0cmV0dXJuIF90aGlzLl9wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcblx0XHRcdGNvbnN0IF9wYWN0ID0gX3RoaXMuX3BhY3Q7XG5cdFx0XHRpZiAoX3BhY3QgPT09IG51bGwpIHtcblx0XHRcdFx0Y29uc3QgX2VudHJ5ID0gX3RoaXMuX2VudHJ5O1xuXHRcdFx0XHRpZiAoX2VudHJ5ID09PSBudWxsKSB7XG5cdFx0XHRcdFx0Ly8gR2VuZXJhdG9yIGlzIHN0YXJ0ZWQsIGJ1dCBub3QgYXdhaXRpbmcgYSB5aWVsZCBleHByZXNzaW9uXG5cdFx0XHRcdFx0Ly8gQWJhbmRvbiB0aGUgbmV4dCBjYWxsIVxuXHRcdFx0XHRcdHJldHVybiByZXNvbHZlKF90aGlzLl9wcm9taXNlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBTdGFydCB0aGUgZ2VuZXJhdG9yXG5cdFx0XHRcdF90aGlzLl9lbnRyeSA9IG51bGw7XG5cdFx0XHRcdF90aGlzLl9yZXNvbHZlID0gcmVzb2x2ZTtcblx0XHRcdFx0ZnVuY3Rpb24gcmV0dXJuVmFsdWUodmFsdWUpIHtcblx0XHRcdFx0XHRfdGhpcy5fcmVzb2x2ZSh2YWx1ZSAmJiB2YWx1ZS50aGVuID8gdmFsdWUudGhlbihfd3JhcFJldHVybmVkVmFsdWUpIDogX3dyYXBSZXR1cm5lZFZhbHVlKHZhbHVlKSk7XG5cdFx0XHRcdFx0X3RoaXMuX3BhY3QgPSBudWxsO1xuXHRcdFx0XHRcdF90aGlzLl9yZXNvbHZlID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRfZW50cnkoX3RoaXMpLnRoZW4ocmV0dXJuVmFsdWUsIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdFx0aWYgKGVycm9yID09PSBfZWFybHlSZXR1cm4pIHtcblx0XHRcdFx0XHRcdHJldHVyblZhbHVlKF90aGlzLl9yZXR1cm4pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zdCBwYWN0ID0gbmV3IF9QYWN0KCk7XG5cdFx0XHRcdFx0XHRfdGhpcy5fcmVzb2x2ZShwYWN0KTtcblx0XHRcdFx0XHRcdF90aGlzLl9wYWN0ID0gbnVsbDtcblx0XHRcdFx0XHRcdF90aGlzLl9yZXNvbHZlID0gbnVsbDtcblx0XHRcdFx0XHRcdF9yZXNvbHZlKHBhY3QsIDIsIGVycm9yKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gR2VuZXJhdG9yIGlzIHN0YXJ0ZWQgYW5kIGEgeWllbGQgZXhwcmVzc2lvbiBpcyBwZW5kaW5nLCBzZXR0bGUgaXRcblx0XHRcdFx0X3RoaXMuX3BhY3QgPSBudWxsO1xuXHRcdFx0XHRfdGhpcy5fcmVzb2x2ZSA9IHJlc29sdmU7XG5cdFx0XHRcdF9zZXR0bGUoX3BhY3QsIDEsIHZhbHVlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fTtcblx0X0FzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS5yZXR1cm4gPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdC8vIEVhcmx5IHJldHVybiBmcm9tIHRoZSBnZW5lcmF0b3IgaWYgc3RhcnRlZCwgb3RoZXJ3aXNlIGFiYW5kb25zIHRoZSBnZW5lcmF0b3Jcblx0XHRjb25zdCBfdGhpcyA9IHRoaXM7XG5cdFx0cmV0dXJuIF90aGlzLl9wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcblx0XHRcdGNvbnN0IF9wYWN0ID0gX3RoaXMuX3BhY3Q7XG5cdFx0XHRpZiAoX3BhY3QgPT09IG51bGwpIHtcblx0XHRcdFx0aWYgKF90aGlzLl9lbnRyeSA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdC8vIEdlbmVyYXRvciBpcyBzdGFydGVkLCBidXQgbm90IGF3YWl0aW5nIGEgeWllbGQgZXhwcmVzc2lvblxuXHRcdFx0XHRcdC8vIEFiYW5kb24gdGhlIHJldHVybiBjYWxsIVxuXHRcdFx0XHRcdHJldHVybiByZXNvbHZlKF90aGlzLl9wcm9taXNlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBHZW5lcmF0b3IgaXMgbm90IHN0YXJ0ZWQsIGFiYW5kb24gaXQgYW5kIHJldHVybiB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRcdF90aGlzLl9lbnRyeSA9IG51bGw7XG5cdFx0XHRcdHJldHVybiByZXNvbHZlKHZhbHVlICYmIHZhbHVlLnRoZW4gPyB2YWx1ZS50aGVuKF93cmFwUmV0dXJuZWRWYWx1ZSkgOiBfd3JhcFJldHVybmVkVmFsdWUodmFsdWUpKTtcblx0XHRcdH1cblx0XHRcdC8vIFNldHRsZSB0aGUgeWllbGQgZXhwcmVzc2lvbiB3aXRoIGEgcmVqZWN0ZWQgXCJlYXJseSByZXR1cm5cIiB2YWx1ZVxuXHRcdFx0X3RoaXMuX3JldHVybiA9IHZhbHVlO1xuXHRcdFx0X3RoaXMuX3Jlc29sdmUgPSByZXNvbHZlO1xuXHRcdFx0X3RoaXMuX3BhY3QgPSBudWxsO1xuXHRcdFx0X3NldHRsZShfcGFjdCwgMiwgX2Vhcmx5UmV0dXJuKTtcblx0XHR9KTtcblx0fTtcblx0X0FzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS50aHJvdyA9IGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0Ly8gSW5qZWN0IGFuIGV4Y2VwdGlvbiBpbnRvIHRoZSBwZW5kaW5nIHlpZWxkIGV4cHJlc3Npb25cblx0XHRjb25zdCBfdGhpcyA9IHRoaXM7XG5cdFx0cmV0dXJuIF90aGlzLl9wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0Y29uc3QgX3BhY3QgPSBfdGhpcy5fcGFjdDtcblx0XHRcdGlmIChfcGFjdCA9PT0gbnVsbCkge1xuXHRcdFx0XHRpZiAoX3RoaXMuX2VudHJ5ID09PSBudWxsKSB7XG5cdFx0XHRcdFx0Ly8gR2VuZXJhdG9yIGlzIHN0YXJ0ZWQsIGJ1dCBub3QgYXdhaXRpbmcgYSB5aWVsZCBleHByZXNzaW9uXG5cdFx0XHRcdFx0Ly8gQWJhbmRvbiB0aGUgdGhyb3cgY2FsbCFcblx0XHRcdFx0XHRyZXR1cm4gcmVzb2x2ZShfdGhpcy5fcHJvbWlzZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gR2VuZXJhdG9yIGlzIG5vdCBzdGFydGVkLCBhYmFuZG9uIGl0IGFuZCByZXR1cm4gYSByZWplY3RlZCBQcm9taXNlIGNvbnRhaW5pbmcgdGhlIGVycm9yXG5cdFx0XHRcdF90aGlzLl9lbnRyeSA9IG51bGw7XG5cdFx0XHRcdHJldHVybiByZWplY3QoZXJyb3IpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gU2V0dGxlIHRoZSB5aWVsZCBleHByZXNzaW9uIHdpdGggdGhlIHZhbHVlIGFzIGEgcmVqZWN0aW9uXG5cdFx0XHRfdGhpcy5fcmVzb2x2ZSA9IHJlc29sdmU7XG5cdFx0XHRfdGhpcy5fcGFjdCA9IG51bGw7XG5cdFx0XHRfc2V0dGxlKF9wYWN0LCAyLCBlcnJvcik7XG5cdFx0fSk7XG5cdH07XG5cdFxuXHRyZXR1cm4gX0FzeW5jR2VuZXJhdG9yO1xufSkoKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gaXNQcm9taXNlO1xuXG5mdW5jdGlvbiBpc1Byb21pc2Uob2JqKSB7XG4gIHJldHVybiAhIW9iaiAmJiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykgJiYgdHlwZW9mIG9iai50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuIiwiLyoqXG4gKiBAYmFyYmEvY29yZS9tb2R1bGVzL0xvZ2dlclxuICogPGJyPjxicj5cbiAqICMjIExvZ2dlci5cbiAqXG4gKiAtIERpc3BsYXkgaW5mb3JtYXRpb25zIHZpYSB0aGUgY29uc29sZVxuICpcbiAqIEBtb2R1bGUgY29yZS9tb2R1bGVzL0xvZ2dlclxuICogQHByZWZlcnJlZFxuICovXG5cbi8qKiovXG5cbi8qKlxuICogTG9nIGxldmVscywgYWxsIGxvd2VyIGxldmVsIG1lc3NhZ2VzIGFyZSBwcmludGVkXG4gKlxuICogMC4gbXV0ZVxuICogMS4gZXJyb3IgPSBgY29uc29sZS5lcnJvcigpYFxuICogMi4gd2FybmluZz0gYGNvbnNvbGUud2FybigpYFxuICogMy4gaW5mbyA9IGBjb25zb2xlLmluZm8oKWBcbiAqIDQuIGRlYnVnID0gYGNvbnNvbGUubG9nKClgXG4gKi9cbmV4cG9ydCBlbnVtIExvZ0xldmVscyB7XG4gIG9mZiA9IDAsXG4gIGVycm9yID0gMSxcbiAgd2FybmluZyA9IDIsXG4gIGluZm8gPSAzLFxuICBkZWJ1ZyA9IDQsXG59XG5cbi8qKlxuICogR2xvYmFsIGxvZyBsZXZlbFxuICovXG5sZXQgX2xldmVsOiBudW1iZXIgPSBMb2dMZXZlbHMub2ZmO1xuXG5leHBvcnQgY2xhc3MgTG9nZ2VyIHtcbiAgLyoqXG4gICAqIEdldCBnbG9iYWwgbG9nIGxldmVsLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRMZXZlbCgpOiBudW1iZXIge1xuICAgIHJldHVybiBfbGV2ZWw7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGdsb2JhbCBsb2cgbGV2ZWwuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHNldExldmVsKG5hbWU6IGtleW9mIHR5cGVvZiBMb2dMZXZlbHMpOiBudW1iZXIge1xuICAgIF9sZXZlbCA9IExvZ0xldmVsc1tuYW1lXTtcblxuICAgIHJldHVybiBfbGV2ZWw7XG4gIH1cblxuICAvKipcbiAgICogTG9nIFwicHJlZml4XCIuXG4gICAqL1xuICBwcml2YXRlIF9zb3VyY2U6IHN0cmluZztcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBMb2dnZXIuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IHN0cmluZykge1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJtYW5lbnQsIHVucmVtb3ZhYmxlIGxvZy5cbiAgICovXG4gIHB1YmxpYyBwcmludCguLi5vYmplY3RzOiBhbnlbXSk6IHZvaWQge1xuICAgIHRoaXMuX2xvZyhjb25zb2xlLmluZm8sIExvZ0xldmVscy5vZmYsIG9iamVjdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVycm9yIGxvZy5cbiAgICovXG4gIHB1YmxpYyBlcnJvciguLi5vYmplY3RzOiBhbnlbXSk6IHZvaWQge1xuICAgIHRoaXMuX2xvZyhjb25zb2xlLmVycm9yLCBMb2dMZXZlbHMuZXJyb3IsIG9iamVjdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdhcm4gbG9nLlxuICAgKi9cbiAgcHVibGljIHdhcm4oLi4ub2JqZWN0czogYW55W10pOiB2b2lkIHtcbiAgICB0aGlzLl9sb2coY29uc29sZS53YXJuLCBMb2dMZXZlbHMud2FybmluZywgb2JqZWN0cyk7XG4gIH1cblxuICAvKipcbiAgICogSW5mbyBsb2cuXG4gICAqL1xuICBwdWJsaWMgaW5mbyguLi5vYmplY3RzOiBhbnlbXSk6IHZvaWQge1xuICAgIHRoaXMuX2xvZyhjb25zb2xlLmluZm8sIExvZ0xldmVscy5pbmZvLCBvYmplY3RzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWJ1ZyBsb2cuXG4gICAqL1xuICBwdWJsaWMgZGVidWcoLi4ub2JqZWN0czogYW55W10pOiB2b2lkIHtcbiAgICB0aGlzLl9sb2coY29uc29sZS5sb2csIExvZ0xldmVscy5kZWJ1Zywgb2JqZWN0cyk7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJuYWwgbG9nZ2VyLlxuICAgKi9cbiAgcHJpdmF0ZSBfbG9nKGZuOiAoKSA9PiB2b2lkLCBsZXZlbDogbnVtYmVyLCBvYmplY3RzOiBhbnlbXSk6IHZvaWQge1xuICAgIGlmIChsZXZlbCA8PSBMb2dnZXIuZ2V0TGV2ZWwoKSkge1xuICAgICAgZm4uYXBwbHkoY29uc29sZSwgKFtgWyR7dGhpcy5fc291cmNlfV0gYF0uY29uY2F0KG9iamVjdHMpIGFzIHVua25vd24pIGFzIFtcblxuICAgICAgXSk7XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc1Byb21pc2UgPSByZXF1aXJlKCdpcy1wcm9taXNlJyk7XG5cbi8qKlxuICogUmV0dXJuIGEgZnVuY3Rpb24gdGhhdCB3aWxsIHJ1biBhIGZ1bmN0aW9uIGFzeW5jaHJvbm91c2x5IG9yIHN5bmNocm9ub3VzbHlcbiAqXG4gKiBleGFtcGxlOlxuICogcnVuQXN5bmMod3JhcHBlZEZ1bmN0aW9uLCBjYWxsYmFjaykoLi4uYXJncyk7XG4gKlxuICogQHBhcmFtICAge0Z1bmN0aW9ufSBmdW5jICBGdW5jdGlvbiB0byBydW5cbiAqIEBwYXJhbSAgIHtGdW5jdGlvbn0gY2IgICAgQ2FsbGJhY2sgZnVuY3Rpb24gcGFzc2VkIHRoZSBgZnVuY2AgcmV0dXJuZWQgdmFsdWVcbiAqIEByZXR1cm4gIHtGdW5jdGlvbihhcmd1bWVudHMpfSBBcmd1bWVudHMgdG8gcGFzcyB0byBgZnVuY2AuIFRoaXMgZnVuY3Rpb24gd2lsbCBpbiB0dXJuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgUHJvbWlzZSAoTm9kZSA+PSAwLjEyKSBvciBjYWxsIHRoZSBjYWxsYmFja3MuXG4gKi9cblxudmFyIHJ1bkFzeW5jID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZnVuYywgY2IpIHtcbiAgY2IgPSBjYiB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhc3luYyA9IGZhbHNlO1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgYW5zd2VyID0gZnVuYy5hcHBseSh7XG4gICAgICAgIGFzeW5jOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYXN5bmMgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXJyLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0sIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpKTtcblxuICAgICAgaWYgKCFhc3luYykge1xuICAgICAgICBpZiAoaXNQcm9taXNlKGFuc3dlcikpIHtcbiAgICAgICAgICBhbnN3ZXIudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoYW5zd2VyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcHJvbWlzZS50aGVuKGNiLmJpbmQobnVsbCwgbnVsbCksIGNiKTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG59O1xuXG5ydW5Bc3luYy5jYiA9IGZ1bmN0aW9uIChmdW5jLCBjYikge1xuICByZXR1cm4gcnVuQXN5bmMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IGZ1bmMubGVuZ3RoIC0gMSkge1xuICAgICAgYXJncy5wdXNoKHRoaXMuYXN5bmMoKSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9LCBjYik7XG59O1xuIiwiLyoqXG4gKiBAYmFyYmEvY29yZS9tb2R1bGVzL2hvb2tzXG4gKiA8YnI+PGJyPlxuICogIyMgSG9va3MgbWFuYWdlci5cbiAqXG4gKiAtIFJlZ2lzdGVyIGFuZCB0cmlnZ2VyIGhvb2tzXG4gKlxuICogSG9va3MgY2FuIGJlIGVhc2lseSByZWdpc3RlcmVkOlxuICpcbiAqIGBgYGpzXG4gKiBob29rcy5sZWF2ZShjYWxsYmFjaywgY29udGV4dCk7XG4gKiBgYGBcbiAqXG4gKiBAbW9kdWxlIGNvcmUvbW9kdWxlcy9ob29rc1xuICogQHByZWZlcnJlZFxuICovXG5cbi8qKiovXG5cbi8vIFRoaXJkLXBhcnR5XG5pbXBvcnQgcnVuQXN5bmMgZnJvbSAncnVuLWFzeW5jJztcbi8vIERlZmluaXRpb25zXG5pbXBvcnQgeyBIb29rc0FsbCB9IGZyb20gJy4vZGVmcyc7XG4vLyBNb2R1bGVzXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL21vZHVsZXMvTG9nZ2VyJztcbi8vIFR5cGVzXG5pbnRlcmZhY2UgSUhvb2tEYXRhIHtcbiAgY3R4OiBhbnk7XG4gIGZuOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xufVxuXG5leHBvcnQgY2xhc3MgSG9va3Mge1xuICAvKipcbiAgICogQWxsb3cgdGhlIHVzZSBvZiBgaG9va3NbbmFtZV0oY2IsIGN0eClgLlxuICAgKi9cbiAgW2tleTogc3RyaW5nXTogYW55O1xuICAvLyBba2V5IGluIEhvb2tzQWxsXT86IGFueTtcbiAgcHVibGljIGxvZ2dlcjogTG9nZ2VyID0gbmV3IExvZ2dlcignQGJhcmJhL2NvcmUnKTtcbiAgLyoqXG4gICAqIEFsbCBhdmFpbGFibGUgaG9va3MuXG4gICAqXG4gICAqIFNlZSBbW0hvb2tzQWxsXV1cbiAgICovXG4gIC8vIFRPRE86IGdldCBob29rcyBmcm9tIGRlZnMgKERSWSk/XG4gIHB1YmxpYyBhbGw6IEhvb2tzQWxsW10gPSBbXG4gICAgJ3JlYWR5JyxcbiAgICAncGFnZScsXG4gICAgJ3Jlc2V0JyxcbiAgICAnY3VycmVudEFkZGVkJyxcbiAgICAnY3VycmVudFJlbW92ZWQnLFxuICAgICduZXh0QWRkZWQnLFxuICAgICduZXh0UmVtb3ZlZCcsXG4gICAgJ2JlZm9yZUFwcGVhcicsXG4gICAgJ2FwcGVhcicsXG4gICAgJ2FmdGVyQXBwZWFyJyxcbiAgICAnYXBwZWFyQ2FuY2VsZWQnLFxuICAgICdiZWZvcmUnLFxuICAgICdiZWZvcmVMZWF2ZScsXG4gICAgJ2xlYXZlJyxcbiAgICAnYWZ0ZXJMZWF2ZScsXG4gICAgJ2xlYXZlQ2FuY2VsZWQnLFxuICAgICdiZWZvcmVFbnRlcicsXG4gICAgJ2VudGVyJyxcbiAgICAnYWZ0ZXJFbnRlcicsXG4gICAgJ2VudGVyQ2FuY2VsZWQnLFxuICAgICdhZnRlcicsXG4gIF07XG4gIC8qKlxuICAgKiBSZWdpc3RlcmVkIGhvb2tzLlxuICAgKlxuICAgKiAtIFVuaXF1ZSBob29rIG5hbWVcbiAgICogLSBBc3NvY2lhdGVkIGRhdGEgc2V0KHMpIChjYWxsYmFjayArIGNvbnRleHQpXG4gICAqL1xuICBwdWJsaWMgcmVnaXN0ZXJlZDogTWFwPEhvb2tzQWxsLCBTZXQ8SUhvb2tEYXRhPj4gPSBuZXcgTWFwKCk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBwdWJsaWMgaW5pdCgpIHtcbiAgICB0aGlzLnJlZ2lzdGVyZWQuY2xlYXIoKTtcbiAgICB0aGlzLmFsbC5mb3JFYWNoKGhvb2sgPT4ge1xuICAgICAgaWYgKCF0aGlzW2hvb2tdKSB7XG4gICAgICAgIHRoaXNbaG9va10gPSAoZm46ICgpID0+IFByb21pc2U8dm9pZD4sIGN0eDogYW55ID0gbnVsbCkgPT4ge1xuICAgICAgICAgIGlmICghdGhpcy5yZWdpc3RlcmVkLmhhcyhob29rKSkge1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RlcmVkLnNldChob29rLCBuZXcgU2V0KCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBzZXQgPSB0aGlzLnJlZ2lzdGVyZWQuZ2V0KGhvb2spO1xuXG4gICAgICAgICAgc2V0LmFkZCh7XG4gICAgICAgICAgICBjdHgsXG4gICAgICAgICAgICBmbixcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEbyBob29rLlxuICAgKlxuICAgKiBUcmlnZ2VyIHJlZ2lzdGVyZWQgaG9va3MuXG4gICAqL1xuICBwdWJsaWMgZG8obmFtZTogSG9va3NBbGwsIC4uLmFyZ3M6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgaWYgKHRoaXMucmVnaXN0ZXJlZC5oYXMobmFtZSkpIHtcbiAgICAgIC8vIExldCdzIHN0YXJ0IGEgY2hhaW4gb2YgcHJvbWlzZXNcbiAgICAgIGxldCBjaGFpbiA9IFByb21pc2UucmVzb2x2ZSgpO1xuXG4gICAgICB0aGlzLnJlZ2lzdGVyZWQuZ2V0KG5hbWUpLmZvckVhY2goaG9vayA9PiB7XG4gICAgICAgIC8vIElmIG5lZWRlZCwgYmluZCB0aGUgcmlnaHQgY29udGV4dFxuICAgICAgICBjb25zdCBmbiA9IGhvb2suY3R4ID8gaG9vay5mbi5iaW5kKGhvb2suY3R4KSA6IGhvb2suZm47XG4gICAgICAgIC8vIENoYWluIGFzeW5jIGhvb2tzIHByb21pc2lmaWVkXG4gICAgICAgIGNoYWluID0gY2hhaW4udGhlbigoKSA9PiBydW5Bc3luYyhmbikoLi4uYXJncykpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBjaGFpbjtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5hbGwuZm9yRWFjaChob29rID0+IHtcbiAgICAgIGRlbGV0ZSB0aGlzW2hvb2tdO1xuICAgIH0pO1xuXG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICAvKipcbiAgICogSGVscCwgcHJpbnQgYXZhaWxhYmxlIGFuZCByZWdpc3RlcmVkIGhvb2tzLlxuICAgKi9cbiAgcHVibGljIGhlbHAoKTogdm9pZCB7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyhgQXZhaWxhYmxlIGhvb2tzOiAke3RoaXMuYWxsLmpvaW4oJywnKX1gKTtcbiAgICBjb25zdCByZWdpc3RlcmVkOiBzdHJpbmdbXSA9IFtdO1xuICAgIHRoaXMucmVnaXN0ZXJlZC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiByZWdpc3RlcmVkLnB1c2goa2V5KSk7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyhgUmVnaXN0ZXJlZCBob29rczogJHtyZWdpc3RlcmVkLmpvaW4oJywnKX1gKTtcbiAgfVxufVxuXG5jb25zdCBob29rcyA9IG5ldyBIb29rcygpO1xuXG5leHBvcnQgeyBob29rcyB9O1xuIiwiLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBEZWZhdWx0IGNvbmZpZ3MuXG4gKi9cbnZhciBERUZBVUxUX0RFTElNSVRFUiA9ICcvJ1xuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiXVxuICAvLyBcIihcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZF1cbiAgJyg/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pPydcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSAob3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlcikgfHwgREVGQVVMVF9ERUxJTUlURVJcbiAgdmFyIHdoaXRlbGlzdCA9IChvcHRpb25zICYmIG9wdGlvbnMud2hpdGVsaXN0KSB8fCB1bmRlZmluZWRcbiAgdmFyIHBhdGhFc2NhcGVkID0gZmFsc2VcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBwYXRoRXNjYXBlZCA9IHRydWVcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIHByZXYgPSAnJ1xuICAgIHZhciBuYW1lID0gcmVzWzJdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbM11cbiAgICB2YXIgZ3JvdXAgPSByZXNbNF1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNV1cblxuICAgIGlmICghcGF0aEVzY2FwZWQgJiYgcGF0aC5sZW5ndGgpIHtcbiAgICAgIHZhciBrID0gcGF0aC5sZW5ndGggLSAxXG4gICAgICB2YXIgYyA9IHBhdGhba11cbiAgICAgIHZhciBtYXRjaGVzID0gd2hpdGVsaXN0ID8gd2hpdGVsaXN0LmluZGV4T2YoYykgPiAtMSA6IHRydWVcblxuICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgcHJldiA9IGNcbiAgICAgICAgcGF0aCA9IHBhdGguc2xpY2UoMCwgaylcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgICBwYXRoRXNjYXBlZCA9IGZhbHNlXG4gICAgfVxuXG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuICAgIHZhciBkZWxpbWl0ZXIgPSBwcmV2IHx8IGRlZmF1bHREZWxpbWl0ZXJcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZXYsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGF0dGVybjogcGF0dGVyblxuICAgICAgICA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pXG4gICAgICAgIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIgPT09IGRlZmF1bHREZWxpbWl0ZXIgPyBkZWxpbWl0ZXIgOiAoZGVsaW1pdGVyICsgZGVmYXVsdERlbGltaXRlcikpICsgJ10rPydcbiAgICB9KVxuICB9XG5cbiAgLy8gUHVzaCBhbnkgcmVtYWluaW5nIGNoYXJhY3RlcnMuXG4gIGlmIChwYXRoIHx8IGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGggKyBzdHIuc3Vic3RyKGluZGV4KSlcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucykpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGF0YSwgb3B0aW9ucykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZW5jb2RlID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGUpIHx8IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGEgPyBkYXRhW3Rva2VuLm5hbWVdIDogdW5kZWZpbmVkXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCBnb3QgYXJyYXknKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkgY29udGludWVcblxuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdLCB0b2tlbilcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgc2VnbWVudCA9IGVuY29kZShTdHJpbmcodmFsdWUpLCB0b2tlbilcblxuICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IGdvdCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgICAgfVxuXG4gICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIGNvbnRpbnVlXG5cbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgJyArICh0b2tlbi5yZXBlYXQgPyAnYW4gYXJyYXknIDogJ2Egc3RyaW5nJykpXG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiQvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAge0FycmF5PX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIGlmICgha2V5cykgcmV0dXJuIHBhdGhcblxuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhdGhcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheT19ICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5PX0gIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHRva2Vuc1xuICogQHBhcmFtICB7QXJyYXk9fSAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgc3RhcnQgPSBvcHRpb25zLnN0YXJ0ICE9PSBmYWxzZVxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciBkZWxpbWl0ZXIgPSBvcHRpb25zLmRlbGltaXRlciB8fCBERUZBVUxUX0RFTElNSVRFUlxuICB2YXIgZW5kc1dpdGggPSBbXS5jb25jYXQob3B0aW9ucy5lbmRzV2l0aCB8fCBbXSkubWFwKGVzY2FwZVN0cmluZykuY29uY2F0KCckJykuam9pbignfCcpXG4gIHZhciByb3V0ZSA9IHN0YXJ0ID8gJ14nIDogJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNhcHR1cmUgPSB0b2tlbi5yZXBlYXRcbiAgICAgICAgPyAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSg/OicgKyBlc2NhcGVTdHJpbmcodG9rZW4uZGVsaW1pdGVyKSArICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpKSonXG4gICAgICAgIDogdG9rZW4ucGF0dGVyblxuXG4gICAgICBpZiAoa2V5cykga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wcmVmaXgpIHtcbiAgICAgICAgICByb3V0ZSArPSAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJvdXRlICs9ICcoPzonICsgZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeCkgKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeCkgKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIGlmICghc3RyaWN0KSByb3V0ZSArPSAnKD86JyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJyk/J1xuXG4gICAgcm91dGUgKz0gZW5kc1dpdGggPT09ICckJyA/ICckJyA6ICcoPz0nICsgZW5kc1dpdGggKyAnKSdcbiAgfSBlbHNlIHtcbiAgICB2YXIgZW5kVG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdXG4gICAgdmFyIGlzRW5kRGVsaW1pdGVkID0gdHlwZW9mIGVuZFRva2VuID09PSAnc3RyaW5nJ1xuICAgICAgPyBlbmRUb2tlbltlbmRUb2tlbi5sZW5ndGggLSAxXSA9PT0gZGVsaW1pdGVyXG4gICAgICA6IGVuZFRva2VuID09PSB1bmRlZmluZWRcblxuICAgIGlmICghc3RyaWN0KSByb3V0ZSArPSAnKD86JyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJyg/PScgKyBlbmRzV2l0aCArICcpKT8nXG4gICAgaWYgKCFpc0VuZERlbGltaXRlZCkgcm91dGUgKz0gJyg/PScgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICd8JyArIGVuZHNXaXRoICsgJyknXG4gIH1cblxuICByZXR1cm4gbmV3IFJlZ0V4cChyb3V0ZSwgZmxhZ3Mob3B0aW9ucykpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAge0FycmF5PX0gICAgICAgICAgICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwga2V5cylcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwga2V5cywgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCBrZXlzLCBvcHRpb25zKVxufVxuIiwiLyoqXG4gKiBAYmFyYmEvY29yZS9zY2hlbWFzXG4gKiA8YnI+PGJyPlxuICogIyMgU2NoZW1hcyBkZXNjcmlwdGlvbi5cbiAqXG4gKiBAbW9kdWxlIGNvcmUvc2NoZW1hc1xuICogQHByZWZlcnJlZFxuICovXG5cbi8qKiovXG5cbi8vIERlZmluaXRpb25zXG5pbXBvcnQgeyBJU2NoZW1hQXR0cmlidXRlIH0gZnJvbSAnLi4vZGVmcyc7XG5cbi8qKlxuICogU2VlIFtbSVNjaGVtYUF0dHJpYnV0ZV1dXG4gKi9cbmV4cG9ydCBjb25zdCBzY2hlbWFBdHRyaWJ1dGU6IElTY2hlbWFBdHRyaWJ1dGUgPSB7XG4gIGNvbnRhaW5lcjogJ2NvbnRhaW5lcicsXG4gIG5hbWVzcGFjZTogJ25hbWVzcGFjZScsXG4gIHByZWZpeDogJ2RhdGEtYmFyYmEnLFxuICBwcmV2ZW50OiAncHJldmVudCcsXG4gIHdyYXBwZXI6ICd3cmFwcGVyJyxcbn07XG4iLCIvKipcbiAqIEBiYXJiYS9jb3JlL3V0aWxzL2RvbVxuICogPGJyPjxicj5cbiAqICMjIERvbSB1dGlsc1xuICpcbiAqIC0gQWNjZXNzIERPTSBjb250ZW50c1xuICogLSBET00gdnMgc3RyaW5nIGNvbnZlcnNpb25zXG4gKlxuICogQG1vZHVsZSBjb3JlL3V0aWxzL2RvbVxuICogQHByZWZlcnJlZFxuICovXG5cbi8qKiovXG5cbi8vIERlZmluaXRpb25zXG5pbXBvcnQgeyBJU2NoZW1hQXR0cmlidXRlLCBJVHJhbnNpdGlvbkRhdGEsIFNjb3BlLCBXcmFwcGVyIH0gZnJvbSAnLi4vZGVmcyc7XG4vLyBTY2hlbWFzXG5pbXBvcnQgeyBzY2hlbWFBdHRyaWJ1dGUgfSBmcm9tICcuLi9zY2hlbWFzL2F0dHJpYnV0ZSc7XG5cbmV4cG9ydCBjbGFzcyBEb20ge1xuICBwcml2YXRlIF9hdHRyOiBJU2NoZW1hQXR0cmlidXRlID0gc2NoZW1hQXR0cmlidXRlO1xuICBwcml2YXRlIF9wYXJzZXI6IERPTVBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblxuICAvKipcbiAgICogQ29udmVydCBIVE1MRG9jdW1lbnQgdG8gc3RyaW5nLlxuICAgKi9cbiAgcHVibGljIHRvU3RyaW5nKGVsOiBIVE1MRWxlbWVudCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGVsLm91dGVySFRNTDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBIVE1MIHN0cmluZyB0byBIVE1MRG9jdW1lbnQuXG4gICAqL1xuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2JhcmJhanMvYmFyYmEvaXNzdWVzLzM2MlxuICAvLyBTZWVtcyB0aGF0IHVzaW5nIERPTVBhcnNlci5wYXJzZUZyb21TdHJpbmcgY2F1c2VzIHRoaXMgaXNzdWUuXG4gIHB1YmxpYyB0b0RvY3VtZW50KGh0bWxTdHJpbmc6IHN0cmluZyk6IEhUTUxEb2N1bWVudCB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcnNlci5wYXJzZUZyb21TdHJpbmcoaHRtbFN0cmluZywgJ3RleHQvaHRtbCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIEhUTUwgc3RyaW5nIHRvIERJVkVsZW1lbnQuXG4gICAqXG4gICAqIERPTVBhcnNlci5wYXJzZUZyb21TdHJpbmcgZmFpbHMgd2l0aCBpbWdbc3Jjc2V0XSBvbiBpT1MuXG4gICAqIHNlZSBodHRwczovL2dpdGh1Yi5jb20vYmFyYmFqcy9iYXJiYS9pc3N1ZXMvMzYyXG4gICAqL1xuICBwdWJsaWMgdG9FbGVtZW50KGh0bWxTdHJpbmc6IHN0cmluZyk6IEhUTUxEaXZFbGVtZW50IHtcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIGRpdi5pbm5lckhUTUwgPSBodG1sU3RyaW5nO1xuICAgIHJldHVybiBkaXY7XG4gIH1cblxuICAvKipcbiAgICogR2V0IEhUTUwgY29udGVudC5cbiAgICovXG4gIHB1YmxpYyBnZXRIdG1sKGRvYzogSFRNTERvY3VtZW50ID0gZG9jdW1lbnQpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKGRvYy5kb2N1bWVudEVsZW1lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBmdWxsIGRvY3VtZW50IGNvbnRlbnQuXG4gICAqL1xuICAvLyBnZXREb2N1bWVudChlbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAvLyAgIHJldHVybiB0aGlzLnRvU3RyKGVsKTtcbiAgLy8gfSxcblxuICAvKipcbiAgICogR2V0IGBbZGF0YS1iYXJiYT1cIndyYXBwZXJcIl1gLlxuICAgKi9cbiAgcHVibGljIGdldFdyYXBwZXIoc2NvcGU6IFNjb3BlID0gZG9jdW1lbnQpOiBXcmFwcGVyIHtcbiAgICByZXR1cm4gc2NvcGUucXVlcnlTZWxlY3RvcihcbiAgICAgIGBbJHt0aGlzLl9hdHRyLnByZWZpeH09XCIke3RoaXMuX2F0dHIud3JhcHBlcn1cIl1gXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYFtkYXRhLWJhcmJhPVwiY29udGFpbmVyXCJdYC5cbiAgICovXG4gIHB1YmxpYyBnZXRDb250YWluZXIoc2NvcGU6IFNjb3BlID0gZG9jdW1lbnQpOiBIVE1MRWxlbWVudCB8IG51bGwge1xuICAgIHJldHVybiBzY29wZS5xdWVyeVNlbGVjdG9yKFxuICAgICAgYFske3RoaXMuX2F0dHIucHJlZml4fT1cIiR7dGhpcy5fYXR0ci5jb250YWluZXJ9XCJdYFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGBbZGF0YS1iYXJiYS1uYW1lc3BhY2VdYC5cbiAgICovXG4gIHB1YmxpYyBnZXROYW1lc3BhY2Uoc2NvcGU6IFNjb3BlID0gZG9jdW1lbnQpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBjb25zdCBucyA9IHNjb3BlLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBgWyR7dGhpcy5fYXR0ci5wcmVmaXh9LSR7dGhpcy5fYXR0ci5uYW1lc3BhY2V9XWBcbiAgICApO1xuXG4gICAgcmV0dXJuIG5zXG4gICAgICA/IG5zLmdldEF0dHJpYnV0ZShgJHt0aGlzLl9hdHRyLnByZWZpeH0tJHt0aGlzLl9hdHRyLm5hbWVzcGFjZX1gKVxuICAgICAgOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBVUkwgZnJvbSBgaHJlZmAgdmFsdWUuXG4gICAqL1xuICBwdWJsaWMgZ2V0SHJlZihlbDogSFRNTExpbmtFbGVtZW50KTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSA/IGVsLmhyZWYgOiBudWxsO1xuICB9XG59XG5cbmNvbnN0IGRvbSA9IG5ldyBEb20oKTtcblxuZXhwb3J0IHsgZG9tIH07XG4iLCIvKipcbiAqIEBiYXJiYS9jb3JlL3V0aWxzL2hpc3RvcnlcbiAqIDxicj48YnI+XG4gKiAjIyBIaXN0b3J5IG1hbmFnZXIuXG4gKlxuICogLSBLZWVwIHRyYWNrIG9mIHRoZSBuYXZpZ2F0aW9uIGhpc3RvcnlcbiAqXG4gKiBAbW9kdWxlIGNvcmUvdXRpbHMvaGlzdG9yeVxuICogQHByZWZlcnJlZFxuICovXG5cbi8qKiovXG5cbi8qKlxuICogSGlzdG9yeSBpdGVtLlxuICpcbiAqIEBwcm9wZXJ0eSBuYW1lc3BhY2VcbiAqIEBwcm9wZXJ0eSBVUkxcbiAqL1xuaW50ZXJmYWNlIElIaXN0b3J5SXRlbSB7XG4gIC8qKiBuYW1lc3BhY2UgKi9cbiAgbnM6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgLyoqIFVSTCAqL1xuICB1cmw6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEhpc3Rvcnkge1xuICBwcml2YXRlIF9zdGF0ZTogSUhpc3RvcnlJdGVtW10gPSBbXTtcblxuICAvKipcbiAgICogQWRkIGEgbmV3IHN0YXRlLlxuICAgKi9cbiAgcHVibGljIGFkZCh1cmw6IHN0cmluZywgbnM6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuX3N0YXRlLnB1c2goeyB1cmwsIG5zIH0gYXMgSUhpc3RvcnlJdGVtKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgbGFzdCBzdGF0ZS5cbiAgICovXG4gIHB1YmxpYyByZW1vdmUoKTogdm9pZCB7XG4gICAgdGhpcy5fc3RhdGUucG9wKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIG5ldyBzdGF0ZSB0aGVuIHVwZGF0ZSBicm93c2VyIGhpc3RvcnkuXG4gICAqL1xuICBwdWJsaWMgcHVzaCh1cmw6IHN0cmluZywgbnM6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuYWRkKHVybCwgbnMpO1xuXG4gICAgd2luZG93Lmhpc3RvcnkgJiYgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsICcnLCB1cmwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBsYXN0IHN0YXRlIHRoZW4gZ28gYmFjay5cbiAgICovXG4gIHB1YmxpYyBjYW5jZWwoKTogdm9pZCB7XG4gICAgdGhpcy5yZW1vdmUoKTtcblxuICAgIHdpbmRvdy5oaXN0b3J5ICYmIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgc3RhdGUuXG4gICAqL1xuICBnZXQgY3VycmVudCgpOiBJSGlzdG9yeUl0ZW0ge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZVt0aGlzLl9zdGF0ZS5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHByZXZpb3VzIHN0YXRlLlxuICAgKi9cbiAgZ2V0IHByZXZpb3VzKCk6IElIaXN0b3J5SXRlbSB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZS5sZW5ndGggPCAyID8gbnVsbCA6IHRoaXMuX3N0YXRlW3RoaXMuX3N0YXRlLmxlbmd0aCAtIDJdO1xuICB9XG59XG5cbmNvbnN0IGhpc3RvcnkgPSBuZXcgSGlzdG9yeSgpO1xuXG5leHBvcnQgeyBoaXN0b3J5IH07XG4iLCIvKipcbiAqIEBiYXJiYS9jb3JlL3V0aWxzL2hlbHBlcnNcbiAqIDxicj48YnI+XG4gKiAjIyBIZWxwZXJzXG4gKlxuICogLSBVcGRhdGUgbmV4dCBwYWdlIGRhdGFcbiAqXG4gKiBAbW9kdWxlIGNvcmUvdXRpbHMvaGVscGVyc1xuICogQHByZWZlcnJlZFxuICovXG5cbi8qKiovXG5cbi8vIFRoaXJkLXBhcnR5XG5pbXBvcnQgcHRyIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcbi8vIERlZmluaXRpb25zXG5pbXBvcnQgeyBJVHJhbnNpdGlvbkRhdGEgfSBmcm9tICcuLi9kZWZzJztcbmltcG9ydCB7IElTY2hlbWFQYWdlIH0gZnJvbSAnLi4vZGVmcy9zY2hlbWFzJztcbi8vIFV0aWxzXG5pbXBvcnQgeyBkb20gfSBmcm9tICcuL2RvbSc7XG5pbXBvcnQgeyBoaXN0b3J5IH0gZnJvbSAnLi9oaXN0b3J5JztcblxuLyoqXG4gKiBVcGRhdGUgYGRhdGEubmV4dGAsIHRoZSB0aXRsZSBhbmQgdGhlIGhpc3RvcnlcbiAqL1xuZXhwb3J0IGNvbnN0IHVwZGF0ZSA9IGFzeW5jIChcbiAgcGFnZTogUHJvbWlzZTxzdHJpbmcgfCB2b2lkPixcbiAgZGF0YTogSVRyYW5zaXRpb25EYXRhXG4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgLy8gSWYgbm90IGFscmVhZHkgdXBkYXRlZFxuICBpZiAoIWRhdGEubmV4dC5odG1sKSB7XG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHBhZ2U7XG4gICAgY29uc3QgeyBuZXh0LCB0cmlnZ2VyIH0gPSBkYXRhO1xuXG4gICAgaWYgKGh0bWwpIHtcbiAgICAgIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JhcmJhanMvYmFyYmEvaXNzdWVzLzM2MlxuICAgICAgLy8gY29uc3QgbmV4dERvY3VtZW50ID0gZG9tLnRvRG9jdW1lbnQoaHRtbCk7XG4gICAgICBjb25zdCBuZXh0RG9jdW1lbnQgPSBkb20udG9FbGVtZW50KGh0bWwpO1xuXG4gICAgICBuZXh0Lm5hbWVzcGFjZSA9IGRvbS5nZXROYW1lc3BhY2UobmV4dERvY3VtZW50KTtcbiAgICAgIG5leHQuY29udGFpbmVyID0gZG9tLmdldENvbnRhaW5lcihuZXh0RG9jdW1lbnQpO1xuICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iYXJiYWpzL2JhcmJhL2lzc3Vlcy8zNjJcbiAgICAgIC8vIG5leHQuaHRtbCA9IGRvbS5nZXRIdG1sKG5leHREb2N1bWVudCk7XG4gICAgICAvLyBuZXh0Lmh0bWwgPSBuZXh0RG9jdW1lbnQuaW5uZXJIVE1MO1xuICAgICAgbmV4dC5odG1sID0gaHRtbDtcblxuICAgICAgLy8gVXBkYXRlIGhpc3RvcnlcbiAgICAgIC8vIElmIHRyaWdnZXJlZCBmcm9tIGFuIGhpc3RvcnkgY2hhbmdlIChiYWNrLCBmb3J3YXJkKSxcbiAgICAgIC8vIHNpbXBseSBhZGQgdGhlIG5ldyBzdGF0ZSB3aXRob3V0XG4gICAgICBpZiAodHJpZ2dlciA9PT0gJ3BvcHN0YXRlJykge1xuICAgICAgICBoaXN0b3J5LmFkZChuZXh0LnVybC5ocmVmLCBuZXh0Lm5hbWVzcGFjZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoaXN0b3J5LnB1c2gobmV4dC51cmwuaHJlZiwgbmV4dC5uYW1lc3BhY2UpO1xuICAgICAgfVxuXG4gICAgICAvLyBVcGRhdGUgdGl0bGUuXG4gICAgICBjb25zdCB7IHRpdGxlIH0gPSBkb20udG9Eb2N1bWVudChodG1sKTtcblxuICAgICAgZG9jdW1lbnQudGl0bGUgPSB0aXRsZTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogTmV4dCB0aWNrXG4gKi9cbmV4cG9ydCBjb25zdCBuZXh0VGljayA9ICgpID0+XG4gIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVzb2x2ZSk7XG4gICAgLy8gREVWOiBzYW1lIHJlc3VsdD9cbiAgICAvLyBzZXRUaW1lb3V0KHJlc29sdmUsIDApO1xuICB9KTtcblxuLyoqXG4gKiBUdXJuIGEgcm91dGUgc3RyaW5nIHN1Y2ggYXMgYC91c2VyLzpuYW1lYCBpbnRvIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIFVzZWQgZm9yOlxuICpcbiAqIC0gcm91dGVzIHRvIGlnbm9yZVxuICogLSByb3V0ZSB0cmFuc2l0aW9uIHJlc29sdXRpb25cbiAqXG4gKiBAc2VlIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3BhdGgtdG8tcmVnZXhwXG4gKi9cbmNvbnN0IHBhdGhUb1JlZ2V4cCA9IHB0cjtcblxuZXhwb3J0IHsgcGF0aFRvUmVnZXhwIH07XG4iLCIvKipcbiAqIEBiYXJiYS9jb3JlL3V0aWxzL3VybFxuICogPGJyPjxicj5cbiAqICMjIFVSTCB1dGlscy5cbiAqXG4gKiAtIENvbGxlY3QgYW5kIHN0cnVjdHVyZSBpbmZvcm1hdGlvbnMgZnJvbSBVUkxzXG4gKlxuICogQG1vZHVsZSBjb3JlL3V0aWxzL3VybFxuICovXG5cbi8qKiovXG5cbi8vIERlaWZuaXRpb25zXG5pbXBvcnQgeyBJR2VuZXJpY09iamVjdCwgSVVybEJhc2UgfSBmcm9tICcuLi9kZWZzJztcblxuLyoqXG4gKiBHZXQgbG9jYXRpb24gaHJlZi5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldEhyZWYgPSAoKTogc3RyaW5nID0+IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuXG4vKipcbiAqIEdldCBsb2NhdGlvbiBvcmlnaW4uXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRPcmlnaW4gPSAoKTogc3RyaW5nID0+IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW47XG5cbi8qKlxuICogR2V0IHBvcnQgYmFzZWQgb24gbG9jYXRpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRQb3J0ID0gKHA/OiBzdHJpbmcpID0+IHtcbiAgY29uc3QgcG9ydCA9IHAgfHwgd2luZG93LmxvY2F0aW9uLnBvcnQ7XG4gIGNvbnN0IHsgcHJvdG9jb2wgfSA9IHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAocG9ydCAhPT0gJycpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQocG9ydCwgMTApO1xuICB9XG5cbiAgaWYgKHByb3RvY29sID09PSAnaHR0cHM6Jykge1xuICAgIHJldHVybiA0NDM7XG4gIH1cblxuICByZXR1cm4gODA7XG59O1xuXG4vKipcbiAqIEdldCBwYXRoIGZyb20gVVJMLlxuICovXG5leHBvcnQgY29uc3QgZ2V0UGF0aCA9ICh1cmw6IHN0cmluZyk6IHN0cmluZyA9PiBwYXJzZSh1cmwpLnBhdGg7XG5cbi8qKlxuICogR2V0IHF1ZXJ5IG9iamVjdCBmcm9tIFVSTC5cbiAqL1xuLy8gZXhwb3J0IGNvbnN0IGdldFF1ZXJ5ID0gKHVybDogc3RyaW5nKTogSUdlbmVyaWNPYmplY3QgPT4gcGFyc2UodXJsKS5xdWVyeTtcblxuLyoqXG4gKiBHZXQgaGFzaCBmcm9tIFVSTC5cbiAqL1xuLy8gZXhwb3J0IGNvbnN0IGdldEhhc2ggPSAodXJsOiBzdHJpbmcpOiBzdHJpbmcgPT4gcGFyc2UodXJsKS5oYXNoO1xuXG4vKipcbiAqIFBhcnNlIFVSTCBmb3IgcGF0aCwgcXVlcnkgYW5kIGhhc2guXG4gKi9cbmV4cG9ydCBjb25zdCBwYXJzZSA9ICh1cmw6IHN0cmluZyk6IElVcmxCYXNlID0+IHtcbiAgLy8gbGV0IHBhdGggPSBjbGVhbih1cmwpO1xuICBsZXQgcGF0aCA9IHVybC5yZXBsYWNlKGdldE9yaWdpbigpLCAnJyk7XG4gIGxldCBoYXNoO1xuICBsZXQgcXVlcnkgPSB7fTtcblxuICBjb25zdCBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ID49IDApIHtcbiAgICBoYXNoID0gcGF0aC5zbGljZShoYXNoSW5kZXggKyAxKTtcbiAgICBwYXRoID0gcGF0aC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgY29uc3QgcXVlcnlJbmRleCA9IHBhdGguaW5kZXhPZignPycpO1xuXG4gIGlmIChxdWVyeUluZGV4ID49IDApIHtcbiAgICBxdWVyeSA9IHBhcnNlUXVlcnkocGF0aC5zbGljZShxdWVyeUluZGV4ICsgMSkpO1xuICAgIHBhdGggPSBwYXRoLnNsaWNlKDAsIHF1ZXJ5SW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBoYXNoLFxuICAgIHBhdGgsXG4gICAgcXVlcnksXG4gIH07XG59O1xuXG4vKipcbiAqIFBhcnNlIGEgcXVlcnkgc3RyaW5nIHRvIG9iamVjdC5cbiAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlUXVlcnkgPSAoc3RyOiBzdHJpbmcpID0+XG4gIHN0ci5zcGxpdCgnJicpLnJlZHVjZSgoYWNjOiBJR2VuZXJpY09iamVjdCwgZWw6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IGVsLnNwbGl0KCc9Jyk7XG5cbiAgICBhY2Nba2V5XSA9IHZhbHVlO1xuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuXG4vKipcbiAqIENsZWFuIFVSTCwgcmVtb3ZlIFwiaGFzaFwiLlxuICovXG5leHBvcnQgY29uc3QgY2xlYW4gPSAodXJsOiBzdHJpbmcpID0+IHVybC5yZXBsYWNlKC8jLiovLCAnJyk7XG4vKipcbiAqIENsZWFuIFVSTCwgcmVtb3ZlIFwib3JpZ2luXCIuXG4gKi9cbi8vIGV4cG9ydCBjb25zdCBjbGVhbiA9ICh1cmw6IHN0cmluZywgb3JpZ2luID0gZ2V0T3JpZ2luKCkpID0+XG4vLyAgIHVybC5yZXBsYWNlKG9yaWdpbiwgJycpO1xuIiwiLyoqXG4gKiBAYmFyYmEvY29yZS9tb2R1bGVzL2lnbm9yZVxuICogPGJyPjxicj5cbiAqICMjIE1hbmFnZSBpZ25vcmUgb3B0aW9ucy5cbiAqXG4gKiAtIGNhY2hlXG4gKiAtIHByZWZldGNoXG4gKlxuICogQG1vZHVsZSBjb3JlL21vZHVsZXMvaWdub3JlXG4gKiBAcHJlZmVycmVkXG4gKi9cblxuLyoqKi9cblxuLy8gRGVmaW5pdGlvbnNcbmltcG9ydCB7IElnbm9yZU9wdGlvbiB9IGZyb20gJy4uL2RlZnMnO1xuLy8gVXRpbHNcbmltcG9ydCB7IHBhdGhUb1JlZ2V4cCB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHsgcGFyc2UgfSBmcm9tICcuLi91dGlscy91cmwnO1xuXG5leHBvcnQgY2xhc3MgSWdub3JlIHtcbiAgcHJpdmF0ZSBfaWdub3JlQWxsOiBib29sZWFuO1xuICBwcml2YXRlIF9pZ25vcmVSZWdleGVzOiBSZWdFeHBbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGlnbm9yZTogSWdub3JlT3B0aW9uKSB7XG4gICAgaWYgKHR5cGVvZiBpZ25vcmUgPT09ICdib29sZWFuJykge1xuICAgICAgdGhpcy5faWdub3JlQWxsID0gaWdub3JlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwYXRocyA9IEFycmF5LmlzQXJyYXkoaWdub3JlKSA/IGlnbm9yZSA6IFtpZ25vcmVdO1xuXG4gICAgICB0aGlzLl9pZ25vcmVSZWdleGVzID0gcGF0aHMubWFwKHAgPT4gcGF0aFRvUmVnZXhwKHApKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgY2hlY2tVcmwodXJsOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX2lnbm9yZUFsbCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICByZXR1cm4gdGhpcy5faWdub3JlQWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHsgcGF0aCB9ID0gcGFyc2UodXJsKTtcblxuICAgIHJldHVybiB0aGlzLl9pZ25vcmVSZWdleGVzLnNvbWUocmVnZXggPT4gcmVnZXguZXhlYyhwYXRoKSAhPT0gbnVsbCk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGJhcmJhL2NvcmUvbW9kdWxlcy9jYWNoZVxuICogPGJyPjxicj5cbiAqICMjIENhY2hlIGZvciBzdG9yaW5nIFVSTCAvIEhUTUwuXG4gKlxuICogQG1vZHVsZSBjb3JlL21vZHVsZXMvY2FjaGVcbiAqIEBwcmVmZXJyZWRcbiAqL1xuXG4vKioqL1xuXG4vLyBEZWZpbml0aW9uc1xuaW1wb3J0IHsgQ2FjaGVBY3Rpb24sIENhY2hlUmVxdWVzdCwgSUNhY2hlRGF0YSwgSWdub3JlT3B0aW9uIH0gZnJvbSAnLi4vZGVmcyc7XG4vLyBNb2R1bGVzXG5pbXBvcnQgeyBJZ25vcmUgfSBmcm9tICcuL0lnbm9yZSc7XG5cbmV4cG9ydCBjbGFzcyBDYWNoZSBleHRlbmRzIElnbm9yZSB7XG4gIHByaXZhdGUgX3N0YXRlOiBNYXA8c3RyaW5nLCBJQ2FjaGVEYXRhPiA9IG5ldyBNYXAoKTtcblxuICBjb25zdHJ1Y3RvcihpZ25vcmU6IElnbm9yZU9wdGlvbikge1xuICAgIHN1cGVyKGlnbm9yZSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHZhbHVlIHRvIGNhY2hlXG4gICAqL1xuICBwdWJsaWMgc2V0KFxuICAgIGhyZWY6IHN0cmluZyxcbiAgICByZXF1ZXN0OiBDYWNoZVJlcXVlc3QsXG4gICAgYWN0aW9uOiBDYWNoZUFjdGlvblxuICApOiBJQ2FjaGVEYXRhIHtcbiAgICBpZiAoIXRoaXMuY2hlY2tVcmwoaHJlZikpIHtcbiAgICAgIHRoaXMuX3N0YXRlLnNldChocmVmLCB7XG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhY3Rpb24sXG4gICAgICByZXF1ZXN0LFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IGRhdGEgZnJvbSBjYWNoZVxuICAgKi9cbiAgcHVibGljIGdldChocmVmOiBzdHJpbmcpOiBJQ2FjaGVEYXRhIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdGUuZ2V0KGhyZWYpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCByZXF1ZXN0IGZyb20gY2FjaGVcbiAgICovXG4gIHB1YmxpYyBnZXRSZXF1ZXN0KGhyZWY6IHN0cmluZyk6IENhY2hlUmVxdWVzdCB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlLmdldChocmVmKS5yZXF1ZXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhY3Rpb24gZnJvbSBjYWNoZVxuICAgKi9cbiAgcHVibGljIGdldEFjdGlvbihocmVmOiBzdHJpbmcpOiBDYWNoZUFjdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlLmdldChocmVmKS5hY3Rpb247XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdmFsdWUgZXhpc3RzIGludG8gY2FjaGVcbiAgICovXG4gIHB1YmxpYyBoYXMoaHJlZjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlLmhhcyhocmVmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgdmFsdWUgZnJvbSBjYWNoZVxuICAgKi9cbiAgcHVibGljIGRlbGV0ZShocmVmOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdGUuZGVsZXRlKGhyZWYpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBjYWNoZSB2YWx1ZVxuICAgKi9cbiAgcHVibGljIHVwZGF0ZShocmVmOiBzdHJpbmcsIGRhdGE6IElDYWNoZURhdGEpOiBJQ2FjaGVEYXRhIHtcbiAgICBjb25zdCBzdGF0ZSA9IHtcbiAgICAgIC4uLnRoaXMuX3N0YXRlLmdldChocmVmKSxcbiAgICAgIC4uLmRhdGEsXG4gICAgfTtcbiAgICB0aGlzLl9zdGF0ZS5zZXQoaHJlZiwgc3RhdGUpO1xuXG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iLCIvKipcbiAqIEBiYXJiYS9jb3JlL3V0aWxzL3JlcXVlc3RcbiAqIDxicj48YnI+XG4gKiAjIyBGZXRjaCBwYWdlcyBmb3IgdHJhbnNpdGlvbnMuXG4gKlxuICogLSBJbmNsdWRlcyB0aW1lb3V0XG4gKiAtIFVzZXMgRmV0Y2ggQVBJXG4gKiAtIEhhbmRsZXMgZXJyb3JzXG4gKlxuICogQG1vZHVsZSBjb3JlL3V0aWxzL3JlcXVlc3RcbiAqIEBwcmVmZXJyZWRcbiAqL1xuXG4vKioqL1xuXG4vLyBEZWZpbml0aW9uc1xuaW1wb3J0IHsgUmVxdWVzdEVycm9yIH0gZnJvbSAnLi4vZGVmcyc7XG5cbi8qKlxuICogSW5pdCBhIHBhZ2UgcmVxdWVzdC5cbiAqIEZldGNoIHRoZSBwYWdlIGFuZCByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSB0ZXh0IGNvbnRlbnQuXG4gKi9cbmZ1bmN0aW9uIHJlcXVlc3QoXG4gIHVybDogc3RyaW5nLFxuICB0dGw6IG51bWJlciA9IDJlMyxcbiAgcmVxdWVzdEVycm9yOiBSZXF1ZXN0RXJyb3Jcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSBYTUxIdHRwUmVxdWVzdC5ET05FKSB7XG4gICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICByZXNvbHZlKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHhoci5zdGF0dXMpIHtcbiAgICAgICAgICAvLyBIVFRQIGNvZGUgaXMgbm90IDIwMCwgcmVqZWN0IHdpdGggcmVzcG9uc2UuXG4gICAgICAgICAgY29uc3QgcmVzID0ge1xuICAgICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXF1ZXN0RXJyb3IodXJsLCByZXMpO1xuICAgICAgICAgIHJlamVjdChyZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB4aHIub250aW1lb3V0ID0gKCkgPT4ge1xuICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKGBUaW1lb3V0IGVycm9yIFske3R0bH1dYCk7XG4gICAgICByZXF1ZXN0RXJyb3IodXJsLCBlcnIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfTtcbiAgICB4aHIub25lcnJvciA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihgRmV0Y2ggZXJyb3JgKTtcbiAgICAgIHJlcXVlc3RFcnJvcih1cmwsIGVycik7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9O1xuXG4gICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7XG4gICAgeGhyLnRpbWVvdXQgPSB0dGw7XG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXG4gICAgICAnQWNjZXB0JyxcbiAgICAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbCdcbiAgICApO1xuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCd4LWJhcmJhJywgJ3llcycpO1xuICAgIHhoci5zZW5kKCk7XG4gIH0pO1xufVxuXG5leHBvcnQgeyByZXF1ZXN0IH07XG4iLCIvKipcbiAqIEBiYXJiYS9jb3JlL21vZHVsZXMvcHJldmVudFxuICogPGJyPjxicj5cbiAqICMjIFByZXZlbnQgY2hlY2tzLlxuICpcbiAqIC0gR2F0aGVycyBhbGwgdGhlIHRlc3RzIHRoYXQgYWxsb3cgQmFyYmEgdG8gd29yayBhbmQgcGxheSB0cmFuc2l0aW9uc1xuICpcbiAqIEBtb2R1bGUgY29yZS9tb2R1bGVzL3ByZXZlbnRcbiAqIEBwcmVmZXJyZWRcbiAqL1xuXG4vKioqL1xuXG4vLyBEZWZpbml0aW9uc1xuaW1wb3J0IHsgSWdub3JlT3B0aW9uLCBQcmV2ZW50Q2hlY2sgfSBmcm9tICcuLi9kZWZzJztcbi8vIFNjaGVtYXNcbmltcG9ydCB7IHNjaGVtYUF0dHJpYnV0ZSB9IGZyb20gJy4uL3NjaGVtYXMvYXR0cmlidXRlJztcbi8vIFV0aWxzXG5pbXBvcnQgeyB1cmwgfSBmcm9tICcuLi91dGlscyc7XG4vLyBNb2R1bGVzXG5pbXBvcnQgeyBJZ25vcmUgfSBmcm9tICcuL0lnbm9yZSc7XG5cbi8qKlxuICogTWFrZSBzdXJlIHRoZSBicm93c2VyIHN1cHBvcnRzIGBoaXN0b3J5LnB1c2hTdGF0ZWAuXG4gKi9cbmNvbnN0IHB1c2hTdGF0ZTogUHJldmVudENoZWNrID0gKCkgPT4gIXdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZTtcblxuLyoqXG4gKiBNYWtlIHN1cmUgdGhlcmUgaXMgYW4gYGVsYCBhbmQgYGhyZWZgLlxuICovXG5jb25zdCBleGlzdHM6IFByZXZlbnRDaGVjayA9ICh7IGVsLCBocmVmIH0pID0+ICFlbCB8fCAhaHJlZjtcblxuLyoqXG4gKiBJZiB0aGUgdXNlciBpcyBwcmVzc2luZyBjdHJsICsgY2xpY2ssIHRoZSBicm93c2VyIHdpbGwgb3BlbiBhIG5ldyB0YWIuXG4gKi9cbmNvbnN0IG5ld1RhYjogUHJldmVudENoZWNrID0gKHsgZXZlbnQgfSkgPT5cbiAgKGV2ZW50IGFzIEtleWJvYXJkRXZlbnQpLndoaWNoID4gMSB8fFxuICAoZXZlbnQgYXMgS2V5Ym9hcmRFdmVudCkubWV0YUtleSB8fFxuICAoZXZlbnQgYXMgS2V5Ym9hcmRFdmVudCkuY3RybEtleSB8fFxuICAoZXZlbnQgYXMgS2V5Ym9hcmRFdmVudCkuc2hpZnRLZXkgfHxcbiAgKGV2ZW50IGFzIEtleWJvYXJkRXZlbnQpLmFsdEtleTtcblxuLyoqXG4gKiBJZiB0aGUgbGluayBoYXMgYF9ibGFua2AgdGFyZ2V0LlxuICovXG5jb25zdCBibGFuazogUHJldmVudENoZWNrID0gKHsgZWwgfSkgPT5cbiAgZWwuaGFzQXR0cmlidXRlKCd0YXJnZXQnKSAmJiAoZWwgYXMgSFRNTExpbmtFbGVtZW50KS50YXJnZXQgPT09ICdfYmxhbmsnO1xuXG4vKipcbiAqIElmIHRoZSBkb21haW4gaXMgdGhlIHNhbWUgKGluIG9yZGVyIHRvIGF2b2lkIHB1c2hTdGF0ZSBjcm9zcyBvcmlnaW4gc2VjdXJpdHkgcHJvYmxlbSkuXG4gKi9cbmNvbnN0IGNvcnNEb21haW46IFByZXZlbnRDaGVjayA9ICh7IGVsIH0pID0+XG4gIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCAhPT1cbiAgICAoKGVsIGFzIHVua25vd24pIGFzIEhUTUxIeXBlcmxpbmtFbGVtZW50VXRpbHMpLnByb3RvY29sIHx8XG4gIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSAhPT1cbiAgICAoKGVsIGFzIHVua25vd24pIGFzIEhUTUxIeXBlcmxpbmtFbGVtZW50VXRpbHMpLmhvc3RuYW1lO1xuXG4vKipcbiAqIElmIHRoZSBwb3J0IGlzIHRoZSBzYW1lLlxuICovXG5jb25zdCBjb3JzUG9ydDogUHJldmVudENoZWNrID0gKHsgZWwgfSkgPT5cbiAgdXJsLmdldFBvcnQoKSAhPT1cbiAgdXJsLmdldFBvcnQoKChlbCBhcyB1bmtub3duKSBhcyBIVE1MSHlwZXJsaW5rRWxlbWVudFV0aWxzKS5wb3J0KTtcblxuLyoqXG4gKiBJZiB0aGUgbGluayBoYXMgZG93bmxvYWQgYXR0cmlidXRlLlxuICovXG5jb25zdCBkb3dubG9hZDogUHJldmVudENoZWNrID0gKHsgZWwgfSkgPT5cbiAgZWwuZ2V0QXR0cmlidXRlICYmIHR5cGVvZiBlbC5nZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJykgPT09ICdzdHJpbmcnO1xuXG4vKipcbiAqIElmIHRoZSBsaW5rcyBjb250YWlucyBbZGF0YS1iYXJiYS1wcmV2ZW50XSBvciBbZGF0YS1iYXJiYS1wcmV2ZW50PVwic2VsZlwiXS5cbiAqL1xuY29uc3QgcHJldmVudFNlbGY6IFByZXZlbnRDaGVjayA9ICh7IGVsIH0pID0+XG4gIGVsLmhhc0F0dHJpYnV0ZShgJHtzY2hlbWFBdHRyaWJ1dGUucHJlZml4fS0ke3NjaGVtYUF0dHJpYnV0ZS5wcmV2ZW50fWApO1xuXG4vKipcbiAqIElmIHNvbWUgbGluayBhbmNlc3RvciBjb250YWlucyBbZGF0YS1iYXJiYS1wcmV2ZW50PVwiYWxsXCJdLlxuICovXG5jb25zdCBwcmV2ZW50QWxsOiBQcmV2ZW50Q2hlY2sgPSAoeyBlbCB9KSA9PlxuICBCb29sZWFuKFxuICAgIGVsLmNsb3Nlc3QoYFske3NjaGVtYUF0dHJpYnV0ZS5wcmVmaXh9LSR7c2NoZW1hQXR0cmlidXRlLnByZXZlbnR9PVwiYWxsXCJdYClcbiAgKTtcblxuLyoqXG4gKiBJZiB0aGUgbGluayBpcyB0aGUgY3VycmVudCBVUkwuXG4gKlxuICogPiBOb3QgaW4gdGhlIHRlc3Qgc3VpdGUuXG4gKi9cbmNvbnN0IHNhbWVVcmw6IFByZXZlbnRDaGVjayA9ICh7IGhyZWYgfSkgPT5cbiAgdXJsLmNsZWFuKGhyZWYpID09PSB1cmwuY2xlYW4od2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG5leHBvcnQgY2xhc3MgUHJldmVudCBleHRlbmRzIElnbm9yZSB7XG4gIHB1YmxpYyBzdWl0ZTogc3RyaW5nW10gPSBbXTtcbiAgcHVibGljIHRlc3RzOiBNYXA8c3RyaW5nLCBQcmV2ZW50Q2hlY2s+ID0gbmV3IE1hcCgpO1xuXG4gIGNvbnN0cnVjdG9yKGlnbm9yZTogSWdub3JlT3B0aW9uKSB7XG4gICAgc3VwZXIoaWdub3JlKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyBpbml0KCk6IHZvaWQge1xuICAgIC8vIEFkZCBkZWZhdWx0c1xuICAgIHRoaXMuYWRkKCdwdXNoU3RhdGUnLCBwdXNoU3RhdGUpO1xuICAgIHRoaXMuYWRkKCdleGlzdHMnLCBleGlzdHMpO1xuICAgIHRoaXMuYWRkKCduZXdUYWInLCBuZXdUYWIpO1xuICAgIHRoaXMuYWRkKCdibGFuaycsIGJsYW5rKTtcbiAgICB0aGlzLmFkZCgnY29yc0RvbWFpbicsIGNvcnNEb21haW4pO1xuICAgIHRoaXMuYWRkKCdjb3JzUG9ydCcsIGNvcnNQb3J0KTtcbiAgICB0aGlzLmFkZCgnZG93bmxvYWQnLCBkb3dubG9hZCk7XG4gICAgdGhpcy5hZGQoJ3ByZXZlbnRTZWxmJywgcHJldmVudFNlbGYpO1xuICAgIHRoaXMuYWRkKCdwcmV2ZW50QWxsJywgcHJldmVudEFsbCk7XG5cbiAgICAvLyBPdXRzaWRlIG9mIHRoZSB0ZXN0IHN1aXRlXG4gICAgdGhpcy5hZGQoJ3NhbWVVcmwnLCBzYW1lVXJsLCBmYWxzZSk7XG4gIH1cblxuICBwdWJsaWMgYWRkKG5hbWU6IHN0cmluZywgY2hlY2s6IFByZXZlbnRDaGVjaywgc3VpdGU6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG4gICAgdGhpcy50ZXN0cy5zZXQobmFtZSwgY2hlY2spO1xuICAgIHN1aXRlICYmIHRoaXMuc3VpdGUucHVzaChuYW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSdW4gaW5kaXZpZHVhbCB0ZXN0XG4gICAqL1xuICBwdWJsaWMgcnVuKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBlbDogSFRNTExpbmtFbGVtZW50LFxuICAgIGV2ZW50OiBFdmVudCxcbiAgICBocmVmOiBzdHJpbmdcbiAgKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudGVzdHMuZ2V0KG5hbWUpKHtcbiAgICAgIGVsLFxuICAgICAgZXZlbnQsXG4gICAgICBocmVmLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1biB0ZXN0IHN1aXRlXG4gICAqL1xuICBwdWJsaWMgY2hlY2tMaW5rKGVsOiBIVE1MTGlua0VsZW1lbnQsIGV2ZW50OiBFdmVudCwgaHJlZjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc3VpdGUuc29tZShuYW1lID0+IHRoaXMucnVuKG5hbWUsIGVsLCBldmVudCwgaHJlZikpO1xuICB9XG59XG4iLCIvKipcbiAqIEBiYXJiYS9jb3JlL21vZHVsZXMvc3RvcmVcbiAqIDxicj48YnI+XG4gKiAjIyBUcmFuc2l0aW9ucyBzdG9yZS5cbiAqXG4gKiAtIFJlc29sdmUgdHJhbnNpdGlvblxuICogLSBNYW5hZ2UgcnVsZXNcbiAqXG4gKiBAbW9kdWxlIGNvcmUvbW9kdWxlcy9zdG9yZVxuICogQHByZWZlcnJlZFxuICovXG5cbi8qKiovXG5cbi8vIERlZmluaXRpb25zXG5pbXBvcnQge1xuICBJUnVsZSxcbiAgSVJ1bGVzLFxuICBJVHJhbnNpdGlvbkFwcGVhcixcbiAgSVRyYW5zaXRpb25EYXRhLFxuICBJVHJhbnNpdGlvbkZpbHRlcnMsXG4gIElUcmFuc2l0aW9uUGFnZSxcbiAgUnVsZU5hbWUsXG59IGZyb20gJy4uL2RlZnMnO1xuXG4vLyBNb2R1bGVzXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL0xvZ2dlcic7XG5cbmV4cG9ydCBjbGFzcyBTdG9yZSB7XG4gIHB1YmxpYyBsb2dnZXI6IExvZ2dlciA9IG5ldyBMb2dnZXIoJ0BiYXJiYS9jb3JlJyk7XG4gIC8qKlxuICAgKiBBbGwgcmVnaXN0ZXJlZCB0cmFuc2l0aW9ucy5cbiAgICovXG4gIHB1YmxpYyBhbGw6IElUcmFuc2l0aW9uUGFnZVtdID0gW107XG4gIC8qKlxuICAgKiBcIkFwcGVhciBvbmx5XCIgcmVnaXN0ZXJlZCB0cmFuc2l0aW9ucy5cbiAgICovXG4gIHB1YmxpYyBhcHBlYXI6IElUcmFuc2l0aW9uQXBwZWFyW10gPSBbXTtcbiAgLyoqXG4gICAqIFJ1bGVzIGZvciB0cmFuc2l0aW9uIHJlc29sdXRpb24uXG4gICAqXG4gICAqIERlZmF1bHRzOlxuICAgKlxuICAgKiAtIG5hbWVzcGFjZVxuICAgKiAtIGN1c3RvbVxuICAgKi9cbiAgcHJpdmF0ZSBfcnVsZXM6IElSdWxlW10gPSBbXG4gICAge1xuICAgICAgbmFtZTogJ25hbWVzcGFjZScsXG4gICAgICB0eXBlOiAnc3RyaW5ncycsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnY3VzdG9tJyxcbiAgICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gICAgfSxcbiAgXTtcblxuICAvKipcbiAgICogSW5pdCBzdG9yZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHRyYW5zaXRpb25zOiBJVHJhbnNpdGlvblBhZ2VbXSA9IFtdKSB7XG4gICAgaWYgKHRyYW5zaXRpb25zKSB7XG4gICAgICAvLyBUT0RPOiBhZGQgY2hlY2sgZm9yIHZhbGlkIHRyYW5zaXRpb25zPyBjcml0ZXJpYT8gKGFwcGVhciB8fCBlbnRlciAmJiBsZWF2ZSlcbiAgICAgIHRoaXMuYWxsID0gdGhpcy5hbGwuY29uY2F0KHRyYW5zaXRpb25zKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgcnVsZSBvciB0cmFuc2l0aW9uLlxuICAgKi9cbiAgcHVibGljIGFkZCh0eXBlOiAncnVsZScgfCAndHJhbnNpdGlvbicsIGRhdGE6IGFueSk6IHZvaWQge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAncnVsZSc6XG4gICAgICAgIC8vIFRPRE86IGNoZWNrIGZvciB2YWxpZCBydWxlXG4gICAgICAgIHRoaXMuX3J1bGVzLnNwbGljZShkYXRhLnBvc2l0aW9uIHx8IDAsIDAsIGRhdGEudmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RyYW5zaXRpb24nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gVE9ETzogY2hlY2sgZm9yIHZhbGlkIHRyYW5zaXRpb25cbiAgICAgICAgdGhpcy5hbGwucHVzaChkYXRhKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlIHRyYW5zaXRpb24uXG4gICAqL1xuICBwdWJsaWMgcmVzb2x2ZShcbiAgICBkYXRhOiBJVHJhbnNpdGlvbkRhdGEsXG4gICAgZmlsdGVyczogSVRyYW5zaXRpb25GaWx0ZXJzID0ge31cbiAgKTogSVRyYW5zaXRpb25BcHBlYXIgfCBJVHJhbnNpdGlvblBhZ2Uge1xuICAgIC8vIEZpbHRlciBvbiBcImFwcGVhclwiXG4gICAgbGV0IHRyYW5zaXRpb25zID0gZmlsdGVycy5hcHBlYXIgPyB0aGlzLmFwcGVhciA6IHRoaXMuYWxsO1xuXG4gICAgLy8gRmlsdGVyIG9uIFwic2VsZlwiXG4gICAgaWYgKGZpbHRlcnMuc2VsZikge1xuICAgICAgdHJhbnNpdGlvbnMgPSB0cmFuc2l0aW9ucy5maWx0ZXIodCA9PiB0Lm5hbWUgJiYgdC5uYW1lID09PSAnc2VsZicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2l0aW9ucyA9IHRyYW5zaXRpb25zLmZpbHRlcih0ID0+ICF0Lm5hbWUgfHwgdC5uYW1lICE9PSAnc2VsZicpO1xuICAgIH1cblxuICAgIC8vIEFsbCBtYXRjaGluZyB0cmFuc2l0aW9uIGluZm9zXG4gICAgY29uc3QgbWF0Y2hpbmcgPSBuZXcgTWFwKCk7XG5cbiAgICAvLyBBY3RpdmUgPSBmaXJzdCBvZiB2YWxpZCB0cmFuc2l0aW9uc1xuICAgIC8vIHNvcnRlZCBieSBkaXJlY3Rpb25zIChmcm9tL3RvLCBmcm9tIHx8IHRvLCDigKYpXG4gICAgY29uc3QgYWN0aXZlID0gdHJhbnNpdGlvbnMuZmluZCh0ID0+IHtcbiAgICAgIGxldCB2YWxpZCA9IHRydWU7XG4gICAgICBjb25zdCBtYXRjaCA9IHt9O1xuXG4gICAgICBpZiAoZmlsdGVycy5zZWxmICYmIHQubmFtZSA9PT0gJ3NlbGYnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBydWxlc1xuICAgICAgdGhpcy5fcnVsZXMucmV2ZXJzZSgpLmZvckVhY2gocnVsZSA9PiB7XG4gICAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICAgIHZhbGlkID0gdGhpcy5fY2hlY2sodCwgcnVsZSwgZGF0YSwgbWF0Y2gpO1xuICAgICAgICAgIC8vIEZyb20vdG8gY2hlY2ssIG9ubHkgZm9yIHBhZ2UgdHJhbnNpdGlvbnNcbiAgICAgICAgICBpZiAoIWZpbHRlcnMuYXBwZWFyKSB7XG4gICAgICAgICAgICBpZiAodC5mcm9tICYmIHQudG8pIHtcbiAgICAgICAgICAgICAgdmFsaWQgPVxuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrKHQsIHJ1bGUsIGRhdGEsIG1hdGNoLCAnZnJvbScpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2sodCwgcnVsZSwgZGF0YSwgbWF0Y2gsICd0bycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHQuZnJvbSAmJiAhdC50bykge1xuICAgICAgICAgICAgICB2YWxpZCA9IHRoaXMuX2NoZWNrKHQsIHJ1bGUsIGRhdGEsIG1hdGNoLCAnZnJvbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0LmZyb20gJiYgdC50bykge1xuICAgICAgICAgICAgICB2YWxpZCA9IHRoaXMuX2NoZWNrKHQsIHJ1bGUsIGRhdGEsIG1hdGNoLCAndG8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBtYXRjaGluZy5zZXQodCwgbWF0Y2gpO1xuXG4gICAgICByZXR1cm4gdmFsaWQ7XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY3RpdmVNYXRjaCA9IG1hdGNoaW5nLmdldChhY3RpdmUpO1xuICAgIGNvbnN0IHRyYW5zaXRpb25UeXBlID0gW107XG4gICAgaWYgKGZpbHRlcnMuYXBwZWFyKSB7XG4gICAgICB0cmFuc2l0aW9uVHlwZS5wdXNoKCdhcHBlYXInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNpdGlvblR5cGUucHVzaCgncGFnZScpO1xuICAgIH1cbiAgICBpZiAoZmlsdGVycy5zZWxmKSB7XG4gICAgICB0cmFuc2l0aW9uVHlwZS5wdXNoKCdzZWxmJyk7XG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZU1hdGNoKSB7XG4gICAgICAvLyBMb2cgcmVzb2x2ZWQgdHJhbnNpdGlvblxuICAgICAgY29uc3QgaW5mb3M6IGFueVtdID0gW2FjdGl2ZV07XG4gICAgICAvLyBMb2cgaWYgbWF0Y2hpbmcgY3JpdGVyaWFcbiAgICAgIE9iamVjdC5rZXlzKGFjdGl2ZU1hdGNoKS5sZW5ndGggPiAwICYmIGluZm9zLnB1c2goYWN0aXZlTWF0Y2gpO1xuXG4gICAgICB0aGlzLmxvZ2dlci5pbmZvKFxuICAgICAgICBgVHJhbnNpdGlvbiBmb3VuZCBbJHt0cmFuc2l0aW9uVHlwZS5qb2luKCcsJyl9XWAsXG4gICAgICAgIC4uLmluZm9zXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvZ2dlci5pbmZvKGBObyB0cmFuc2l0aW9uIGZvdW5kIFske3RyYW5zaXRpb25UeXBlLmpvaW4oJywnKX1dYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGl2ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgVXBkYXRlIHN0b3JlLlxuICAgKlxuICAgKiAtIFJlb3JkZXIgdHJhbnNpdGlvbiBieSBwcmlvcml0aWVzXG4gICAqIC0gR2V0IHdhaXQgaW5kaWNhdG9yXG4gICAqIC0gR2V0IGFwcGVhciB0cmFuc2l0aW9uc1xuICAgKi9cbiAgcHVibGljIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICAvLyBSZW9yZGVyIGJ5IHByaW9yaXRpZXNcbiAgICB0aGlzLmFsbCA9IHRoaXMuYWxsXG4gICAgICAubWFwKHQgPT4gdGhpcy5fYWRkUHJpb3JpdHkodCkpXG4gICAgICAuc29ydCgoYSwgYikgPT4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHkpXG4gICAgICAucmV2ZXJzZSgpXG4gICAgICAubWFwKHQgPT4ge1xuICAgICAgICBkZWxldGUgdC5wcmlvcml0eTtcblxuICAgICAgICByZXR1cm4gdDtcbiAgICAgIH0pO1xuICAgIHRoaXMuYXBwZWFyID0gdGhpcy5hbGwuZmlsdGVyKFxuICAgICAgdCA9PiB0LmFwcGVhciAhPT0gdW5kZWZpbmVkXG4gICAgKSBhcyBJVHJhbnNpdGlvbkFwcGVhcltdO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyBDaGVjayBpZiB0cmFuc2l0aW9uIGFwcGx5LlxuICAgKlxuICAgKiBCYXNlZCBvbiBydWxlLCBwYWdlIGRhdGEgYW5kIG9wdGlvbmFsIGRpcmVjdGlvbjpcbiAgICpcbiAgICogMS4gdHJhbnNpdGlvbiBoYXMgbm8gcnVsZSBcInByb3BlcnR5XCI6XG4gICAqICAgIC0gYWx3YXlzIHJldHVybnMgdHJ1ZVxuICAgKiAyLiB0cmFuc2l0aW9uIGhhcyBydWxlIFwicHJvcGVydHlcIjpcbiAgICogICAgIC0gXCJzdHJpbmdzXCIgc2hvdWxkIGJlIHByZXNlbnQgb24gYm90aCBzaWRlICh0cmFuc2l0aW9uICsgcGFnZSkgYW5kIG1hdGNoXG4gICAqICAgICAtIFwiZnVuY3Rpb25cIiBzaG91bGQgcmV0dXJuIHRydWVcbiAgICovXG4gIHByaXZhdGUgX2NoZWNrKFxuICAgIHRyYW5zaXRpb246IElUcmFuc2l0aW9uUGFnZSxcbiAgICBydWxlOiBJUnVsZSxcbiAgICBkYXRhOiBJVHJhbnNpdGlvbkRhdGEsXG4gICAgbWF0Y2g6IGFueSxcbiAgICBkaXJlY3Rpb24/OiAnZnJvbScgfCAndG8nXG4gICk6IGJvb2xlYW4ge1xuICAgIGxldCBpc1ZhbGlkID0gdHJ1ZTtcbiAgICBsZXQgaGFzTWF0Y2ggPSBmYWxzZTtcbiAgICBjb25zdCB0ID0gdHJhbnNpdGlvbjtcbiAgICBjb25zdCB7IG5hbWUsIHR5cGUgfSA9IHJ1bGU7XG4gICAgY29uc3Qgc3RyUnVsZSA9IG5hbWUgYXMgSVJ1bGVzWydzdHJpbmdzJ107XG4gICAgY29uc3Qgb2JqUnVsZSA9IG5hbWUgYXMgSVJ1bGVzWydvYmplY3QnXTtcbiAgICBjb25zdCBmbk5hbWUgPSBuYW1lIGFzIElSdWxlc1snZnVuY3Rpb24nXTtcbiAgICBjb25zdCBiYXNlID0gZGlyZWN0aW9uID8gdFtkaXJlY3Rpb25dIDogdDsgLy8gPSB0IHx8IHQuZnJvbSB8fCB0LnRvXG4gICAgY29uc3QgcGFnZSA9IGRpcmVjdGlvbiA9PT0gJ3RvJyA/IGRhdGEubmV4dCA6IGRhdGEuY3VycmVudDsgLy8gPSBjdXJyZW50IHx8IG5leHRcbiAgICBjb25zdCBleGlzdCA9IGRpcmVjdGlvbiA/IGJhc2UgJiYgYmFzZVtuYW1lXSA6IGJhc2VbbmFtZV07XG5cbiAgICAvLyBJZiB0cmFuc2l0aW9uIHJ1bGUgZXhpc3RzXG4gICAgaWYgKGV4aXN0KSB7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnc3RyaW5ncyc6XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAvLyBBcnJheSBzdXBwb3J0XG4gICAgICAgICAgY29uc3QgbmFtZXM6IHN0cmluZ1tdID0gQXJyYXkuaXNBcnJheShiYXNlW3N0clJ1bGVdKVxuICAgICAgICAgICAgPyAoYmFzZVtzdHJSdWxlXSBhcyBzdHJpbmdbXSlcbiAgICAgICAgICAgIDogW2Jhc2Vbc3RyUnVsZV0gYXMgc3RyaW5nXTtcblxuICAgICAgICAgIC8vIEZvciBtYXRjaGluZywgcHJvcCBzaG91bGQgYmUgcHJlc2VudCBvbiBib3RoIHNpZGVzIGFuZCBtYXRjaFxuICAgICAgICAgIGlmIChwYWdlW3N0clJ1bGVdICYmIG5hbWVzLmluZGV4T2YocGFnZVtzdHJSdWxlXSkgIT09IC0xKSB7XG4gICAgICAgICAgICBoYXNNYXRjaCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIElmIHRyYW5zaXRpb24gcHJvcCBpcyBkaWZmZXJlbnQgZnJvbSBjdXJyZW50LCBub3QgdmFsaWRcbiAgICAgICAgICBpZiAobmFtZXMuaW5kZXhPZihwYWdlW3N0clJ1bGVdKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGlzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjYXNlICdvYmplY3QnOiB7XG4gICAgICAgICAgLy8gQXJyYXkgc3VwcG9ydFxuICAgICAgICAgIGNvbnN0IG5hbWVzOiBzdHJpbmdbXSA9IEFycmF5LmlzQXJyYXkoYmFzZVtvYmpSdWxlXSlcbiAgICAgICAgICAgID8gKGJhc2Vbb2JqUnVsZV0gYXMgc3RyaW5nW10pXG4gICAgICAgICAgICA6IFtiYXNlW29ialJ1bGVdIGFzIHN0cmluZ107XG5cbiAgICAgICAgICAvLyBGb3IgbWF0Y2hpbmcsIHByb3Agc2hvdWxkIGJlIHByZXNlbnQgb24gYm90aCBzaWRlcyBhbmQgbWF0Y2hcbiAgICAgICAgICBpZiAocGFnZVtvYmpSdWxlXSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBwYWdlW29ialJ1bGVdLm5hbWUgJiZcbiAgICAgICAgICAgICAgbmFtZXMuaW5kZXhPZihwYWdlW29ialJ1bGVdLm5hbWUpICE9PSAtMVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGhhc01hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHRyYW5zaXRpb24gcHJvcCBpcyBkaWZmZXJlbnQgZnJvbSBjdXJyZW50LCBub3QgdmFsaWRcbiAgICAgICAgICAgIGlmIChuYW1lcy5pbmRleE9mKHBhZ2Vbb2JqUnVsZV0ubmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgIGlzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAgaWYgKGJhc2VbZm5OYW1lXShkYXRhKSkge1xuICAgICAgICAgICAgaGFzTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzTWF0Y2gpIHtcbiAgICAgICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgICAgIG1hdGNoW2RpcmVjdGlvbl0gPSBtYXRjaFtkaXJlY3Rpb25dIHx8IHt9O1xuICAgICAgICAgIG1hdGNoW2RpcmVjdGlvbl1bbmFtZV0gPSB0W2RpcmVjdGlvbl1bbmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWF0Y2hbbmFtZV0gPSB0W25hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzVmFsaWQ7XG4gIH1cblxuICAvKipcbiAgICogIyMjIENhbGN1bGF0ZSB0cmFuc2l0aW9uIHByaW9yaXR5LlxuICAgKlxuICAgKiBCYXNlZCBvbjpcbiAgICpcbiAgICogLSBydWxlIFwicG9zaXRpb25cIiAoaW5kZXgpIGdpdmUgdGVucywgaHVuZHJlZHMsIHRob3VzYW5kcywg4oCmXG4gICAqIC0gZnJvbS90byBwcm9wZXJ0aWVzIGdpdmUgdW5pdHMgKDAsIDEgb3IgMilcbiAgICovXG4gIHByaXZhdGUgX2NhbGN1bGF0ZVByaW9yaXR5KFxuICAgIHQ6IElUcmFuc2l0aW9uUGFnZSxcbiAgICBydWxlTmFtZTogUnVsZU5hbWUsXG4gICAgcnVsZUluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICBsZXQgcHJpb3JpdHkgPSAwO1xuXG4gICAgaWYgKFxuICAgICAgdFtydWxlTmFtZV0gfHxcbiAgICAgICh0LmZyb20gJiYgdC5mcm9tW3J1bGVOYW1lXSkgfHxcbiAgICAgICh0LnRvICYmIHQudG9bcnVsZU5hbWVdKVxuICAgICkge1xuICAgICAgcHJpb3JpdHkgKz0gTWF0aC5wb3coMTAsIHJ1bGVJbmRleCk7XG5cbiAgICAgIGlmICh0LmZyb20gJiYgdC5mcm9tW3J1bGVOYW1lXSkge1xuICAgICAgICBwcmlvcml0eSArPSAxO1xuICAgICAgfVxuICAgICAgaWYgKHQudG8gJiYgdC50b1tydWxlTmFtZV0pIHtcbiAgICAgICAgcHJpb3JpdHkgKz0gMjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcHJpb3JpdHk7XG4gIH1cblxuICBwcml2YXRlIF9hZGRQcmlvcml0eSh0OiBJVHJhbnNpdGlvblBhZ2UpOiBJVHJhbnNpdGlvblBhZ2Uge1xuICAgIHQucHJpb3JpdHkgPSAwO1xuICAgIGxldCBwcmlvcml0eSA9IDA7XG5cbiAgICB0aGlzLl9ydWxlcy5mb3JFYWNoKChydWxlLCBpKSA9PiB7XG4gICAgICBjb25zdCB7IG5hbWUgfSA9IHJ1bGU7XG4gICAgICBjb25zdCBpbmRleCA9IGkgKyAxO1xuXG4gICAgICBwcmlvcml0eSArPSB0aGlzLl9jYWxjdWxhdGVQcmlvcml0eSh0LCBuYW1lLCBpbmRleCk7XG4gICAgfSk7XG5cbiAgICB0LnByaW9yaXR5ID0gcHJpb3JpdHk7XG5cbiAgICByZXR1cm4gdDtcbiAgfVxufVxuIiwiLyoqXG4gKiBAYmFyYmEvY29yZS9tb2R1bGVzL3RyYW5zaXRpb25zXG4gKiA8YnI+PGJyPlxuICogIyMgVHJhbnNpdGlvbnMgbWFuYWdlci5cbiAqXG4gKiAtIEhhbmRsZSBob29rcyBhbmQgdHJhbnNpdGlvbiBsaWZlY3ljbGVcbiAqXG4gKiBAbW9kdWxlIGNvcmUvbW9kdWxlcy90cmFuc2l0aW9uc1xuICogQHByZWZlcnJlZFxuICovXG5cbi8qKiovXG5cbi8vIFRoaXJkLXBhcnR5XG5pbXBvcnQgcnVuQXN5bmMgZnJvbSAncnVuLWFzeW5jJztcbi8vIERlZmluaXRpb25zXG5pbXBvcnQge1xuICBIb29rc1RyYW5zaXRpb24sXG4gIEhvb2tzVHJhbnNpdGlvbk1hcCxcbiAgSVRyYW5zaXRpb25BcHBlYXIsXG4gIElUcmFuc2l0aW9uRGF0YSxcbiAgSVRyYW5zaXRpb25GaWx0ZXJzLFxuICBJVHJhbnNpdGlvblBhZ2UsXG4gIFdyYXBwZXIsXG59IGZyb20gJy4uL2RlZnMnO1xuLy8gSG9va3NcbmltcG9ydCB7IGhvb2tzIH0gZnJvbSAnLi4vaG9va3MnO1xuLy8gVXRpbHNcbmltcG9ydCB7IGhlbHBlcnMgfSBmcm9tICcuLi91dGlscyc7XG4vLyBNb2R1bGVzXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL0xvZ2dlcic7XG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJy4vU3RvcmUnO1xuXG5leHBvcnQgY2xhc3MgVHJhbnNpdGlvbnMge1xuICBwdWJsaWMgbG9nZ2VyOiBMb2dnZXIgPSBuZXcgTG9nZ2VyKCdAYmFyYmEvY29yZScpO1xuICBwdWJsaWMgc3RvcmU6IFN0b3JlO1xuICBwcml2YXRlIF9ydW5uaW5nOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IodHJhbnNpdGlvbnM6IElUcmFuc2l0aW9uUGFnZVtdID0gW10pIHtcbiAgICB0aGlzLnN0b3JlID0gbmV3IFN0b3JlKHRyYW5zaXRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcmVzb2x2ZWQgdHJhbnNpdGlvblxuICAgKlxuICAgKiAtIGJhc2VkIG9uIGRhdGFcbiAgICovXG4gIHB1YmxpYyBnZXQoXG4gICAgZGF0YTogSVRyYW5zaXRpb25EYXRhLFxuICAgIGZpbHRlcnM/OiBJVHJhbnNpdGlvbkZpbHRlcnNcbiAgKTogSVRyYW5zaXRpb25BcHBlYXIgfCBJVHJhbnNpdGlvblBhZ2Uge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLnJlc29sdmUoZGF0YSwgZmlsdGVycyk7XG4gIH1cblxuICAvKipcbiAgICogQW5pbWF0aW9uIHJ1bm5pbmcgc3RhdHVzLlxuICAgKi9cbiAgZ2V0IGlzUnVubmluZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fcnVubmluZztcbiAgfVxuICBzZXQgaXNSdW5uaW5nKHN0YXR1czogYm9vbGVhbikge1xuICAgIHRoaXMuX3J1bm5pbmcgPSBzdGF0dXM7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgZm9yIHJlZ2lzdGVyZWQgYXBwZWFyIHRyYW5zaXRpb24ocykuXG4gICAqL1xuICBnZXQgaGFzQXBwZWFyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLmFwcGVhci5sZW5ndGggPiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGZvciByZWdpc3RlcmVkIHNlbGYgdHJhbnNpdGlvbi5cbiAgICovXG4gIGdldCBoYXNTZWxmKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLmFsbC5zb21lKHQgPT4gdC5uYW1lID09PSAnc2VsZicpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyBXYWl0IGluZGljYXRvci5cbiAgICpcbiAgICogVGVsbHMgQmFyYmEgdG8gZ2V0IG5leHQgcGFnZSBkYXRhPGJyPlxuICAgKiBiZWZvcmUgc3RhcnRpbmcgdGhlIHJlc29sdXRpb248YnI+XG4gICAqIGJlY2F1c2Ugc29tZSByZWdpc3RlcmVkIHRyYW5zaXRpb25zIG5lZWQ8YnI+XG4gICAqIG5leHQgcGFnZSBkYXRhIHRvIGJlIHJlc29sdmVkIChlZzogYHN5bmM6IHRydWVgLCBgdG86IHsgbmFtZXNwYWNlIH1gLCDigKYpXG4gICAqL1xuICBnZXQgc2hvdWxkV2FpdCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZS5hbGwuc29tZSh0ID0+ICh0LnRvICYmICF0LnRvLnJvdXRlKSB8fCB0LnN5bmMpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyBEbyBcImFwcGVhclwiIHRyYW5zaXRpb24uXG4gICAqXG4gICAqIEhvb2tzOiBzZWUgW1tIb29rc0FwcGVhcl1dLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGRvQXBwZWFyKHtcbiAgICBkYXRhLFxuICAgIHRyYW5zaXRpb24sXG4gIH06IHtcbiAgICBkYXRhOiBJVHJhbnNpdGlvbkRhdGE7XG4gICAgdHJhbnNpdGlvbjogSVRyYW5zaXRpb25BcHBlYXI7XG4gIH0pIHtcbiAgICBjb25zdCB0ID0gdHJhbnNpdGlvbiB8fCB7fTtcbiAgICB0aGlzLl9ydW5uaW5nID0gdHJ1ZTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLl9kb0FzeW5jSG9vaygnYmVmb3JlQXBwZWFyJywgZGF0YSwgdCk7XG4gICAgICBhd2FpdCB0aGlzLmFwcGVhcihkYXRhLCB0KTtcbiAgICAgIGF3YWl0IHRoaXMuX2RvQXN5bmNIb29rKCdhZnRlckFwcGVhcicsIGRhdGEsIHQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgICAvLyBUT0RPOiB1c2UgdGhpcyBob29rcyBvbiBgY2FuY2VsKClgXG4gICAgICAvLyBhd2FpdCB0aGlzLl9kb0FzeW5jSG9vaygnYXBwZWFyQ2FuY2VsZWQnLCBkYXRhLCB0KTtcbiAgICAgIC8vIFRPRE86IHNob3VsZCBJIHRocm93IG9yIHNob3VsZCBJIGxvZ+KAplxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc2l0aW9uIGVycm9yIFthcHBlYXJdJyk7XG4gICAgfVxuXG4gICAgdGhpcy5fcnVubmluZyA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyBEbyBcInBhZ2VcIiB0cmFuc2l0aW9uLlxuICAgKlxuICAgKiBIb29rczogc2VlIFtbSG9va3NQYWdlXV0uXG4gICAqXG4gICAqIGBzeW5jOiBmYWxzZWAgKGRlZmF1bHQpIG9yZGVyOlxuICAgKlxuICAgKiAxLiBiZWZvcmVcbiAgICogMi4gYmVmb3JlTGVhdmVcbiAgICogMy4gbGVhdmVcbiAgICogNC4gYWZ0ZXJMZWF2ZVxuICAgKiA1LiBiZWZvcmVFbnRlclxuICAgKiA2LiBlbnRlclxuICAgKiA3LiBhZnRlckVudGVyXG4gICAqIDguIGFmdGVyXG4gICAqXG4gICAqIGBzeW5jOiB0cnVlYCBvcmRlcjpcbiAgICpcbiAgICogMS4gYmVmb3JlXG4gICAqIDIuIGJlZm9yZUxlYXZlXG4gICAqIDMuIGJlZm9yZUVudGVyXG4gICAqIDQuIGxlYXZlICYgZW50ZXJcbiAgICogNS4gYWZ0ZXJMZWF2ZVxuICAgKiA2LiBhZnRlckVudGVyXG4gICAqIDcuIGFmdGVyXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZG9QYWdlKHtcbiAgICBkYXRhLFxuICAgIHRyYW5zaXRpb24sXG4gICAgcGFnZSxcbiAgICB3cmFwcGVyLFxuICB9OiB7XG4gICAgZGF0YTogSVRyYW5zaXRpb25EYXRhO1xuICAgIHRyYW5zaXRpb246IElUcmFuc2l0aW9uUGFnZTtcbiAgICBwYWdlOiBQcm9taXNlPHN0cmluZyB8IHZvaWQ+O1xuICAgIHdyYXBwZXI6IFdyYXBwZXI7XG4gIH0pIHtcbiAgICBjb25zdCB0ID0gdHJhbnNpdGlvbiB8fCB7fTtcbiAgICBjb25zdCBzeW5jID0gdC5zeW5jID09PSB0cnVlIHx8IGZhbHNlO1xuXG4gICAgdGhpcy5fcnVubmluZyA9IHRydWU7XG5cbiAgICB0cnkge1xuICAgICAgLy8gQ2hlY2sgc3luYyBtb2RlLCB3YWl0IGZvciBuZXh0IGNvbnRlbnRcbiAgICAgIGlmIChzeW5jKSB7XG4gICAgICAgIGF3YWl0IGhlbHBlcnMudXBkYXRlKHBhZ2UsIGRhdGEpO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCB0aGlzLl9kb0FzeW5jSG9vaygnYmVmb3JlJywgZGF0YSwgdCk7XG5cbiAgICAgIGlmIChzeW5jKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5hZGQoZGF0YSwgd3JhcHBlcik7XG4gICAgICAgICAgLy8gQmVmb3JlIGFjdGlvbnNcbiAgICAgICAgICBhd2FpdCB0aGlzLl9kb0FzeW5jSG9vaygnYmVmb3JlTGVhdmUnLCBkYXRhLCB0KTtcbiAgICAgICAgICBhd2FpdCB0aGlzLl9kb0FzeW5jSG9vaygnYmVmb3JlRW50ZXInLCBkYXRhLCB0KTtcblxuICAgICAgICAgIC8vIEFjdGlvbnNcbiAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbdGhpcy5sZWF2ZShkYXRhLCB0KSwgdGhpcy5lbnRlcihkYXRhLCB0KV0pO1xuXG4gICAgICAgICAgLy8gQWZ0ZXIgYWN0aW9uc1xuICAgICAgICAgIGF3YWl0IHRoaXMuX2RvQXN5bmNIb29rKCdhZnRlckxlYXZlJywgZGF0YSwgdCk7XG4gICAgICAgICAgYXdhaXQgdGhpcy5fZG9Bc3luY0hvb2soJ2FmdGVyRW50ZXInLCBkYXRhLCB0KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAvLyBUT0RPOiB1c2UgdGhlc2UgaG9va3Mgb24gYGNhbmNlbCgpYFxuICAgICAgICAgIC8vIGF3YWl0IHRoaXMuX2RvQXN5bmNIb29rKCdsZWF2ZUNhbmNlbGVkJywgZGF0YSwgdCk7XG4gICAgICAgICAgLy8gYXdhaXQgdGhpcy5fZG9Bc3luY0hvb2soJ2VudGVyQ2FuY2VsZWQnLCBkYXRhLCB0KTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zaXRpb24gZXJyb3IgW3BhZ2VdW3N5bmNdJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBsZWF2ZVJlc3VsdDogYW55ID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gTGVhdmVcbiAgICAgICAgICBhd2FpdCB0aGlzLl9kb0FzeW5jSG9vaygnYmVmb3JlTGVhdmUnLCBkYXRhLCB0KTtcblxuICAgICAgICAgIGxlYXZlUmVzdWx0ID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgdGhpcy5sZWF2ZShkYXRhLCB0KSxcbiAgICAgICAgICAgIGhlbHBlcnMudXBkYXRlKHBhZ2UsIGRhdGEpLFxuICAgICAgICAgIF0pLnRoZW4odmFsdWVzID0+IHZhbHVlc1swXSk7XG5cbiAgICAgICAgICBhd2FpdCB0aGlzLl9kb0FzeW5jSG9vaygnYWZ0ZXJMZWF2ZScsIGRhdGEsIHQpO1xuXG4gICAgICAgICAgLy8gVE9ETzogY2hlY2sgaGVyZSBcInZhbGlkXCIgcGFnZSByZXN1bHRcbiAgICAgICAgICAvLyBiZWZvcmUgZ29pbmcgZnVydGhlclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIC8vIFRPRE86IHVzZSB0aGlzIGhvb2tzIG9uIGBjYW5jZWwoKWBcbiAgICAgICAgICAvLyBhd2FpdCB0aGlzLl9kb0FzeW5jSG9vaygnbGVhdmVDYW5jZWxlZCcsIGRhdGEsIHQpO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNpdGlvbiBlcnJvciBbcGFnZV1bbGVhdmVdJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEVudGVyXG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICBpZiAobGVhdmVSZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFkZChkYXRhLCB3cmFwcGVyKTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fZG9Bc3luY0hvb2soJ2JlZm9yZUVudGVyJywgZGF0YSwgdCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmVudGVyKGRhdGEsIHQsIGxlYXZlUmVzdWx0KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2RvQXN5bmNIb29rKCdhZnRlckVudGVyJywgZGF0YSwgdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIC8vIFRPRE86IHVzZSB0aGVzZSBob29rcyBvbiBgY2FuY2VsKClgXG4gICAgICAgICAgLy8gYXdhaXQgdGhpcy5fZG9Bc3luY0hvb2soJ2xlYXZlQ2FuY2VsZWQnLCBkYXRhLCB0KTtcbiAgICAgICAgICAvLyBhd2FpdCB0aGlzLl9kb0FzeW5jSG9vaygnZW50ZXJDYW5jZWxlZCcsIGRhdGEsIHQpO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNpdGlvbiBlcnJvciBbcGFnZV1bZW50ZXJdJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYXdhaXQgdGhpcy5fZG9Bc3luY0hvb2soJ2FmdGVyJywgZGF0YSwgdCk7XG5cbiAgICAgIC8vIFJlbW92ZSBjdXJyZW50IGNvbnRhaWVuclxuICAgICAgYXdhaXQgdGhpcy5yZW1vdmUoZGF0YSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMuX3J1bm5pbmcgPSBmYWxzZTtcbiAgICAgIC8vIFRPRE86IHVzZSBjYXNlcyBmb3IgY2FuY2VsbGF0aW9uXG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihlcnJvcik7XG5cbiAgICAgIC8vIFRPRE86IHNob3VsZCBJIHRocm93IG9yIHNob3VsZCBJIGxvZ+KAplxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc2l0aW9uIGVycm9yJyk7XG4gICAgfVxuXG4gICAgdGhpcy5fcnVubmluZyA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVhciBob29rICsgYXN5bmMgXCJhcHBlYXJcIiB0cmFuc2l0aW9uLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGFwcGVhcihcbiAgICBkYXRhOiBJVHJhbnNpdGlvbkRhdGEsXG4gICAgdDogSVRyYW5zaXRpb25BcHBlYXJcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgaG9va3MuZG8oJ2FwcGVhcicsIGRhdGEsIHQpO1xuXG4gICAgcmV0dXJuIHQuYXBwZWFyID8gcnVuQXN5bmModC5hcHBlYXIpKGRhdGEpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICAvKipcbiAgICogTGVhdmUgaG9vayArIGFzeW5jIFwibGVhdmVcIiB0cmFuc2l0aW9uLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGxlYXZlKGRhdGE6IElUcmFuc2l0aW9uRGF0YSwgdDogSVRyYW5zaXRpb25QYWdlKTogUHJvbWlzZTxhbnk+IHtcbiAgICBhd2FpdCBob29rcy5kbygnbGVhdmUnLCBkYXRhLCB0KTtcblxuICAgIHJldHVybiB0LmxlYXZlID8gcnVuQXN5bmModC5sZWF2ZSkoZGF0YSkgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbnRlciBob29rICsgYXN5bmMgXCJlbnRlclwiIHRyYW5zaXRpb24uXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZW50ZXIoXG4gICAgZGF0YTogSVRyYW5zaXRpb25EYXRhLFxuICAgIHQ6IElUcmFuc2l0aW9uUGFnZSxcbiAgICBsZWF2ZVJlc3VsdD86IGFueVxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBob29rcy5kbygnZW50ZXInLCBkYXRhLCB0KTtcblxuICAgIHJldHVybiB0LmVudGVyID8gcnVuQXN5bmModC5lbnRlcikoZGF0YSwgbGVhdmVSZXN1bHQpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIG5leHQgY29udGFpbmVyLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGFkZChkYXRhOiBJVHJhbnNpdGlvbkRhdGEsIHdyYXBwZXI6IFdyYXBwZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGRhdGEubmV4dC5jb250YWluZXIpO1xuICAgIGF3YWl0IGhlbHBlcnMubmV4dFRpY2soKTtcbiAgICBob29rcy5kbygnbmV4dEFkZGVkJywgZGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGN1cnJlbnQgY29udGFpbmVyLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIHJlbW92ZShkYXRhOiBJVHJhbnNpdGlvbkRhdGEpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB7IGNvbnRhaW5lciB9ID0gZGF0YS5jdXJyZW50O1xuXG4gICAgaWYgKGRvY3VtZW50LmJvZHkuY29udGFpbnMoY29udGFpbmVyKSkge1xuICAgICAgYXdhaXQgaGVscGVycy5uZXh0VGljaygpO1xuICAgICAgY29udGFpbmVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcbiAgICAgIGF3YWl0IGhlbHBlcnMubmV4dFRpY2soKTtcbiAgICAgIGhvb2tzLmRvKCdjdXJyZW50UmVtb3ZlZCcsIGRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEbyBob29rcyArIGFzeW5jIHRyYW5zaXRpb24gbWV0aG9kcy5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgX2RvQXN5bmNIb29rKFxuICAgIGhvb2s6IEhvb2tzVHJhbnNpdGlvbixcbiAgICBkYXRhOiBJVHJhbnNpdGlvbkRhdGEsXG4gICAgdDogSG9va3NUcmFuc2l0aW9uTWFwXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IGhvb2tzLmRvKGhvb2ssIGRhdGEsIHQpO1xuXG4gICAgcmV0dXJuIHRbaG9va10gPyBydW5Bc3luYyh0W2hvb2tdKShkYXRhKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG59XG4iLCIvKipcbiAqIEBiYXJiYS9jb3JlL21vZHVsZXMvdmlld3NcbiAqIDxicj48YnI+XG4gKiAjIyBWaWV3cyBtYW5hZ2VyLlxuICpcbiAqIEBtb2R1bGUgY29yZS9tb2R1bGVzL3ZpZXdzXG4gKiBAcHJlZmVycmVkXG4gKi9cblxuLyoqKi9cblxuLy8gRGVmaW5pdGlvbnNcbmltcG9ydCB7IEhvb2tzVmlldywgSUhvb2tWaWV3RGF0YSwgSVZpZXcgfSBmcm9tICcuLi9kZWZzJztcbi8vIEhvb2tzXG5pbXBvcnQgeyBob29rcyB9IGZyb20gJy4uL2hvb2tzJztcbi8vIFR5cGVzXG50eXBlIEhvb2sgPSAoZGF0YTogSUhvb2tWaWV3RGF0YSkgPT4gdm9pZDtcblxuZXhwb3J0IGNsYXNzIFZpZXdzIHtcbiAgLyoqXG4gICAqIEF2YWlsYWJsZSBob29rIG5hbWVzIGZvciB2aWV3cy5cbiAgICovXG4gIHB1YmxpYyBuYW1lczogSG9va3NWaWV3W10gPSBbXG4gICAgJ2JlZm9yZUFwcGVhcicsXG4gICAgJ2FmdGVyQXBwZWFyJyxcbiAgICAnYmVmb3JlTGVhdmUnLFxuICAgICdhZnRlckxlYXZlJyxcbiAgICAnYmVmb3JlRW50ZXInLFxuICAgICdhZnRlckVudGVyJyxcbiAgXTtcbiAgLyoqXG4gICAqIFJlZ2lzdGVyZWQgdmlld3MgYnkgbmFtZXNwYWNlLlxuICAgKi9cbiAgcHVibGljIGJ5TmFtZXNwYWNlOiBNYXA8c3RyaW5nLCBJVmlldz4gPSBuZXcgTWFwKCk7XG5cbiAgLyoqXG4gICAqIEluaXQgdmlld3MuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih2aWV3czogSVZpZXdbXSkge1xuICAgIGlmICh2aWV3cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBhZGQgY2hlY2tcbiAgICAvLyBmb3IgdmFsaWQgdmlld3M/IGNyaXRlcmlhPyAobmFtZXNwYWNlIHByb3BlcnR5LCBzdHJpbmcgPylcbiAgICAvLyBvciBkdXBsaWNhdGVcbiAgICB2aWV3cy5mb3JFYWNoKHZpZXcgPT4ge1xuICAgICAgdGhpcy5ieU5hbWVzcGFjZS5zZXQodmlldy5uYW1lc3BhY2UsIHZpZXcpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5uYW1lcy5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgaG9va3NbbmFtZV0odGhpcy5fY3JlYXRlSG9vayhuYW1lKSwgdGhpcyk7XG4gICAgfSk7XG5cbiAgICBob29rcy5yZWFkeSh0aGlzLl9jcmVhdGVIb29rKCdiZWZvcmVFbnRlcicpLCB0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGhvb2sgbWV0aG9kLlxuICAgKlxuICAgKiAtIGdldCB2aWV3IGJhc2VkIG9uIG5hbWVzcGFjZVxuICAgKiAtIGV4ZWN1dGUgY2FsbGJhY2sgd2l0aCB0cmFuc2l0aW9uIGRhdGFcbiAgICovXG4gIHByaXZhdGUgX2NyZWF0ZUhvb2sobmFtZTogSG9va3NWaWV3KTogSG9vayB7XG4gICAgcmV0dXJuIGRhdGEgPT4ge1xuICAgICAgY29uc3QgeyBuYW1lc3BhY2UgfSA9IG5hbWUubWF0Y2goL2VudGVyL2kpID8gZGF0YS5uZXh0IDogZGF0YS5jdXJyZW50O1xuICAgICAgY29uc3QgdmlldyA9IHRoaXMuYnlOYW1lc3BhY2UuZ2V0KG5hbWVzcGFjZSk7XG5cbiAgICAgIC8vIFRPRE86IG1hbmFnZSBzZWxm4oCmXG4gICAgICAvLyBpZiAodmlldyAmJiBkYXRhLnRyaWdnZXIgIT09ICdzZWxmJykge1xuICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgdmlld1tuYW1lXSAmJiB2aWV3W25hbWVdKGRhdGEpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbiIsIi8vIEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgcG9seWZpbGxcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L21hdGNoZXMjUG9seWZpbGxcbmlmICghRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcykge1xuICBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzID1cbiAgICAoRWxlbWVudCBhcyBhbnkpLnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fFxuICAgIEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3Rvcjtcbn1cblxuLy8gRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCBwb2x5ZmlsbFxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvY2xvc2VzdCNQb2x5ZmlsbFxuaWYgKCFFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0KSB7XG4gIEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgPSBmdW5jdGlvbiBjbG9zZXN0KHM6IHN0cmluZykge1xuICAgIGxldCBlbCA9IHRoaXM7XG5cbiAgICBkbyB7XG4gICAgICBpZiAoZWwubWF0Y2hlcyhzKSkge1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgICB9XG5cbiAgICAgIGVsID0gKGVsLnBhcmVudEVsZW1lbnQgfHwgZWwucGFyZW50Tm9kZSkgYXMgRWxlbWVudDtcbiAgICB9IHdoaWxlIChlbCAhPT0gbnVsbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSk7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cbiIsIi8qKlxuICogQG1vZHVsZSBjb3JlL3NjaGVtYXNcbiAqL1xuXG4vLyBEZWZpbml0aW9uc1xuaW1wb3J0IHsgSVNjaGVtYVBhZ2UgfSBmcm9tICcuLi9kZWZzJztcblxuLyoqXG4gKiBTZWUgW1tJU2NoZW1hUGFnZV1dXG4gKi9cbmV4cG9ydCBjb25zdCBzY2hlbWFQYWdlOiBJU2NoZW1hUGFnZSA9IHtcbiAgY29udGFpbmVyOiB1bmRlZmluZWQsXG4gIGh0bWw6IHVuZGVmaW5lZCxcbiAgbmFtZXNwYWNlOiB1bmRlZmluZWQsXG4gIHVybDoge1xuICAgIGhhc2g6IHVuZGVmaW5lZCxcbiAgICBocmVmOiB1bmRlZmluZWQsXG4gICAgcGF0aDogdW5kZWZpbmVkLFxuICAgIHF1ZXJ5OiB7fSxcbiAgfSxcbn07XG4iLCIvKipcbiAqIEBiYXJiYS9jb3JlXG4gKiA8YnI+PGJyPlxuICogIyMgQmFyYmEgY29yZSBvYmplY3RcbiAqXG4gKiBNYWluIG1ldGhvZHM6XG4gKlxuICogLSBgLmluaXQoKWAgZm9yIGluaXRpYWxpemF0aW9uIHdpdGggb3B0aW9uc1xuICogLSBgLnVzZSgpYCBmb3IgcGx1Z2luc1xuICpcbiAqIEBtb2R1bGUgY29yZVxuICovXG5cbi8qKiovXG5cbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tICcuLi9wYWNrYWdlLmpzb24nO1xuLy8gRGVmaW5pdGlvbnNcbmltcG9ydCB7XG4gIElCYXJiYU9wdGlvbnMsXG4gIElCYXJiYVBsdWdpbixcbiAgSWdub3JlT3B0aW9uLFxuICBJU2NoZW1hUGFnZSxcbiAgSVRyYW5zaXRpb25BcHBlYXIsXG4gIElUcmFuc2l0aW9uRGF0YSxcbiAgSVRyYW5zaXRpb25QYWdlLFxuICBMaW5rRXZlbnQsXG4gIFJlcXVlc3RDdXN0b21FcnJvcixcbiAgUmVxdWVzdEVycm9yT3JSZXNwb25zZSxcbiAgU2NoZW1hQXR0cmlidXRlVmFsdWVzLFxuICBUcmlnZ2VyLFxuICBXcmFwcGVyLFxufSBmcm9tICcuL2RlZnMnO1xuLy8gSG9va3NcbmltcG9ydCB7IGhvb2tzIH0gZnJvbSAnLi9ob29rcyc7XG4vLyBNb2R1bGVzXG5pbXBvcnQgeyBDYWNoZSB9IGZyb20gJy4vbW9kdWxlcy9DYWNoZSc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL21vZHVsZXMvTG9nZ2VyJztcbmltcG9ydCB7IFByZXZlbnQgfSBmcm9tICcuL21vZHVsZXMvUHJldmVudCc7XG5pbXBvcnQgeyBUcmFuc2l0aW9ucyB9IGZyb20gJy4vbW9kdWxlcy9UcmFuc2l0aW9ucyc7XG5pbXBvcnQgeyBWaWV3cyB9IGZyb20gJy4vbW9kdWxlcy9WaWV3cyc7XG4vLyBQb2x5ZmlsbHNcbmltcG9ydCAnLi9wb2x5ZmlsbHMnO1xuLy8gU2NoZW1hc1xuaW1wb3J0IHsgc2NoZW1hQXR0cmlidXRlIH0gZnJvbSAnLi9zY2hlbWFzL2F0dHJpYnV0ZSc7XG5pbXBvcnQgeyBzY2hlbWFQYWdlIH0gZnJvbSAnLi9zY2hlbWFzL3BhZ2UnO1xuLy8gVXRpbHNcbmltcG9ydCB7IGRvbSwgaGVscGVycywgaGlzdG9yeSwgcmVxdWVzdCwgdXJsIH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBDb3JlIHtcbiAgLyoqXG4gICAqIFZlcnNpb24uXG4gICAqL1xuICBwdWJsaWMgdmVyc2lvbjogc3RyaW5nID0gdmVyc2lvbjtcbiAgLyoqXG4gICAqIFNjaGVtYXMuXG4gICAqL1xuICBwdWJsaWMgc2NoZW1hUGFnZTogSVNjaGVtYVBhZ2UgPSBzY2hlbWFQYWdlO1xuICAvKipcbiAgICogTG9nZ2VyIGNsYXNzLCBhbGxvd3MgcGx1Z2lucyB0byBjcmVhdGUgTG9nZ2VyLlxuICAgKi9cbiAgcHVibGljIExvZ2dlcjogdHlwZW9mIExvZ2dlciA9IExvZ2dlcjtcbiAgLyoqXG4gICAqIEJhcmJhIGxvZ2dlci5cbiAgICovXG4gIHB1YmxpYyBsb2dnZXI6IExvZ2dlciA9IG5ldyBMb2dnZXIoJ0BiYXJiYS9jb3JlJyk7XG4gIC8qKlxuICAgKiBQbHVnaW5zLlxuICAgKi9cbiAgcHVibGljIHBsdWdpbnM6IEFycmF5PElCYXJiYVBsdWdpbjxhbnk+PiA9IFtdO1xuICAvKipcbiAgICogT3B0aW9uc1xuICAgKi9cbiAgcHVibGljIHRpbWVvdXQ6IG51bWJlcjtcbiAgcHVibGljIGNhY2hlSWdub3JlOiBJZ25vcmVPcHRpb247XG4gIHB1YmxpYyBwcmVmZXRjaElnbm9yZTogSWdub3JlT3B0aW9uO1xuICAvKipcbiAgICogSG9va3NcbiAgICovXG4gIHB1YmxpYyBob29rcyA9IGhvb2tzO1xuICAvKipcbiAgICogTW9kdWxlcy5cbiAgICovXG4gIC8vIHB1YmxpYyBoaXN0b3J5OiBIaXN0b3J5O1xuICBwdWJsaWMgY2FjaGU6IENhY2hlO1xuICBwdWJsaWMgcHJldmVudDogUHJldmVudDtcbiAgcHVibGljIHRyYW5zaXRpb25zOiBUcmFuc2l0aW9ucztcbiAgcHVibGljIHZpZXdzOiBWaWV3cztcbiAgLyoqXG4gICAqIFV0aWxzLlxuICAgKi9cbiAgcHVibGljIGRvbSA9IGRvbTtcbiAgcHVibGljIGhlbHBlcnMgPSBoZWxwZXJzO1xuICBwdWJsaWMgaGlzdG9yeSA9IGhpc3Rvcnk7XG4gIHB1YmxpYyByZXF1ZXN0ID0gcmVxdWVzdDtcbiAgcHVibGljIHVybCA9IHVybDtcblxuICBwcml2YXRlIF9kYXRhOiBJVHJhbnNpdGlvbkRhdGE7XG4gIHByaXZhdGUgX3JlcXVlc3RDdXN0b21FcnJvcjogUmVxdWVzdEN1c3RvbUVycm9yO1xuICBwcml2YXRlIF93cmFwcGVyOiBXcmFwcGVyO1xuXG4gIC8qKlxuICAgKiAjIyMgSW5pdCBwbHVnaW4gd2l0aCBvcHRpb25zLlxuICAgKlxuICAgKiBTZWUgW1tJQmFyYmFQbHVnaW5dXSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgcHVibGljIHVzZTxUPihwbHVnaW46IElCYXJiYVBsdWdpbjxUPiwgb3B0aW9ucz86IFQpOiB2b2lkIHtcbiAgICBjb25zdCBpbnN0YWxsZWRQbHVnaW5zID0gdGhpcy5wbHVnaW5zO1xuXG4gICAgLy8gUGx1Z2luIGluc3RhbGxhdGlvblxuICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmluZGV4T2YocGx1Z2luKSA+IC0xKSB7XG4gICAgICB0aGlzLmxvZ2dlci53YXJuKGBQbHVnaW4gWyR7cGx1Z2luLm5hbWV9XSBhbHJlYWR5IGluc3RhbGxlZC5gKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oYFBsdWdpbiBbJHtwbHVnaW4ubmFtZX1dIGhhcyBubyBcImluc3RhbGxcIiBtZXRob2QuYCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwbHVnaW4uaW5zdGFsbCh0aGlzLCBvcHRpb25zKTtcbiAgICBpbnN0YWxsZWRQbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgSW5pdCBiYXJiYSB3aXRoIG9wdGlvbnMuXG4gICAqXG4gICAqIFNlZSBbW0lCYXJiYU9wdGlvbnNdXSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKlxuICAgKiBEZWZhdWx0IHZhbHVlcyBhcmU6XG4gICAqXG4gICAqIC0gdHJhbnNpdGlvbnM6IGBbXWBcbiAgICogLSB2aWV3czogYFtdYFxuICAgKiAtIHRpbWVvdXQ6IGAyZTNgXG4gICAqIC0gY2FjaGVJZ25vcmU6IGBmYWxzZWBcbiAgICogLSBwcmVmZXRjaElnbm9yZTogYGZhbHNlYFxuICAgKiAtIHNjaGVtYTogW1tTY2hlbWFBdHRyaWJ1dGVdXVxuICAgKiAtIGRlYnVnOiBgZmFsc2VgXG4gICAqIC0gbG9nTGV2ZWw6IGAnZGVidWcnYFxuICAgKi9cbiAgcHVibGljIGluaXQoXG4gICAgLyoqIEBpZ25vcmUgKi8ge1xuICAgICAgdHJhbnNpdGlvbnMgPSBbXSxcbiAgICAgIHZpZXdzID0gW10sXG4gICAgICBwcmV2ZW50OiBwcmV2ZW50Q3VzdG9tID0gbnVsbCxcbiAgICAgIHRpbWVvdXQgPSAyZTMsXG4gICAgICByZXF1ZXN0RXJyb3IsXG4gICAgICBjYWNoZUlnbm9yZSA9IGZhbHNlLFxuICAgICAgcHJlZmV0Y2hJZ25vcmUgPSBmYWxzZSxcbiAgICAgIHNjaGVtYSA9IHNjaGVtYUF0dHJpYnV0ZSxcbiAgICAgIGRlYnVnID0gZmFsc2UsXG4gICAgICBsb2dMZXZlbCA9ICdvZmYnLFxuICAgIH06IElCYXJiYU9wdGlvbnMgPSB7fVxuICApIHtcbiAgICAvLyAwLiBTZXQgbG9nZ2VyIGxldmVsIGFuZCBwcmludCB2ZXJzaW9uXG4gICAgTG9nZ2VyLnNldExldmVsKGRlYnVnID09PSB0cnVlID8gJ2RlYnVnJyA6IGxvZ0xldmVsKTtcbiAgICB0aGlzLmxvZ2dlci5wcmludCh0aGlzLnZlcnNpb24pO1xuXG4gICAgLy8gMS4gTWFuYWdlIG9wdGlvbnNcbiAgICBPYmplY3Qua2V5cyhzY2hlbWEpLmZvckVhY2goayA9PiB7XG4gICAgICBjb25zdCBhdHRyID0gayBhcyBTY2hlbWFBdHRyaWJ1dGVWYWx1ZXM7XG5cbiAgICAgIGlmIChzY2hlbWFBdHRyaWJ1dGVbYXR0cl0pIHtcbiAgICAgICAgc2NoZW1hQXR0cmlidXRlW2F0dHJdID0gc2NoZW1hW2F0dHJdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuX3JlcXVlc3RDdXN0b21FcnJvciA9IHJlcXVlc3RFcnJvcjtcbiAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgIHRoaXMuY2FjaGVJZ25vcmUgPSBjYWNoZUlnbm9yZTtcbiAgICB0aGlzLnByZWZldGNoSWdub3JlID0gcHJlZmV0Y2hJZ25vcmU7XG5cbiAgICAvLyAyLiBHZXQgYW5kIGNoZWNrIHdyYXBwZXJcbiAgICB0aGlzLl93cmFwcGVyID0gdGhpcy5kb20uZ2V0V3JhcHBlcigpO1xuICAgIGlmICghdGhpcy5fd3JhcHBlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbQGJhcmJhL2NvcmVdIE5vIEJhcmJhIHdyYXBwZXIgZm91bmQnKTtcbiAgICB9XG4gICAgdGhpcy5fd3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsICdwb2xpdGUnKTsgLy8gQTExeVxuXG4gICAgLy8gMy4gSW5pdCBwYWdlcyAoZ2V0IFwiY3VycmVudFwiIGRhdGEpXG4gICAgdGhpcy5fcmVzZXREYXRhKCk7XG5cbiAgICBjb25zdCB7IGN1cnJlbnQgfSA9IHRoaXMuZGF0YTtcblxuICAgIGlmICghY3VycmVudC5jb250YWluZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW0BiYXJiYS9jb3JlXSBObyBCYXJiYSBjb250YWluZXIgZm91bmQnKTtcbiAgICB9XG5cbiAgICAvLyA0LiBJbml0IG90aGVyIG1vZHVsZXNcbiAgICB0aGlzLmNhY2hlID0gbmV3IENhY2hlKGNhY2hlSWdub3JlKTtcbiAgICB0aGlzLnByZXZlbnQgPSBuZXcgUHJldmVudChwcmVmZXRjaElnbm9yZSk7XG4gICAgdGhpcy50cmFuc2l0aW9ucyA9IG5ldyBUcmFuc2l0aW9ucyh0cmFuc2l0aW9ucyk7XG4gICAgdGhpcy52aWV3cyA9IG5ldyBWaWV3cyh2aWV3cyk7XG5cbiAgICAvLyBBZGQgcHJldmVudCBjdXN0b21cbiAgICBpZiAocHJldmVudEN1c3RvbSAhPT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiBwcmV2ZW50Q3VzdG9tICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignW0BiYXJiYS9jb3JlXSBQcmV2ZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJldmVudC5hZGQoJ3ByZXZlbnRDdXN0b20nLCBwcmV2ZW50Q3VzdG9tKTtcbiAgICB9XG5cbiAgICAvLyA1LiBVc2UgXCJjdXJyZW50XCIgZGF0YVxuICAgIC8vIFNldC91cGRhdGUgaGlzdG9yeVxuICAgIHRoaXMuaGlzdG9yeS5hZGQoY3VycmVudC51cmwuaHJlZiwgY3VycmVudC5uYW1lc3BhY2UpO1xuICAgIC8vIEFkZCB0byBjYWNoZVxuICAgIC8vIFRPRE86IGRvIG5vdCBjYWNoZSByZW5kZXJlciBIVE1MLCBvbmx5IHJlcXVlc3QgcmVzdWx0c+KAplxuICAgIC8vIHRoaXMuY2FjaGUuc2V0KGN1cnJlbnQudXJsLmhyZWYsIFByb21pc2UucmVzb2x2ZShjdXJyZW50Lmh0bWwpLCAnaW5pdCcpO1xuXG4gICAgLy8gNi4gQmluZCBjb250ZXh0XG4gICAgdGhpcy5fb25MaW5rRW50ZXIgPSB0aGlzLl9vbkxpbmtFbnRlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX29uTGlua0NsaWNrID0gdGhpcy5fb25MaW5rQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vblN0YXRlQ2hhbmdlID0gdGhpcy5fb25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2JpbmQoKTtcblxuICAgIC8vIDcuIEluaXQgcGx1Z2luc1xuICAgIHRoaXMucGx1Z2lucy5mb3JFYWNoKHBsdWdpbiA9PiBwbHVnaW4uaW5pdCgpKTtcblxuICAgIC8vIDguIEJhcmJhIHJlYWR5XG4gICAgLy8gU2V0IG5leHQgKyB0cmlnZ2VyIGZvciBhcHBlYXIgYW5kIGBiZWZvcmVFbnRlcmAgdmlldyBvbiBwYWdlIGxvYWQuXG4gICAgY29uc3QgcmVhZHlEYXRhID0gdGhpcy5kYXRhO1xuXG4gICAgcmVhZHlEYXRhLnRyaWdnZXIgPSAnYmFyYmEnO1xuICAgIHJlYWR5RGF0YS5uZXh0ID0gcmVhZHlEYXRhLmN1cnJlbnQ7XG4gICAgdGhpcy5ob29rcy5kbygncmVhZHknLCByZWFkeURhdGEpO1xuXG4gICAgLy8gOS4gRmluYWxseSwgZG8gYXBwZWFy4oCmXG4gICAgdGhpcy5hcHBlYXIoKTtcbiAgICAvLyBDbGVhbiBkYXRhIGZvciBmaXJzdCBiYXJiYSB0cmFuc2l0aW9u4oCmXG4gICAgdGhpcy5fcmVzZXREYXRhKCk7XG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLl9yZXNldERhdGEoKTtcbiAgICB0aGlzLl91bmJpbmQoKTtcbiAgICB0aGlzLmhvb2tzLmNsZWFyKCk7XG4gICAgdGhpcy5wbHVnaW5zID0gW107XG4gIH1cblxuICBnZXQgZGF0YSgpOiBJVHJhbnNpdGlvbkRhdGEge1xuICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICB9XG5cbiAgZ2V0IHdyYXBwZXIoKTogSFRNTEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLl93cmFwcGVyO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyBGb3JjZSBhIHBhZ2UgY2hhbmdlIHdpdGhvdXQgQmFyYmEgdHJhbnNpdGlvbi5cbiAgICovXG4gIHB1YmxpYyBmb3JjZShocmVmOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAvLyBERVZcbiAgICAvLyBDYW4gYmUgdXNlZCB3YWl0aW5nIGFuaW1hdGlvbiBjYW5jZWxsYXRpb24gbWFuYWdlbWVudOKAplxuICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24oaHJlZik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIEdvIGZvciBhIEJhcmJhIHRyYW5zaXRpb24uXG4gICAqXG4gICAqIE1hbmFnZSBcInNlbGYgcGFnZVwiIGhyZWY6XG4gICAqXG4gICAqIC0gaWYgc2FtZSB1cmwgYW5kIG5vIHNlbGYgdHJhbnNpdGlvbiwga2VlcCBkZWZhdWx0IGJlaGF2aW9yXG4gICAqICAgLSBsaW5rOiByZWxvYWQgdGhlIHBhZ2VcbiAgICogICAtIGFuY2hvcjogc2Nyb2xsIHRvXG4gICAqIC0gaWYgc2FtZSB1cmwgd2l0aCBzZWxmIHRyYW5zaXRpb24sIHVzZSBpdFxuICAgKiAtIHRoZW4gc3RhcnQgYSBwYWdlIHRyYW5zaXRpb24uXG4gICAqL1xuICBwdWJsaWMgZ28oXG4gICAgaHJlZjogc3RyaW5nLFxuICAgIHRyaWdnZXI6IFRyaWdnZXIgPSAnYmFyYmEnLFxuICAgIGU/OiBMaW5rRXZlbnQgfCBQb3BTdGF0ZUV2ZW50XG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGxldCBzZWxmID0gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBwcmV2ZW50IHNhbWVVUkwgYWdhaW5zdCBjdXJyZW50IGhpc3RvcnlcbiAgICBpZiAodHJpZ2dlciA9PT0gJ3BvcHN0YXRlJykge1xuICAgICAgc2VsZiA9XG4gICAgICAgIHRoaXMuaGlzdG9yeS5jdXJyZW50ICYmXG4gICAgICAgIHRoaXMudXJsLmdldFBhdGgodGhpcy5oaXN0b3J5LmN1cnJlbnQudXJsKSA9PT0gdGhpcy51cmwuZ2V0UGF0aChocmVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZiA9IHRoaXMucHJldmVudC5ydW4oJ3NhbWVVcmwnLCBudWxsLCBudWxsLCBocmVmKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZiAmJiAhdGhpcy50cmFuc2l0aW9ucy5oYXNTZWxmKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGUpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGFnZShocmVmLCB0cmlnZ2VyLCBzZWxmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgU3RhcnQgYW4gXCJhcHBlYXJcIiB0cmFuc2l0aW9uLlxuICAgKlxuICAgKiBJZiBzb21lIHJlZ2lzdGVyZWQgXCJhcHBlYXJcIiB0cmFuc2l0aW9uLFxuICAgKiBnZXQgdGhlIFwicmVzb2x2ZWRcIiB0cmFuc2l0aW9uIGZyb20gdGhlIHN0b3JlIGFuZCBzdGFydCBpdC5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBhcHBlYXIoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gQ2hlY2sgaWYgYXBwZWFyIHRyYW5zaXRpb25cbiAgICBpZiAodGhpcy50cmFuc2l0aW9ucy5oYXNBcHBlYXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9kYXRhO1xuICAgICAgICBjb25zdCB0cmFuc2l0aW9uID0gdGhpcy50cmFuc2l0aW9ucy5nZXQoZGF0YSwge1xuICAgICAgICAgIGFwcGVhcjogdHJ1ZSxcbiAgICAgICAgfSkgYXMgSVRyYW5zaXRpb25BcHBlYXI7XG5cbiAgICAgICAgYXdhaXQgdGhpcy50cmFuc2l0aW9ucy5kb0FwcGVhcih7IHRyYW5zaXRpb24sIGRhdGEgfSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqICMjIyBTdGFydCBhIFwicGFnZVwiIHRyYW5zaXRpb24uXG4gICAqXG4gICAqIDEuIElmIG5vIHJ1bm5pbmcgdHJhbnNpdGlvbiwgdXBkYXRlcyBkYXRhIHdpdGggZnVsbCBVUkwgcHJvcGVydGllcyBhbmQgdHJpZ2dlci5cbiAgICogMi4gR2V0IHBhZ2UgZnJvbSBjYWNoZSBvciBpbml0IHJlcXVlc3QuXG4gICAqIDMuIFdhaXQgaWYgc29tZSB0cmFuc2l0aW9ucyBuZWVkIFwibmV4dFwiIGRhdGEgKGBzeW5jOiB0cnVlYCwgYHRvOiDigKZgKS5cbiAgICogNC4gTWFuYWdlIHRoZSBoaXN0b3J5LCBkZXBlbmRpbmcgb24gdHJpZ2dlci5cbiAgICogNS4gR2V0IFwiZGF0YVwiIGFuZCB0cmlnZ2VyIFwiZ29cIiBob29rLlxuICAgKiA2LiBHZXQgdGhlIFwicmVzb2x2ZWRcIiB0cmFuc2l0aW9uIGZyb20gdGhlIHN0b3JlIGFuZCBzdGFydCBpdC5cbiAgICogNy4gVXBkYXRlIHRpdGxlIGFuZCByZXNldCBkYXRhIChjdXJyZW50LCBuZXh0ID0gdW5kZWZpbmVkKS5cbiAgICpcbiAgICogPiBJZiBcInNlbGZcIiwgdXNlIHRoZSBcInNlbGZcIiB0cmFuc2l0aW9uXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgcGFnZShcbiAgICBocmVmOiBzdHJpbmcsXG4gICAgdHJpZ2dlcjogVHJpZ2dlcixcbiAgICBzZWxmOiBib29sZWFuXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIElmIGFuaW1hdGlvbiBydW5uaW5nLCBmb3JjZSByZWxvYWRcbiAgICBpZiAodGhpcy50cmFuc2l0aW9ucy5pc1J1bm5pbmcpIHtcbiAgICAgIHRoaXMuZm9yY2UoaHJlZik7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmRhdGEubmV4dC51cmwgPSB7XG4gICAgICBocmVmLFxuICAgICAgLi4udGhpcy51cmwucGFyc2UoaHJlZiksXG4gICAgfTtcbiAgICB0aGlzLmRhdGEudHJpZ2dlciA9IHRyaWdnZXI7XG5cbiAgICBjb25zdCBwYWdlID0gdGhpcy5jYWNoZS5oYXMoaHJlZilcbiAgICAgID8gdGhpcy5jYWNoZS51cGRhdGUoaHJlZiwgeyBhY3Rpb246ICdjbGljaycgfSkucmVxdWVzdFxuICAgICAgOiB0aGlzLmNhY2hlLnNldChcbiAgICAgICAgICBocmVmLFxuICAgICAgICAgIHRoaXMucmVxdWVzdChcbiAgICAgICAgICAgIGhyZWYsXG4gICAgICAgICAgICB0aGlzLnRpbWVvdXQsXG4gICAgICAgICAgICB0aGlzLm9uUmVxdWVzdEVycm9yLmJpbmQodGhpcywgdHJpZ2dlcilcbiAgICAgICAgICApLFxuICAgICAgICAgICdjbGljaydcbiAgICAgICAgKS5yZXF1ZXN0O1xuXG4gICAgLy8gTmVlZCB0byB3YWl0IGJlZm9yZSBnZXR0aW5nIHRoZSByaWdodCB0cmFuc2l0aW9uXG4gICAgaWYgKHRoaXMudHJhbnNpdGlvbnMuc2hvdWxkV2FpdCkge1xuICAgICAgYXdhaXQgaGVscGVycy51cGRhdGUocGFnZSwgdGhpcy5kYXRhKTtcbiAgICB9XG5cbiAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhO1xuXG4gICAgLy8gSG9vazogYmV0d2VlbiB0cmlnZ2VyIGFuZCB0cmFuc2l0aW9uXG4gICAgLy8gQ2FuIGJlIHVzZWQgdG8gcmVzb2x2ZSBcInJvdXRlXCLigKZcbiAgICB0aGlzLmhvb2tzLmRvKCdwYWdlJywgZGF0YSk7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgdHJhbnNpdGlvbiA9IHRoaXMudHJhbnNpdGlvbnMuZ2V0KGRhdGEsIHtcbiAgICAgICAgYXBwZWFyOiBmYWxzZSxcbiAgICAgICAgc2VsZixcbiAgICAgIH0pIGFzIElUcmFuc2l0aW9uUGFnZTtcblxuICAgICAgYXdhaXQgdGhpcy50cmFuc2l0aW9ucy5kb1BhZ2Uoe1xuICAgICAgICBkYXRhLFxuICAgICAgICBwYWdlLFxuICAgICAgICB0cmFuc2l0aW9uLFxuICAgICAgICB3cmFwcGVyOiB0aGlzLl93cmFwcGVyLFxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX3Jlc2V0RGF0YSgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBTb21ldGhpbmcgd2VudCB3cm9uZyAocmVqZWN0ZWQgcHJvbWlzZSwgZXJyb3IsIDQwNCwgNTA1LCBvdGhlcuKApilcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGVycm9yKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV2hlbiBhIHJlcXVlc3QgZXJyb3Igb2NjdXJzLlxuICAgKlxuICAgKiBBbGxvdyB0aGUgdXNlciB0byBtYW5hZ2UgcmVxdWVzdCBlcnJvci4gKEUuZzogNDA0KVxuICAgKi9cbiAgcHVibGljIG9uUmVxdWVzdEVycm9yKHRyaWdnZXI6IFRyaWdnZXIsIC4uLmFyZ3M6IGFueSk6IGJvb2xlYW4ge1xuICAgIC8vIENhbmNlbCB0cmFuc2l0aW9uIHN0YXR1c1xuICAgIHRoaXMudHJhbnNpdGlvbnMuaXNSdW5uaW5nID0gZmFsc2U7XG5cbiAgICBjb25zdCBbaHJlZiwgcmVzcG9uc2VdOiBbc3RyaW5nLCBSZXF1ZXN0RXJyb3JPclJlc3BvbnNlXSA9IGFyZ3M7XG4gICAgY29uc3QgYWN0aW9uID0gdGhpcy5jYWNoZS5nZXRBY3Rpb24oaHJlZik7XG4gICAgdGhpcy5jYWNoZS5kZWxldGUoaHJlZik7XG5cbiAgICAvLyBDdXN0b20gcmVxdWVzdEVycm9yIHJldHVybmluZyBmYWxzZSB3aWxsIHJldHVybiBoZXJlLlxuICAgIGlmIChcbiAgICAgIHRoaXMuX3JlcXVlc3RDdXN0b21FcnJvciAmJlxuICAgICAgdGhpcy5fcmVxdWVzdEN1c3RvbUVycm9yKHRyaWdnZXIsIGFjdGlvbiwgaHJlZiwgcmVzcG9uc2UpID09PSBmYWxzZVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEZvcmNlIHBhZ2UgY2hhbmdlXG4gICAgaWYgKGFjdGlvbiA9PT0gJ2NsaWNrJykge1xuICAgICAgdGhpcy5mb3JjZShocmVmKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb2dyYW1tYXRpY2FsbHkgcHJlZmV0Y2hcbiAgICovXG4gIHB1YmxpYyBwcmVmZXRjaChocmVmOiBzdHJpbmcpIHtcbiAgICAvLyBBbHJlYWR5IGluIGNhY2hlXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBpZiAodGhpcy5jYWNoZS5oYXMoaHJlZikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNhY2hlLnNldChcbiAgICAgIGhyZWYsXG4gICAgICB0aGlzLnJlcXVlc3QoXG4gICAgICAgIGhyZWYsXG4gICAgICAgIHRoaXMudGltZW91dCxcbiAgICAgICAgdGhpcy5vblJlcXVlc3RFcnJvci5iaW5kKHRoaXMsICdiYXJiYScpXG4gICAgICApLmNhdGNoKChlcnJvcjogUmVxdWVzdEVycm9yT3JSZXNwb25zZSkgPT4ge1xuICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgICB9KSxcbiAgICAgICdwcmVmZXRjaCdcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmQgZXZlbnQgbGlzdGVuZXJzLlxuICAgKi9cbiAgcHJpdmF0ZSBfYmluZCgpOiB2b2lkIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh0aGlzLnByZWZldGNoSWdub3JlICE9PSB0cnVlKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCB0aGlzLl9vbkxpbmtFbnRlcik7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5fb25MaW5rRW50ZXIpO1xuICAgIH1cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX29uTGlua0NsaWNrKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCB0aGlzLl9vblN0YXRlQ2hhbmdlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCaW5kIGV2ZW50IGxpc3RlbmVycy5cbiAgICovXG4gIHByaXZhdGUgX3VuYmluZCgpOiB2b2lkIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh0aGlzLnByZWZldGNoSWdub3JlICE9PSB0cnVlKSB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCB0aGlzLl9vbkxpbmtFbnRlcik7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5fb25MaW5rRW50ZXIpO1xuICAgIH1cbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX29uTGlua0NsaWNrKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCB0aGlzLl9vblN0YXRlQ2hhbmdlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIGEgZWxlbWVudCBpcyBlbnRlcmVkLlxuICAgKlxuICAgKiBHZXQgdmFsaWQgbGluayBlbGVtZW50LlxuICAgKiBDYWNoZSBVUkwgaWYgbmVlZGVkLlxuICAgKi9cbiAgcHJpdmF0ZSBfb25MaW5rRW50ZXIoZTogTGlua0V2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgbGluayA9IHRoaXMuX2dldExpbmtFbGVtZW50KGUpO1xuXG4gICAgaWYgKCFsaW5rKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaHJlZiA9IHRoaXMuZG9tLmdldEhyZWYobGluayk7XG5cbiAgICBpZiAodGhpcy5wcmV2ZW50LmNoZWNrVXJsKGhyZWYpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQWxyZWFkeSBpbiBjYWNoZVxuICAgIGlmICh0aGlzLmNhY2hlLmhhcyhocmVmKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY2FjaGUuc2V0KFxuICAgICAgaHJlZixcbiAgICAgIHRoaXMucmVxdWVzdChcbiAgICAgICAgaHJlZixcbiAgICAgICAgdGhpcy50aW1lb3V0LFxuICAgICAgICB0aGlzLm9uUmVxdWVzdEVycm9yLmJpbmQodGhpcywgbGluaylcbiAgICAgICkuY2F0Y2goKGVycm9yOiBSZXF1ZXN0RXJyb3JPclJlc3BvbnNlKSA9PiB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGVycm9yKTtcbiAgICAgIH0pLFxuICAgICAgJ2VudGVyJ1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogV2hlbiBhbiBlbGVtZW50IGlzIGNsaWNrZWQuXG4gICAqXG4gICAqIEdldCB2YWxpZCBsaW5rIGVsZW1lbnQuXG4gICAqIFByZXZlbnQgc2FtZSBVUkwuXG4gICAqIEdvIGZvciBhIEJhcmJhIHRyYW5zaXRpb24uXG4gICAqL1xuICBwcml2YXRlIF9vbkxpbmtDbGljayhlOiBMaW5rRXZlbnQpOiB2b2lkIHtcbiAgICAvLyBUaGlzIHVzZSBgcHJldmVudC5jaGVja0xpbmtgIHVuZGVyIHRoZSBob29kIHRvIGdldCBlbGlnaWJsZSBsaW5rLlxuICAgIGNvbnN0IGxpbmsgPSB0aGlzLl9nZXRMaW5rRWxlbWVudChlKTtcblxuICAgIGlmICghbGluaykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZ28odGhpcy5kb20uZ2V0SHJlZihsaW5rKSwgbGluaywgZSk7XG4gIH1cblxuICAvKipcbiAgICogV2hlbiBIaXN0b3J5IHN0YXRlIGNoYW5nZXMuXG4gICAqXG4gICAqIEdldCBcImhyZWZcIiBmcm9tIFVSTFxuICAgKiBHbyBmb3IgYSBCYXJiYSB0cmFuc2l0aW9uLlxuICAgKi9cbiAgcHJpdmF0ZSBfb25TdGF0ZUNoYW5nZSgpOiB2b2lkIHtcbiAgICB0aGlzLmdvKHRoaXMudXJsLmdldEhyZWYoKSwgJ3BvcHN0YXRlJyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgdmFsaWQgbGluayBhbmNlc3Rvci5cbiAgICpcbiAgICogQ2hlY2sgZm9yIGEgXCJocmVmXCIgYXR0cmlidXRlLlxuICAgKiBUaGVuIGNoZWNrIGlmIGVsaWdpYmxlIGZvciBCYXJiYS5cbiAgICovXG4gIHByaXZhdGUgX2dldExpbmtFbGVtZW50KGU6IExpbmtFdmVudCk6IEhUTUxMaW5rRWxlbWVudCB7XG4gICAgbGV0IGVsID0gZS50YXJnZXQgYXMgSFRNTExpbmtFbGVtZW50O1xuXG4gICAgd2hpbGUgKGVsICYmICF0aGlzLmRvbS5nZXRIcmVmKGVsKSkge1xuICAgICAgZWwgPSAoZWwgYXMgSFRNTEVsZW1lbnQpLnBhcmVudE5vZGUgYXMgSFRNTExpbmtFbGVtZW50O1xuICAgIH1cblxuICAgIC8vIENoZWNrIHByZXZlbnRcbiAgICBpZiAoIWVsIHx8IHRoaXMucHJldmVudC5jaGVja0xpbmsoZWwsIGUsIGVsLmhyZWYpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IHBhZ2VzIGRhdGEuXG4gICAqXG4gICAqIFNldCBcImN1cnJlbnRcIiBhbmQgdW5zZXQgXCJuZXh0XCIuXG4gICAqL1xuICBwcml2YXRlIF9yZXNldERhdGEoKSB7XG4gICAgY29uc3QgaHJlZiA9IHRoaXMudXJsLmdldEhyZWYoKTtcbiAgICBjb25zdCBjdXJyZW50ID0ge1xuICAgICAgY29udGFpbmVyOiB0aGlzLmRvbS5nZXRDb250YWluZXIoKSxcbiAgICAgIGh0bWw6IHRoaXMuZG9tLmdldEh0bWwoKSxcbiAgICAgIG5hbWVzcGFjZTogdGhpcy5kb20uZ2V0TmFtZXNwYWNlKCksXG4gICAgICB1cmw6IHtcbiAgICAgICAgaHJlZixcbiAgICAgICAgLi4udGhpcy51cmwucGFyc2UoaHJlZiksXG4gICAgICB9LFxuICAgIH07XG5cbiAgICB0aGlzLl9kYXRhID0ge1xuICAgICAgY3VycmVudCxcbiAgICAgIG5leHQ6IHsgLi4udGhpcy5zY2hlbWFQYWdlIH0sXG4gICAgICB0cmlnZ2VyOiB1bmRlZmluZWQsXG4gICAgfTtcblxuICAgIHRoaXMuaG9va3MuZG8oJ3Jlc2V0JywgdGhpcy5kYXRhKTtcbiAgfVxufVxuXG5jb25zdCBjb3JlID0gbmV3IENvcmUoKTtcblxuZXhwb3J0IGRlZmF1bHQgY29yZTtcbiIsIi8qKlxuICogQGJhcmJhL2Nzc1xuICogPGJyPjxicj5cbiAqICMjIEJhcmJhIENTUy5cbiAqXG4gKiAtIEFkZCBDU1MgY2xhc3Nlc1xuICogLSBNYW5hZ2UgQ1NTIHRyYW5zaXRpb25zXG4gKlxuICogQG1vZHVsZSBjc3NcbiAqIEBwcmVmZXJyZWRcbiAqL1xuXG4vKioqL1xuXG4vLyBEZWZpbml0aW9uc1xuaW1wb3J0IHtcbiAgSUJhcmJhUGx1Z2luLFxuICBJVHJhbnNpdGlvbkRhdGEsXG4gIElUcmFuc2l0aW9uUGFnZSxcbn0gZnJvbSAnQGJhcmJhL2NvcmUvc3JjL2RlZnMnO1xuXG5pbXBvcnQgeyBDb3JlIH0gZnJvbSAnQGJhcmJhL2NvcmUvc3JjL2NvcmUnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnQGJhcmJhL2NvcmUvc3JjL21vZHVsZXMvTG9nZ2VyJztcblxuaW1wb3J0IHsgSUNzc0NhbGxiYWNrcyB9IGZyb20gJy4vZGVmcy9jc3MnO1xuXG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi4vcGFja2FnZS5qc29uJztcblxuY2xhc3MgQ3NzIGltcGxlbWVudHMgSUJhcmJhUGx1Z2luPHt9PiB7XG4gIHB1YmxpYyBuYW1lID0gJ0BiYXJiYS9jc3MnO1xuICBwdWJsaWMgdmVyc2lvbiA9IHZlcnNpb247XG4gIHB1YmxpYyBiYXJiYTogQ29yZTtcbiAgcHVibGljIGxvZ2dlcjogTG9nZ2VyO1xuXG4gIHB1YmxpYyBwcmVmaXg6IHN0cmluZyA9ICdiYXJiYSc7XG4gIHB1YmxpYyBjYWxsYmFja3M6IElDc3NDYWxsYmFja3MgPSB7fTtcbiAgcHVibGljIGNiOiBhbnk7XG5cbiAgLy8gQ2hlY2sgaWYgdHJhbnNpdGlvbiBwcm9wZXJ0eSBhcHBsaWVkXG4gIHByaXZhdGUgX2hhc1RyYW5zaXRpb246IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogUGx1Z2luIGluc3RhbGxhdGlvbi5cbiAgICovXG4gIHB1YmxpYyBpbnN0YWxsKGJhcmJhOiBDb3JlKSB7XG4gICAgdGhpcy5sb2dnZXIgPSBuZXcgYmFyYmEuTG9nZ2VyKHRoaXMubmFtZSk7XG4gICAgdGhpcy5sb2dnZXIucHJpbnQodGhpcy52ZXJzaW9uKTtcbiAgICB0aGlzLmJhcmJhID0gYmFyYmE7XG4gICAgdGhpcy5fYXBwZWFyID0gdGhpcy5fYXBwZWFyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fbGVhdmUgPSB0aGlzLl9sZWF2ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2VudGVyID0gdGhpcy5fZW50ZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQbHVnaW4gaW5zdGFsbGF0aW9uLlxuICAgKi9cbiAgcHVibGljIGluaXQoKSB7XG4gICAgLy8gUmVnaXN0ZXIgaG9va3MgdG8gZ2V0IHByZWZpeFxuICAgIHRoaXMuYmFyYmEuaG9va3MuYmVmb3JlKHRoaXMuX2dldFByZWZpeCwgdGhpcyk7XG4gICAgdGhpcy5iYXJiYS5ob29rcy5iZWZvcmVBcHBlYXIodGhpcy5fZ2V0UHJlZml4LCB0aGlzKTtcblxuICAgIC8vIFJlZ2lzdGVyIGhvb2sgZm9yIENTUyBjbGFzc2VzXG4gICAgdGhpcy5iYXJiYS5ob29rcy5iZWZvcmVBcHBlYXIodGhpcy5fYmVmb3JlQXBwZWFyLCB0aGlzKTtcbiAgICB0aGlzLmJhcmJhLmhvb2tzLmFmdGVyQXBwZWFyKHRoaXMuX2FmdGVyQXBwZWFyLCB0aGlzKTtcbiAgICB0aGlzLmJhcmJhLmhvb2tzLmJlZm9yZUxlYXZlKHRoaXMuX2JlZm9yZUxlYXZlLCB0aGlzKTtcbiAgICB0aGlzLmJhcmJhLmhvb2tzLmFmdGVyTGVhdmUodGhpcy5fYWZ0ZXJMZWF2ZSwgdGhpcyk7XG4gICAgdGhpcy5iYXJiYS5ob29rcy5iZWZvcmVFbnRlcih0aGlzLl9iZWZvcmVFbnRlciwgdGhpcyk7XG4gICAgdGhpcy5iYXJiYS5ob29rcy5hZnRlckVudGVyKHRoaXMuX2FmdGVyRW50ZXIsIHRoaXMpO1xuXG4gICAgLy8gT3ZlcnJpZGUgbWFpbiB0cmFuc2l0aW9uc1xuICAgIHRoaXMuYmFyYmEudHJhbnNpdGlvbnMuYXBwZWFyID0gdGhpcy5fYXBwZWFyO1xuICAgIHRoaXMuYmFyYmEudHJhbnNpdGlvbnMubGVhdmUgPSB0aGlzLl9sZWF2ZTtcbiAgICB0aGlzLmJhcmJhLnRyYW5zaXRpb25zLmVudGVyID0gdGhpcy5fZW50ZXI7XG5cbiAgICAvLyBBZGQgZW1wdHkgZGVmYXVsdCB0cmFuc2l0aW9uIChmb3JjZSBwcmVwZW5kKVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgdGhpcy5iYXJiYS50cmFuc2l0aW9ucy5zdG9yZS5hbGwudW5zaGlmdCh7XG4gICAgICBuYW1lOiAnYmFyYmEnLFxuICAgICAgYXBwZWFyKCkge30sIC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tZW1wdHlcbiAgICAgIGxlYXZlKCkge30sIC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tZW1wdHlcbiAgICAgIGVudGVyKCkge30sIC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tZW1wdHlcbiAgICB9KTtcbiAgICB0aGlzLmJhcmJhLnRyYW5zaXRpb25zLnN0b3JlLnVwZGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWwgc3RhdGUuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgc3RhcnQoY29udGFpbmVyOiBIVE1MRWxlbWVudCwga2luZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gU2V0IGluaXRpYWwgQ1NTIHZhbHVlc1xuICAgIHRoaXMuYWRkKGNvbnRhaW5lciwga2luZCk7IC8vIENTUzogYWRkIGtpbmRcbiAgICBhd2FpdCB0aGlzLmJhcmJhLmhlbHBlcnMubmV4dFRpY2soKTtcbiAgICAvLyBBcHBseSBDU1MgdHJhbnNpdGlvblxuICAgIHRoaXMuYWRkKGNvbnRhaW5lciwgYCR7a2luZH0tYWN0aXZlYCk7IC8vIENTUzogYWRkIGtpbmQtYWN0aXZlXG4gICAgYXdhaXQgdGhpcy5iYXJiYS5oZWxwZXJzLm5leHRUaWNrKCk7XG4gIH1cblxuICAvKipcbiAgICogTmV4dCBmcmFtZSBzdGF0ZS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBuZXh0KGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIGtpbmQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgdGhpcy5faGFzVHJhbnNpdGlvbiA9IHRoaXMuX2NoZWNrVHJhbnNpdGlvbihjb250YWluZXIpO1xuXG4gICAgaWYgKHRoaXMuX2hhc1RyYW5zaXRpb24pIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gbGlzdGVuIHRoZSBlbmQgb2YgdGhlIGFuaW1hdGlvblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIHJlc29sdmUgPT4ge1xuICAgICAgICB0aGlzLmNiID0gcmVzb2x2ZTtcbiAgICAgICAgdGhpcy5jYWxsYmFja3Nba2luZF0gPSByZXNvbHZlO1xuXG4gICAgICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgcmVzb2x2ZSwgZmFsc2UpO1xuICAgICAgICBhd2FpdCB0aGlzLmJhcmJhLmhlbHBlcnMubmV4dFRpY2soKTtcbiAgICAgICAgdGhpcy5yZW1vdmUoY29udGFpbmVyLCBraW5kKTsgLy8gQ1NTOiByZW1vdmUga2luZFxuICAgICAgICAvLyBhd2FpdCB0aGlzLmJhcmJhLmhlbHBlcnMubmV4dFRpY2soKTtcbiAgICAgICAgdGhpcy5hZGQoY29udGFpbmVyLCBgJHtraW5kfS10b2ApOyAvLyBDU1M6IGFkZCBraW5kLXRvXG4gICAgICAgIGF3YWl0IHRoaXMuYmFyYmEuaGVscGVycy5uZXh0VGljaygpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlKGNvbnRhaW5lciwga2luZCk7IC8vIENTUzogcmVtb3ZlIGtpbmRcbiAgICAgIGF3YWl0IHRoaXMuYmFyYmEuaGVscGVycy5uZXh0VGljaygpO1xuICAgICAgdGhpcy5hZGQoY29udGFpbmVyLCBgJHtraW5kfS10b2ApOyAvLyBDU1M6IGFkZCBraW5kLXRvXG4gICAgICBhd2FpdCB0aGlzLmJhcmJhLmhlbHBlcnMubmV4dFRpY2soKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmluYWwgc3RhdGUuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZW5kKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIGtpbmQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMucmVtb3ZlKGNvbnRhaW5lciwgYCR7a2luZH0tdG9gKTsgLy8gQ1NTOiByZW1vdmUga2luZC10b1xuICAgIHRoaXMucmVtb3ZlKGNvbnRhaW5lciwgYCR7a2luZH0tYWN0aXZlYCk7IC8vIENTUzogcmVtb3ZlIGtpbmQtYWN0aXZlXG4gICAgY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCB0aGlzLmNhbGxiYWNrc1traW5kXSk7XG4gICAgdGhpcy5faGFzVHJhbnNpdGlvbiA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBDU1MgY2xhc3Nlcy5cbiAgICovXG4gIHB1YmxpYyBhZGQoZWw6IEhUTUxFbGVtZW50LCBzdGVwOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKGAke3RoaXMucHJlZml4fS0ke3N0ZXB9YCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIENTUyBjbGFzc2VzLlxuICAgKi9cbiAgcHVibGljIHJlbW92ZShlbDogSFRNTEVsZW1lbnQsIHN0ZXA6IHN0cmluZyk6IHZvaWQge1xuICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7dGhpcy5wcmVmaXh9LSR7c3RlcH1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgQ1NTIHByZWZpeCBmcm9tIHRyYW5zaXRpb24gYG5hbWVgIHByb3BlcnR5LlxuICAgKi9cbiAgcHJpdmF0ZSBfZ2V0UHJlZml4KGRhdGE6IElUcmFuc2l0aW9uRGF0YSwgdDogSVRyYW5zaXRpb25QYWdlKTogdm9pZCB7XG4gICAgdGhpcy5wcmVmaXggPSB0Lm5hbWUgfHwgJ2JhcmJhJztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBDU1MgdHJhbnNpdGlvbiBpcyBhcHBsaWVkXG4gICAqL1xuICBwcml2YXRlIF9jaGVja1RyYW5zaXRpb24oY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xuICAgIC8vIERFVjogY2hlY2sgZm9yIENTUyBhbmltYXRpb24gcHJvcGVydHk/XG4gICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoY29udGFpbmVyKS50cmFuc2l0aW9uRHVyYXRpb24gIT09ICcwcyc7XG4gIH1cblxuICAvKipcbiAgICogYGJlZm9yZUFwcGVhcmAgaG9vay5cbiAgICovXG4gIHByaXZhdGUgX2JlZm9yZUFwcGVhcihkYXRhOiBJVHJhbnNpdGlvbkRhdGEpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdGFydChkYXRhLmN1cnJlbnQuY29udGFpbmVyLCAnYXBwZWFyJyk7XG4gIH1cblxuICAvKipcbiAgICogYGFwcGVhcmAgaG9vay5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgX2FwcGVhcihcbiAgICBkYXRhOiBJVHJhbnNpdGlvbkRhdGEsXG4gICAgdDogSVRyYW5zaXRpb25QYWdlXG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgYXdhaXQgdGhpcy5iYXJiYS5ob29rcy5kbygnYXBwZWFyJywgZGF0YSwgdCk7XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0KGRhdGEuY3VycmVudC5jb250YWluZXIsICdhcHBlYXInKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBgYWZ0ZXJBcHBlYXJgIGhvb2suXG4gICAqL1xuICBwcml2YXRlIF9hZnRlckFwcGVhcihkYXRhOiBJVHJhbnNpdGlvbkRhdGEpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5lbmQoZGF0YS5jdXJyZW50LmNvbnRhaW5lciwgJ2FwcGVhcicpO1xuICB9XG5cbiAgLyoqXG4gICAqIGBiZWZvcmVMZWF2ZWAgaG9vay5cbiAgICovXG4gIHByaXZhdGUgX2JlZm9yZUxlYXZlKGRhdGE6IElUcmFuc2l0aW9uRGF0YSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLnN0YXJ0KGRhdGEuY3VycmVudC5jb250YWluZXIsICdsZWF2ZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIGBsZWF2ZWAgaG9vay5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgX2xlYXZlKFxuICAgIGRhdGE6IElUcmFuc2l0aW9uRGF0YSxcbiAgICB0OiBJVHJhbnNpdGlvblBhZ2VcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5iYXJiYS5ob29rcy5kbygnbGVhdmUnLCBkYXRhLCB0KTtcblxuICAgIHJldHVybiB0aGlzLm5leHQoZGF0YS5jdXJyZW50LmNvbnRhaW5lciwgJ2xlYXZlJyk7XG4gIH1cblxuICAvKipcbiAgICogYGFmdGVyTGVhdmVgIGhvb2suXG4gICAqL1xuICBwcml2YXRlIF9hZnRlckxlYXZlKGRhdGE6IElUcmFuc2l0aW9uRGF0YSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuZW5kKGRhdGEuY3VycmVudC5jb250YWluZXIsICdsZWF2ZScpO1xuICAgIC8vIEZvciBDU1MgdHJhbnNpdGlvbnMsIHdlIG5lZWQgdG8gcmVtb3ZlIGN1cnJlbnQgY29udGFpbmVyXG4gICAgLy8gZGlyZWN0bHkgYWZ0ZXIgdGhlIGxlYXZlIHRyYW5zaXRpb25cbiAgICB0aGlzLmJhcmJhLnRyYW5zaXRpb25zLnJlbW92ZShkYXRhKTtcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBgYmVmb3JlRW50ZXJgIGhvb2suXG4gICAqL1xuICBwcml2YXRlIF9iZWZvcmVFbnRlcihkYXRhOiBJVHJhbnNpdGlvbkRhdGEpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdGFydChkYXRhLm5leHQuY29udGFpbmVyLCAnZW50ZXInKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBgZW50ZXJgIGhvb2suXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIF9lbnRlcihcbiAgICBkYXRhOiBJVHJhbnNpdGlvbkRhdGEsXG4gICAgdDogSVRyYW5zaXRpb25QYWdlXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMuYmFyYmEuaG9va3MuZG8oJ2VudGVyJywgZGF0YSwgdCk7XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0KGRhdGEubmV4dC5jb250YWluZXIsICdlbnRlcicpO1xuICB9XG5cbiAgLyoqXG4gICAqIGBhZnRlckVudGVyYCBob29rLlxuICAgKi9cbiAgcHJpdmF0ZSBfYWZ0ZXJFbnRlcihkYXRhOiBJVHJhbnNpdGlvbkRhdGEpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5lbmQoZGF0YS5uZXh0LmNvbnRhaW5lciwgJ2VudGVyJyk7XG4gIH1cbn1cblxuY29uc3QgY3NzID0gbmV3IENzcygpO1xuXG5leHBvcnQgZGVmYXVsdCBjc3M7XG4iLCIvKlxuICogYW5pbWUuanMgdjMuMC4xXG4gKiAoYykgMjAxOSBKdWxpYW4gR2FybmllclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBhbmltZWpzLmNvbVxuICovXG5cbi8vIERlZmF1bHRzXG5cbnZhciBkZWZhdWx0SW5zdGFuY2VTZXR0aW5ncyA9IHtcbiAgdXBkYXRlOiBudWxsLFxuICBiZWdpbjogbnVsbCxcbiAgbG9vcEJlZ2luOiBudWxsLFxuICBjaGFuZ2VCZWdpbjogbnVsbCxcbiAgY2hhbmdlOiBudWxsLFxuICBjaGFuZ2VDb21wbGV0ZTogbnVsbCxcbiAgbG9vcENvbXBsZXRlOiBudWxsLFxuICBjb21wbGV0ZTogbnVsbCxcbiAgbG9vcDogMSxcbiAgZGlyZWN0aW9uOiAnbm9ybWFsJyxcbiAgYXV0b3BsYXk6IHRydWUsXG4gIHRpbWVsaW5lT2Zmc2V0OiAwXG59O1xuXG52YXIgZGVmYXVsdFR3ZWVuU2V0dGluZ3MgPSB7XG4gIGR1cmF0aW9uOiAxMDAwLFxuICBkZWxheTogMCxcbiAgZW5kRGVsYXk6IDAsXG4gIGVhc2luZzogJ2Vhc2VPdXRFbGFzdGljKDEsIC41KScsXG4gIHJvdW5kOiAwXG59O1xuXG52YXIgdmFsaWRUcmFuc2Zvcm1zID0gWyd0cmFuc2xhdGVYJywgJ3RyYW5zbGF0ZVknLCAndHJhbnNsYXRlWicsICdyb3RhdGUnLCAncm90YXRlWCcsICdyb3RhdGVZJywgJ3JvdGF0ZVonLCAnc2NhbGUnLCAnc2NhbGVYJywgJ3NjYWxlWScsICdzY2FsZVonLCAnc2tldycsICdza2V3WCcsICdza2V3WScsICdwZXJzcGVjdGl2ZSddO1xuXG4vLyBDYWNoaW5nXG5cbnZhciBjYWNoZSA9IHtcbiAgQ1NTOiB7fSxcbiAgc3ByaW5nczoge31cbn07XG5cbi8vIFV0aWxzXG5cbmZ1bmN0aW9uIG1pbk1heCh2YWwsIG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2YWwsIG1pbiksIG1heCk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ0NvbnRhaW5zKHN0ciwgdGV4dCkge1xuICByZXR1cm4gc3RyLmluZGV4T2YodGV4dCkgPiAtMTtcbn1cblxuZnVuY3Rpb24gYXBwbHlBcmd1bWVudHMoZnVuYywgYXJncykge1xuICByZXR1cm4gZnVuYy5hcHBseShudWxsLCBhcmdzKTtcbn1cblxudmFyIGlzID0ge1xuICBhcnI6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBBcnJheS5pc0FycmF5KGEpOyB9LFxuICBvYmo6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBzdHJpbmdDb250YWlucyhPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSksICdPYmplY3QnKTsgfSxcbiAgcHRoOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gaXMub2JqKGEpICYmIGEuaGFzT3duUHJvcGVydHkoJ3RvdGFsTGVuZ3RoJyk7IH0sXG4gIHN2ZzogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEgaW5zdGFuY2VvZiBTVkdFbGVtZW50OyB9LFxuICBpbnA6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBhIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudDsgfSxcbiAgZG9tOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5ub2RlVHlwZSB8fCBpcy5zdmcoYSk7IH0sXG4gIHN0cjogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIHR5cGVvZiBhID09PSAnc3RyaW5nJzsgfSxcbiAgZm5jOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gdHlwZW9mIGEgPT09ICdmdW5jdGlvbic7IH0sXG4gIHVuZDogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIHR5cGVvZiBhID09PSAndW5kZWZpbmVkJzsgfSxcbiAgaGV4OiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gLyheI1swLTlBLUZdezZ9JCl8KF4jWzAtOUEtRl17M30kKS9pLnRlc3QoYSk7IH0sXG4gIHJnYjogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIC9ecmdiLy50ZXN0KGEpOyB9LFxuICBoc2w6IGZ1bmN0aW9uIChhKSB7IHJldHVybiAvXmhzbC8udGVzdChhKTsgfSxcbiAgY29sOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gKGlzLmhleChhKSB8fCBpcy5yZ2IoYSkgfHwgaXMuaHNsKGEpKTsgfSxcbiAga2V5OiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gIWRlZmF1bHRJbnN0YW5jZVNldHRpbmdzLmhhc093blByb3BlcnR5KGEpICYmICFkZWZhdWx0VHdlZW5TZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShhKSAmJiBhICE9PSAndGFyZ2V0cycgJiYgYSAhPT0gJ2tleWZyYW1lcyc7IH1cbn07XG5cbi8vIEVhc2luZ3NcblxuZnVuY3Rpb24gcGFyc2VFYXNpbmdQYXJhbWV0ZXJzKHN0cmluZykge1xuICB2YXIgbWF0Y2ggPSAvXFwoKFteKV0rKVxcKS8uZXhlYyhzdHJpbmcpO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXS5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAocCkgeyByZXR1cm4gcGFyc2VGbG9hdChwKTsgfSkgOiBbXTtcbn1cblxuLy8gU3ByaW5nIHNvbHZlciBpbnNwaXJlZCBieSBXZWJraXQgQ29weXJpZ2h0IMKpIDIwMTYgQXBwbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBodHRwczovL3dlYmtpdC5vcmcvZGVtb3Mvc3ByaW5nL3NwcmluZy5qc1xuXG5mdW5jdGlvbiBzcHJpbmcoc3RyaW5nLCBkdXJhdGlvbikge1xuXG4gIHZhciBwYXJhbXMgPSBwYXJzZUVhc2luZ1BhcmFtZXRlcnMoc3RyaW5nKTtcbiAgdmFyIG1hc3MgPSBtaW5NYXgoaXMudW5kKHBhcmFtc1swXSkgPyAxIDogcGFyYW1zWzBdLCAuMSwgMTAwKTtcbiAgdmFyIHN0aWZmbmVzcyA9IG1pbk1heChpcy51bmQocGFyYW1zWzFdKSA/IDEwMCA6IHBhcmFtc1sxXSwgLjEsIDEwMCk7XG4gIHZhciBkYW1waW5nID0gbWluTWF4KGlzLnVuZChwYXJhbXNbMl0pID8gMTAgOiBwYXJhbXNbMl0sIC4xLCAxMDApO1xuICB2YXIgdmVsb2NpdHkgPSAgbWluTWF4KGlzLnVuZChwYXJhbXNbM10pID8gMCA6IHBhcmFtc1szXSwgLjEsIDEwMCk7XG4gIHZhciB3MCA9IE1hdGguc3FydChzdGlmZm5lc3MgLyBtYXNzKTtcbiAgdmFyIHpldGEgPSBkYW1waW5nIC8gKDIgKiBNYXRoLnNxcnQoc3RpZmZuZXNzICogbWFzcykpO1xuICB2YXIgd2QgPSB6ZXRhIDwgMSA/IHcwICogTWF0aC5zcXJ0KDEgLSB6ZXRhICogemV0YSkgOiAwO1xuICB2YXIgYSA9IDE7XG4gIHZhciBiID0gemV0YSA8IDEgPyAoemV0YSAqIHcwICsgLXZlbG9jaXR5KSAvIHdkIDogLXZlbG9jaXR5ICsgdzA7XG5cbiAgZnVuY3Rpb24gc29sdmVyKHQpIHtcbiAgICB2YXIgcHJvZ3Jlc3MgPSBkdXJhdGlvbiA/IChkdXJhdGlvbiAqIHQpIC8gMTAwMCA6IHQ7XG4gICAgaWYgKHpldGEgPCAxKSB7XG4gICAgICBwcm9ncmVzcyA9IE1hdGguZXhwKC1wcm9ncmVzcyAqIHpldGEgKiB3MCkgKiAoYSAqIE1hdGguY29zKHdkICogcHJvZ3Jlc3MpICsgYiAqIE1hdGguc2luKHdkICogcHJvZ3Jlc3MpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvZ3Jlc3MgPSAoYSArIGIgKiBwcm9ncmVzcykgKiBNYXRoLmV4cCgtcHJvZ3Jlc3MgKiB3MCk7XG4gICAgfVxuICAgIGlmICh0ID09PSAwIHx8IHQgPT09IDEpIHsgcmV0dXJuIHQ7IH1cbiAgICByZXR1cm4gMSAtIHByb2dyZXNzO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RHVyYXRpb24oKSB7XG4gICAgdmFyIGNhY2hlZCA9IGNhY2hlLnNwcmluZ3Nbc3RyaW5nXTtcbiAgICBpZiAoY2FjaGVkKSB7IHJldHVybiBjYWNoZWQ7IH1cbiAgICB2YXIgZnJhbWUgPSAxLzY7XG4gICAgdmFyIGVsYXBzZWQgPSAwO1xuICAgIHZhciByZXN0ID0gMDtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICBlbGFwc2VkICs9IGZyYW1lO1xuICAgICAgaWYgKHNvbHZlcihlbGFwc2VkKSA9PT0gMSkge1xuICAgICAgICByZXN0Kys7XG4gICAgICAgIGlmIChyZXN0ID49IDE2KSB7IGJyZWFrOyB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN0ID0gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGR1cmF0aW9uID0gZWxhcHNlZCAqIGZyYW1lICogMTAwMDtcbiAgICBjYWNoZS5zcHJpbmdzW3N0cmluZ10gPSBkdXJhdGlvbjtcbiAgICByZXR1cm4gZHVyYXRpb247XG4gIH1cblxuICByZXR1cm4gZHVyYXRpb24gPyBzb2x2ZXIgOiBnZXREdXJhdGlvbjtcblxufVxuXG4vLyBFbGFzdGljIGVhc2luZyBhZGFwdGVkIGZyb20galF1ZXJ5VUkgaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vZWFzaW5ncy9cblxuZnVuY3Rpb24gZWxhc3RpYyhhbXBsaXR1ZGUsIHBlcmlvZCkge1xuICBpZiAoIGFtcGxpdHVkZSA9PT0gdm9pZCAwICkgYW1wbGl0dWRlID0gMTtcbiAgaWYgKCBwZXJpb2QgPT09IHZvaWQgMCApIHBlcmlvZCA9IC41O1xuXG4gIHZhciBhID0gbWluTWF4KGFtcGxpdHVkZSwgMSwgMTApO1xuICB2YXIgcCA9IG1pbk1heChwZXJpb2QsIC4xLCAyKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuICh0ID09PSAwIHx8IHQgPT09IDEpID8gdCA6IFxuICAgICAgLWEgKiBNYXRoLnBvdygyLCAxMCAqICh0IC0gMSkpICogTWF0aC5zaW4oKCgodCAtIDEpIC0gKHAgLyAoTWF0aC5QSSAqIDIpICogTWF0aC5hc2luKDEgLyBhKSkpICogKE1hdGguUEkgKiAyKSkgLyBwKTtcbiAgfVxufVxuXG4vLyBCYXNpYyBzdGVwcyBlYXNpbmcgaW1wbGVtZW50YXRpb24gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZnIvZG9jcy9XZWIvQ1NTL3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uXG5cbmZ1bmN0aW9uIHN0ZXBzKHN0ZXBzKSB7XG4gIGlmICggc3RlcHMgPT09IHZvaWQgMCApIHN0ZXBzID0gMTA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7IHJldHVybiBNYXRoLnJvdW5kKHQgKiBzdGVwcykgKiAoMSAvIHN0ZXBzKTsgfTtcbn1cblxuLy8gQmV6aWVyRWFzaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmUvYmV6aWVyLWVhc2luZ1xuXG52YXIgYmV6aWVyID0gKGZ1bmN0aW9uICgpIHtcblxuICB2YXIga1NwbGluZVRhYmxlU2l6ZSA9IDExO1xuICB2YXIga1NhbXBsZVN0ZXBTaXplID0gMS4wIC8gKGtTcGxpbmVUYWJsZVNpemUgLSAxLjApO1xuXG4gIGZ1bmN0aW9uIEEoYUExLCBhQTIpIHsgcmV0dXJuIDEuMCAtIDMuMCAqIGFBMiArIDMuMCAqIGFBMSB9XG4gIGZ1bmN0aW9uIEIoYUExLCBhQTIpIHsgcmV0dXJuIDMuMCAqIGFBMiAtIDYuMCAqIGFBMSB9XG4gIGZ1bmN0aW9uIEMoYUExKSAgICAgIHsgcmV0dXJuIDMuMCAqIGFBMSB9XG5cbiAgZnVuY3Rpb24gY2FsY0JlemllcihhVCwgYUExLCBhQTIpIHsgcmV0dXJuICgoQShhQTEsIGFBMikgKiBhVCArIEIoYUExLCBhQTIpKSAqIGFUICsgQyhhQTEpKSAqIGFUIH1cbiAgZnVuY3Rpb24gZ2V0U2xvcGUoYVQsIGFBMSwgYUEyKSB7IHJldHVybiAzLjAgKiBBKGFBMSwgYUEyKSAqIGFUICogYVQgKyAyLjAgKiBCKGFBMSwgYUEyKSAqIGFUICsgQyhhQTEpIH1cblxuICBmdW5jdGlvbiBiaW5hcnlTdWJkaXZpZGUoYVgsIGFBLCBhQiwgbVgxLCBtWDIpIHtcbiAgICB2YXIgY3VycmVudFgsIGN1cnJlbnRULCBpID0gMDtcbiAgICBkbyB7XG4gICAgICBjdXJyZW50VCA9IGFBICsgKGFCIC0gYUEpIC8gMi4wO1xuICAgICAgY3VycmVudFggPSBjYWxjQmV6aWVyKGN1cnJlbnRULCBtWDEsIG1YMikgLSBhWDtcbiAgICAgIGlmIChjdXJyZW50WCA+IDAuMCkgeyBhQiA9IGN1cnJlbnRUOyB9IGVsc2UgeyBhQSA9IGN1cnJlbnRUOyB9XG4gICAgfSB3aGlsZSAoTWF0aC5hYnMoY3VycmVudFgpID4gMC4wMDAwMDAxICYmICsraSA8IDEwKTtcbiAgICByZXR1cm4gY3VycmVudFQ7XG4gIH1cblxuICBmdW5jdGlvbiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWCwgYUd1ZXNzVCwgbVgxLCBtWDIpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgdmFyIGN1cnJlbnRTbG9wZSA9IGdldFNsb3BlKGFHdWVzc1QsIG1YMSwgbVgyKTtcbiAgICAgIGlmIChjdXJyZW50U2xvcGUgPT09IDAuMCkgeyByZXR1cm4gYUd1ZXNzVDsgfVxuICAgICAgdmFyIGN1cnJlbnRYID0gY2FsY0JlemllcihhR3Vlc3NULCBtWDEsIG1YMikgLSBhWDtcbiAgICAgIGFHdWVzc1QgLT0gY3VycmVudFggLyBjdXJyZW50U2xvcGU7XG4gICAgfVxuICAgIHJldHVybiBhR3Vlc3NUO1xuICB9XG5cbiAgZnVuY3Rpb24gYmV6aWVyKG1YMSwgbVkxLCBtWDIsIG1ZMikge1xuXG4gICAgaWYgKCEoMCA8PSBtWDEgJiYgbVgxIDw9IDEgJiYgMCA8PSBtWDIgJiYgbVgyIDw9IDEpKSB7IHJldHVybjsgfVxuICAgIHZhciBzYW1wbGVWYWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KGtTcGxpbmVUYWJsZVNpemUpO1xuXG4gICAgaWYgKG1YMSAhPT0gbVkxIHx8IG1YMiAhPT0gbVkyKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtTcGxpbmVUYWJsZVNpemU7ICsraSkge1xuICAgICAgICBzYW1wbGVWYWx1ZXNbaV0gPSBjYWxjQmV6aWVyKGkgKiBrU2FtcGxlU3RlcFNpemUsIG1YMSwgbVgyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRURm9yWChhWCkge1xuXG4gICAgICB2YXIgaW50ZXJ2YWxTdGFydCA9IDA7XG4gICAgICB2YXIgY3VycmVudFNhbXBsZSA9IDE7XG4gICAgICB2YXIgbGFzdFNhbXBsZSA9IGtTcGxpbmVUYWJsZVNpemUgLSAxO1xuXG4gICAgICBmb3IgKDsgY3VycmVudFNhbXBsZSAhPT0gbGFzdFNhbXBsZSAmJiBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0gPD0gYVg7ICsrY3VycmVudFNhbXBsZSkge1xuICAgICAgICBpbnRlcnZhbFN0YXJ0ICs9IGtTYW1wbGVTdGVwU2l6ZTtcbiAgICAgIH1cblxuICAgICAgLS1jdXJyZW50U2FtcGxlO1xuXG4gICAgICB2YXIgZGlzdCA9IChhWCAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSkgLyAoc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGUgKyAxXSAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSk7XG4gICAgICB2YXIgZ3Vlc3NGb3JUID0gaW50ZXJ2YWxTdGFydCArIGRpc3QgKiBrU2FtcGxlU3RlcFNpemU7XG4gICAgICB2YXIgaW5pdGlhbFNsb3BlID0gZ2V0U2xvcGUoZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG5cbiAgICAgIGlmIChpbml0aWFsU2xvcGUgPj0gMC4wMDEpIHtcbiAgICAgICAgcmV0dXJuIG5ld3RvblJhcGhzb25JdGVyYXRlKGFYLCBndWVzc0ZvclQsIG1YMSwgbVgyKTtcbiAgICAgIH0gZWxzZSBpZiAoaW5pdGlhbFNsb3BlID09PSAwLjApIHtcbiAgICAgICAgcmV0dXJuIGd1ZXNzRm9yVDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBiaW5hcnlTdWJkaXZpZGUoYVgsIGludGVydmFsU3RhcnQsIGludGVydmFsU3RhcnQgKyBrU2FtcGxlU3RlcFNpemUsIG1YMSwgbVgyKTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoeCkge1xuICAgICAgaWYgKG1YMSA9PT0gbVkxICYmIG1YMiA9PT0gbVkyKSB7IHJldHVybiB4OyB9XG4gICAgICBpZiAoeCA9PT0gMCB8fCB4ID09PSAxKSB7IHJldHVybiB4OyB9XG4gICAgICByZXR1cm4gY2FsY0JlemllcihnZXRURm9yWCh4KSwgbVkxLCBtWTIpO1xuICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIGJlemllcjtcblxufSkoKTtcblxudmFyIHBlbm5lciA9IChmdW5jdGlvbiAoKSB7XG5cbiAgdmFyIG5hbWVzID0gWydRdWFkJywgJ0N1YmljJywgJ1F1YXJ0JywgJ1F1aW50JywgJ1NpbmUnLCAnRXhwbycsICdDaXJjJywgJ0JhY2snLCAnRWxhc3RpYyddO1xuXG4gIC8vIEFwcHJveGltYXRlZCBQZW5uZXIgZXF1YXRpb25zIGh0dHA6Ly9tYXR0aGV3bGVpbi5jb20vY2Vhc2VyL1xuXG4gIHZhciBjdXJ2ZXMgPSB7XG4gICAgSW46IFtcbiAgICAgIFswLjU1MCwgMC4wODUsIDAuNjgwLCAwLjUzMF0sIC8qIGluUXVhZCAqL1xuICAgICAgWzAuNTUwLCAwLjA1NSwgMC42NzUsIDAuMTkwXSwgLyogaW5DdWJpYyAqL1xuICAgICAgWzAuODk1LCAwLjAzMCwgMC42ODUsIDAuMjIwXSwgLyogaW5RdWFydCAqL1xuICAgICAgWzAuNzU1LCAwLjA1MCwgMC44NTUsIDAuMDYwXSwgLyogaW5RdWludCAqL1xuICAgICAgWzAuNDcwLCAwLjAwMCwgMC43NDUsIDAuNzE1XSwgLyogaW5TaW5lICovXG4gICAgICBbMC45NTAsIDAuMDUwLCAwLjc5NSwgMC4wMzVdLCAvKiBpbkV4cG8gKi9cbiAgICAgIFswLjYwMCwgMC4wNDAsIDAuOTgwLCAwLjMzNV0sIC8qIGluQ2lyYyAqL1xuICAgICAgWzAuNjAwLC0wLjI4MCwgMC43MzUsIDAuMDQ1XSwgLyogaW5CYWNrICovXG4gICAgICBlbGFzdGljIC8qIGluRWxhc3RpYyAqL1xuICAgIF0sXG4gICAgT3V0OiBbXG4gICAgICBbMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDBdLCAvKiBvdXRRdWFkICovXG4gICAgICBbMC4yMTUsIDAuNjEwLCAwLjM1NSwgMS4wMDBdLCAvKiBvdXRDdWJpYyAqL1xuICAgICAgWzAuMTY1LCAwLjg0MCwgMC40NDAsIDEuMDAwXSwgLyogb3V0UXVhcnQgKi9cbiAgICAgIFswLjIzMCwgMS4wMDAsIDAuMzIwLCAxLjAwMF0sIC8qIG91dFF1aW50ICovXG4gICAgICBbMC4zOTAsIDAuNTc1LCAwLjU2NSwgMS4wMDBdLCAvKiBvdXRTaW5lICovXG4gICAgICBbMC4xOTAsIDEuMDAwLCAwLjIyMCwgMS4wMDBdLCAvKiBvdXRFeHBvICovXG4gICAgICBbMC4wNzUsIDAuODIwLCAwLjE2NSwgMS4wMDBdLCAvKiBvdXRDaXJjICovXG4gICAgICBbMC4xNzUsIDAuODg1LCAwLjMyMCwgMS4yNzVdLCAvKiBvdXRCYWNrICovXG4gICAgICBmdW5jdGlvbiAoYSwgcCkgeyByZXR1cm4gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIDEgLSBlbGFzdGljKGEsIHApKDEgLSB0KTsgfTsgfSAvKiBvdXRFbGFzdGljICovXG4gICAgXSxcbiAgICBJbk91dDogW1xuICAgICAgWzAuNDU1LCAwLjAzMCwgMC41MTUsIDAuOTU1XSwgLyogaW5PdXRRdWFkICovXG4gICAgICBbMC42NDUsIDAuMDQ1LCAwLjM1NSwgMS4wMDBdLCAvKiBpbk91dEN1YmljICovXG4gICAgICBbMC43NzAsIDAuMDAwLCAwLjE3NSwgMS4wMDBdLCAvKiBpbk91dFF1YXJ0ICovXG4gICAgICBbMC44NjAsIDAuMDAwLCAwLjA3MCwgMS4wMDBdLCAvKiBpbk91dFF1aW50ICovXG4gICAgICBbMC40NDUsIDAuMDUwLCAwLjU1MCwgMC45NTBdLCAvKiBpbk91dFNpbmUgKi9cbiAgICAgIFsxLjAwMCwgMC4wMDAsIDAuMDAwLCAxLjAwMF0sIC8qIGluT3V0RXhwbyAqL1xuICAgICAgWzAuNzg1LCAwLjEzNSwgMC4xNTAsIDAuODYwXSwgLyogaW5PdXRDaXJjICovXG4gICAgICBbMC42ODAsLTAuNTUwLCAwLjI2NSwgMS41NTBdLCAvKiBpbk91dEJhY2sgKi9cbiAgICAgIGZ1bmN0aW9uIChhLCBwKSB7IHJldHVybiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdCA8IC41ID8gZWxhc3RpYyhhLCBwKSh0ICogMikgLyAyIDogMSAtIGVsYXN0aWMoYSwgcCkodCAqIC0yICsgMikgLyAyOyB9OyB9IC8qIGluT3V0RWxhc3RpYyAqL1xuICAgIF1cbiAgfTtcblxuICB2YXIgZWFzZXMgPSB7IFxuICAgIGxpbmVhcjogWzAuMjUwLCAwLjI1MCwgMC43NTAsIDAuNzUwXVxuICB9O1xuXG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBjb29yZHMgKSB7XG4gICAgY3VydmVzW2Nvb3Jkc10uZm9yRWFjaChmdW5jdGlvbiAoZWFzZSwgaSkge1xuICAgICAgZWFzZXNbJ2Vhc2UnK2Nvb3JkcytuYW1lc1tpXV0gPSBlYXNlO1xuICAgIH0pO1xuICB9O1xuXG4gIGZvciAodmFyIGNvb3JkcyBpbiBjdXJ2ZXMpIGxvb3AoIGNvb3JkcyApO1xuXG4gIHJldHVybiBlYXNlcztcblxufSkoKTtcblxuZnVuY3Rpb24gcGFyc2VFYXNpbmdzKGVhc2luZywgZHVyYXRpb24pIHtcbiAgaWYgKGlzLmZuYyhlYXNpbmcpKSB7IHJldHVybiBlYXNpbmc7IH1cbiAgdmFyIG5hbWUgPSBlYXNpbmcuc3BsaXQoJygnKVswXTtcbiAgdmFyIGVhc2UgPSBwZW5uZXJbbmFtZV07XG4gIHZhciBhcmdzID0gcGFyc2VFYXNpbmdQYXJhbWV0ZXJzKGVhc2luZyk7XG4gIHN3aXRjaCAobmFtZSkge1xuICAgIGNhc2UgJ3NwcmluZycgOiByZXR1cm4gc3ByaW5nKGVhc2luZywgZHVyYXRpb24pO1xuICAgIGNhc2UgJ2N1YmljQmV6aWVyJyA6IHJldHVybiBhcHBseUFyZ3VtZW50cyhiZXppZXIsIGFyZ3MpO1xuICAgIGNhc2UgJ3N0ZXBzJyA6IHJldHVybiBhcHBseUFyZ3VtZW50cyhzdGVwcywgYXJncyk7XG4gICAgZGVmYXVsdCA6IHJldHVybiBpcy5mbmMoZWFzZSkgPyBhcHBseUFyZ3VtZW50cyhlYXNlLCBhcmdzKSA6IGFwcGx5QXJndW1lbnRzKGJlemllciwgZWFzZSk7XG4gIH1cbn1cblxuLy8gU3RyaW5nc1xuXG5mdW5jdGlvbiBzZWxlY3RTdHJpbmcoc3RyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG5vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzdHIpO1xuICAgIHJldHVybiBub2RlcztcbiAgfSBjYXRjaChlKSB7XG4gICAgcmV0dXJuO1xuICB9XG59XG5cbi8vIEFycmF5c1xuXG5mdW5jdGlvbiBmaWx0ZXJBcnJheShhcnIsIGNhbGxiYWNrKSB7XG4gIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICB2YXIgdGhpc0FyZyA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMiA/IGFyZ3VtZW50c1sxXSA6IHZvaWQgMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGkgaW4gYXJyKSB7XG4gICAgICB2YXIgdmFsID0gYXJyW2ldO1xuICAgICAgaWYgKGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdmFsLCBpLCBhcnIpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHZhbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5BcnJheShhcnIpIHtcbiAgcmV0dXJuIGFyci5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuY29uY2F0KGlzLmFycihiKSA/IGZsYXR0ZW5BcnJheShiKSA6IGIpOyB9LCBbXSk7XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkobykge1xuICBpZiAoaXMuYXJyKG8pKSB7IHJldHVybiBvOyB9XG4gIGlmIChpcy5zdHIobykpIHsgbyA9IHNlbGVjdFN0cmluZyhvKSB8fCBvOyB9XG4gIGlmIChvIGluc3RhbmNlb2YgTm9kZUxpc3QgfHwgbyBpbnN0YW5jZW9mIEhUTUxDb2xsZWN0aW9uKSB7IHJldHVybiBbXS5zbGljZS5jYWxsKG8pOyB9XG4gIHJldHVybiBbb107XG59XG5cbmZ1bmN0aW9uIGFycmF5Q29udGFpbnMoYXJyLCB2YWwpIHtcbiAgcmV0dXJuIGFyci5zb21lKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhID09PSB2YWw7IH0pO1xufVxuXG4vLyBPYmplY3RzXG5cbmZ1bmN0aW9uIGNsb25lT2JqZWN0KG8pIHtcbiAgdmFyIGNsb25lID0ge307XG4gIGZvciAodmFyIHAgaW4gbykgeyBjbG9uZVtwXSA9IG9bcF07IH1cbiAgcmV0dXJuIGNsb25lO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlT2JqZWN0UHJvcHMobzEsIG8yKSB7XG4gIHZhciBvID0gY2xvbmVPYmplY3QobzEpO1xuICBmb3IgKHZhciBwIGluIG8xKSB7IG9bcF0gPSBvMi5oYXNPd25Qcm9wZXJ0eShwKSA/IG8yW3BdIDogbzFbcF07IH1cbiAgcmV0dXJuIG87XG59XG5cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0cyhvMSwgbzIpIHtcbiAgdmFyIG8gPSBjbG9uZU9iamVjdChvMSk7XG4gIGZvciAodmFyIHAgaW4gbzIpIHsgb1twXSA9IGlzLnVuZChvMVtwXSkgPyBvMltwXSA6IG8xW3BdOyB9XG4gIHJldHVybiBvO1xufVxuXG4vLyBDb2xvcnNcblxuZnVuY3Rpb24gcmdiVG9SZ2JhKHJnYlZhbHVlKSB7XG4gIHZhciByZ2IgPSAvcmdiXFwoKFxcZCssXFxzKltcXGRdKyxcXHMqW1xcZF0rKVxcKS9nLmV4ZWMocmdiVmFsdWUpO1xuICByZXR1cm4gcmdiID8gKFwicmdiYShcIiArIChyZ2JbMV0pICsgXCIsMSlcIikgOiByZ2JWYWx1ZTtcbn1cblxuZnVuY3Rpb24gaGV4VG9SZ2JhKGhleFZhbHVlKSB7XG4gIHZhciByZ3ggPSAvXiM/KFthLWZcXGRdKShbYS1mXFxkXSkoW2EtZlxcZF0pJC9pO1xuICB2YXIgaGV4ID0gaGV4VmFsdWUucmVwbGFjZShyZ3gsIGZ1bmN0aW9uIChtLCByLCBnLCBiKSB7IHJldHVybiByICsgciArIGcgKyBnICsgYiArIGI7IH0gKTtcbiAgdmFyIHJnYiA9IC9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2kuZXhlYyhoZXgpO1xuICB2YXIgciA9IHBhcnNlSW50KHJnYlsxXSwgMTYpO1xuICB2YXIgZyA9IHBhcnNlSW50KHJnYlsyXSwgMTYpO1xuICB2YXIgYiA9IHBhcnNlSW50KHJnYlszXSwgMTYpO1xuICByZXR1cm4gKFwicmdiYShcIiArIHIgKyBcIixcIiArIGcgKyBcIixcIiArIGIgKyBcIiwxKVwiKTtcbn1cblxuZnVuY3Rpb24gaHNsVG9SZ2JhKGhzbFZhbHVlKSB7XG4gIHZhciBoc2wgPSAvaHNsXFwoKFxcZCspLFxccyooW1xcZC5dKyklLFxccyooW1xcZC5dKyklXFwpL2cuZXhlYyhoc2xWYWx1ZSkgfHwgL2hzbGFcXCgoXFxkKyksXFxzKihbXFxkLl0rKSUsXFxzKihbXFxkLl0rKSUsXFxzKihbXFxkLl0rKVxcKS9nLmV4ZWMoaHNsVmFsdWUpO1xuICB2YXIgaCA9IHBhcnNlSW50KGhzbFsxXSwgMTApIC8gMzYwO1xuICB2YXIgcyA9IHBhcnNlSW50KGhzbFsyXSwgMTApIC8gMTAwO1xuICB2YXIgbCA9IHBhcnNlSW50KGhzbFszXSwgMTApIC8gMTAwO1xuICB2YXIgYSA9IGhzbFs0XSB8fCAxO1xuICBmdW5jdGlvbiBodWUycmdiKHAsIHEsIHQpIHtcbiAgICBpZiAodCA8IDApIHsgdCArPSAxOyB9XG4gICAgaWYgKHQgPiAxKSB7IHQgLT0gMTsgfVxuICAgIGlmICh0IDwgMS82KSB7IHJldHVybiBwICsgKHEgLSBwKSAqIDYgKiB0OyB9XG4gICAgaWYgKHQgPCAxLzIpIHsgcmV0dXJuIHE7IH1cbiAgICBpZiAodCA8IDIvMykgeyByZXR1cm4gcCArIChxIC0gcCkgKiAoMi8zIC0gdCkgKiA2OyB9XG4gICAgcmV0dXJuIHA7XG4gIH1cbiAgdmFyIHIsIGcsIGI7XG4gIGlmIChzID09IDApIHtcbiAgICByID0gZyA9IGIgPSBsO1xuICB9IGVsc2Uge1xuICAgIHZhciBxID0gbCA8IDAuNSA/IGwgKiAoMSArIHMpIDogbCArIHMgLSBsICogcztcbiAgICB2YXIgcCA9IDIgKiBsIC0gcTtcbiAgICByID0gaHVlMnJnYihwLCBxLCBoICsgMS8zKTtcbiAgICBnID0gaHVlMnJnYihwLCBxLCBoKTtcbiAgICBiID0gaHVlMnJnYihwLCBxLCBoIC0gMS8zKTtcbiAgfVxuICByZXR1cm4gKFwicmdiYShcIiArIChyICogMjU1KSArIFwiLFwiICsgKGcgKiAyNTUpICsgXCIsXCIgKyAoYiAqIDI1NSkgKyBcIixcIiArIGEgKyBcIilcIik7XG59XG5cbmZ1bmN0aW9uIGNvbG9yVG9SZ2IodmFsKSB7XG4gIGlmIChpcy5yZ2IodmFsKSkgeyByZXR1cm4gcmdiVG9SZ2JhKHZhbCk7IH1cbiAgaWYgKGlzLmhleCh2YWwpKSB7IHJldHVybiBoZXhUb1JnYmEodmFsKTsgfVxuICBpZiAoaXMuaHNsKHZhbCkpIHsgcmV0dXJuIGhzbFRvUmdiYSh2YWwpOyB9XG59XG5cbi8vIFVuaXRzXG5cbmZ1bmN0aW9uIGdldFVuaXQodmFsKSB7XG4gIHZhciBzcGxpdCA9IC8oW1xcK1xcLV0/WzAtOSNcXC5dKykoJXxweHxwdHxlbXxyZW18aW58Y218bW18ZXh8Y2h8cGN8dnd8dmh8dm1pbnx2bWF4fGRlZ3xyYWR8dHVybik/JC8uZXhlYyh2YWwpO1xuICBpZiAoc3BsaXQpIHsgcmV0dXJuIHNwbGl0WzJdOyB9XG59XG5cbmZ1bmN0aW9uIGdldFRyYW5zZm9ybVVuaXQocHJvcE5hbWUpIHtcbiAgaWYgKHN0cmluZ0NvbnRhaW5zKHByb3BOYW1lLCAndHJhbnNsYXRlJykgfHwgcHJvcE5hbWUgPT09ICdwZXJzcGVjdGl2ZScpIHsgcmV0dXJuICdweCc7IH1cbiAgaWYgKHN0cmluZ0NvbnRhaW5zKHByb3BOYW1lLCAncm90YXRlJykgfHwgc3RyaW5nQ29udGFpbnMocHJvcE5hbWUsICdza2V3JykpIHsgcmV0dXJuICdkZWcnOyB9XG59XG5cbi8vIFZhbHVlc1xuXG5mdW5jdGlvbiBnZXRGdW5jdGlvblZhbHVlKHZhbCwgYW5pbWF0YWJsZSkge1xuICBpZiAoIWlzLmZuYyh2YWwpKSB7IHJldHVybiB2YWw7IH1cbiAgcmV0dXJuIHZhbChhbmltYXRhYmxlLnRhcmdldCwgYW5pbWF0YWJsZS5pZCwgYW5pbWF0YWJsZS50b3RhbCk7XG59XG5cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZShlbCwgcHJvcCkge1xuICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKHByb3ApO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0UHhUb1VuaXQoZWwsIHZhbHVlLCB1bml0KSB7XG4gIHZhciB2YWx1ZVVuaXQgPSBnZXRVbml0KHZhbHVlKTtcbiAgaWYgKGFycmF5Q29udGFpbnMoW3VuaXQsICdkZWcnLCAncmFkJywgJ3R1cm4nXSwgdmFsdWVVbml0KSkgeyByZXR1cm4gdmFsdWU7IH1cbiAgdmFyIGNhY2hlZCA9IGNhY2hlLkNTU1t2YWx1ZSArIHVuaXRdO1xuICBpZiAoIWlzLnVuZChjYWNoZWQpKSB7IHJldHVybiBjYWNoZWQ7IH1cbiAgdmFyIGJhc2VsaW5lID0gMTAwO1xuICB2YXIgdGVtcEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbC50YWdOYW1lKTtcbiAgdmFyIHBhcmVudEVsID0gKGVsLnBhcmVudE5vZGUgJiYgKGVsLnBhcmVudE5vZGUgIT09IGRvY3VtZW50KSkgPyBlbC5wYXJlbnROb2RlIDogZG9jdW1lbnQuYm9keTtcbiAgcGFyZW50RWwuYXBwZW5kQ2hpbGQodGVtcEVsKTtcbiAgdGVtcEVsLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgdGVtcEVsLnN0eWxlLndpZHRoID0gYmFzZWxpbmUgKyB1bml0O1xuICB2YXIgZmFjdG9yID0gYmFzZWxpbmUgLyB0ZW1wRWwub2Zmc2V0V2lkdGg7XG4gIHBhcmVudEVsLnJlbW92ZUNoaWxkKHRlbXBFbCk7XG4gIHZhciBjb252ZXJ0ZWRVbml0ID0gZmFjdG9yICogcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIGNhY2hlLkNTU1t2YWx1ZSArIHVuaXRdID0gY29udmVydGVkVW5pdDtcbiAgcmV0dXJuIGNvbnZlcnRlZFVuaXQ7XG59XG5cbmZ1bmN0aW9uIGdldENTU1ZhbHVlKGVsLCBwcm9wLCB1bml0KSB7XG4gIGlmIChwcm9wIGluIGVsLnN0eWxlKSB7XG4gICAgdmFyIHVwcGVyY2FzZVByb3BOYW1lID0gcHJvcC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciB2YWx1ZSA9IGVsLnN0eWxlW3Byb3BdIHx8IGdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUodXBwZXJjYXNlUHJvcE5hbWUpIHx8ICcwJztcbiAgICByZXR1cm4gdW5pdCA/IGNvbnZlcnRQeFRvVW5pdChlbCwgdmFsdWUsIHVuaXQpIDogdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QW5pbWF0aW9uVHlwZShlbCwgcHJvcCkge1xuICBpZiAoaXMuZG9tKGVsKSAmJiAhaXMuaW5wKGVsKSAmJiAoZ2V0QXR0cmlidXRlKGVsLCBwcm9wKSB8fCAoaXMuc3ZnKGVsKSAmJiBlbFtwcm9wXSkpKSB7IHJldHVybiAnYXR0cmlidXRlJzsgfVxuICBpZiAoaXMuZG9tKGVsKSAmJiBhcnJheUNvbnRhaW5zKHZhbGlkVHJhbnNmb3JtcywgcHJvcCkpIHsgcmV0dXJuICd0cmFuc2Zvcm0nOyB9XG4gIGlmIChpcy5kb20oZWwpICYmIChwcm9wICE9PSAndHJhbnNmb3JtJyAmJiBnZXRDU1NWYWx1ZShlbCwgcHJvcCkpKSB7IHJldHVybiAnY3NzJzsgfVxuICBpZiAoZWxbcHJvcF0gIT0gbnVsbCkgeyByZXR1cm4gJ29iamVjdCc7IH1cbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudFRyYW5zZm9ybXMoZWwpIHtcbiAgaWYgKCFpcy5kb20oZWwpKSB7IHJldHVybjsgfVxuICB2YXIgc3RyID0gZWwuc3R5bGUudHJhbnNmb3JtIHx8ICcnO1xuICB2YXIgcmVnICA9IC8oXFx3KylcXCgoW14pXSopXFwpL2c7XG4gIHZhciB0cmFuc2Zvcm1zID0gbmV3IE1hcCgpO1xuICB2YXIgbTsgd2hpbGUgKG0gPSByZWcuZXhlYyhzdHIpKSB7IHRyYW5zZm9ybXMuc2V0KG1bMV0sIG1bMl0pOyB9XG4gIHJldHVybiB0cmFuc2Zvcm1zO1xufVxuXG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm1WYWx1ZShlbCwgcHJvcE5hbWUsIGFuaW1hdGFibGUsIHVuaXQpIHtcbiAgdmFyIGRlZmF1bHRWYWwgPSBzdHJpbmdDb250YWlucyhwcm9wTmFtZSwgJ3NjYWxlJykgPyAxIDogMCArIGdldFRyYW5zZm9ybVVuaXQocHJvcE5hbWUpO1xuICB2YXIgdmFsdWUgPSBnZXRFbGVtZW50VHJhbnNmb3JtcyhlbCkuZ2V0KHByb3BOYW1lKSB8fCBkZWZhdWx0VmFsO1xuICBpZiAoYW5pbWF0YWJsZSkge1xuICAgIGFuaW1hdGFibGUudHJhbnNmb3Jtcy5saXN0LnNldChwcm9wTmFtZSwgdmFsdWUpO1xuICAgIGFuaW1hdGFibGUudHJhbnNmb3Jtc1snbGFzdCddID0gcHJvcE5hbWU7XG4gIH1cbiAgcmV0dXJuIHVuaXQgPyBjb252ZXJ0UHhUb1VuaXQoZWwsIHZhbHVlLCB1bml0KSA6IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBnZXRPcmlnaW5hbFRhcmdldFZhbHVlKHRhcmdldCwgcHJvcE5hbWUsIHVuaXQsIGFuaW1hdGFibGUpIHtcbiAgc3dpdGNoIChnZXRBbmltYXRpb25UeXBlKHRhcmdldCwgcHJvcE5hbWUpKSB7XG4gICAgY2FzZSAndHJhbnNmb3JtJzogcmV0dXJuIGdldFRyYW5zZm9ybVZhbHVlKHRhcmdldCwgcHJvcE5hbWUsIGFuaW1hdGFibGUsIHVuaXQpO1xuICAgIGNhc2UgJ2Nzcyc6IHJldHVybiBnZXRDU1NWYWx1ZSh0YXJnZXQsIHByb3BOYW1lLCB1bml0KTtcbiAgICBjYXNlICdhdHRyaWJ1dGUnOiByZXR1cm4gZ2V0QXR0cmlidXRlKHRhcmdldCwgcHJvcE5hbWUpO1xuICAgIGRlZmF1bHQ6IHJldHVybiB0YXJnZXRbcHJvcE5hbWVdIHx8IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UmVsYXRpdmVWYWx1ZSh0bywgZnJvbSkge1xuICB2YXIgb3BlcmF0b3IgPSAvXihcXCo9fFxcKz18LT0pLy5leGVjKHRvKTtcbiAgaWYgKCFvcGVyYXRvcikgeyByZXR1cm4gdG87IH1cbiAgdmFyIHUgPSBnZXRVbml0KHRvKSB8fCAwO1xuICB2YXIgeCA9IHBhcnNlRmxvYXQoZnJvbSk7XG4gIHZhciB5ID0gcGFyc2VGbG9hdCh0by5yZXBsYWNlKG9wZXJhdG9yWzBdLCAnJykpO1xuICBzd2l0Y2ggKG9wZXJhdG9yWzBdWzBdKSB7XG4gICAgY2FzZSAnKyc6IHJldHVybiB4ICsgeSArIHU7XG4gICAgY2FzZSAnLSc6IHJldHVybiB4IC0geSArIHU7XG4gICAgY2FzZSAnKic6IHJldHVybiB4ICogeSArIHU7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVWYWx1ZSh2YWwsIHVuaXQpIHtcbiAgaWYgKGlzLmNvbCh2YWwpKSB7IHJldHVybiBjb2xvclRvUmdiKHZhbCk7IH1cbiAgdmFyIG9yaWdpbmFsVW5pdCA9IGdldFVuaXQodmFsKTtcbiAgdmFyIHVuaXRMZXNzID0gb3JpZ2luYWxVbml0ID8gdmFsLnN1YnN0cigwLCB2YWwubGVuZ3RoIC0gb3JpZ2luYWxVbml0Lmxlbmd0aCkgOiB2YWw7XG4gIHJldHVybiB1bml0ICYmICEvXFxzL2cudGVzdCh2YWwpID8gdW5pdExlc3MgKyB1bml0IDogdW5pdExlc3M7XG59XG5cbi8vIGdldFRvdGFsTGVuZ3RoKCkgZXF1aXZhbGVudCBmb3IgY2lyY2xlLCByZWN0LCBwb2x5bGluZSwgcG9seWdvbiBhbmQgbGluZSBzaGFwZXNcbi8vIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9TZWJMYW1ibGEvM2UwNTUwYzQ5NmMyMzY3MDk3NDRcblxuZnVuY3Rpb24gZ2V0RGlzdGFuY2UocDEsIHAyKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocDIueCAtIHAxLngsIDIpICsgTWF0aC5wb3cocDIueSAtIHAxLnksIDIpKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2lyY2xlTGVuZ3RoKGVsKSB7XG4gIHJldHVybiBNYXRoLlBJICogMiAqIGdldEF0dHJpYnV0ZShlbCwgJ3InKTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVjdExlbmd0aChlbCkge1xuICByZXR1cm4gKGdldEF0dHJpYnV0ZShlbCwgJ3dpZHRoJykgKiAyKSArIChnZXRBdHRyaWJ1dGUoZWwsICdoZWlnaHQnKSAqIDIpO1xufVxuXG5mdW5jdGlvbiBnZXRMaW5lTGVuZ3RoKGVsKSB7XG4gIHJldHVybiBnZXREaXN0YW5jZShcbiAgICB7eDogZ2V0QXR0cmlidXRlKGVsLCAneDEnKSwgeTogZ2V0QXR0cmlidXRlKGVsLCAneTEnKX0sIFxuICAgIHt4OiBnZXRBdHRyaWJ1dGUoZWwsICd4MicpLCB5OiBnZXRBdHRyaWJ1dGUoZWwsICd5MicpfVxuICApO1xufVxuXG5mdW5jdGlvbiBnZXRQb2x5bGluZUxlbmd0aChlbCkge1xuICB2YXIgcG9pbnRzID0gZWwucG9pbnRzO1xuICB2YXIgdG90YWxMZW5ndGggPSAwO1xuICB2YXIgcHJldmlvdXNQb3M7XG4gIGZvciAodmFyIGkgPSAwIDsgaSA8IHBvaW50cy5udW1iZXJPZkl0ZW1zOyBpKyspIHtcbiAgICB2YXIgY3VycmVudFBvcyA9IHBvaW50cy5nZXRJdGVtKGkpO1xuICAgIGlmIChpID4gMCkgeyB0b3RhbExlbmd0aCArPSBnZXREaXN0YW5jZShwcmV2aW91c1BvcywgY3VycmVudFBvcyk7IH1cbiAgICBwcmV2aW91c1BvcyA9IGN1cnJlbnRQb3M7XG4gIH1cbiAgcmV0dXJuIHRvdGFsTGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBnZXRQb2x5Z29uTGVuZ3RoKGVsKSB7XG4gIHZhciBwb2ludHMgPSBlbC5wb2ludHM7XG4gIHJldHVybiBnZXRQb2x5bGluZUxlbmd0aChlbCkgKyBnZXREaXN0YW5jZShwb2ludHMuZ2V0SXRlbShwb2ludHMubnVtYmVyT2ZJdGVtcyAtIDEpLCBwb2ludHMuZ2V0SXRlbSgwKSk7XG59XG5cbi8vIFBhdGggYW5pbWF0aW9uXG5cbmZ1bmN0aW9uIGdldFRvdGFsTGVuZ3RoKGVsKSB7XG4gIGlmIChlbC5nZXRUb3RhbExlbmd0aCkgeyByZXR1cm4gZWwuZ2V0VG90YWxMZW5ndGgoKTsgfVxuICBzd2l0Y2goZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnY2lyY2xlJzogcmV0dXJuIGdldENpcmNsZUxlbmd0aChlbCk7XG4gICAgY2FzZSAncmVjdCc6IHJldHVybiBnZXRSZWN0TGVuZ3RoKGVsKTtcbiAgICBjYXNlICdsaW5lJzogcmV0dXJuIGdldExpbmVMZW5ndGgoZWwpO1xuICAgIGNhc2UgJ3BvbHlsaW5lJzogcmV0dXJuIGdldFBvbHlsaW5lTGVuZ3RoKGVsKTtcbiAgICBjYXNlICdwb2x5Z29uJzogcmV0dXJuIGdldFBvbHlnb25MZW5ndGgoZWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldERhc2hvZmZzZXQoZWwpIHtcbiAgdmFyIHBhdGhMZW5ndGggPSBnZXRUb3RhbExlbmd0aChlbCk7XG4gIGVsLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWRhc2hhcnJheScsIHBhdGhMZW5ndGgpO1xuICByZXR1cm4gcGF0aExlbmd0aDtcbn1cblxuLy8gTW90aW9uIHBhdGhcblxuZnVuY3Rpb24gZ2V0UGFyZW50U3ZnRWwoZWwpIHtcbiAgdmFyIHBhcmVudEVsID0gZWwucGFyZW50Tm9kZTtcbiAgd2hpbGUgKGlzLnN2ZyhwYXJlbnRFbCkpIHtcbiAgICBwYXJlbnRFbCA9IHBhcmVudEVsLnBhcmVudE5vZGU7XG4gICAgaWYgKCFpcy5zdmcocGFyZW50RWwucGFyZW50Tm9kZSkpIHsgYnJlYWs7IH1cbiAgfVxuICByZXR1cm4gcGFyZW50RWw7XG59XG5cbmZ1bmN0aW9uIGdldFBhcmVudFN2ZyhwYXRoRWwsIHN2Z0RhdGEpIHtcbiAgdmFyIHN2ZyA9IHN2Z0RhdGEgfHwge307XG4gIHZhciBwYXJlbnRTdmdFbCA9IHN2Zy5lbCB8fCBnZXRQYXJlbnRTdmdFbChwYXRoRWwpO1xuICB2YXIgcmVjdCA9IHBhcmVudFN2Z0VsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgdmlld0JveEF0dHIgPSBnZXRBdHRyaWJ1dGUocGFyZW50U3ZnRWwsICd2aWV3Qm94Jyk7XG4gIHZhciB3aWR0aCA9IHJlY3Qud2lkdGg7XG4gIHZhciBoZWlnaHQgPSByZWN0LmhlaWdodDtcbiAgdmFyIHZpZXdCb3ggPSBzdmcudmlld0JveCB8fCAodmlld0JveEF0dHIgPyB2aWV3Qm94QXR0ci5zcGxpdCgnICcpIDogWzAsIDAsIHdpZHRoLCBoZWlnaHRdKTtcbiAgcmV0dXJuIHtcbiAgICBlbDogcGFyZW50U3ZnRWwsXG4gICAgdmlld0JveDogdmlld0JveCxcbiAgICB4OiB2aWV3Qm94WzBdIC8gMSxcbiAgICB5OiB2aWV3Qm94WzFdIC8gMSxcbiAgICB3OiB3aWR0aCAvIHZpZXdCb3hbMl0sXG4gICAgaDogaGVpZ2h0IC8gdmlld0JveFszXVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFBhdGgocGF0aCwgcGVyY2VudCkge1xuICB2YXIgcGF0aEVsID0gaXMuc3RyKHBhdGgpID8gc2VsZWN0U3RyaW5nKHBhdGgpWzBdIDogcGF0aDtcbiAgdmFyIHAgPSBwZXJjZW50IHx8IDEwMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHByb3BlcnR5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb3BlcnR5OiBwcm9wZXJ0eSxcbiAgICAgIGVsOiBwYXRoRWwsXG4gICAgICBzdmc6IGdldFBhcmVudFN2ZyhwYXRoRWwpLFxuICAgICAgdG90YWxMZW5ndGg6IGdldFRvdGFsTGVuZ3RoKHBhdGhFbCkgKiAocCAvIDEwMClcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UGF0aFByb2dyZXNzKHBhdGgsIHByb2dyZXNzKSB7XG4gIGZ1bmN0aW9uIHBvaW50KG9mZnNldCkge1xuICAgIGlmICggb2Zmc2V0ID09PSB2b2lkIDAgKSBvZmZzZXQgPSAwO1xuXG4gICAgdmFyIGwgPSBwcm9ncmVzcyArIG9mZnNldCA+PSAxID8gcHJvZ3Jlc3MgKyBvZmZzZXQgOiAwO1xuICAgIHJldHVybiBwYXRoLmVsLmdldFBvaW50QXRMZW5ndGgobCk7XG4gIH1cbiAgdmFyIHN2ZyA9IGdldFBhcmVudFN2ZyhwYXRoLmVsLCBwYXRoLnN2Zyk7XG4gIHZhciBwID0gcG9pbnQoKTtcbiAgdmFyIHAwID0gcG9pbnQoLTEpO1xuICB2YXIgcDEgPSBwb2ludCgrMSk7XG4gIHN3aXRjaCAocGF0aC5wcm9wZXJ0eSkge1xuICAgIGNhc2UgJ3gnOiByZXR1cm4gKHAueCAtIHN2Zy54KSAqIHN2Zy53O1xuICAgIGNhc2UgJ3knOiByZXR1cm4gKHAueSAtIHN2Zy55KSAqIHN2Zy5oO1xuICAgIGNhc2UgJ2FuZ2xlJzogcmV0dXJuIE1hdGguYXRhbjIocDEueSAtIHAwLnksIHAxLnggLSBwMC54KSAqIDE4MCAvIE1hdGguUEk7XG4gIH1cbn1cblxuLy8gRGVjb21wb3NlIHZhbHVlXG5cbmZ1bmN0aW9uIGRlY29tcG9zZVZhbHVlKHZhbCwgdW5pdCkge1xuICB2YXIgcmd4ID0gLy0/XFxkKlxcLj9cXGQrL2c7XG4gIHZhciB2YWx1ZSA9IHZhbGlkYXRlVmFsdWUoKGlzLnB0aCh2YWwpID8gdmFsLnRvdGFsTGVuZ3RoIDogdmFsKSwgdW5pdCkgKyAnJztcbiAgcmV0dXJuIHtcbiAgICBvcmlnaW5hbDogdmFsdWUsXG4gICAgbnVtYmVyczogdmFsdWUubWF0Y2gocmd4KSA/IHZhbHVlLm1hdGNoKHJneCkubWFwKE51bWJlcikgOiBbMF0sXG4gICAgc3RyaW5nczogKGlzLnN0cih2YWwpIHx8IHVuaXQpID8gdmFsdWUuc3BsaXQocmd4KSA6IFtdXG4gIH1cbn1cblxuLy8gQW5pbWF0YWJsZXNcblxuZnVuY3Rpb24gcGFyc2VUYXJnZXRzKHRhcmdldHMpIHtcbiAgdmFyIHRhcmdldHNBcnJheSA9IHRhcmdldHMgPyAoZmxhdHRlbkFycmF5KGlzLmFycih0YXJnZXRzKSA/IHRhcmdldHMubWFwKHRvQXJyYXkpIDogdG9BcnJheSh0YXJnZXRzKSkpIDogW107XG4gIHJldHVybiBmaWx0ZXJBcnJheSh0YXJnZXRzQXJyYXksIGZ1bmN0aW9uIChpdGVtLCBwb3MsIHNlbGYpIHsgcmV0dXJuIHNlbGYuaW5kZXhPZihpdGVtKSA9PT0gcG9zOyB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0QW5pbWF0YWJsZXModGFyZ2V0cykge1xuICB2YXIgcGFyc2VkID0gcGFyc2VUYXJnZXRzKHRhcmdldHMpO1xuICByZXR1cm4gcGFyc2VkLm1hcChmdW5jdGlvbiAodCwgaSkge1xuICAgIHJldHVybiB7dGFyZ2V0OiB0LCBpZDogaSwgdG90YWw6IHBhcnNlZC5sZW5ndGgsIHRyYW5zZm9ybXM6IHsgbGlzdDogZ2V0RWxlbWVudFRyYW5zZm9ybXModCkgfSB9O1xuICB9KTtcbn1cblxuLy8gUHJvcGVydGllc1xuXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wZXJ0eVR3ZWVucyhwcm9wLCB0d2VlblNldHRpbmdzKSB7XG4gIHZhciBzZXR0aW5ncyA9IGNsb25lT2JqZWN0KHR3ZWVuU2V0dGluZ3MpO1xuICAvLyBPdmVycmlkZSBkdXJhdGlvbiBpZiBlYXNpbmcgaXMgYSBzcHJpbmdcbiAgaWYgKC9ec3ByaW5nLy50ZXN0KHNldHRpbmdzLmVhc2luZykpIHsgc2V0dGluZ3MuZHVyYXRpb24gPSBzcHJpbmcoc2V0dGluZ3MuZWFzaW5nKTsgfVxuICBpZiAoaXMuYXJyKHByb3ApKSB7XG4gICAgdmFyIGwgPSBwcm9wLmxlbmd0aDtcbiAgICB2YXIgaXNGcm9tVG8gPSAobCA9PT0gMiAmJiAhaXMub2JqKHByb3BbMF0pKTtcbiAgICBpZiAoIWlzRnJvbVRvKSB7XG4gICAgICAvLyBEdXJhdGlvbiBkaXZpZGVkIGJ5IHRoZSBudW1iZXIgb2YgdHdlZW5zXG4gICAgICBpZiAoIWlzLmZuYyh0d2VlblNldHRpbmdzLmR1cmF0aW9uKSkgeyBzZXR0aW5ncy5kdXJhdGlvbiA9IHR3ZWVuU2V0dGluZ3MuZHVyYXRpb24gLyBsOyB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRyYW5zZm9ybSBbZnJvbSwgdG9dIHZhbHVlcyBzaG9ydGhhbmQgdG8gYSB2YWxpZCB0d2VlbiB2YWx1ZVxuICAgICAgcHJvcCA9IHt2YWx1ZTogcHJvcH07XG4gICAgfVxuICB9XG4gIHZhciBwcm9wQXJyYXkgPSBpcy5hcnIocHJvcCkgPyBwcm9wIDogW3Byb3BdO1xuICByZXR1cm4gcHJvcEFycmF5Lm1hcChmdW5jdGlvbiAodiwgaSkge1xuICAgIHZhciBvYmogPSAoaXMub2JqKHYpICYmICFpcy5wdGgodikpID8gdiA6IHt2YWx1ZTogdn07XG4gICAgLy8gRGVmYXVsdCBkZWxheSB2YWx1ZSBzaG91bGQgb25seSBiZSBhcHBsaWVkIHRvIHRoZSBmaXJzdCB0d2VlblxuICAgIGlmIChpcy51bmQob2JqLmRlbGF5KSkgeyBvYmouZGVsYXkgPSAhaSA/IHR3ZWVuU2V0dGluZ3MuZGVsYXkgOiAwOyB9XG4gICAgLy8gRGVmYXVsdCBlbmREZWxheSB2YWx1ZSBzaG91bGQgb25seSBiZSBhcHBsaWVkIHRvIHRoZSBsYXN0IHR3ZWVuXG4gICAgaWYgKGlzLnVuZChvYmouZW5kRGVsYXkpKSB7IG9iai5lbmREZWxheSA9IGkgPT09IHByb3BBcnJheS5sZW5ndGggLSAxID8gdHdlZW5TZXR0aW5ncy5lbmREZWxheSA6IDA7IH1cbiAgICByZXR1cm4gb2JqO1xuICB9KS5tYXAoZnVuY3Rpb24gKGspIHsgcmV0dXJuIG1lcmdlT2JqZWN0cyhrLCBzZXR0aW5ncyk7IH0pO1xufVxuXG5cbmZ1bmN0aW9uIGZsYXR0ZW5LZXlmcmFtZXMoa2V5ZnJhbWVzKSB7XG4gIHZhciBwcm9wZXJ0eU5hbWVzID0gZmlsdGVyQXJyYXkoZmxhdHRlbkFycmF5KGtleWZyYW1lcy5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gT2JqZWN0LmtleXMoa2V5KTsgfSkpLCBmdW5jdGlvbiAocCkgeyByZXR1cm4gaXMua2V5KHApOyB9KVxuICAucmVkdWNlKGZ1bmN0aW9uIChhLGIpIHsgaWYgKGEuaW5kZXhPZihiKSA8IDApIHsgYS5wdXNoKGIpOyB9IHJldHVybiBhOyB9LCBbXSk7XG4gIHZhciBwcm9wZXJ0aWVzID0ge307XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBpICkge1xuICAgIHZhciBwcm9wTmFtZSA9IHByb3BlcnR5TmFtZXNbaV07XG4gICAgcHJvcGVydGllc1twcm9wTmFtZV0gPSBrZXlmcmFtZXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBuZXdLZXkgPSB7fTtcbiAgICAgIGZvciAodmFyIHAgaW4ga2V5KSB7XG4gICAgICAgIGlmIChpcy5rZXkocCkpIHtcbiAgICAgICAgICBpZiAocCA9PSBwcm9wTmFtZSkgeyBuZXdLZXkudmFsdWUgPSBrZXlbcF07IH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdLZXlbcF0gPSBrZXlbcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdLZXk7XG4gICAgfSk7XG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wZXJ0eU5hbWVzLmxlbmd0aDsgaSsrKSBsb29wKCBpICk7XG4gIHJldHVybiBwcm9wZXJ0aWVzO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wZXJ0aWVzKHR3ZWVuU2V0dGluZ3MsIHBhcmFtcykge1xuICB2YXIgcHJvcGVydGllcyA9IFtdO1xuICB2YXIga2V5ZnJhbWVzID0gcGFyYW1zLmtleWZyYW1lcztcbiAgaWYgKGtleWZyYW1lcykgeyBwYXJhbXMgPSBtZXJnZU9iamVjdHMoZmxhdHRlbktleWZyYW1lcyhrZXlmcmFtZXMpLCBwYXJhbXMpOyB9XG4gIGZvciAodmFyIHAgaW4gcGFyYW1zKSB7XG4gICAgaWYgKGlzLmtleShwKSkge1xuICAgICAgcHJvcGVydGllcy5wdXNoKHtcbiAgICAgICAgbmFtZTogcCxcbiAgICAgICAgdHdlZW5zOiBub3JtYWxpemVQcm9wZXJ0eVR3ZWVucyhwYXJhbXNbcF0sIHR3ZWVuU2V0dGluZ3MpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHByb3BlcnRpZXM7XG59XG5cbi8vIFR3ZWVuc1xuXG5mdW5jdGlvbiBub3JtYWxpemVUd2VlblZhbHVlcyh0d2VlbiwgYW5pbWF0YWJsZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHR3ZWVuKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0RnVuY3Rpb25WYWx1ZSh0d2VlbltwXSwgYW5pbWF0YWJsZSk7XG4gICAgaWYgKGlzLmFycih2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUubWFwKGZ1bmN0aW9uICh2KSB7IHJldHVybiBnZXRGdW5jdGlvblZhbHVlKHYsIGFuaW1hdGFibGUpOyB9KTtcbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDEpIHsgdmFsdWUgPSB2YWx1ZVswXTsgfVxuICAgIH1cbiAgICB0W3BdID0gdmFsdWU7XG4gIH1cbiAgdC5kdXJhdGlvbiA9IHBhcnNlRmxvYXQodC5kdXJhdGlvbik7XG4gIHQuZGVsYXkgPSBwYXJzZUZsb2F0KHQuZGVsYXkpO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVHdlZW5zKHByb3AsIGFuaW1hdGFibGUpIHtcbiAgdmFyIHByZXZpb3VzVHdlZW47XG4gIHJldHVybiBwcm9wLnR3ZWVucy5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICB2YXIgdHdlZW4gPSBub3JtYWxpemVUd2VlblZhbHVlcyh0LCBhbmltYXRhYmxlKTtcbiAgICB2YXIgdHdlZW5WYWx1ZSA9IHR3ZWVuLnZhbHVlO1xuICAgIHZhciB0byA9IGlzLmFycih0d2VlblZhbHVlKSA/IHR3ZWVuVmFsdWVbMV0gOiB0d2VlblZhbHVlO1xuICAgIHZhciB0b1VuaXQgPSBnZXRVbml0KHRvKTtcbiAgICB2YXIgb3JpZ2luYWxWYWx1ZSA9IGdldE9yaWdpbmFsVGFyZ2V0VmFsdWUoYW5pbWF0YWJsZS50YXJnZXQsIHByb3AubmFtZSwgdG9Vbml0LCBhbmltYXRhYmxlKTtcbiAgICB2YXIgcHJldmlvdXNWYWx1ZSA9IHByZXZpb3VzVHdlZW4gPyBwcmV2aW91c1R3ZWVuLnRvLm9yaWdpbmFsIDogb3JpZ2luYWxWYWx1ZTtcbiAgICB2YXIgZnJvbSA9IGlzLmFycih0d2VlblZhbHVlKSA/IHR3ZWVuVmFsdWVbMF0gOiBwcmV2aW91c1ZhbHVlO1xuICAgIHZhciBmcm9tVW5pdCA9IGdldFVuaXQoZnJvbSkgfHwgZ2V0VW5pdChvcmlnaW5hbFZhbHVlKTtcbiAgICB2YXIgdW5pdCA9IHRvVW5pdCB8fCBmcm9tVW5pdDtcbiAgICBpZiAoaXMudW5kKHRvKSkgeyB0byA9IHByZXZpb3VzVmFsdWU7IH1cbiAgICB0d2Vlbi5mcm9tID0gZGVjb21wb3NlVmFsdWUoZnJvbSwgdW5pdCk7XG4gICAgdHdlZW4udG8gPSBkZWNvbXBvc2VWYWx1ZShnZXRSZWxhdGl2ZVZhbHVlKHRvLCBmcm9tKSwgdW5pdCk7XG4gICAgdHdlZW4uc3RhcnQgPSBwcmV2aW91c1R3ZWVuID8gcHJldmlvdXNUd2Vlbi5lbmQgOiAwO1xuICAgIHR3ZWVuLmVuZCA9IHR3ZWVuLnN0YXJ0ICsgdHdlZW4uZGVsYXkgKyB0d2Vlbi5kdXJhdGlvbiArIHR3ZWVuLmVuZERlbGF5O1xuICAgIHR3ZWVuLmVhc2luZyA9IHBhcnNlRWFzaW5ncyh0d2Vlbi5lYXNpbmcsIHR3ZWVuLmR1cmF0aW9uKTtcbiAgICB0d2Vlbi5pc1BhdGggPSBpcy5wdGgodHdlZW5WYWx1ZSk7XG4gICAgdHdlZW4uaXNDb2xvciA9IGlzLmNvbCh0d2Vlbi5mcm9tLm9yaWdpbmFsKTtcbiAgICBpZiAodHdlZW4uaXNDb2xvcikgeyB0d2Vlbi5yb3VuZCA9IDE7IH1cbiAgICBwcmV2aW91c1R3ZWVuID0gdHdlZW47XG4gICAgcmV0dXJuIHR3ZWVuO1xuICB9KTtcbn1cblxuLy8gVHdlZW4gcHJvZ3Jlc3NcblxudmFyIHNldFByb2dyZXNzVmFsdWUgPSB7XG4gIGNzczogZnVuY3Rpb24gKHQsIHAsIHYpIHsgcmV0dXJuIHQuc3R5bGVbcF0gPSB2OyB9LFxuICBhdHRyaWJ1dGU6IGZ1bmN0aW9uICh0LCBwLCB2KSB7IHJldHVybiB0LnNldEF0dHJpYnV0ZShwLCB2KTsgfSxcbiAgb2JqZWN0OiBmdW5jdGlvbiAodCwgcCwgdikgeyByZXR1cm4gdFtwXSA9IHY7IH0sXG4gIHRyYW5zZm9ybTogZnVuY3Rpb24gKHQsIHAsIHYsIHRyYW5zZm9ybXMsIG1hbnVhbCkge1xuICAgIHRyYW5zZm9ybXMubGlzdC5zZXQocCwgdik7XG4gICAgaWYgKHAgPT09IHRyYW5zZm9ybXMubGFzdCB8fCBtYW51YWwpIHtcbiAgICAgIHZhciBzdHIgPSAnJztcbiAgICAgIHRyYW5zZm9ybXMubGlzdC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgcHJvcCkgeyBzdHIgKz0gcHJvcCArIFwiKFwiICsgdmFsdWUgKyBcIikgXCI7IH0pO1xuICAgICAgdC5zdHlsZS50cmFuc2Zvcm0gPSBzdHI7XG4gICAgfVxuICB9XG59O1xuXG4vLyBTZXQgVmFsdWUgaGVscGVyXG5cbmZ1bmN0aW9uIHNldFRhcmdldHNWYWx1ZSh0YXJnZXRzLCBwcm9wZXJ0aWVzKSB7XG4gIHZhciBhbmltYXRhYmxlcyA9IGdldEFuaW1hdGFibGVzKHRhcmdldHMpO1xuICBhbmltYXRhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uIChhbmltYXRhYmxlKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gcHJvcGVydGllcykge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0RnVuY3Rpb25WYWx1ZShwcm9wZXJ0aWVzW3Byb3BlcnR5XSwgYW5pbWF0YWJsZSk7XG4gICAgICB2YXIgdGFyZ2V0ID0gYW5pbWF0YWJsZS50YXJnZXQ7XG4gICAgICB2YXIgdmFsdWVVbml0ID0gZ2V0VW5pdCh2YWx1ZSk7XG4gICAgICB2YXIgb3JpZ2luYWxWYWx1ZSA9IGdldE9yaWdpbmFsVGFyZ2V0VmFsdWUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWVVbml0LCBhbmltYXRhYmxlKTtcbiAgICAgIHZhciB1bml0ID0gdmFsdWVVbml0IHx8IGdldFVuaXQob3JpZ2luYWxWYWx1ZSk7XG4gICAgICB2YXIgdG8gPSBnZXRSZWxhdGl2ZVZhbHVlKHZhbGlkYXRlVmFsdWUodmFsdWUsIHVuaXQpLCBvcmlnaW5hbFZhbHVlKTtcbiAgICAgIHZhciBhbmltVHlwZSA9IGdldEFuaW1hdGlvblR5cGUodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgICBzZXRQcm9ncmVzc1ZhbHVlW2FuaW1UeXBlXSh0YXJnZXQsIHByb3BlcnR5LCB0bywgYW5pbWF0YWJsZS50cmFuc2Zvcm1zLCB0cnVlKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBBbmltYXRpb25zXG5cbmZ1bmN0aW9uIGNyZWF0ZUFuaW1hdGlvbihhbmltYXRhYmxlLCBwcm9wKSB7XG4gIHZhciBhbmltVHlwZSA9IGdldEFuaW1hdGlvblR5cGUoYW5pbWF0YWJsZS50YXJnZXQsIHByb3AubmFtZSk7XG4gIGlmIChhbmltVHlwZSkge1xuICAgIHZhciB0d2VlbnMgPSBub3JtYWxpemVUd2VlbnMocHJvcCwgYW5pbWF0YWJsZSk7XG4gICAgdmFyIGxhc3RUd2VlbiA9IHR3ZWVuc1t0d2VlbnMubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IGFuaW1UeXBlLFxuICAgICAgcHJvcGVydHk6IHByb3AubmFtZSxcbiAgICAgIGFuaW1hdGFibGU6IGFuaW1hdGFibGUsXG4gICAgICB0d2VlbnM6IHR3ZWVucyxcbiAgICAgIGR1cmF0aW9uOiBsYXN0VHdlZW4uZW5kLFxuICAgICAgZGVsYXk6IHR3ZWVuc1swXS5kZWxheSxcbiAgICAgIGVuZERlbGF5OiBsYXN0VHdlZW4uZW5kRGVsYXlcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QW5pbWF0aW9ucyhhbmltYXRhYmxlcywgcHJvcGVydGllcykge1xuICByZXR1cm4gZmlsdGVyQXJyYXkoZmxhdHRlbkFycmF5KGFuaW1hdGFibGVzLm1hcChmdW5jdGlvbiAoYW5pbWF0YWJsZSkge1xuICAgIHJldHVybiBwcm9wZXJ0aWVzLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUFuaW1hdGlvbihhbmltYXRhYmxlLCBwcm9wKTtcbiAgICB9KTtcbiAgfSkpLCBmdW5jdGlvbiAoYSkgeyByZXR1cm4gIWlzLnVuZChhKTsgfSk7XG59XG5cbi8vIENyZWF0ZSBJbnN0YW5jZVxuXG5mdW5jdGlvbiBnZXRJbnN0YW5jZVRpbWluZ3MoYW5pbWF0aW9ucywgdHdlZW5TZXR0aW5ncykge1xuICB2YXIgYW5pbUxlbmd0aCA9IGFuaW1hdGlvbnMubGVuZ3RoO1xuICB2YXIgZ2V0VGxPZmZzZXQgPSBmdW5jdGlvbiAoYW5pbSkgeyByZXR1cm4gYW5pbS50aW1lbGluZU9mZnNldCA/IGFuaW0udGltZWxpbmVPZmZzZXQgOiAwOyB9O1xuICB2YXIgdGltaW5ncyA9IHt9O1xuICB0aW1pbmdzLmR1cmF0aW9uID0gYW5pbUxlbmd0aCA/IE1hdGgubWF4LmFwcGx5KE1hdGgsIGFuaW1hdGlvbnMubWFwKGZ1bmN0aW9uIChhbmltKSB7IHJldHVybiBnZXRUbE9mZnNldChhbmltKSArIGFuaW0uZHVyYXRpb247IH0pKSA6IHR3ZWVuU2V0dGluZ3MuZHVyYXRpb247XG4gIHRpbWluZ3MuZGVsYXkgPSBhbmltTGVuZ3RoID8gTWF0aC5taW4uYXBwbHkoTWF0aCwgYW5pbWF0aW9ucy5tYXAoZnVuY3Rpb24gKGFuaW0pIHsgcmV0dXJuIGdldFRsT2Zmc2V0KGFuaW0pICsgYW5pbS5kZWxheTsgfSkpIDogdHdlZW5TZXR0aW5ncy5kZWxheTtcbiAgdGltaW5ncy5lbmREZWxheSA9IGFuaW1MZW5ndGggPyB0aW1pbmdzLmR1cmF0aW9uIC0gTWF0aC5tYXguYXBwbHkoTWF0aCwgYW5pbWF0aW9ucy5tYXAoZnVuY3Rpb24gKGFuaW0pIHsgcmV0dXJuIGdldFRsT2Zmc2V0KGFuaW0pICsgYW5pbS5kdXJhdGlvbiAtIGFuaW0uZW5kRGVsYXk7IH0pKSA6IHR3ZWVuU2V0dGluZ3MuZW5kRGVsYXk7XG4gIHJldHVybiB0aW1pbmdzO1xufVxuXG52YXIgaW5zdGFuY2VJRCA9IDA7XG5cbmZ1bmN0aW9uIGNyZWF0ZU5ld0luc3RhbmNlKHBhcmFtcykge1xuICB2YXIgaW5zdGFuY2VTZXR0aW5ncyA9IHJlcGxhY2VPYmplY3RQcm9wcyhkZWZhdWx0SW5zdGFuY2VTZXR0aW5ncywgcGFyYW1zKTtcbiAgdmFyIHR3ZWVuU2V0dGluZ3MgPSByZXBsYWNlT2JqZWN0UHJvcHMoZGVmYXVsdFR3ZWVuU2V0dGluZ3MsIHBhcmFtcyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gZ2V0UHJvcGVydGllcyh0d2VlblNldHRpbmdzLCBwYXJhbXMpO1xuICB2YXIgYW5pbWF0YWJsZXMgPSBnZXRBbmltYXRhYmxlcyhwYXJhbXMudGFyZ2V0cyk7XG4gIHZhciBhbmltYXRpb25zID0gZ2V0QW5pbWF0aW9ucyhhbmltYXRhYmxlcywgcHJvcGVydGllcyk7XG4gIHZhciB0aW1pbmdzID0gZ2V0SW5zdGFuY2VUaW1pbmdzKGFuaW1hdGlvbnMsIHR3ZWVuU2V0dGluZ3MpO1xuICB2YXIgaWQgPSBpbnN0YW5jZUlEO1xuICBpbnN0YW5jZUlEKys7XG4gIHJldHVybiBtZXJnZU9iamVjdHMoaW5zdGFuY2VTZXR0aW5ncywge1xuICAgIGlkOiBpZCxcbiAgICBjaGlsZHJlbjogW10sXG4gICAgYW5pbWF0YWJsZXM6IGFuaW1hdGFibGVzLFxuICAgIGFuaW1hdGlvbnM6IGFuaW1hdGlvbnMsXG4gICAgZHVyYXRpb246IHRpbWluZ3MuZHVyYXRpb24sXG4gICAgZGVsYXk6IHRpbWluZ3MuZGVsYXksXG4gICAgZW5kRGVsYXk6IHRpbWluZ3MuZW5kRGVsYXlcbiAgfSk7XG59XG5cbi8vIENvcmVcblxudmFyIGFjdGl2ZUluc3RhbmNlcyA9IFtdO1xudmFyIHBhdXNlZEluc3RhbmNlcyA9IFtdO1xudmFyIHJhZjtcblxudmFyIGVuZ2luZSA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIHBsYXkoKSB7IFxuICAgIHJhZiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKTtcbiAgfVxuICBmdW5jdGlvbiBzdGVwKHQpIHtcbiAgICB2YXIgYWN0aXZlSW5zdGFuY2VzTGVuZ3RoID0gYWN0aXZlSW5zdGFuY2VzLmxlbmd0aDtcbiAgICBpZiAoYWN0aXZlSW5zdGFuY2VzTGVuZ3RoKSB7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB3aGlsZSAoaSA8IGFjdGl2ZUluc3RhbmNlc0xlbmd0aCkge1xuICAgICAgICB2YXIgYWN0aXZlSW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZXNbaV07XG4gICAgICAgIGlmICghYWN0aXZlSW5zdGFuY2UucGF1c2VkKSB7XG4gICAgICAgICAgYWN0aXZlSW5zdGFuY2UudGljayh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaW5zdGFuY2VJbmRleCA9IGFjdGl2ZUluc3RhbmNlcy5pbmRleE9mKGFjdGl2ZUluc3RhbmNlKTtcbiAgICAgICAgICBpZiAoaW5zdGFuY2VJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICBhY3RpdmVJbnN0YW5jZXMuc3BsaWNlKGluc3RhbmNlSW5kZXgsIDEpO1xuICAgICAgICAgICAgYWN0aXZlSW5zdGFuY2VzTGVuZ3RoID0gYWN0aXZlSW5zdGFuY2VzLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgICAgcGxheSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYWYgPSBjYW5jZWxBbmltYXRpb25GcmFtZShyYWYpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGxheTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UoKSB7XG4gIGlmIChkb2N1bWVudC5oaWRkZW4pIHtcbiAgICBhY3RpdmVJbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5zKSB7IHJldHVybiBpbnMucGF1c2UoKTsgfSk7XG4gICAgcGF1c2VkSW5zdGFuY2VzID0gYWN0aXZlSW5zdGFuY2VzLnNsaWNlKDApO1xuICAgIGFjdGl2ZUluc3RhbmNlcyA9IFtdO1xuICB9IGVsc2Uge1xuICAgIHBhdXNlZEluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnMpIHsgcmV0dXJuIGlucy5wbGF5KCk7IH0pO1xuICB9XG59XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKTtcbn1cblxuLy8gUHVibGljIEluc3RhbmNlXG5cbmZ1bmN0aW9uIGFuaW1lKHBhcmFtcykge1xuICBpZiAoIHBhcmFtcyA9PT0gdm9pZCAwICkgcGFyYW1zID0ge307XG5cblxuICB2YXIgc3RhcnRUaW1lID0gMCwgbGFzdFRpbWUgPSAwLCBub3cgPSAwO1xuICB2YXIgY2hpbGRyZW4sIGNoaWxkcmVuTGVuZ3RoID0gMDtcbiAgdmFyIHJlc29sdmUgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIG1ha2VQcm9taXNlKGluc3RhbmNlKSB7XG4gICAgdmFyIHByb21pc2UgPSB3aW5kb3cuUHJvbWlzZSAmJiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoX3Jlc29sdmUpIHsgcmV0dXJuIHJlc29sdmUgPSBfcmVzb2x2ZTsgfSk7XG4gICAgaW5zdGFuY2UuZmluaXNoZWQgPSBwcm9taXNlO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgdmFyIGluc3RhbmNlID0gY3JlYXRlTmV3SW5zdGFuY2UocGFyYW1zKTtcbiAgdmFyIHByb21pc2UgPSBtYWtlUHJvbWlzZShpbnN0YW5jZSk7XG5cbiAgZnVuY3Rpb24gdG9nZ2xlSW5zdGFuY2VEaXJlY3Rpb24oKSB7XG4gICAgdmFyIGRpcmVjdGlvbiA9IGluc3RhbmNlLmRpcmVjdGlvbjtcbiAgICBpZiAoZGlyZWN0aW9uICE9PSAnYWx0ZXJuYXRlJykge1xuICAgICAgaW5zdGFuY2UuZGlyZWN0aW9uID0gZGlyZWN0aW9uICE9PSAnbm9ybWFsJyA/ICdub3JtYWwnIDogJ3JldmVyc2UnO1xuICAgIH1cbiAgICBpbnN0YW5jZS5yZXZlcnNlZCA9ICFpbnN0YW5jZS5yZXZlcnNlZDtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gY2hpbGQucmV2ZXJzZWQgPSBpbnN0YW5jZS5yZXZlcnNlZDsgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGp1c3RUaW1lKHRpbWUpIHtcbiAgICByZXR1cm4gaW5zdGFuY2UucmV2ZXJzZWQgPyBpbnN0YW5jZS5kdXJhdGlvbiAtIHRpbWUgOiB0aW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUaW1lKCkge1xuICAgIHN0YXJ0VGltZSA9IDA7XG4gICAgbGFzdFRpbWUgPSBhZGp1c3RUaW1lKGluc3RhbmNlLmN1cnJlbnRUaW1lKSAqICgxIC8gYW5pbWUuc3BlZWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2Vla0NpbGQodGltZSwgY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQpIHsgY2hpbGQuc2Vlayh0aW1lIC0gY2hpbGQudGltZWxpbmVPZmZzZXQpOyB9XG4gIH1cblxuICBmdW5jdGlvbiBzeW5jSW5zdGFuY2VDaGlsZHJlbih0aW1lKSB7XG4gICAgaWYgKCFpbnN0YW5jZS5yZXZlcnNlUGxheWJhY2spIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykgeyBzZWVrQ2lsZCh0aW1lLCBjaGlsZHJlbltpXSk7IH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSQxID0gY2hpbGRyZW5MZW5ndGg7IGkkMS0tOykgeyBzZWVrQ2lsZCh0aW1lLCBjaGlsZHJlbltpJDFdKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEFuaW1hdGlvbnNQcm9ncmVzcyhpbnNUaW1lKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhbmltYXRpb25zID0gaW5zdGFuY2UuYW5pbWF0aW9ucztcbiAgICB2YXIgYW5pbWF0aW9uc0xlbmd0aCA9IGFuaW1hdGlvbnMubGVuZ3RoO1xuICAgIHdoaWxlIChpIDwgYW5pbWF0aW9uc0xlbmd0aCkge1xuICAgICAgdmFyIGFuaW0gPSBhbmltYXRpb25zW2ldO1xuICAgICAgdmFyIGFuaW1hdGFibGUgPSBhbmltLmFuaW1hdGFibGU7XG4gICAgICB2YXIgdHdlZW5zID0gYW5pbS50d2VlbnM7XG4gICAgICB2YXIgdHdlZW5MZW5ndGggPSB0d2VlbnMubGVuZ3RoIC0gMTtcbiAgICAgIHZhciB0d2VlbiA9IHR3ZWVuc1t0d2Vlbkxlbmd0aF07XG4gICAgICAvLyBPbmx5IGNoZWNrIGZvciBrZXlmcmFtZXMgaWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSB0d2VlblxuICAgICAgaWYgKHR3ZWVuTGVuZ3RoKSB7IHR3ZWVuID0gZmlsdGVyQXJyYXkodHdlZW5zLCBmdW5jdGlvbiAodCkgeyByZXR1cm4gKGluc1RpbWUgPCB0LmVuZCk7IH0pWzBdIHx8IHR3ZWVuOyB9XG4gICAgICB2YXIgZWxhcHNlZCA9IG1pbk1heChpbnNUaW1lIC0gdHdlZW4uc3RhcnQgLSB0d2Vlbi5kZWxheSwgMCwgdHdlZW4uZHVyYXRpb24pIC8gdHdlZW4uZHVyYXRpb247XG4gICAgICB2YXIgZWFzZWQgPSBpc05hTihlbGFwc2VkKSA/IDEgOiB0d2Vlbi5lYXNpbmcoZWxhcHNlZCk7XG4gICAgICB2YXIgc3RyaW5ncyA9IHR3ZWVuLnRvLnN0cmluZ3M7XG4gICAgICB2YXIgcm91bmQgPSB0d2Vlbi5yb3VuZDtcbiAgICAgIHZhciBudW1iZXJzID0gW107XG4gICAgICB2YXIgdG9OdW1iZXJzTGVuZ3RoID0gdHdlZW4udG8ubnVtYmVycy5sZW5ndGg7XG4gICAgICB2YXIgcHJvZ3Jlc3MgPSAodm9pZCAwKTtcbiAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgdG9OdW1iZXJzTGVuZ3RoOyBuKyspIHtcbiAgICAgICAgdmFyIHZhbHVlID0gKHZvaWQgMCk7XG4gICAgICAgIHZhciB0b051bWJlciA9IHR3ZWVuLnRvLm51bWJlcnNbbl07XG4gICAgICAgIHZhciBmcm9tTnVtYmVyID0gdHdlZW4uZnJvbS5udW1iZXJzW25dIHx8IDA7XG4gICAgICAgIGlmICghdHdlZW4uaXNQYXRoKSB7XG4gICAgICAgICAgdmFsdWUgPSBmcm9tTnVtYmVyICsgKGVhc2VkICogKHRvTnVtYmVyIC0gZnJvbU51bWJlcikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gZ2V0UGF0aFByb2dyZXNzKHR3ZWVuLnZhbHVlLCBlYXNlZCAqIHRvTnVtYmVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocm91bmQpIHtcbiAgICAgICAgICBpZiAoISh0d2Vlbi5pc0NvbG9yICYmIG4gPiAyKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlICogcm91bmQpIC8gcm91bmQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG51bWJlcnMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICAvLyBNYW51YWwgQXJyYXkucmVkdWNlIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2VzXG4gICAgICB2YXIgc3RyaW5nc0xlbmd0aCA9IHN0cmluZ3MubGVuZ3RoO1xuICAgICAgaWYgKCFzdHJpbmdzTGVuZ3RoKSB7XG4gICAgICAgIHByb2dyZXNzID0gbnVtYmVyc1swXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2dyZXNzID0gc3RyaW5nc1swXTtcbiAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCBzdHJpbmdzTGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICB2YXIgYSA9IHN0cmluZ3Nbc107XG4gICAgICAgICAgdmFyIGIgPSBzdHJpbmdzW3MgKyAxXTtcbiAgICAgICAgICB2YXIgbiQxID0gbnVtYmVyc1tzXTtcbiAgICAgICAgICBpZiAoIWlzTmFOKG4kMSkpIHtcbiAgICAgICAgICAgIGlmICghYikge1xuICAgICAgICAgICAgICBwcm9ncmVzcyArPSBuJDEgKyAnICc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwcm9ncmVzcyArPSBuJDEgKyBiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2V0UHJvZ3Jlc3NWYWx1ZVthbmltLnR5cGVdKGFuaW1hdGFibGUudGFyZ2V0LCBhbmltLnByb3BlcnR5LCBwcm9ncmVzcywgYW5pbWF0YWJsZS50cmFuc2Zvcm1zKTtcbiAgICAgIGFuaW0uY3VycmVudFZhbHVlID0gcHJvZ3Jlc3M7XG4gICAgICBpKys7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0Q2FsbGJhY2soY2IpIHtcbiAgICBpZiAoaW5zdGFuY2VbY2JdICYmICFpbnN0YW5jZS5wYXNzVGhyb3VnaCkgeyBpbnN0YW5jZVtjYl0oaW5zdGFuY2UpOyB9XG4gIH1cblxuICBmdW5jdGlvbiBjb3VudEl0ZXJhdGlvbigpIHtcbiAgICBpZiAoaW5zdGFuY2UucmVtYWluaW5nICYmIGluc3RhbmNlLnJlbWFpbmluZyAhPT0gdHJ1ZSkge1xuICAgICAgaW5zdGFuY2UucmVtYWluaW5nLS07XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0SW5zdGFuY2VQcm9ncmVzcyhlbmdpbmVUaW1lKSB7XG4gICAgdmFyIGluc0R1cmF0aW9uID0gaW5zdGFuY2UuZHVyYXRpb247XG4gICAgdmFyIGluc0RlbGF5ID0gaW5zdGFuY2UuZGVsYXk7XG4gICAgdmFyIGluc0VuZERlbGF5ID0gaW5zRHVyYXRpb24gLSBpbnN0YW5jZS5lbmREZWxheTtcbiAgICB2YXIgaW5zVGltZSA9IGFkanVzdFRpbWUoZW5naW5lVGltZSk7XG4gICAgaW5zdGFuY2UucHJvZ3Jlc3MgPSBtaW5NYXgoKGluc1RpbWUgLyBpbnNEdXJhdGlvbikgKiAxMDAsIDAsIDEwMCk7XG4gICAgaW5zdGFuY2UucmV2ZXJzZVBsYXliYWNrID0gaW5zVGltZSA8IGluc3RhbmNlLmN1cnJlbnRUaW1lO1xuICAgIGlmIChjaGlsZHJlbikgeyBzeW5jSW5zdGFuY2VDaGlsZHJlbihpbnNUaW1lKTsgfVxuICAgIGlmICghaW5zdGFuY2UuYmVnYW4gJiYgaW5zdGFuY2UuY3VycmVudFRpbWUgPiAwKSB7XG4gICAgICBpbnN0YW5jZS5iZWdhbiA9IHRydWU7XG4gICAgICBzZXRDYWxsYmFjaygnYmVnaW4nKTtcbiAgICAgIHNldENhbGxiYWNrKCdsb29wQmVnaW4nKTtcbiAgICB9XG4gICAgaWYgKGluc1RpbWUgPD0gaW5zRGVsYXkgJiYgaW5zdGFuY2UuY3VycmVudFRpbWUgIT09IDApIHtcbiAgICAgIHNldEFuaW1hdGlvbnNQcm9ncmVzcygwKTtcbiAgICB9XG4gICAgaWYgKChpbnNUaW1lID49IGluc0VuZERlbGF5ICYmIGluc3RhbmNlLmN1cnJlbnRUaW1lICE9PSBpbnNEdXJhdGlvbikgfHwgIWluc0R1cmF0aW9uKSB7XG4gICAgICBzZXRBbmltYXRpb25zUHJvZ3Jlc3MoaW5zRHVyYXRpb24pO1xuICAgIH1cbiAgICBpZiAoaW5zVGltZSA+IGluc0RlbGF5ICYmIGluc1RpbWUgPCBpbnNFbmREZWxheSkge1xuICAgICAgaWYgKCFpbnN0YW5jZS5jaGFuZ2VCZWdhbikge1xuICAgICAgICBpbnN0YW5jZS5jaGFuZ2VCZWdhbiA9IHRydWU7XG4gICAgICAgIGluc3RhbmNlLmNoYW5nZUNvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICBzZXRDYWxsYmFjaygnY2hhbmdlQmVnaW4nKTtcbiAgICAgIH1cbiAgICAgIHNldENhbGxiYWNrKCdjaGFuZ2UnKTtcbiAgICAgIHNldEFuaW1hdGlvbnNQcm9ncmVzcyhpbnNUaW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGluc3RhbmNlLmNoYW5nZUJlZ2FuKSB7XG4gICAgICAgIGluc3RhbmNlLmNoYW5nZUNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGluc3RhbmNlLmNoYW5nZUJlZ2FuID0gZmFsc2U7XG4gICAgICAgIHNldENhbGxiYWNrKCdjaGFuZ2VDb21wbGV0ZScpO1xuICAgICAgfVxuICAgIH1cbiAgICBpbnN0YW5jZS5jdXJyZW50VGltZSA9IG1pbk1heChpbnNUaW1lLCAwLCBpbnNEdXJhdGlvbik7XG4gICAgaWYgKGluc3RhbmNlLmJlZ2FuKSB7IHNldENhbGxiYWNrKCd1cGRhdGUnKTsgfVxuICAgIGlmIChlbmdpbmVUaW1lID49IGluc0R1cmF0aW9uKSB7XG4gICAgICBsYXN0VGltZSA9IDA7XG4gICAgICBjb3VudEl0ZXJhdGlvbigpO1xuICAgICAgaWYgKGluc3RhbmNlLnJlbWFpbmluZykge1xuICAgICAgICBzdGFydFRpbWUgPSBub3c7XG4gICAgICAgIHNldENhbGxiYWNrKCdsb29wQ29tcGxldGUnKTtcbiAgICAgICAgc2V0Q2FsbGJhY2soJ2xvb3BCZWdpbicpO1xuICAgICAgICBpZiAoaW5zdGFuY2UuZGlyZWN0aW9uID09PSAnYWx0ZXJuYXRlJykgeyB0b2dnbGVJbnN0YW5jZURpcmVjdGlvbigpOyB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnN0YW5jZS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICBpZiAoIWluc3RhbmNlLmNvbXBsZXRlZCkge1xuICAgICAgICAgIGluc3RhbmNlLmNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgc2V0Q2FsbGJhY2soJ2xvb3BDb21wbGV0ZScpO1xuICAgICAgICAgIHNldENhbGxiYWNrKCdjb21wbGV0ZScpO1xuICAgICAgICAgIGlmICghaW5zdGFuY2UucGFzc1Rocm91Z2ggJiYgJ1Byb21pc2UnIGluIHdpbmRvdykge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgcHJvbWlzZSA9IG1ha2VQcm9taXNlKGluc3RhbmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpbnN0YW5jZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkaXJlY3Rpb24gPSBpbnN0YW5jZS5kaXJlY3Rpb247XG4gICAgaW5zdGFuY2UucGFzc1Rocm91Z2ggPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5jdXJyZW50VGltZSA9IDA7XG4gICAgaW5zdGFuY2UucHJvZ3Jlc3MgPSAwO1xuICAgIGluc3RhbmNlLnBhdXNlZCA9IHRydWU7XG4gICAgaW5zdGFuY2UuYmVnYW4gPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5jaGFuZ2VCZWdhbiA9IGZhbHNlO1xuICAgIGluc3RhbmNlLmNvbXBsZXRlZCA9IGZhbHNlO1xuICAgIGluc3RhbmNlLmNoYW5nZUNvbXBsZXRlZCA9IGZhbHNlO1xuICAgIGluc3RhbmNlLnJldmVyc2VQbGF5YmFjayA9IGZhbHNlO1xuICAgIGluc3RhbmNlLnJldmVyc2VkID0gZGlyZWN0aW9uID09PSAncmV2ZXJzZSc7XG4gICAgaW5zdGFuY2UucmVtYWluaW5nID0gaW5zdGFuY2UubG9vcDtcbiAgICBjaGlsZHJlbiA9IGluc3RhbmNlLmNoaWxkcmVuO1xuICAgIGNoaWxkcmVuTGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSBjaGlsZHJlbkxlbmd0aDsgaS0tOykgeyBpbnN0YW5jZS5jaGlsZHJlbltpXS5yZXNldCgpOyB9XG4gICAgaWYgKGluc3RhbmNlLnJldmVyc2VkICYmIGluc3RhbmNlLmxvb3AgIT09IHRydWUgfHwgKGRpcmVjdGlvbiA9PT0gJ2FsdGVybmF0ZScgJiYgaW5zdGFuY2UubG9vcCA9PT0gMSkpIHsgaW5zdGFuY2UucmVtYWluaW5nKys7IH1cbiAgICBzZXRBbmltYXRpb25zUHJvZ3Jlc3MoMCk7XG4gIH07XG5cbiAgLy8gU2V0IFZhbHVlIGhlbHBlclxuXG4gIGluc3RhbmNlLnNldCA9IGZ1bmN0aW9uKHRhcmdldHMsIHByb3BlcnRpZXMpIHtcbiAgICBzZXRUYXJnZXRzVmFsdWUodGFyZ2V0cywgcHJvcGVydGllcyk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xuXG4gIGluc3RhbmNlLnRpY2sgPSBmdW5jdGlvbih0KSB7XG4gICAgbm93ID0gdDtcbiAgICBpZiAoIXN0YXJ0VGltZSkgeyBzdGFydFRpbWUgPSBub3c7IH1cbiAgICBzZXRJbnN0YW5jZVByb2dyZXNzKChub3cgKyAobGFzdFRpbWUgLSBzdGFydFRpbWUpKSAqIGFuaW1lLnNwZWVkKTtcbiAgfTtcblxuICBpbnN0YW5jZS5zZWVrID0gZnVuY3Rpb24odGltZSkge1xuICAgIHNldEluc3RhbmNlUHJvZ3Jlc3MoYWRqdXN0VGltZSh0aW1lKSk7XG4gIH07XG5cbiAgaW5zdGFuY2UucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICBpbnN0YW5jZS5wYXVzZWQgPSB0cnVlO1xuICAgIHJlc2V0VGltZSgpO1xuICB9O1xuXG4gIGluc3RhbmNlLnBsYXkgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIWluc3RhbmNlLnBhdXNlZCkgeyByZXR1cm47IH1cbiAgICBpZiAoaW5zdGFuY2UuY29tcGxldGVkKSB7IGluc3RhbmNlLnJlc2V0KCk7IH1cbiAgICBpbnN0YW5jZS5wYXVzZWQgPSBmYWxzZTtcbiAgICBhY3RpdmVJbnN0YW5jZXMucHVzaChpbnN0YW5jZSk7XG4gICAgcmVzZXRUaW1lKCk7XG4gICAgaWYgKCFyYWYpIHsgZW5naW5lKCk7IH1cbiAgfTtcblxuICBpbnN0YW5jZS5yZXZlcnNlID0gZnVuY3Rpb24oKSB7XG4gICAgdG9nZ2xlSW5zdGFuY2VEaXJlY3Rpb24oKTtcbiAgICByZXNldFRpbWUoKTtcbiAgfTtcblxuICBpbnN0YW5jZS5yZXN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgaW5zdGFuY2UucmVzZXQoKTtcbiAgICBpbnN0YW5jZS5wbGF5KCk7XG4gIH07XG5cbiAgaW5zdGFuY2UucmVzZXQoKTtcblxuICBpZiAoaW5zdGFuY2UuYXV0b3BsYXkpIHsgaW5zdGFuY2UucGxheSgpOyB9XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xuXG59XG5cbi8vIFJlbW92ZSB0YXJnZXRzIGZyb20gYW5pbWF0aW9uXG5cbmZ1bmN0aW9uIHJlbW92ZVRhcmdldHNGcm9tQW5pbWF0aW9ucyh0YXJnZXRzQXJyYXksIGFuaW1hdGlvbnMpIHtcbiAgZm9yICh2YXIgYSA9IGFuaW1hdGlvbnMubGVuZ3RoOyBhLS07KSB7XG4gICAgaWYgKGFycmF5Q29udGFpbnModGFyZ2V0c0FycmF5LCBhbmltYXRpb25zW2FdLmFuaW1hdGFibGUudGFyZ2V0KSkge1xuICAgICAgYW5pbWF0aW9ucy5zcGxpY2UoYSwgMSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRhcmdldHModGFyZ2V0cykge1xuICB2YXIgdGFyZ2V0c0FycmF5ID0gcGFyc2VUYXJnZXRzKHRhcmdldHMpO1xuICBmb3IgKHZhciBpID0gYWN0aXZlSW5zdGFuY2VzLmxlbmd0aDsgaS0tOykge1xuICAgIHZhciBpbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlc1tpXTtcbiAgICB2YXIgYW5pbWF0aW9ucyA9IGluc3RhbmNlLmFuaW1hdGlvbnM7XG4gICAgdmFyIGNoaWxkcmVuID0gaW5zdGFuY2UuY2hpbGRyZW47XG4gICAgcmVtb3ZlVGFyZ2V0c0Zyb21BbmltYXRpb25zKHRhcmdldHNBcnJheSwgYW5pbWF0aW9ucyk7XG4gICAgZm9yICh2YXIgYyA9IGNoaWxkcmVuLmxlbmd0aDsgYy0tOykge1xuICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5bY107XG4gICAgICB2YXIgY2hpbGRBbmltYXRpb25zID0gY2hpbGQuYW5pbWF0aW9ucztcbiAgICAgIHJlbW92ZVRhcmdldHNGcm9tQW5pbWF0aW9ucyh0YXJnZXRzQXJyYXksIGNoaWxkQW5pbWF0aW9ucyk7XG4gICAgICBpZiAoIWNoaWxkQW5pbWF0aW9ucy5sZW5ndGggJiYgIWNoaWxkLmNoaWxkcmVuLmxlbmd0aCkgeyBjaGlsZHJlbi5zcGxpY2UoYywgMSk7IH1cbiAgICB9XG4gICAgaWYgKCFhbmltYXRpb25zLmxlbmd0aCAmJiAhY2hpbGRyZW4ubGVuZ3RoKSB7IGluc3RhbmNlLnBhdXNlKCk7IH1cbiAgfVxufVxuXG4vLyBTdGFnZ2VyIGhlbHBlcnNcblxuZnVuY3Rpb24gc3RhZ2dlcih2YWwsIHBhcmFtcykge1xuICBpZiAoIHBhcmFtcyA9PT0gdm9pZCAwICkgcGFyYW1zID0ge307XG5cbiAgdmFyIGRpcmVjdGlvbiA9IHBhcmFtcy5kaXJlY3Rpb24gfHwgJ25vcm1hbCc7XG4gIHZhciBlYXNpbmcgPSBwYXJhbXMuZWFzaW5nID8gcGFyc2VFYXNpbmdzKHBhcmFtcy5lYXNpbmcpIDogbnVsbDtcbiAgdmFyIGdyaWQgPSBwYXJhbXMuZ3JpZDtcbiAgdmFyIGF4aXMgPSBwYXJhbXMuYXhpcztcbiAgdmFyIGZyb21JbmRleCA9IHBhcmFtcy5mcm9tIHx8IDA7XG4gIHZhciBmcm9tRmlyc3QgPSBmcm9tSW5kZXggPT09ICdmaXJzdCc7XG4gIHZhciBmcm9tQ2VudGVyID0gZnJvbUluZGV4ID09PSAnY2VudGVyJztcbiAgdmFyIGZyb21MYXN0ID0gZnJvbUluZGV4ID09PSAnbGFzdCc7XG4gIHZhciBpc1JhbmdlID0gaXMuYXJyKHZhbCk7XG4gIHZhciB2YWwxID0gaXNSYW5nZSA/IHBhcnNlRmxvYXQodmFsWzBdKSA6IHBhcnNlRmxvYXQodmFsKTtcbiAgdmFyIHZhbDIgPSBpc1JhbmdlID8gcGFyc2VGbG9hdCh2YWxbMV0pIDogMDtcbiAgdmFyIHVuaXQgPSBnZXRVbml0KGlzUmFuZ2UgPyB2YWxbMV0gOiB2YWwpIHx8IDA7XG4gIHZhciBzdGFydCA9IHBhcmFtcy5zdGFydCB8fCAwICsgKGlzUmFuZ2UgPyB2YWwxIDogMCk7XG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgdmFyIG1heFZhbHVlID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlbCwgaSwgdCkge1xuICAgIGlmIChmcm9tRmlyc3QpIHsgZnJvbUluZGV4ID0gMDsgfVxuICAgIGlmIChmcm9tQ2VudGVyKSB7IGZyb21JbmRleCA9ICh0IC0gMSkgLyAyOyB9XG4gICAgaWYgKGZyb21MYXN0KSB7IGZyb21JbmRleCA9IHQgLSAxOyB9XG4gICAgaWYgKCF2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdDsgaW5kZXgrKykge1xuICAgICAgICBpZiAoIWdyaWQpIHtcbiAgICAgICAgICB2YWx1ZXMucHVzaChNYXRoLmFicyhmcm9tSW5kZXggLSBpbmRleCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBmcm9tWCA9ICFmcm9tQ2VudGVyID8gZnJvbUluZGV4JWdyaWRbMF0gOiAoZ3JpZFswXS0xKS8yO1xuICAgICAgICAgIHZhciBmcm9tWSA9ICFmcm9tQ2VudGVyID8gTWF0aC5mbG9vcihmcm9tSW5kZXgvZ3JpZFswXSkgOiAoZ3JpZFsxXS0xKS8yO1xuICAgICAgICAgIHZhciB0b1ggPSBpbmRleCVncmlkWzBdO1xuICAgICAgICAgIHZhciB0b1kgPSBNYXRoLmZsb29yKGluZGV4L2dyaWRbMF0pO1xuICAgICAgICAgIHZhciBkaXN0YW5jZVggPSBmcm9tWCAtIHRvWDtcbiAgICAgICAgICB2YXIgZGlzdGFuY2VZID0gZnJvbVkgLSB0b1k7XG4gICAgICAgICAgdmFyIHZhbHVlID0gTWF0aC5zcXJ0KGRpc3RhbmNlWCAqIGRpc3RhbmNlWCArIGRpc3RhbmNlWSAqIGRpc3RhbmNlWSk7XG4gICAgICAgICAgaWYgKGF4aXMgPT09ICd4JykgeyB2YWx1ZSA9IC1kaXN0YW5jZVg7IH1cbiAgICAgICAgICBpZiAoYXhpcyA9PT0gJ3knKSB7IHZhbHVlID0gLWRpc3RhbmNlWTsgfVxuICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhWYWx1ZSA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBpZiAoZWFzaW5nKSB7IHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gZWFzaW5nKHZhbCAvIG1heFZhbHVlKSAqIG1heFZhbHVlOyB9KTsgfVxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3JldmVyc2UnKSB7IHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gYXhpcyA/ICh2YWwgPCAwKSA/IHZhbCAqIC0xIDogLXZhbCA6IE1hdGguYWJzKG1heFZhbHVlIC0gdmFsKTsgfSk7IH1cbiAgICB9XG4gICAgdmFyIHNwYWNpbmcgPSBpc1JhbmdlID8gKHZhbDIgLSB2YWwxKSAvIG1heFZhbHVlIDogdmFsMTtcbiAgICByZXR1cm4gc3RhcnQgKyAoc3BhY2luZyAqIChNYXRoLnJvdW5kKHZhbHVlc1tpXSAqIDEwMCkgLyAxMDApKSArIHVuaXQ7XG4gIH1cbn1cblxuLy8gVGltZWxpbmVcblxuZnVuY3Rpb24gdGltZWxpbmUocGFyYW1zKSB7XG4gIGlmICggcGFyYW1zID09PSB2b2lkIDAgKSBwYXJhbXMgPSB7fTtcblxuICB2YXIgdGwgPSBhbmltZShwYXJhbXMpO1xuICB0bC5kdXJhdGlvbiA9IDA7XG4gIHRsLmFkZCA9IGZ1bmN0aW9uKGluc3RhbmNlUGFyYW1zLCB0aW1lbGluZU9mZnNldCkge1xuICAgIHZhciB0bEluZGV4ID0gYWN0aXZlSW5zdGFuY2VzLmluZGV4T2YodGwpO1xuICAgIHZhciBjaGlsZHJlbiA9IHRsLmNoaWxkcmVuO1xuICAgIGlmICh0bEluZGV4ID4gLTEpIHsgYWN0aXZlSW5zdGFuY2VzLnNwbGljZSh0bEluZGV4LCAxKTsgfVxuICAgIGZ1bmN0aW9uIHBhc3NUaHJvdWdoKGlucykgeyBpbnMucGFzc1Rocm91Z2ggPSB0cnVlOyB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykgeyBwYXNzVGhyb3VnaChjaGlsZHJlbltpXSk7IH1cbiAgICB2YXIgaW5zUGFyYW1zID0gbWVyZ2VPYmplY3RzKGluc3RhbmNlUGFyYW1zLCByZXBsYWNlT2JqZWN0UHJvcHMoZGVmYXVsdFR3ZWVuU2V0dGluZ3MsIHBhcmFtcykpO1xuICAgIGluc1BhcmFtcy50YXJnZXRzID0gaW5zUGFyYW1zLnRhcmdldHMgfHwgcGFyYW1zLnRhcmdldHM7XG4gICAgdmFyIHRsRHVyYXRpb24gPSB0bC5kdXJhdGlvbjtcbiAgICBpbnNQYXJhbXMuYXV0b3BsYXkgPSBmYWxzZTtcbiAgICBpbnNQYXJhbXMuZGlyZWN0aW9uID0gdGwuZGlyZWN0aW9uO1xuICAgIGluc1BhcmFtcy50aW1lbGluZU9mZnNldCA9IGlzLnVuZCh0aW1lbGluZU9mZnNldCkgPyB0bER1cmF0aW9uIDogZ2V0UmVsYXRpdmVWYWx1ZSh0aW1lbGluZU9mZnNldCwgdGxEdXJhdGlvbik7XG4gICAgcGFzc1Rocm91Z2godGwpO1xuICAgIHRsLnNlZWsoaW5zUGFyYW1zLnRpbWVsaW5lT2Zmc2V0KTtcbiAgICB2YXIgaW5zID0gYW5pbWUoaW5zUGFyYW1zKTtcbiAgICBwYXNzVGhyb3VnaChpbnMpO1xuICAgIGNoaWxkcmVuLnB1c2goaW5zKTtcbiAgICB2YXIgdGltaW5ncyA9IGdldEluc3RhbmNlVGltaW5ncyhjaGlsZHJlbiwgcGFyYW1zKTtcbiAgICB0bC5kZWxheSA9IHRpbWluZ3MuZGVsYXk7XG4gICAgdGwuZW5kRGVsYXkgPSB0aW1pbmdzLmVuZERlbGF5O1xuICAgIHRsLmR1cmF0aW9uID0gdGltaW5ncy5kdXJhdGlvbjtcbiAgICB0bC5zZWVrKDApO1xuICAgIHRsLnJlc2V0KCk7XG4gICAgaWYgKHRsLmF1dG9wbGF5KSB7IHRsLnBsYXkoKTsgfVxuICAgIHJldHVybiB0bDtcbiAgfTtcbiAgcmV0dXJuIHRsO1xufVxuXG5hbmltZS52ZXJzaW9uID0gJzMuMC4xJztcbmFuaW1lLnNwZWVkID0gMTtcbmFuaW1lLnJ1bm5pbmcgPSBhY3RpdmVJbnN0YW5jZXM7XG5hbmltZS5yZW1vdmUgPSByZW1vdmVUYXJnZXRzO1xuYW5pbWUuZ2V0ID0gZ2V0T3JpZ2luYWxUYXJnZXRWYWx1ZTtcbmFuaW1lLnNldCA9IHNldFRhcmdldHNWYWx1ZTtcbmFuaW1lLmNvbnZlcnRQeCA9IGNvbnZlcnRQeFRvVW5pdDtcbmFuaW1lLnBhdGggPSBnZXRQYXRoO1xuYW5pbWUuc2V0RGFzaG9mZnNldCA9IHNldERhc2hvZmZzZXQ7XG5hbmltZS5zdGFnZ2VyID0gc3RhZ2dlcjtcbmFuaW1lLnRpbWVsaW5lID0gdGltZWxpbmU7XG5hbmltZS5lYXNpbmcgPSBwYXJzZUVhc2luZ3M7XG5hbmltZS5wZW5uZXIgPSBwZW5uZXI7XG5hbmltZS5yYW5kb20gPSBmdW5jdGlvbiAobWluLCBtYXgpIHsgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47IH07XG5cbmV4cG9ydCBkZWZhdWx0IGFuaW1lO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QgPyBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCkgOiAnZ2V0JztcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHV0aWxzLmZvckVhY2goWyd1cmwnLCAnbWV0aG9kJywgJ3BhcmFtcycsICdkYXRhJ10sIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5J10sIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICh1dGlscy5pc09iamVjdChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goW1xuICAgICdiYXNlVVJMJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLCAnbWF4Q29udGVudExlbmd0aCcsXG4gICAgJ3ZhbGlkYXRlU3RhdHVzJywgJ21heFJlZGlyZWN0cycsICdodHRwQWdlbnQnLCAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsXG4gICAgJ3NvY2tldFBhdGgnXG4gIF0sIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIC8vIE9ubHkgTm9kZS5KUyBoYXMgYSBwcm9jZXNzIHZhcmlhYmxlIHRoYXQgaXMgb2YgW1tDbGFzc11dIHByb2Nlc3NcbiAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gZXF1YWwgdG8gbWVyZ2Ugd2l0aCB0aGUgZGlmZmVyZW5jZSBiZWluZyB0aGF0IG5vIHJlZmVyZW5jZVxuICogdG8gb3JpZ2luYWwgb2JqZWN0cyBpcyBrZXB0LlxuICpcbiAqIEBzZWUgbWVyZ2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGRlZXBNZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBkZWVwTWVyZ2U6IGRlZXBNZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiZcbiAgICB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG4iLCIvKipcbiAqIERvbTcgMi4xLjNcbiAqIE1pbmltYWxpc3RpYyBKYXZhU2NyaXB0IGxpYnJhcnkgZm9yIERPTSBtYW5pcHVsYXRpb24sIHdpdGggYSBqUXVlcnktY29tcGF0aWJsZSBBUElcbiAqIGh0dHA6Ly9mcmFtZXdvcms3LmlvL2RvY3MvZG9tLmh0bWxcbiAqXG4gKiBDb3B5cmlnaHQgMjAxOSwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqIFRoZSBpRGFuZ2Vyby51c1xuICogaHR0cDovL3d3dy5pZGFuZ2Vyby51cy9cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogRmVicnVhcnkgMTEsIDIwMTlcbiAqL1xuaW1wb3J0IHsgZG9jdW1lbnQsIHdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuXG5jbGFzcyBEb203IHtcbiAgY29uc3RydWN0b3IoYXJyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgLy8gQ3JlYXRlIGFycmF5LWxpa2Ugb2JqZWN0XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHNlbGZbaV0gPSBhcnJbaV07XG4gICAgfVxuICAgIHNlbGYubGVuZ3RoID0gYXJyLmxlbmd0aDtcbiAgICAvLyBSZXR1cm4gY29sbGVjdGlvbiB3aXRoIG1ldGhvZHNcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5mdW5jdGlvbiAkKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gIGNvbnN0IGFyciA9IFtdO1xuICBsZXQgaSA9IDA7XG4gIGlmIChzZWxlY3RvciAmJiAhY29udGV4dCkge1xuICAgIGlmIChzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICB9XG4gIH1cbiAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAvLyBTdHJpbmdcbiAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgbGV0IGVscztcbiAgICAgIGxldCB0ZW1wUGFyZW50O1xuICAgICAgY29uc3QgaHRtbCA9IHNlbGVjdG9yLnRyaW0oKTtcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzwnKSA+PSAwICYmIGh0bWwuaW5kZXhPZignPicpID49IDApIHtcbiAgICAgICAgbGV0IHRvQ3JlYXRlID0gJ2Rpdic7XG4gICAgICAgIGlmIChodG1sLmluZGV4T2YoJzxsaScpID09PSAwKSB0b0NyZWF0ZSA9ICd1bCc7XG4gICAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0cicpID09PSAwKSB0b0NyZWF0ZSA9ICd0Ym9keSc7XG4gICAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0ZCcpID09PSAwIHx8IGh0bWwuaW5kZXhPZignPHRoJykgPT09IDApIHRvQ3JlYXRlID0gJ3RyJztcbiAgICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRib2R5JykgPT09IDApIHRvQ3JlYXRlID0gJ3RhYmxlJztcbiAgICAgICAgaWYgKGh0bWwuaW5kZXhPZignPG9wdGlvbicpID09PSAwKSB0b0NyZWF0ZSA9ICdzZWxlY3QnO1xuICAgICAgICB0ZW1wUGFyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0b0NyZWF0ZSk7XG4gICAgICAgIHRlbXBQYXJlbnQuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRlbXBQYXJlbnQuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGFyci5wdXNoKHRlbXBQYXJlbnQuY2hpbGROb2Rlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghY29udGV4dCAmJiBzZWxlY3RvclswXSA9PT0gJyMnICYmICFzZWxlY3Rvci5tYXRjaCgvWyAuPD46fl0vKSkge1xuICAgICAgICAgIC8vIFB1cmUgSUQgc2VsZWN0b3JcbiAgICAgICAgICBlbHMgPSBbZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VsZWN0b3IudHJpbSgpLnNwbGl0KCcjJylbMV0pXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlciBzZWxlY3RvcnNcbiAgICAgICAgICBlbHMgPSAoY29udGV4dCB8fCBkb2N1bWVudCkucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvci50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoZWxzW2ldKSBhcnIucHVzaChlbHNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzZWxlY3Rvci5ub2RlVHlwZSB8fCBzZWxlY3RvciA9PT0gd2luZG93IHx8IHNlbGVjdG9yID09PSBkb2N1bWVudCkge1xuICAgICAgLy8gTm9kZS9lbGVtZW50XG4gICAgICBhcnIucHVzaChzZWxlY3Rvcik7XG4gICAgfSBlbHNlIGlmIChzZWxlY3Rvci5sZW5ndGggPiAwICYmIHNlbGVjdG9yWzBdLm5vZGVUeXBlKSB7XG4gICAgICAvLyBBcnJheSBvZiBlbGVtZW50cyBvciBpbnN0YW5jZSBvZiBEb21cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzZWxlY3Rvci5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhcnIucHVzaChzZWxlY3RvcltpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgRG9tNyhhcnIpO1xufVxuXG4kLmZuID0gRG9tNy5wcm90b3R5cGU7XG4kLkNsYXNzID0gRG9tNztcbiQuRG9tNyA9IERvbTc7XG5cbmZ1bmN0aW9uIHVuaXF1ZShhcnIpIHtcbiAgY29uc3QgdW5pcXVlQXJyYXkgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodW5pcXVlQXJyYXkuaW5kZXhPZihhcnJbaV0pID09PSAtMSkgdW5pcXVlQXJyYXkucHVzaChhcnJbaV0pO1xuICB9XG4gIHJldHVybiB1bmlxdWVBcnJheTtcbn1cbmZ1bmN0aW9uIHRvQ2FtZWxDYXNlKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvLSguKS9nLCAobWF0Y2gsIGdyb3VwMSkgPT4gZ3JvdXAxLnRvVXBwZXJDYXNlKCkpO1xufVxuXG5mdW5jdGlvbiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spIHtcbiAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKTtcbiAgZWxzZSBpZiAod2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSkgcmV0dXJuIHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spO1xuICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDEwMDAgLyA2MCk7XG59XG5mdW5jdGlvbiBjYW5jZWxBbmltYXRpb25GcmFtZShpZCkge1xuICBpZiAod2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKSByZXR1cm4gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTtcbiAgZWxzZSBpZiAod2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lKSByZXR1cm4gd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTtcbiAgcmV0dXJuIHdpbmRvdy5jbGVhclRpbWVvdXQoaWQpO1xufVxuXG4vLyBDbGFzc2VzIGFuZCBhdHRyaWJ1dGVzXG5mdW5jdGlvbiBhZGRDbGFzcyhjbGFzc05hbWUpIHtcbiAgaWYgKHR5cGVvZiBjbGFzc05hbWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpc1tqXSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXNbal0uY2xhc3NMaXN0ICE9PSAndW5kZWZpbmVkJykgdGhpc1tqXS5jbGFzc0xpc3QuYWRkKGNsYXNzZXNbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKGNsYXNzTmFtZSkge1xuICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzW2pdICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdGhpc1tqXS5jbGFzc0xpc3QgIT09ICd1bmRlZmluZWQnKSB0aGlzW2pdLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3Nlc1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gaGFzQ2xhc3MoY2xhc3NOYW1lKSB7XG4gIGlmICghdGhpc1swXSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gdGhpc1swXS5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtcbn1cbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGNsYXNzTmFtZSkge1xuICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzW2pdICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdGhpc1tqXS5jbGFzc0xpc3QgIT09ICd1bmRlZmluZWQnKSB0aGlzW2pdLmNsYXNzTGlzdC50b2dnbGUoY2xhc3Nlc1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gYXR0cihhdHRycywgdmFsdWUpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGF0dHJzID09PSAnc3RyaW5nJykge1xuICAgIC8vIEdldCBhdHRyXG4gICAgaWYgKHRoaXNbMF0pIHJldHVybiB0aGlzWzBdLmdldEF0dHJpYnV0ZShhdHRycyk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIFNldCBhdHRyc1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgLy8gU3RyaW5nXG4gICAgICB0aGlzW2ldLnNldEF0dHJpYnV0ZShhdHRycywgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPYmplY3RcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgZm9yIChjb25zdCBhdHRyTmFtZSBpbiBhdHRycykge1xuICAgICAgICB0aGlzW2ldW2F0dHJOYW1lXSA9IGF0dHJzW2F0dHJOYW1lXTtcbiAgICAgICAgdGhpc1tpXS5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGF0dHJzW2F0dHJOYW1lXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5mdW5jdGlvbiByZW1vdmVBdHRyKGF0dHIpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmZ1bmN0aW9uIHByb3AocHJvcHMsIHZhbHVlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBHZXQgcHJvcFxuICAgIGlmICh0aGlzWzBdKSByZXR1cm4gdGhpc1swXVtwcm9wc107XG4gIH0gZWxzZSB7XG4gICAgLy8gU2V0IHByb3BzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAvLyBTdHJpbmdcbiAgICAgICAgdGhpc1tpXVtwcm9wc10gPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9iamVjdFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgZm9yIChjb25zdCBwcm9wTmFtZSBpbiBwcm9wcykge1xuICAgICAgICAgIHRoaXNbaV1bcHJvcE5hbWVdID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5mdW5jdGlvbiBkYXRhKGtleSwgdmFsdWUpIHtcbiAgbGV0IGVsO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIGVsID0gdGhpc1swXTtcbiAgICAvLyBHZXQgdmFsdWVcbiAgICBpZiAoZWwpIHtcbiAgICAgIGlmIChlbC5kb203RWxlbWVudERhdGFTdG9yYWdlICYmIChrZXkgaW4gZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSkpIHtcbiAgICAgICAgcmV0dXJuIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGF0YUtleSA9IGVsLmdldEF0dHJpYnV0ZShgZGF0YS0ke2tleX1gKTtcbiAgICAgIGlmIChkYXRhS2V5KSB7XG4gICAgICAgIHJldHVybiBkYXRhS2V5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIFNldCB2YWx1ZVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBlbCA9IHRoaXNbaV07XG4gICAgaWYgKCFlbC5kb203RWxlbWVudERhdGFTdG9yYWdlKSBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlID0ge307XG4gICAgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiByZW1vdmVEYXRhKGtleSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBlbCA9IHRoaXNbaV07XG4gICAgaWYgKGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgJiYgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldKSB7XG4gICAgICBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV0gPSBudWxsO1xuICAgICAgZGVsZXRlIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGRhdGFzZXQoKSB7XG4gIGNvbnN0IGVsID0gdGhpc1swXTtcbiAgaWYgKCFlbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgY29uc3QgZGF0YXNldCA9IHt9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGlmIChlbC5kYXRhc2V0KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgZm9yIChjb25zdCBkYXRhS2V5IGluIGVsLmRhdGFzZXQpIHtcbiAgICAgIGRhdGFzZXRbZGF0YUtleV0gPSBlbC5kYXRhc2V0W2RhdGFLZXldO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsLmF0dHJpYnV0ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgY29uc3QgYXR0ciA9IGVsLmF0dHJpYnV0ZXNbaV07XG4gICAgICBpZiAoYXR0ci5uYW1lLmluZGV4T2YoJ2RhdGEtJykgPj0gMCkge1xuICAgICAgICBkYXRhc2V0W3RvQ2FtZWxDYXNlKGF0dHIubmFtZS5zcGxpdCgnZGF0YS0nKVsxXSldID0gYXR0ci52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGZvciAoY29uc3Qga2V5IGluIGRhdGFzZXQpIHtcbiAgICBpZiAoZGF0YXNldFtrZXldID09PSAnZmFsc2UnKSBkYXRhc2V0W2tleV0gPSBmYWxzZTtcbiAgICBlbHNlIGlmIChkYXRhc2V0W2tleV0gPT09ICd0cnVlJykgZGF0YXNldFtrZXldID0gdHJ1ZTtcbiAgICBlbHNlIGlmIChwYXJzZUZsb2F0KGRhdGFzZXRba2V5XSkgPT09IGRhdGFzZXRba2V5XSAqIDEpIGRhdGFzZXRba2V5XSAqPSAxO1xuICB9XG4gIHJldHVybiBkYXRhc2V0O1xufVxuZnVuY3Rpb24gdmFsKHZhbHVlKSB7XG4gIGNvbnN0IGRvbSA9IHRoaXM7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKGRvbVswXSkge1xuICAgICAgaWYgKGRvbVswXS5tdWx0aXBsZSAmJiBkb21bMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZG9tWzBdLnNlbGVjdGVkT3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIHZhbHVlcy5wdXNoKGRvbVswXS5zZWxlY3RlZE9wdGlvbnNbaV0udmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZG9tWzBdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkb20ubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBlbCA9IGRvbVtpXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgZWwubXVsdGlwbGUgJiYgZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZWwub3B0aW9ucy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBlbC5vcHRpb25zW2pdLnNlbGVjdGVkID0gdmFsdWUuaW5kZXhPZihlbC5vcHRpb25zW2pdLnZhbHVlKSA+PSAwO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZG9tO1xufVxuLy8gVHJhbnNmb3Jtc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5mdW5jdGlvbiB0cmFuc2Zvcm0odHJhbnNmb3JtKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGVsU3R5bGUgPSB0aGlzW2ldLnN0eWxlO1xuICAgIGVsU3R5bGUud2Via2l0VHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIGVsU3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gdHJhbnNpdGlvbihkdXJhdGlvbikge1xuICBpZiAodHlwZW9mIGR1cmF0aW9uICE9PSAnc3RyaW5nJykge1xuICAgIGR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgZWxTdHlsZSA9IHRoaXNbaV0uc3R5bGU7XG4gICAgZWxTdHlsZS53ZWJraXRUcmFuc2l0aW9uRHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICBlbFN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGR1cmF0aW9uO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuLy8gRXZlbnRzXG5mdW5jdGlvbiBvbiguLi5hcmdzKSB7XG4gIGxldCBbZXZlbnRUeXBlLCB0YXJnZXRTZWxlY3RvciwgbGlzdGVuZXIsIGNhcHR1cmVdID0gYXJncztcbiAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgW2V2ZW50VHlwZSwgbGlzdGVuZXIsIGNhcHR1cmVdID0gYXJncztcbiAgICB0YXJnZXRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoIWNhcHR1cmUpIGNhcHR1cmUgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVMaXZlRXZlbnQoZSkge1xuICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgIGlmICghdGFyZ2V0KSByZXR1cm47XG4gICAgY29uc3QgZXZlbnREYXRhID0gZS50YXJnZXQuZG9tN0V2ZW50RGF0YSB8fCBbXTtcbiAgICBpZiAoZXZlbnREYXRhLmluZGV4T2YoZSkgPCAwKSB7XG4gICAgICBldmVudERhdGEudW5zaGlmdChlKTtcbiAgICB9XG4gICAgaWYgKCQodGFyZ2V0KS5pcyh0YXJnZXRTZWxlY3RvcikpIGxpc3RlbmVyLmFwcGx5KHRhcmdldCwgZXZlbnREYXRhKTtcbiAgICBlbHNlIHtcbiAgICAgIGNvbnN0IHBhcmVudHMgPSAkKHRhcmdldCkucGFyZW50cygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICBmb3IgKGxldCBrID0gMDsgayA8IHBhcmVudHMubGVuZ3RoOyBrICs9IDEpIHtcbiAgICAgICAgaWYgKCQocGFyZW50c1trXSkuaXModGFyZ2V0U2VsZWN0b3IpKSBsaXN0ZW5lci5hcHBseShwYXJlbnRzW2tdLCBldmVudERhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVFdmVudChlKSB7XG4gICAgY29uc3QgZXZlbnREYXRhID0gZSAmJiBlLnRhcmdldCA/IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW10gOiBbXTtcbiAgICBpZiAoZXZlbnREYXRhLmluZGV4T2YoZSkgPCAwKSB7XG4gICAgICBldmVudERhdGEudW5zaGlmdChlKTtcbiAgICB9XG4gICAgbGlzdGVuZXIuYXBwbHkodGhpcywgZXZlbnREYXRhKTtcbiAgfVxuICBjb25zdCBldmVudHMgPSBldmVudFR5cGUuc3BsaXQoJyAnKTtcbiAgbGV0IGo7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGVsID0gdGhpc1tpXTtcbiAgICBpZiAoIXRhcmdldFNlbGVjdG9yKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgZXZlbnRzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gZXZlbnRzW2pdO1xuICAgICAgICBpZiAoIWVsLmRvbTdMaXN0ZW5lcnMpIGVsLmRvbTdMaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgaWYgKCFlbC5kb203TGlzdGVuZXJzW2V2ZW50XSkgZWwuZG9tN0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgICAgZWwuZG9tN0xpc3RlbmVyc1tldmVudF0ucHVzaCh7XG4gICAgICAgICAgbGlzdGVuZXIsXG4gICAgICAgICAgcHJveHlMaXN0ZW5lcjogaGFuZGxlRXZlbnQsXG4gICAgICAgIH0pO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVFdmVudCwgY2FwdHVyZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpdmUgZXZlbnRzXG4gICAgICBmb3IgKGogPSAwOyBqIDwgZXZlbnRzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gZXZlbnRzW2pdO1xuICAgICAgICBpZiAoIWVsLmRvbTdMaXZlTGlzdGVuZXJzKSBlbC5kb203TGl2ZUxpc3RlbmVycyA9IHt9O1xuICAgICAgICBpZiAoIWVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50XSkgZWwuZG9tN0xpdmVMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICAgIGVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50XS5wdXNoKHtcbiAgICAgICAgICBsaXN0ZW5lcixcbiAgICAgICAgICBwcm94eUxpc3RlbmVyOiBoYW5kbGVMaXZlRXZlbnQsXG4gICAgICAgIH0pO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVMaXZlRXZlbnQsIGNhcHR1cmUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIG9mZiguLi5hcmdzKSB7XG4gIGxldCBbZXZlbnRUeXBlLCB0YXJnZXRTZWxlY3RvciwgbGlzdGVuZXIsIGNhcHR1cmVdID0gYXJncztcbiAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgW2V2ZW50VHlwZSwgbGlzdGVuZXIsIGNhcHR1cmVdID0gYXJncztcbiAgICB0YXJnZXRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoIWNhcHR1cmUpIGNhcHR1cmUgPSBmYWxzZTtcblxuICBjb25zdCBldmVudHMgPSBldmVudFR5cGUuc3BsaXQoJyAnKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBldmVudCA9IGV2ZW50c1tpXTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGNvbnN0IGVsID0gdGhpc1tqXTtcbiAgICAgIGxldCBoYW5kbGVycztcbiAgICAgIGlmICghdGFyZ2V0U2VsZWN0b3IgJiYgZWwuZG9tN0xpc3RlbmVycykge1xuICAgICAgICBoYW5kbGVycyA9IGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgfSBlbHNlIGlmICh0YXJnZXRTZWxlY3RvciAmJiBlbC5kb203TGl2ZUxpc3RlbmVycykge1xuICAgICAgICBoYW5kbGVycyA9IGVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgIH1cbiAgICAgIGlmIChoYW5kbGVycyAmJiBoYW5kbGVycy5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChsZXQgayA9IGhhbmRsZXJzLmxlbmd0aCAtIDE7IGsgPj0gMDsgayAtPSAxKSB7XG4gICAgICAgICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJzW2tdO1xuICAgICAgICAgIGlmIChsaXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lci5kb203cHJveHkgJiYgaGFuZGxlci5saXN0ZW5lci5kb203cHJveHkgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKGssIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWxpc3RlbmVyKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKGssIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIG9uY2UoLi4uYXJncykge1xuICBjb25zdCBkb20gPSB0aGlzO1xuICBsZXQgW2V2ZW50TmFtZSwgdGFyZ2V0U2VsZWN0b3IsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG4gIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFtldmVudE5hbWUsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG4gICAgdGFyZ2V0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gIH1cbiAgZnVuY3Rpb24gb25jZUhhbmRsZXIoLi4uZXZlbnRBcmdzKSB7XG4gICAgbGlzdGVuZXIuYXBwbHkodGhpcywgZXZlbnRBcmdzKTtcbiAgICBkb20ub2ZmKGV2ZW50TmFtZSwgdGFyZ2V0U2VsZWN0b3IsIG9uY2VIYW5kbGVyLCBjYXB0dXJlKTtcbiAgICBpZiAob25jZUhhbmRsZXIuZG9tN3Byb3h5KSB7XG4gICAgICBkZWxldGUgb25jZUhhbmRsZXIuZG9tN3Byb3h5O1xuICAgIH1cbiAgfVxuICBvbmNlSGFuZGxlci5kb203cHJveHkgPSBsaXN0ZW5lcjtcbiAgcmV0dXJuIGRvbS5vbihldmVudE5hbWUsIHRhcmdldFNlbGVjdG9yLCBvbmNlSGFuZGxlciwgY2FwdHVyZSk7XG59XG5mdW5jdGlvbiB0cmlnZ2VyKC4uLmFyZ3MpIHtcbiAgY29uc3QgZXZlbnRzID0gYXJnc1swXS5zcGxpdCgnICcpO1xuICBjb25zdCBldmVudERhdGEgPSBhcmdzWzFdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGV2ZW50ID0gZXZlbnRzW2ldO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgY29uc3QgZWwgPSB0aGlzW2pdO1xuICAgICAgbGV0IGV2dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGV2dCA9IG5ldyB3aW5kb3cuQ3VzdG9tRXZlbnQoZXZlbnQsIHtcbiAgICAgICAgICBkZXRhaWw6IGV2ZW50RGF0YSxcbiAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgICAgZXZ0LmluaXRFdmVudChldmVudCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIGV2dC5kZXRhaWwgPSBldmVudERhdGE7XG4gICAgICB9XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGVsLmRvbTdFdmVudERhdGEgPSBhcmdzLmZpbHRlcigoZGF0YSwgZGF0YUluZGV4KSA9PiBkYXRhSW5kZXggPiAwKTtcbiAgICAgIGVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgIGVsLmRvbTdFdmVudERhdGEgPSBbXTtcbiAgICAgIGRlbGV0ZSBlbC5kb203RXZlbnREYXRhO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoY2FsbGJhY2spIHtcbiAgY29uc3QgZXZlbnRzID0gWyd3ZWJraXRUcmFuc2l0aW9uRW5kJywgJ3RyYW5zaXRpb25lbmQnXTtcbiAgY29uc3QgZG9tID0gdGhpcztcbiAgbGV0IGk7XG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgLyoganNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgY2FsbGJhY2suY2FsbCh0aGlzLCBlKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBkb20ub2ZmKGV2ZW50c1tpXSwgZmlyZUNhbGxCYWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgZG9tLm9uKGV2ZW50c1tpXSwgZmlyZUNhbGxCYWNrKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBhbmltYXRpb25FbmQoY2FsbGJhY2spIHtcbiAgY29uc3QgZXZlbnRzID0gWyd3ZWJraXRBbmltYXRpb25FbmQnLCAnYW5pbWF0aW9uZW5kJ107XG4gIGNvbnN0IGRvbSA9IHRoaXM7XG4gIGxldCBpO1xuICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZSk7XG4gICAgZm9yIChpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgZG9tLm9mZihldmVudHNbaV0sIGZpcmVDYWxsQmFjayk7XG4gICAgfVxuICB9XG4gIGlmIChjYWxsYmFjaykge1xuICAgIGZvciAoaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGRvbS5vbihldmVudHNbaV0sIGZpcmVDYWxsQmFjayk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuLy8gU2l6aW5nL1N0eWxlc1xuZnVuY3Rpb24gd2lkdGgoKSB7XG4gIGlmICh0aGlzWzBdID09PSB3aW5kb3cpIHtcbiAgICByZXR1cm4gd2luZG93LmlubmVyV2lkdGg7XG4gIH1cblxuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5jc3MoJ3dpZHRoJykpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBvdXRlcldpZHRoKGluY2x1ZGVNYXJnaW5zKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgY29uc3Qgc3R5bGVzID0gdGhpcy5zdHlsZXMoKTtcbiAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldFdpZHRoICsgcGFyc2VGbG9hdChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXJpZ2h0JykpICsgcGFyc2VGbG9hdChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWxlZnQnKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzWzBdLm9mZnNldFdpZHRoO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gaGVpZ2h0KCkge1xuICBpZiAodGhpc1swXSA9PT0gd2luZG93KSB7XG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgfVxuXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzLmNzcygnaGVpZ2h0JykpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBvdXRlckhlaWdodChpbmNsdWRlTWFyZ2lucykge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGNvbnN0IHN0eWxlcyA9IHRoaXMuc3R5bGVzKCk7XG4gICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRIZWlnaHQgKyBwYXJzZUZsb2F0KHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tdG9wJykpICsgcGFyc2VGbG9hdChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWJvdHRvbScpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0O1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gb2Zmc2V0KCkge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzWzBdO1xuICAgIGNvbnN0IGJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIGNvbnN0IGNsaWVudFRvcCA9IGVsLmNsaWVudFRvcCB8fCBib2R5LmNsaWVudFRvcCB8fCAwO1xuICAgIGNvbnN0IGNsaWVudExlZnQgPSBlbC5jbGllbnRMZWZ0IHx8IGJvZHkuY2xpZW50TGVmdCB8fCAwO1xuICAgIGNvbnN0IHNjcm9sbFRvcCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWSA6IGVsLnNjcm9sbFRvcDtcbiAgICBjb25zdCBzY3JvbGxMZWZ0ID0gZWwgPT09IHdpbmRvdyA/IHdpbmRvdy5zY3JvbGxYIDogZWwuc2Nyb2xsTGVmdDtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiAoYm94LnRvcCArIHNjcm9sbFRvcCkgLSBjbGllbnRUb3AsXG4gICAgICBsZWZ0OiAoYm94LmxlZnQgKyBzY3JvbGxMZWZ0KSAtIGNsaWVudExlZnQsXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gaGlkZSgpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gc2hvdygpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzW2ldO1xuICAgIGlmIChlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICB9XG4gICAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXNwbGF5JykgPT09ICdub25lJykge1xuICAgICAgLy8gU3RpbGwgbm90IHZpc2libGVcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIHN0eWxlcygpIHtcbiAgaWYgKHRoaXNbMF0pIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKTtcbiAgcmV0dXJuIHt9O1xufVxuZnVuY3Rpb24gY3NzKHByb3BzLCB2YWx1ZSkge1xuICBsZXQgaTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAodHlwZW9mIHByb3BzID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHRoaXNbMF0pIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGZvciAobGV0IHByb3AgaW4gcHJvcHMpIHtcbiAgICAgICAgICB0aGlzW2ldLnN0eWxlW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgcHJvcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHRoaXNbaV0uc3R5bGVbcHJvcHNdID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBEb20gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiB0b0FycmF5KCkge1xuICBjb25zdCBhcnIgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgYXJyLnB1c2godGhpc1tpXSk7XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cbi8vIEl0ZXJhdGUgb3ZlciB0aGUgY29sbGVjdGlvbiBwYXNzaW5nIGVsZW1lbnRzIHRvIGBjYWxsYmFja2BcbmZ1bmN0aW9uIGVhY2goY2FsbGJhY2spIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGNvbnRpbnVpbmcgd2l0aG91dCBhIGNhbGxiYWNrXG4gIGlmICghY2FsbGJhY2spIHJldHVybiB0aGlzO1xuICAvLyBJdGVyYXRlIG92ZXIgdGhlIGN1cnJlbnQgY29sbGVjdGlvblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAvLyBJZiB0aGUgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICAgIGlmIChjYWxsYmFjay5jYWxsKHRoaXNbaV0sIGksIHRoaXNbaV0pID09PSBmYWxzZSkge1xuICAgICAgLy8gRW5kIHRoZSBsb29wIGVhcmx5XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cbiAgLy8gUmV0dXJuIGB0aGlzYCB0byBhbGxvdyBjaGFpbmVkIERPTSBvcGVyYXRpb25zXG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjaykge1xuICAvLyBEb24ndCBib3RoZXIgY29udGludWluZyB3aXRob3V0IGEgY2FsbGJhY2tcbiAgaWYgKCFjYWxsYmFjaykgcmV0dXJuIHRoaXM7XG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgY3VycmVudCBjb2xsZWN0aW9uXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIC8vIElmIHRoZSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gICAgaWYgKGNhbGxiYWNrLmNhbGwodGhpc1tpXSwgdGhpc1tpXSwgaSkgPT09IGZhbHNlKSB7XG4gICAgICAvLyBFbmQgdGhlIGxvb3AgZWFybHlcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxuICAvLyBSZXR1cm4gYHRoaXNgIHRvIGFsbG93IGNoYWluZWQgRE9NIG9wZXJhdGlvbnNcbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2spIHtcbiAgY29uc3QgbWF0Y2hlZEl0ZW1zID0gW107XG4gIGNvbnN0IGRvbSA9IHRoaXM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZG9tLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGNhbGxiYWNrLmNhbGwoZG9tW2ldLCBpLCBkb21baV0pKSBtYXRjaGVkSXRlbXMucHVzaChkb21baV0pO1xuICB9XG4gIHJldHVybiBuZXcgRG9tNyhtYXRjaGVkSXRlbXMpO1xufVxuZnVuY3Rpb24gbWFwKGNhbGxiYWNrKSB7XG4gIGNvbnN0IG1vZGlmaWVkSXRlbXMgPSBbXTtcbiAgY29uc3QgZG9tID0gdGhpcztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkb20ubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBtb2RpZmllZEl0ZW1zLnB1c2goY2FsbGJhY2suY2FsbChkb21baV0sIGksIGRvbVtpXSkpO1xuICB9XG4gIHJldHVybiBuZXcgRG9tNyhtb2RpZmllZEl0ZW1zKTtcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZnVuY3Rpb24gaHRtbChodG1sKSB7XG4gIGlmICh0eXBlb2YgaHRtbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gdGhpc1swXSA/IHRoaXNbMF0uaW5uZXJIVE1MIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5pbm5lckhUTUwgPSBodG1sO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5mdW5jdGlvbiB0ZXh0KHRleHQpIHtcbiAgaWYgKHR5cGVvZiB0ZXh0ID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0aGlzWzBdKSB7XG4gICAgICByZXR1cm4gdGhpc1swXS50ZXh0Q29udGVudC50cmltKCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS50ZXh0Q29udGVudCA9IHRleHQ7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBpcyhzZWxlY3Rvcikge1xuICBjb25zdCBlbCA9IHRoaXNbMF07XG4gIGxldCBjb21wYXJlV2l0aDtcbiAgbGV0IGk7XG4gIGlmICghZWwgfHwgdHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJykgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgIGlmIChlbC5tYXRjaGVzKSByZXR1cm4gZWwubWF0Y2hlcyhzZWxlY3Rvcik7XG4gICAgZWxzZSBpZiAoZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKSByZXR1cm4gZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBlbHNlIGlmIChlbC5tc01hdGNoZXNTZWxlY3RvcikgcmV0dXJuIGVsLm1zTWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcblxuICAgIGNvbXBhcmVXaXRoID0gJChzZWxlY3Rvcik7XG4gICAgZm9yIChpID0gMDsgaSA8IGNvbXBhcmVXaXRoLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoY29tcGFyZVdpdGhbaV0gPT09IGVsKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKHNlbGVjdG9yID09PSBkb2N1bWVudCkgcmV0dXJuIGVsID09PSBkb2N1bWVudDtcbiAgZWxzZSBpZiAoc2VsZWN0b3IgPT09IHdpbmRvdykgcmV0dXJuIGVsID09PSB3aW5kb3c7XG5cbiAgaWYgKHNlbGVjdG9yLm5vZGVUeXBlIHx8IHNlbGVjdG9yIGluc3RhbmNlb2YgRG9tNykge1xuICAgIGNvbXBhcmVXaXRoID0gc2VsZWN0b3Iubm9kZVR5cGUgPyBbc2VsZWN0b3JdIDogc2VsZWN0b3I7XG4gICAgZm9yIChpID0gMDsgaSA8IGNvbXBhcmVXaXRoLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoY29tcGFyZVdpdGhbaV0gPT09IGVsKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGluZGV4T2YoZWwpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHRoaXNbaV0gPT09IGVsKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59XG5mdW5jdGlvbiBpbmRleCgpIHtcbiAgbGV0IGNoaWxkID0gdGhpc1swXTtcbiAgbGV0IGk7XG4gIGlmIChjaGlsZCkge1xuICAgIGkgPSAwO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHdoaWxlICgoY2hpbGQgPSBjaGlsZC5wcmV2aW91c1NpYmxpbmcpICE9PSBudWxsKSB7XG4gICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIGkgKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZnVuY3Rpb24gZXEoaW5kZXgpIHtcbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB0aGlzO1xuICBjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgbGV0IHJldHVybkluZGV4O1xuICBpZiAoaW5kZXggPiBsZW5ndGggLSAxKSB7XG4gICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgfVxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuSW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBpZiAocmV0dXJuSW5kZXggPCAwKSByZXR1cm4gbmV3IERvbTcoW10pO1xuICAgIHJldHVybiBuZXcgRG9tNyhbdGhpc1tyZXR1cm5JbmRleF1dKTtcbiAgfVxuICByZXR1cm4gbmV3IERvbTcoW3RoaXNbaW5kZXhdXSk7XG59XG5mdW5jdGlvbiBhcHBlbmQoLi4uYXJncykge1xuICBsZXQgbmV3Q2hpbGQ7XG5cbiAgZm9yIChsZXQgayA9IDA7IGsgPCBhcmdzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgbmV3Q2hpbGQgPSBhcmdzW2tdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgdGVtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0ZW1wRGl2LmlubmVySFRNTCA9IG5ld0NoaWxkO1xuICAgICAgICB3aGlsZSAodGVtcERpdi5maXJzdENoaWxkKSB7XG4gICAgICAgICAgdGhpc1tpXS5hcHBlbmRDaGlsZCh0ZW1wRGl2LmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5ld0NoaWxkIGluc3RhbmNlb2YgRG9tNykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG5ld0NoaWxkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgdGhpc1tpXS5hcHBlbmRDaGlsZChuZXdDaGlsZFtqXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5mdW5jdGlvbiBhcHBlbmRUbyhwYXJlbnQpIHtcbiAgJChwYXJlbnQpLmFwcGVuZCh0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBwcmVwZW5kKG5ld0NoaWxkKSB7XG4gIGxldCBpO1xuICBsZXQgajtcbiAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgdGVtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDtcbiAgICAgIGZvciAoaiA9IHRlbXBEaXYuY2hpbGROb2Rlcy5sZW5ndGggLSAxOyBqID49IDA7IGogLT0gMSkge1xuICAgICAgICB0aGlzW2ldLmluc2VydEJlZm9yZSh0ZW1wRGl2LmNoaWxkTm9kZXNbal0sIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXdDaGlsZCBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBuZXdDaGlsZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICB0aGlzW2ldLmluc2VydEJlZm9yZShuZXdDaGlsZFtqXSwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUobmV3Q2hpbGQsIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5mdW5jdGlvbiBwcmVwZW5kVG8ocGFyZW50KSB7XG4gICQocGFyZW50KS5wcmVwZW5kKHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIGluc2VydEJlZm9yZShzZWxlY3Rvcikge1xuICBjb25zdCBiZWZvcmUgPSAkKHNlbGVjdG9yKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGJlZm9yZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGJlZm9yZVswXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLCBiZWZvcmVbMF0pO1xuICAgIH0gZWxzZSBpZiAoYmVmb3JlLmxlbmd0aCA+IDEpIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYmVmb3JlLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGJlZm9yZVtqXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLmNsb25lTm9kZSh0cnVlKSwgYmVmb3JlW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGluc2VydEFmdGVyKHNlbGVjdG9yKSB7XG4gIGNvbnN0IGFmdGVyID0gJChzZWxlY3Rvcik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChhZnRlci5sZW5ndGggPT09IDEpIHtcbiAgICAgIGFmdGVyWzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0sIGFmdGVyWzBdLm5leHRTaWJsaW5nKTtcbiAgICB9IGVsc2UgaWYgKGFmdGVyLmxlbmd0aCA+IDEpIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYWZ0ZXIubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgYWZ0ZXJbal0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXS5jbG9uZU5vZGUodHJ1ZSksIGFmdGVyW2pdLm5leHRTaWJsaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIG5leHQoc2VsZWN0b3IpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nICYmICQodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gbmV3IERvbTcoW3RoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IERvbTcoW10pO1xuICAgIH1cblxuICAgIGlmICh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZykgcmV0dXJuIG5ldyBEb203KFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pO1xuICAgIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBEb203KFtdKTtcbn1cbmZ1bmN0aW9uIG5leHRBbGwoc2VsZWN0b3IpIHtcbiAgY29uc3QgbmV4dEVscyA9IFtdO1xuICBsZXQgZWwgPSB0aGlzWzBdO1xuICBpZiAoIWVsKSByZXR1cm4gbmV3IERvbTcoW10pO1xuICB3aGlsZSAoZWwubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKCQobmV4dCkuaXMoc2VsZWN0b3IpKSBuZXh0RWxzLnB1c2gobmV4dCk7XG4gICAgfSBlbHNlIG5leHRFbHMucHVzaChuZXh0KTtcbiAgICBlbCA9IG5leHQ7XG4gIH1cbiAgcmV0dXJuIG5ldyBEb203KG5leHRFbHMpO1xufVxuZnVuY3Rpb24gcHJldihzZWxlY3Rvcikge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzWzBdO1xuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgJChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEb203KFtlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IERvbTcoW10pO1xuICAgIH1cblxuICAgIGlmIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSByZXR1cm4gbmV3IERvbTcoW2VsLnByZXZpb3VzRWxlbWVudFNpYmxpbmddKTtcbiAgICByZXR1cm4gbmV3IERvbTcoW10pO1xuICB9XG4gIHJldHVybiBuZXcgRG9tNyhbXSk7XG59XG5mdW5jdGlvbiBwcmV2QWxsKHNlbGVjdG9yKSB7XG4gIGNvbnN0IHByZXZFbHMgPSBbXTtcbiAgbGV0IGVsID0gdGhpc1swXTtcbiAgaWYgKCFlbCkgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgd2hpbGUgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICBjb25zdCBwcmV2ID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKCQocHJldikuaXMoc2VsZWN0b3IpKSBwcmV2RWxzLnB1c2gocHJldik7XG4gICAgfSBlbHNlIHByZXZFbHMucHVzaChwcmV2KTtcbiAgICBlbCA9IHByZXY7XG4gIH1cbiAgcmV0dXJuIG5ldyBEb203KHByZXZFbHMpO1xufVxuZnVuY3Rpb24gc2libGluZ3Moc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHRoaXMubmV4dEFsbChzZWxlY3RvcikuYWRkKHRoaXMucHJldkFsbChzZWxlY3RvcikpO1xufVxuZnVuY3Rpb24gcGFyZW50KHNlbGVjdG9yKSB7XG4gIGNvbnN0IHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodGhpc1tpXS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKCQodGhpc1tpXS5wYXJlbnROb2RlKS5pcyhzZWxlY3RvcikpIHBhcmVudHMucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50cy5wdXNoKHRoaXNbaV0ucGFyZW50Tm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiAkKHVuaXF1ZShwYXJlbnRzKSk7XG59XG5mdW5jdGlvbiBwYXJlbnRzKHNlbGVjdG9yKSB7XG4gIGNvbnN0IHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBsZXQgcGFyZW50ID0gdGhpc1tpXS5wYXJlbnROb2RlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmICgkKHBhcmVudCkuaXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG4gIHJldHVybiAkKHVuaXF1ZShwYXJlbnRzKSk7XG59XG5mdW5jdGlvbiBjbG9zZXN0KHNlbGVjdG9yKSB7XG4gIGxldCBjbG9zZXN0ID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gIH1cbiAgaWYgKCFjbG9zZXN0LmlzKHNlbGVjdG9yKSkge1xuICAgIGNsb3Nlc3QgPSBjbG9zZXN0LnBhcmVudHMoc2VsZWN0b3IpLmVxKDApO1xuICB9XG4gIHJldHVybiBjbG9zZXN0O1xufVxuZnVuY3Rpb24gZmluZChzZWxlY3Rvcikge1xuICBjb25zdCBmb3VuZEVsZW1lbnRzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGZvdW5kID0gdGhpc1tpXS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGZvdW5kLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBmb3VuZEVsZW1lbnRzLnB1c2goZm91bmRbal0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IERvbTcoZm91bmRFbGVtZW50cyk7XG59XG5mdW5jdGlvbiBjaGlsZHJlbihzZWxlY3Rvcikge1xuICBjb25zdCBjaGlsZHJlbiA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGNoaWxkTm9kZXMgPSB0aGlzW2ldLmNoaWxkTm9kZXM7XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNoaWxkTm9kZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKGNoaWxkTm9kZXNbal0ubm9kZVR5cGUgPT09IDEpIGNoaWxkcmVuLnB1c2goY2hpbGROb2Rlc1tqXSk7XG4gICAgICB9IGVsc2UgaWYgKGNoaWxkTm9kZXNbal0ubm9kZVR5cGUgPT09IDEgJiYgJChjaGlsZE5vZGVzW2pdKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZE5vZGVzW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBEb203KHVuaXF1ZShjaGlsZHJlbikpO1xufVxuZnVuY3Rpb24gcmVtb3ZlKCkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodGhpc1tpXS5wYXJlbnROb2RlKSB0aGlzW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpc1tpXSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBkZXRhY2goKSB7XG4gIHJldHVybiB0aGlzLnJlbW92ZSgpO1xufVxuZnVuY3Rpb24gYWRkKC4uLmFyZ3MpIHtcbiAgY29uc3QgZG9tID0gdGhpcztcbiAgbGV0IGk7XG4gIGxldCBqO1xuICBmb3IgKGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHRvQWRkID0gJChhcmdzW2ldKTtcbiAgICBmb3IgKGogPSAwOyBqIDwgdG9BZGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGRvbVtkb20ubGVuZ3RoXSA9IHRvQWRkW2pdO1xuICAgICAgZG9tLmxlbmd0aCArPSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZG9tO1xufVxuZnVuY3Rpb24gZW1wdHkoKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGVsID0gdGhpc1tpXTtcbiAgICBpZiAoZWwubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZWwuY2hpbGROb2Rlcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBpZiAoZWwuY2hpbGROb2Rlc1tqXS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgZWwuY2hpbGROb2Rlc1tqXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsLmNoaWxkTm9kZXNbal0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbC50ZXh0Q29udGVudCA9ICcnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2Nyb2xsVG8oLi4uYXJncykge1xuICBsZXQgW2xlZnQsIHRvcCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2tdID0gYXJncztcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGVhc2luZztcbiAgICBbbGVmdCwgdG9wLCBkdXJhdGlvbiwgY2FsbGJhY2ssIGVhc2luZ10gPSBhcmdzO1xuICB9XG4gIGlmICh0eXBlb2YgZWFzaW5nID09PSAndW5kZWZpbmVkJykgZWFzaW5nID0gJ3N3aW5nJztcblxuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIGFuaW1hdGUoKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzO1xuICAgIGxldCBjdXJyZW50VG9wO1xuICAgIGxldCBjdXJyZW50TGVmdDtcbiAgICBsZXQgbWF4VG9wO1xuICAgIGxldCBtYXhMZWZ0O1xuICAgIGxldCBuZXdUb3A7XG4gICAgbGV0IG5ld0xlZnQ7XG4gICAgbGV0IHNjcm9sbFRvcDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGxldCBzY3JvbGxMZWZ0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgbGV0IGFuaW1hdGVUb3AgPSB0b3AgPiAwIHx8IHRvcCA9PT0gMDtcbiAgICBsZXQgYW5pbWF0ZUxlZnQgPSBsZWZ0ID4gMCB8fCBsZWZ0ID09PSAwO1xuICAgIGlmICh0eXBlb2YgZWFzaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZWFzaW5nID0gJ3N3aW5nJztcbiAgICB9XG4gICAgaWYgKGFuaW1hdGVUb3ApIHtcbiAgICAgIGN1cnJlbnRUb3AgPSBlbC5zY3JvbGxUb3A7XG4gICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgIGVsLnNjcm9sbFRvcCA9IHRvcDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFuaW1hdGVMZWZ0KSB7XG4gICAgICBjdXJyZW50TGVmdCA9IGVsLnNjcm9sbExlZnQ7XG4gICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSBsZWZ0O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWR1cmF0aW9uKSByZXR1cm47XG4gICAgaWYgKGFuaW1hdGVUb3ApIHtcbiAgICAgIG1heFRvcCA9IGVsLnNjcm9sbEhlaWdodCAtIGVsLm9mZnNldEhlaWdodDtcbiAgICAgIG5ld1RvcCA9IE1hdGgubWF4KE1hdGgubWluKHRvcCwgbWF4VG9wKSwgMCk7XG4gICAgfVxuICAgIGlmIChhbmltYXRlTGVmdCkge1xuICAgICAgbWF4TGVmdCA9IGVsLnNjcm9sbFdpZHRoIC0gZWwub2Zmc2V0V2lkdGg7XG4gICAgICBuZXdMZWZ0ID0gTWF0aC5tYXgoTWF0aC5taW4obGVmdCwgbWF4TGVmdCksIDApO1xuICAgIH1cbiAgICBsZXQgc3RhcnRUaW1lID0gbnVsbDtcbiAgICBpZiAoYW5pbWF0ZVRvcCAmJiBuZXdUb3AgPT09IGN1cnJlbnRUb3ApIGFuaW1hdGVUb3AgPSBmYWxzZTtcbiAgICBpZiAoYW5pbWF0ZUxlZnQgJiYgbmV3TGVmdCA9PT0gY3VycmVudExlZnQpIGFuaW1hdGVMZWZ0ID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gcmVuZGVyKHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSkge1xuICAgICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgICBzdGFydFRpbWUgPSB0aW1lO1xuICAgICAgfVxuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBkdXJhdGlvbiwgMSksIDApO1xuICAgICAgY29uc3QgZWFzZVByb2dyZXNzID0gZWFzaW5nID09PSAnbGluZWFyJyA/IHByb2dyZXNzIDogKDAuNSAtIChNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkpIC8gMikpO1xuICAgICAgbGV0IGRvbmU7XG4gICAgICBpZiAoYW5pbWF0ZVRvcCkgc2Nyb2xsVG9wID0gY3VycmVudFRvcCArIChlYXNlUHJvZ3Jlc3MgKiAobmV3VG9wIC0gY3VycmVudFRvcCkpO1xuICAgICAgaWYgKGFuaW1hdGVMZWZ0KSBzY3JvbGxMZWZ0ID0gY3VycmVudExlZnQgKyAoZWFzZVByb2dyZXNzICogKG5ld0xlZnQgLSBjdXJyZW50TGVmdCkpO1xuICAgICAgaWYgKGFuaW1hdGVUb3AgJiYgbmV3VG9wID4gY3VycmVudFRvcCAmJiBzY3JvbGxUb3AgPj0gbmV3VG9wKSB7XG4gICAgICAgIGVsLnNjcm9sbFRvcCA9IG5ld1RvcDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoYW5pbWF0ZVRvcCAmJiBuZXdUb3AgPCBjdXJyZW50VG9wICYmIHNjcm9sbFRvcCA8PSBuZXdUb3ApIHtcbiAgICAgICAgZWwuc2Nyb2xsVG9wID0gbmV3VG9wO1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChhbmltYXRlTGVmdCAmJiBuZXdMZWZ0ID4gY3VycmVudExlZnQgJiYgc2Nyb2xsTGVmdCA+PSBuZXdMZWZ0KSB7XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSBuZXdMZWZ0O1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChhbmltYXRlTGVmdCAmJiBuZXdMZWZ0IDwgY3VycmVudExlZnQgJiYgc2Nyb2xsTGVmdCA8PSBuZXdMZWZ0KSB7XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSBuZXdMZWZ0O1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoYW5pbWF0ZVRvcCkgZWwuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgaWYgKGFuaW1hdGVMZWZ0KSBlbC5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICAgIH1cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgfSk7XG59XG4vLyBzY3JvbGxUb3AodG9wLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjaykge1xuZnVuY3Rpb24gc2Nyb2xsVG9wKC4uLmFyZ3MpIHtcbiAgbGV0IFt0b3AsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrXSA9IGFyZ3M7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgW3RvcCwgZHVyYXRpb24sIGNhbGxiYWNrLCBlYXNpbmddID0gYXJncztcbiAgfVxuICBjb25zdCBkb20gPSB0aGlzO1xuICBpZiAodHlwZW9mIHRvcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoZG9tLmxlbmd0aCA+IDApIHJldHVybiBkb21bMF0uc2Nyb2xsVG9wO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBkb20uc2Nyb2xsVG8odW5kZWZpbmVkLCB0b3AsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIHNjcm9sbExlZnQoLi4uYXJncykge1xuICBsZXQgW2xlZnQsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrXSA9IGFyZ3M7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgW2xlZnQsIGR1cmF0aW9uLCBjYWxsYmFjaywgZWFzaW5nXSA9IGFyZ3M7XG4gIH1cbiAgY29uc3QgZG9tID0gdGhpcztcbiAgaWYgKHR5cGVvZiBsZWZ0ID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmIChkb20ubGVuZ3RoID4gMCkgcmV0dXJuIGRvbVswXS5zY3JvbGxMZWZ0O1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBkb20uc2Nyb2xsVG8obGVmdCwgdW5kZWZpbmVkLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGUoaW5pdGlhbFByb3BzLCBpbml0aWFsUGFyYW1zKSB7XG4gIGNvbnN0IGVscyA9IHRoaXM7XG4gIGNvbnN0IGEgPSB7XG4gICAgcHJvcHM6IE9iamVjdC5hc3NpZ24oe30sIGluaXRpYWxQcm9wcyksXG4gICAgcGFyYW1zOiBPYmplY3QuYXNzaWduKHtcbiAgICAgIGR1cmF0aW9uOiAzMDAsXG4gICAgICBlYXNpbmc6ICdzd2luZycsIC8vIG9yICdsaW5lYXInXG4gICAgICAvKiBDYWxsYmFja3NcbiAgICAgIGJlZ2luKGVsZW1lbnRzKVxuICAgICAgY29tcGxldGUoZWxlbWVudHMpXG4gICAgICBwcm9ncmVzcyhlbGVtZW50cywgY29tcGxldGUsIHJlbWFpbmluZywgc3RhcnQsIHR3ZWVuVmFsdWUpXG4gICAgICAqL1xuICAgIH0sIGluaXRpYWxQYXJhbXMpLFxuXG4gICAgZWxlbWVudHM6IGVscyxcbiAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgIHF1ZTogW10sXG5cbiAgICBlYXNpbmdQcm9ncmVzcyhlYXNpbmcsIHByb2dyZXNzKSB7XG4gICAgICBpZiAoZWFzaW5nID09PSAnc3dpbmcnKSB7XG4gICAgICAgIHJldHVybiAwLjUgLSAoTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDIpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGVhc2luZyhwcm9ncmVzcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvZ3Jlc3M7XG4gICAgfSxcbiAgICBzdG9wKCkge1xuICAgICAgaWYgKGEuZnJhbWVJZCkge1xuICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShhLmZyYW1lSWQpO1xuICAgICAgfVxuICAgICAgYS5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgIGEuZWxlbWVudHMuZWFjaCgoaW5kZXgsIGVsKSA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbDtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnQuZG9tN0FuaW1hdGVJbnN0YW5jZTtcbiAgICAgIH0pO1xuICAgICAgYS5xdWUgPSBbXTtcbiAgICB9LFxuICAgIGRvbmUoY29tcGxldGUpIHtcbiAgICAgIGEuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICBhLmVsZW1lbnRzLmVhY2goKGluZGV4LCBlbCkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZWw7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50LmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgICB9KTtcbiAgICAgIGlmIChjb21wbGV0ZSkgY29tcGxldGUoZWxzKTtcbiAgICAgIGlmIChhLnF1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHF1ZSA9IGEucXVlLnNoaWZ0KCk7XG4gICAgICAgIGEuYW5pbWF0ZShxdWVbMF0sIHF1ZVsxXSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhbmltYXRlKHByb3BzLCBwYXJhbXMpIHtcbiAgICAgIGlmIChhLmFuaW1hdGluZykge1xuICAgICAgICBhLnF1ZS5wdXNoKFtwcm9wcywgcGFyYW1zXSk7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgICAgY29uc3QgZWxlbWVudHMgPSBbXTtcblxuICAgICAgLy8gRGVmaW5lICYgQ2FjaGUgSW5pdGlhbHMgJiBVbml0c1xuICAgICAgYS5lbGVtZW50cy5lYWNoKChpbmRleCwgZWwpID0+IHtcbiAgICAgICAgbGV0IGluaXRpYWxGdWxsVmFsdWU7XG4gICAgICAgIGxldCBpbml0aWFsVmFsdWU7XG4gICAgICAgIGxldCB1bml0O1xuICAgICAgICBsZXQgZmluYWxWYWx1ZTtcbiAgICAgICAgbGV0IGZpbmFsRnVsbFZhbHVlO1xuXG4gICAgICAgIGlmICghZWwuZG9tN0FuaW1hdGVJbnN0YW5jZSkgYS5lbGVtZW50c1tpbmRleF0uZG9tN0FuaW1hdGVJbnN0YW5jZSA9IGE7XG5cbiAgICAgICAgZWxlbWVudHNbaW5kZXhdID0ge1xuICAgICAgICAgIGNvbnRhaW5lcjogZWwsXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICAgICAgaW5pdGlhbEZ1bGxWYWx1ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApLnJlcGxhY2UoJywnLCAnLicpO1xuICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IHBhcnNlRmxvYXQoaW5pdGlhbEZ1bGxWYWx1ZSk7XG4gICAgICAgICAgdW5pdCA9IGluaXRpYWxGdWxsVmFsdWUucmVwbGFjZShpbml0aWFsVmFsdWUsICcnKTtcbiAgICAgICAgICBmaW5hbFZhbHVlID0gcGFyc2VGbG9hdChwcm9wc1twcm9wXSk7XG4gICAgICAgICAgZmluYWxGdWxsVmFsdWUgPSBwcm9wc1twcm9wXSArIHVuaXQ7XG4gICAgICAgICAgZWxlbWVudHNbaW5kZXhdW3Byb3BdID0ge1xuICAgICAgICAgICAgaW5pdGlhbEZ1bGxWYWx1ZSxcbiAgICAgICAgICAgIGluaXRpYWxWYWx1ZSxcbiAgICAgICAgICAgIHVuaXQsXG4gICAgICAgICAgICBmaW5hbFZhbHVlLFxuICAgICAgICAgICAgZmluYWxGdWxsVmFsdWUsXG4gICAgICAgICAgICBjdXJyZW50VmFsdWU6IGluaXRpYWxWYWx1ZSxcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgc3RhcnRUaW1lID0gbnVsbDtcbiAgICAgIGxldCB0aW1lO1xuICAgICAgbGV0IGVsZW1lbnRzRG9uZSA9IDA7XG4gICAgICBsZXQgcHJvcHNEb25lID0gMDtcbiAgICAgIGxldCBkb25lO1xuICAgICAgbGV0IGJlZ2FuID0gZmFsc2U7XG5cbiAgICAgIGEuYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIGxldCBwcm9ncmVzcztcbiAgICAgICAgbGV0IGVhc2VQcm9ncmVzcztcbiAgICAgICAgLy8gbGV0IGVsO1xuICAgICAgICBpZiAoIWJlZ2FuKSB7XG4gICAgICAgICAgYmVnYW4gPSB0cnVlO1xuICAgICAgICAgIGlmIChwYXJhbXMuYmVnaW4pIHBhcmFtcy5iZWdpbihlbHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgICBzdGFydFRpbWUgPSB0aW1lO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMucHJvZ3Jlc3MpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICBwYXJhbXMucHJvZ3Jlc3MoZWxzLCBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBwYXJhbXMuZHVyYXRpb24sIDEpLCAwKSwgKChzdGFydFRpbWUgKyBwYXJhbXMuZHVyYXRpb24pIC0gdGltZSA8IDAgPyAwIDogKHN0YXJ0VGltZSArIHBhcmFtcy5kdXJhdGlvbikgLSB0aW1lKSwgc3RhcnRUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICBjb25zdCBlbCA9IGVsZW1lbnQ7XG4gICAgICAgICAgaWYgKGRvbmUgfHwgZWwuZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICAgICAgICBpZiAoZG9uZSB8fCBlbC5kb25lKSByZXR1cm47XG4gICAgICAgICAgICBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCh0aW1lIC0gc3RhcnRUaW1lKSAvIHBhcmFtcy5kdXJhdGlvbiwgMSksIDApO1xuICAgICAgICAgICAgZWFzZVByb2dyZXNzID0gYS5lYXNpbmdQcm9ncmVzcyhwYXJhbXMuZWFzaW5nLCBwcm9ncmVzcyk7XG4gICAgICAgICAgICBjb25zdCB7IGluaXRpYWxWYWx1ZSwgZmluYWxWYWx1ZSwgdW5pdCB9ID0gZWxbcHJvcF07XG4gICAgICAgICAgICBlbFtwcm9wXS5jdXJyZW50VmFsdWUgPSBpbml0aWFsVmFsdWUgKyAoZWFzZVByb2dyZXNzICogKGZpbmFsVmFsdWUgLSBpbml0aWFsVmFsdWUpKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IGVsW3Byb3BdLmN1cnJlbnRWYWx1ZTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAoZmluYWxWYWx1ZSA+IGluaXRpYWxWYWx1ZSAmJiBjdXJyZW50VmFsdWUgPj0gZmluYWxWYWx1ZSkgfHxcbiAgICAgICAgICAgICAgKGZpbmFsVmFsdWUgPCBpbml0aWFsVmFsdWUgJiYgY3VycmVudFZhbHVlIDw9IGZpbmFsVmFsdWUpKSB7XG4gICAgICAgICAgICAgIGVsLmNvbnRhaW5lci5zdHlsZVtwcm9wXSA9IGZpbmFsVmFsdWUgKyB1bml0O1xuICAgICAgICAgICAgICBwcm9wc0RvbmUgKz0gMTtcbiAgICAgICAgICAgICAgaWYgKHByb3BzRG9uZSA9PT0gT2JqZWN0LmtleXMocHJvcHMpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGVsLmRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVsZW1lbnRzRG9uZSArPSAxO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChlbGVtZW50c0RvbmUgPT09IGVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICBhLmRvbmUocGFyYW1zLmNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWwuY29udGFpbmVyLnN0eWxlW3Byb3BdID0gY3VycmVudFZhbHVlICsgdW5pdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICAgIC8vIFRoZW4gY2FsbFxuICAgICAgICBhLmZyYW1lSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgIH1cbiAgICAgIGEuZnJhbWVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfSxcbiAgfTtcblxuICBpZiAoYS5lbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZWxzO1xuICB9XG5cbiAgbGV0IGFuaW1hdGVJbnN0YW5jZTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmVsZW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGEuZWxlbWVudHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZSkge1xuICAgICAgYW5pbWF0ZUluc3RhbmNlID0gYS5lbGVtZW50c1tpXS5kb203QW5pbWF0ZUluc3RhbmNlO1xuICAgIH0gZWxzZSBhLmVsZW1lbnRzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2UgPSBhO1xuICB9XG4gIGlmICghYW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgYW5pbWF0ZUluc3RhbmNlID0gYTtcbiAgfVxuXG4gIGlmIChpbml0aWFsUHJvcHMgPT09ICdzdG9wJykge1xuICAgIGFuaW1hdGVJbnN0YW5jZS5zdG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgYW5pbWF0ZUluc3RhbmNlLmFuaW1hdGUoYS5wcm9wcywgYS5wYXJhbXMpO1xuICB9XG5cbiAgcmV0dXJuIGVscztcbn1cblxuZnVuY3Rpb24gc3RvcCgpIHtcbiAgY29uc3QgZWxzID0gdGhpcztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoZWxzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2UpIHtcbiAgICAgIGVsc1tpXS5kb203QW5pbWF0ZUluc3RhbmNlLnN0b3AoKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3Qgbm9UcmlnZ2VyID0gKCdyZXNpemUgc2Nyb2xsJykuc3BsaXQoJyAnKTtcbmZ1bmN0aW9uIGV2ZW50U2hvcnRjdXQobmFtZSwgLi4uYXJncykge1xuICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAobm9UcmlnZ2VyLmluZGV4T2YobmFtZSkgPCAwKSB7XG4gICAgICAgIGlmIChuYW1lIGluIHRoaXNbaV0pIHRoaXNbaV1bbmFtZV0oKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgJCh0aGlzW2ldKS50cmlnZ2VyKG5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHJldHVybiB0aGlzLm9uKG5hbWUsIC4uLmFyZ3MpO1xufVxuXG5mdW5jdGlvbiBjbGljayguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ2NsaWNrJywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBibHVyKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgnYmx1cicsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gZm9jdXMoLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdmb2N1cycsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gZm9jdXNpbiguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ2ZvY3VzaW4nLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIGZvY3Vzb3V0KC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgnZm9jdXNvdXQnLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIGtleXVwKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgna2V5dXAnLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIGtleWRvd24oLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdrZXlkb3duJywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBrZXlwcmVzcyguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ2tleXByZXNzJywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBzdWJtaXQoLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdzdWJtaXQnLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIGNoYW5nZSguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ2NoYW5nZScsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gbW91c2Vkb3duKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgnbW91c2Vkb3duJywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBtb3VzZW1vdmUoLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdtb3VzZW1vdmUnLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIG1vdXNldXAoLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdtb3VzZXVwJywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBtb3VzZWVudGVyKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgnbW91c2VlbnRlcicsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gbW91c2VsZWF2ZSguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ21vdXNlbGVhdmUnLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIG1vdXNlb3V0KC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgnbW91c2VvdXQnLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIG1vdXNlb3ZlciguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ21vdXNlb3ZlcicsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gdG91Y2hzdGFydCguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ3RvdWNoc3RhcnQnLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIHRvdWNoZW5kKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgndG91Y2hlbmQnLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIHRvdWNobW92ZSguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ3RvdWNobW92ZScsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gcmVzaXplKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgncmVzaXplJywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBzY3JvbGwoLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdzY3JvbGwnLCAuLi5hcmdzKTtcbn1cblxuZXhwb3J0IHsgJCwgYWRkQ2xhc3MsIHJlbW92ZUNsYXNzLCBoYXNDbGFzcywgdG9nZ2xlQ2xhc3MsIGF0dHIsIHJlbW92ZUF0dHIsIHByb3AsIGRhdGEsIHJlbW92ZURhdGEsIGRhdGFzZXQsIHZhbCwgdHJhbnNmb3JtLCB0cmFuc2l0aW9uLCBvbiwgb2ZmLCBvbmNlLCB0cmlnZ2VyLCB0cmFuc2l0aW9uRW5kLCBhbmltYXRpb25FbmQsIHdpZHRoLCBvdXRlcldpZHRoLCBoZWlnaHQsIG91dGVySGVpZ2h0LCBvZmZzZXQsIGhpZGUsIHNob3csIHN0eWxlcywgY3NzLCB0b0FycmF5LCBlYWNoLCBmb3JFYWNoLCBmaWx0ZXIsIG1hcCwgaHRtbCwgdGV4dCwgaXMsIGluZGV4T2YsIGluZGV4LCBlcSwgYXBwZW5kLCBhcHBlbmRUbywgcHJlcGVuZCwgcHJlcGVuZFRvLCBpbnNlcnRCZWZvcmUsIGluc2VydEFmdGVyLCBuZXh0LCBuZXh0QWxsLCBwcmV2LCBwcmV2QWxsLCBzaWJsaW5ncywgcGFyZW50LCBwYXJlbnRzLCBjbG9zZXN0LCBmaW5kLCBjaGlsZHJlbiwgcmVtb3ZlLCBkZXRhY2gsIGFkZCwgZW1wdHksIHNjcm9sbFRvLCBzY3JvbGxUb3AsIHNjcm9sbExlZnQsIGFuaW1hdGUsIHN0b3AsIGNsaWNrLCBibHVyLCBmb2N1cywgZm9jdXNpbiwgZm9jdXNvdXQsIGtleXVwLCBrZXlkb3duLCBrZXlwcmVzcywgc3VibWl0LCBjaGFuZ2UsIG1vdXNlZG93biwgbW91c2Vtb3ZlLCBtb3VzZXVwLCBtb3VzZWVudGVyLCBtb3VzZWxlYXZlLCBtb3VzZW91dCwgbW91c2VvdmVyLCB0b3VjaHN0YXJ0LCB0b3VjaGVuZCwgdG91Y2htb3ZlLCByZXNpemUsIHNjcm9sbCB9O1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBub3cgPSByZXF1aXJlKCcuL25vdycpLFxuICAgIHRvTnVtYmVyID0gcmVxdWlyZSgnLi90b051bWJlcicpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgbmF0aXZlTWluID0gTWF0aC5taW47XG5cbi8qKlxuICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICogaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gKlxuICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAqIH0pKTtcbiAqXG4gKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsYXN0QXJncyxcbiAgICAgIGxhc3RUaGlzLFxuICAgICAgbWF4V2FpdCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHRpbWVySWQsXG4gICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgdGltZVdhaXRpbmcgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICByZXR1cm4gbWF4aW5nXG4gICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICA6IHRpbWVXYWl0aW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgfVxuICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICB9XG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2U7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKipcbiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IERhdGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICogfSwgXy5ub3coKSk7XG4gKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICovXG52YXIgbm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByb290LkRhdGUubm93KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vdztcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvTnVtYmVyO1xuIiwiLyohIG5wbS5pbS9vYmplY3QtZml0LWltYWdlcyAzLjIuNCAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgT0ZJID0gJ2JmcmVkLWl0Om9iamVjdC1maXQtaW1hZ2VzJztcbnZhciBwcm9wUmVnZXggPSAvKG9iamVjdC1maXR8b2JqZWN0LXBvc2l0aW9uKVxccyo6XFxzKihbLS5cXHdcXHMlXSspL2c7XG52YXIgdGVzdEltZyA9IHR5cGVvZiBJbWFnZSA9PT0gJ3VuZGVmaW5lZCcgPyB7c3R5bGU6IHsnb2JqZWN0LXBvc2l0aW9uJzogMX19IDogbmV3IEltYWdlKCk7XG52YXIgc3VwcG9ydHNPYmplY3RGaXQgPSAnb2JqZWN0LWZpdCcgaW4gdGVzdEltZy5zdHlsZTtcbnZhciBzdXBwb3J0c09iamVjdFBvc2l0aW9uID0gJ29iamVjdC1wb3NpdGlvbicgaW4gdGVzdEltZy5zdHlsZTtcbnZhciBzdXBwb3J0c09GSSA9ICdiYWNrZ3JvdW5kLXNpemUnIGluIHRlc3RJbWcuc3R5bGU7XG52YXIgc3VwcG9ydHNDdXJyZW50U3JjID0gdHlwZW9mIHRlc3RJbWcuY3VycmVudFNyYyA9PT0gJ3N0cmluZyc7XG52YXIgbmF0aXZlR2V0QXR0cmlidXRlID0gdGVzdEltZy5nZXRBdHRyaWJ1dGU7XG52YXIgbmF0aXZlU2V0QXR0cmlidXRlID0gdGVzdEltZy5zZXRBdHRyaWJ1dGU7XG52YXIgYXV0b01vZGVFbmFibGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGNyZWF0ZVBsYWNlaG9sZGVyKHcsIGgpIHtcblx0cmV0dXJuIChcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB3aWR0aD0nXCIgKyB3ICsgXCInIGhlaWdodD0nXCIgKyBoICsgXCInJTNFJTNDL3N2ZyUzRVwiKTtcbn1cblxuZnVuY3Rpb24gcG9seWZpbGxDdXJyZW50U3JjKGVsKSB7XG5cdGlmIChlbC5zcmNzZXQgJiYgIXN1cHBvcnRzQ3VycmVudFNyYyAmJiB3aW5kb3cucGljdHVyZWZpbGwpIHtcblx0XHR2YXIgcGYgPSB3aW5kb3cucGljdHVyZWZpbGwuXztcblx0XHQvLyBwYXJzZSBzcmNzZXQgd2l0aCBwaWN0dXJlZmlsbCB3aGVyZSBjdXJyZW50U3JjIGlzbid0IGF2YWlsYWJsZVxuXHRcdGlmICghZWxbcGYubnNdIHx8ICFlbFtwZi5uc10uZXZhbGVkKSB7XG5cdFx0XHQvLyBmb3JjZSBzeW5jaHJvbm91cyBzcmNzZXQgcGFyc2luZ1xuXHRcdFx0cGYuZmlsbEltZyhlbCwge3Jlc2VsZWN0OiB0cnVlfSk7XG5cdFx0fVxuXG5cdFx0aWYgKCFlbFtwZi5uc10uY3VyU3JjKSB7XG5cdFx0XHQvLyBmb3JjZSBwaWN0dXJlZmlsbCB0byBwYXJzZSBzcmNzZXRcblx0XHRcdGVsW3BmLm5zXS5zdXBwb3J0ZWQgPSBmYWxzZTtcblx0XHRcdHBmLmZpbGxJbWcoZWwsIHtyZXNlbGVjdDogdHJ1ZX0pO1xuXHRcdH1cblxuXHRcdC8vIHJldHJpZXZlIHBhcnNlZCBjdXJyZW50U3JjLCBpZiBhbnlcblx0XHRlbC5jdXJyZW50U3JjID0gZWxbcGYubnNdLmN1clNyYyB8fCBlbC5zcmM7XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0U3R5bGUoZWwpIHtcblx0dmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZm9udEZhbWlseTtcblx0dmFyIHBhcnNlZDtcblx0dmFyIHByb3BzID0ge307XG5cdHdoaWxlICgocGFyc2VkID0gcHJvcFJlZ2V4LmV4ZWMoc3R5bGUpKSAhPT0gbnVsbCkge1xuXHRcdHByb3BzW3BhcnNlZFsxXV0gPSBwYXJzZWRbMl07XG5cdH1cblx0cmV0dXJuIHByb3BzO1xufVxuXG5mdW5jdGlvbiBzZXRQbGFjZWhvbGRlcihpbWcsIHdpZHRoLCBoZWlnaHQpIHtcblx0Ly8gRGVmYXVsdDogZmlsbCB3aWR0aCwgbm8gaGVpZ2h0XG5cdHZhciBwbGFjZWhvbGRlciA9IGNyZWF0ZVBsYWNlaG9sZGVyKHdpZHRoIHx8IDEsIGhlaWdodCB8fCAwKTtcblxuXHQvLyBPbmx5IHNldCBwbGFjZWhvbGRlciBpZiBpdCdzIGRpZmZlcmVudFxuXHRpZiAobmF0aXZlR2V0QXR0cmlidXRlLmNhbGwoaW1nLCAnc3JjJykgIT09IHBsYWNlaG9sZGVyKSB7XG5cdFx0bmF0aXZlU2V0QXR0cmlidXRlLmNhbGwoaW1nLCAnc3JjJywgcGxhY2Vob2xkZXIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIG9uSW1hZ2VSZWFkeShpbWcsIGNhbGxiYWNrKSB7XG5cdC8vIG5hdHVyYWxXaWR0aCBpcyBvbmx5IGF2YWlsYWJsZSB3aGVuIHRoZSBpbWFnZSBoZWFkZXJzIGFyZSBsb2FkZWQsXG5cdC8vIHRoaXMgbG9vcCB3aWxsIHBvbGwgaXQgZXZlcnkgMTAwbXMuXG5cdGlmIChpbWcubmF0dXJhbFdpZHRoKSB7XG5cdFx0Y2FsbGJhY2soaW1nKTtcblx0fSBlbHNlIHtcblx0XHRzZXRUaW1lb3V0KG9uSW1hZ2VSZWFkeSwgMTAwLCBpbWcsIGNhbGxiYWNrKTtcblx0fVxufVxuXG5mdW5jdGlvbiBmaXhPbmUoZWwpIHtcblx0dmFyIHN0eWxlID0gZ2V0U3R5bGUoZWwpO1xuXHR2YXIgb2ZpID0gZWxbT0ZJXTtcblx0c3R5bGVbJ29iamVjdC1maXQnXSA9IHN0eWxlWydvYmplY3QtZml0J10gfHwgJ2ZpbGwnOyAvLyBkZWZhdWx0IHZhbHVlXG5cblx0Ly8gQXZvaWQgcnVubmluZyB3aGVyZSB1bm5lY2Vzc2FyeSwgdW5sZXNzIE9GSSBoYWQgYWxyZWFkeSBkb25lIGl0cyBkZWVkXG5cdGlmICghb2ZpLmltZykge1xuXHRcdC8vIGZpbGwgaXMgdGhlIGRlZmF1bHQgYmVoYXZpb3Igc28gbm8gYWN0aW9uIGlzIG5lY2Vzc2FyeVxuXHRcdGlmIChzdHlsZVsnb2JqZWN0LWZpdCddID09PSAnZmlsbCcpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBXaGVyZSBvYmplY3QtZml0IGlzIHN1cHBvcnRlZCBhbmQgb2JqZWN0LXBvc2l0aW9uIGlzbid0IChTYWZhcmkgPCAxMClcblx0XHRpZiAoXG5cdFx0XHQhb2ZpLnNraXBUZXN0ICYmIC8vIHVubGVzcyB1c2VyIHdhbnRzIHRvIGFwcGx5IHJlZ2FyZGxlc3Mgb2YgYnJvd3NlciBzdXBwb3J0XG5cdFx0XHRzdXBwb3J0c09iamVjdEZpdCAmJiAvLyBpZiBicm93c2VyIGFscmVhZHkgc3VwcG9ydHMgb2JqZWN0LWZpdFxuXHRcdFx0IXN0eWxlWydvYmplY3QtcG9zaXRpb24nXSAvLyB1bmxlc3Mgb2JqZWN0LXBvc2l0aW9uIGlzIHVzZWRcblx0XHQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH1cblxuXHQvLyBrZWVwIGEgY2xvbmUgaW4gbWVtb3J5IHdoaWxlIHJlc2V0dGluZyB0aGUgb3JpZ2luYWwgdG8gYSBibGFua1xuXHRpZiAoIW9maS5pbWcpIHtcblx0XHRvZmkuaW1nID0gbmV3IEltYWdlKGVsLndpZHRoLCBlbC5oZWlnaHQpO1xuXHRcdG9maS5pbWcuc3Jjc2V0ID0gbmF0aXZlR2V0QXR0cmlidXRlLmNhbGwoZWwsIFwiZGF0YS1vZmktc3Jjc2V0XCIpIHx8IGVsLnNyY3NldDtcblx0XHRvZmkuaW1nLnNyYyA9IG5hdGl2ZUdldEF0dHJpYnV0ZS5jYWxsKGVsLCBcImRhdGEtb2ZpLXNyY1wiKSB8fCBlbC5zcmM7XG5cblx0XHQvLyBwcmVzZXJ2ZSBmb3IgYW55IGZ1dHVyZSBjbG9uZU5vZGUgY2FsbHNcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vYmZyZWQtaXQvb2JqZWN0LWZpdC1pbWFnZXMvaXNzdWVzLzUzXG5cdFx0bmF0aXZlU2V0QXR0cmlidXRlLmNhbGwoZWwsIFwiZGF0YS1vZmktc3JjXCIsIGVsLnNyYyk7XG5cdFx0aWYgKGVsLnNyY3NldCkge1xuXHRcdFx0bmF0aXZlU2V0QXR0cmlidXRlLmNhbGwoZWwsIFwiZGF0YS1vZmktc3Jjc2V0XCIsIGVsLnNyY3NldCk7XG5cdFx0fVxuXG5cdFx0c2V0UGxhY2Vob2xkZXIoZWwsIGVsLm5hdHVyYWxXaWR0aCB8fCBlbC53aWR0aCwgZWwubmF0dXJhbEhlaWdodCB8fCBlbC5oZWlnaHQpO1xuXG5cdFx0Ly8gcmVtb3ZlIHNyY3NldCBiZWNhdXNlIGl0IG92ZXJyaWRlcyBzcmNcblx0XHRpZiAoZWwuc3Jjc2V0KSB7XG5cdFx0XHRlbC5zcmNzZXQgPSAnJztcblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdGtlZXBTcmNVc2FibGUoZWwpO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0aWYgKHdpbmRvdy5jb25zb2xlKSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybignaHR0cHM6Ly9iaXQubHkvb2ZpLW9sZC1icm93c2VyJyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cG9seWZpbGxDdXJyZW50U3JjKG9maS5pbWcpO1xuXG5cdGVsLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IFwidXJsKFxcXCJcIiArICgob2ZpLmltZy5jdXJyZW50U3JjIHx8IG9maS5pbWcuc3JjKS5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykpICsgXCJcXFwiKVwiO1xuXHRlbC5zdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb24gPSBzdHlsZVsnb2JqZWN0LXBvc2l0aW9uJ10gfHwgJ2NlbnRlcic7XG5cdGVsLnN0eWxlLmJhY2tncm91bmRSZXBlYXQgPSAnbm8tcmVwZWF0Jztcblx0ZWwuc3R5bGUuYmFja2dyb3VuZE9yaWdpbiA9ICdjb250ZW50LWJveCc7XG5cblx0aWYgKC9zY2FsZS1kb3duLy50ZXN0KHN0eWxlWydvYmplY3QtZml0J10pKSB7XG5cdFx0b25JbWFnZVJlYWR5KG9maS5pbWcsIGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChvZmkuaW1nLm5hdHVyYWxXaWR0aCA+IGVsLndpZHRoIHx8IG9maS5pbWcubmF0dXJhbEhlaWdodCA+IGVsLmhlaWdodCkge1xuXHRcdFx0XHRlbC5zdHlsZS5iYWNrZ3JvdW5kU2l6ZSA9ICdjb250YWluJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsLnN0eWxlLmJhY2tncm91bmRTaXplID0gJ2F1dG8nO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdGVsLnN0eWxlLmJhY2tncm91bmRTaXplID0gc3R5bGVbJ29iamVjdC1maXQnXS5yZXBsYWNlKCdub25lJywgJ2F1dG8nKS5yZXBsYWNlKCdmaWxsJywgJzEwMCUgMTAwJScpO1xuXHR9XG5cblx0b25JbWFnZVJlYWR5KG9maS5pbWcsIGZ1bmN0aW9uIChpbWcpIHtcblx0XHRzZXRQbGFjZWhvbGRlcihlbCwgaW1nLm5hdHVyYWxXaWR0aCwgaW1nLm5hdHVyYWxIZWlnaHQpO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24ga2VlcFNyY1VzYWJsZShlbCkge1xuXHR2YXIgZGVzY3JpcHRvcnMgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiBnZXQocHJvcCkge1xuXHRcdFx0cmV0dXJuIGVsW09GSV0uaW1nW3Byb3AgPyBwcm9wIDogJ3NyYyddO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiBzZXQodmFsdWUsIHByb3ApIHtcblx0XHRcdGVsW09GSV0uaW1nW3Byb3AgPyBwcm9wIDogJ3NyYyddID0gdmFsdWU7XG5cdFx0XHRuYXRpdmVTZXRBdHRyaWJ1dGUuY2FsbChlbCwgKFwiZGF0YS1vZmktXCIgKyBwcm9wKSwgdmFsdWUpOyAvLyBwcmVzZXJ2ZSBmb3IgYW55IGZ1dHVyZSBjbG9uZU5vZGVcblx0XHRcdGZpeE9uZShlbCk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXHR9O1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZWwsICdzcmMnLCBkZXNjcmlwdG9ycyk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgJ2N1cnJlbnRTcmMnLCB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZXNjcmlwdG9ycy5nZXQoJ2N1cnJlbnRTcmMnKTsgfVxuXHR9KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGVsLCAnc3Jjc2V0Jywge1xuXHRcdGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVzY3JpcHRvcnMuZ2V0KCdzcmNzZXQnKTsgfSxcblx0XHRzZXQ6IGZ1bmN0aW9uIChzcykgeyByZXR1cm4gZGVzY3JpcHRvcnMuc2V0KHNzLCAnc3Jjc2V0Jyk7IH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIGhpamFja0F0dHJpYnV0ZXMoKSB7XG5cdGZ1bmN0aW9uIGdldE9maUltYWdlTWF5YmUoZWwsIG5hbWUpIHtcblx0XHRyZXR1cm4gZWxbT0ZJXSAmJiBlbFtPRkldLmltZyAmJiAobmFtZSA9PT0gJ3NyYycgfHwgbmFtZSA9PT0gJ3NyY3NldCcpID8gZWxbT0ZJXS5pbWcgOiBlbDtcblx0fVxuXHRpZiAoIXN1cHBvcnRzT2JqZWN0UG9zaXRpb24pIHtcblx0XHRIVE1MSW1hZ2VFbGVtZW50LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbiAobmFtZSkge1xuXHRcdFx0cmV0dXJuIG5hdGl2ZUdldEF0dHJpYnV0ZS5jYWxsKGdldE9maUltYWdlTWF5YmUodGhpcywgbmFtZSksIG5hbWUpO1xuXHRcdH07XG5cblx0XHRIVE1MSW1hZ2VFbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcblx0XHRcdHJldHVybiBuYXRpdmVTZXRBdHRyaWJ1dGUuY2FsbChnZXRPZmlJbWFnZU1heWJlKHRoaXMsIG5hbWUpLCBuYW1lLCBTdHJpbmcodmFsdWUpKTtcblx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGZpeChpbWdzLCBvcHRzKSB7XG5cdHZhciBzdGFydEF1dG9Nb2RlID0gIWF1dG9Nb2RlRW5hYmxlZCAmJiAhaW1ncztcblx0b3B0cyA9IG9wdHMgfHwge307XG5cdGltZ3MgPSBpbWdzIHx8ICdpbWcnO1xuXG5cdGlmICgoc3VwcG9ydHNPYmplY3RQb3NpdGlvbiAmJiAhb3B0cy5za2lwVGVzdCkgfHwgIXN1cHBvcnRzT0ZJKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gdXNlIGltZ3MgYXMgYSBzZWxlY3RvciBvciBqdXN0IHNlbGVjdCBhbGwgaW1hZ2VzXG5cdGlmIChpbWdzID09PSAnaW1nJykge1xuXHRcdGltZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW1nJyk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGltZ3MgPT09ICdzdHJpbmcnKSB7XG5cdFx0aW1ncyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoaW1ncyk7XG5cdH0gZWxzZSBpZiAoISgnbGVuZ3RoJyBpbiBpbWdzKSkge1xuXHRcdGltZ3MgPSBbaW1nc107XG5cdH1cblxuXHQvLyBhcHBseSBmaXggdG8gYWxsXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgaW1ncy5sZW5ndGg7IGkrKykge1xuXHRcdGltZ3NbaV1bT0ZJXSA9IGltZ3NbaV1bT0ZJXSB8fCB7XG5cdFx0XHRza2lwVGVzdDogb3B0cy5za2lwVGVzdFxuXHRcdH07XG5cdFx0Zml4T25lKGltZ3NbaV0pO1xuXHR9XG5cblx0aWYgKHN0YXJ0QXV0b01vZGUpIHtcblx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0aWYgKGUudGFyZ2V0LnRhZ05hbWUgPT09ICdJTUcnKSB7XG5cdFx0XHRcdGZpeChlLnRhcmdldCwge1xuXHRcdFx0XHRcdHNraXBUZXN0OiBvcHRzLnNraXBUZXN0XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0sIHRydWUpO1xuXHRcdGF1dG9Nb2RlRW5hYmxlZCA9IHRydWU7XG5cdFx0aW1ncyA9ICdpbWcnOyAvLyByZXNldCB0byBhIGdlbmVyaWMgc2VsZWN0b3IgZm9yIHdhdGNoTVFcblx0fVxuXG5cdC8vIGlmIHJlcXVlc3RlZCwgd2F0Y2ggbWVkaWEgcXVlcmllcyBmb3Igb2JqZWN0LWZpdCBjaGFuZ2Vcblx0aWYgKG9wdHMud2F0Y2hNUSkge1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmaXguYmluZChudWxsLCBpbWdzLCB7XG5cdFx0XHRza2lwVGVzdDogb3B0cy5za2lwVGVzdFxuXHRcdH0pKTtcblx0fVxufVxuXG5maXguc3VwcG9ydHNPYmplY3RGaXQgPSBzdXBwb3J0c09iamVjdEZpdDtcbmZpeC5zdXBwb3J0c09iamVjdFBvc2l0aW9uID0gc3VwcG9ydHNPYmplY3RQb3NpdGlvbjtcblxuaGlqYWNrQXR0cmlidXRlcygpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZpeDtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKiFcclxuICogU2Nyb2xsTWFnaWMgdjIuMC43ICgyMDE5LTA1LTA3KVxyXG4gKiBUaGUgamF2YXNjcmlwdCBsaWJyYXJ5IGZvciBtYWdpY2FsIHNjcm9sbCBpbnRlcmFjdGlvbnMuXHJcbiAqIChjKSAyMDE5IEphbiBQYWVwa2UgKEBqYW5wYWVwa2UpXHJcbiAqIFByb2plY3QgV2Vic2l0ZTogaHR0cDovL3Njcm9sbG1hZ2ljLmlvXHJcbiAqIFxyXG4gKiBAdmVyc2lvbiAyLjAuN1xyXG4gKiBAbGljZW5zZSBEdWFsIGxpY2Vuc2VkIHVuZGVyIE1JVCBsaWNlbnNlIGFuZCBHUEwuXHJcbiAqIEBhdXRob3IgSmFuIFBhZXBrZSAtIGUtbWFpbEBqYW5wYWVwa2UuZGVcclxuICpcclxuICogQGZpbGUgU2Nyb2xsTWFnaWMgbWFpbiBsaWJyYXJ5LlxyXG4gKi9cclxuLyoqXHJcbiAqIEBuYW1lc3BhY2UgU2Nyb2xsTWFnaWNcclxuICovXHJcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xyXG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcclxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cclxuXHRcdGRlZmluZShmYWN0b3J5KTtcclxuXHR9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xyXG5cdFx0Ly8gQ29tbW9uSlNcclxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHQvLyBCcm93c2VyIGdsb2JhbFxyXG5cdFx0cm9vdC5TY3JvbGxNYWdpYyA9IGZhY3RvcnkoKTtcclxuXHR9XHJcbn0odGhpcywgZnVuY3Rpb24gKCkge1xyXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cclxuXHR2YXIgU2Nyb2xsTWFnaWMgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRfdXRpbC5sb2coMiwgJyhDT01QQVRJQklMSVRZIE5PVElDRSkgLT4gQXMgb2YgU2Nyb2xsTWFnaWMgMi4wLjAgeW91IG5lZWQgdG8gdXNlIFxcJ25ldyBTY3JvbGxNYWdpYy5Db250cm9sbGVyKClcXCcgdG8gY3JlYXRlIGEgbmV3IGNvbnRyb2xsZXIgaW5zdGFuY2UuIFVzZSBcXCduZXcgU2Nyb2xsTWFnaWMuU2NlbmUoKVxcJyB0byBpbnN0YW5jZSBhIHNjZW5lLicpO1xyXG5cdH07XHJcblxyXG5cdFNjcm9sbE1hZ2ljLnZlcnNpb24gPSBcIjIuMC43XCI7XHJcblxyXG5cdC8vIFRPRE86IHRlbXBvcmFyeSB3b3JrYXJvdW5kIGZvciBjaHJvbWUncyBzY3JvbGwgaml0dGVyIGJ1Z1xyXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V3aGVlbFwiLCBmdW5jdGlvbiAoKSB7fSk7XHJcblxyXG5cdC8vIGdsb2JhbCBjb25zdFxyXG5cdHZhciBQSU5fU1BBQ0VSX0FUVFJJQlVURSA9IFwiZGF0YS1zY3JvbGxtYWdpYy1waW4tc3BhY2VyXCI7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBtYWluIGNsYXNzIHRoYXQgaXMgbmVlZGVkIG9uY2UgcGVyIHNjcm9sbCBjb250YWluZXIuXHJcblx0ICpcclxuXHQgKiBAY2xhc3NcclxuXHQgKlxyXG5cdCAqIEBleGFtcGxlXHJcblx0ICogLy8gYmFzaWMgaW5pdGlhbGl6YXRpb25cclxuXHQgKiB2YXIgY29udHJvbGxlciA9IG5ldyBTY3JvbGxNYWdpYy5Db250cm9sbGVyKCk7XHJcblx0ICpcclxuXHQgKiAvLyBwYXNzaW5nIG9wdGlvbnNcclxuXHQgKiB2YXIgY29udHJvbGxlciA9IG5ldyBTY3JvbGxNYWdpYy5Db250cm9sbGVyKHtjb250YWluZXI6IFwiI215Q29udGFpbmVyXCIsIGxvZ2xldmVsOiAzfSk7XHJcblx0ICpcclxuXHQgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgb25lIG9yIG1vcmUgb3B0aW9ucyBmb3IgdGhlIGNvbnRyb2xsZXIuXHJcblx0ICogQHBhcmFtIHsoc3RyaW5nfG9iamVjdCl9IFtvcHRpb25zLmNvbnRhaW5lcj13aW5kb3ddIC0gQSBzZWxlY3RvciwgRE9NIG9iamVjdCB0aGF0IHJlZmVyZW5jZXMgdGhlIG1haW4gY29udGFpbmVyIGZvciBzY3JvbGxpbmcuXHJcblx0ICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy52ZXJ0aWNhbD10cnVlXSAtIFNldHMgdGhlIHNjcm9sbCBtb2RlIHRvIHZlcnRpY2FsIChgdHJ1ZWApIG9yIGhvcml6b250YWwgKGBmYWxzZWApIHNjcm9sbGluZy5cclxuXHQgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuZ2xvYmFsU2NlbmVPcHRpb25zPXt9XSAtIFRoZXNlIG9wdGlvbnMgd2lsbCBiZSBwYXNzZWQgdG8gZXZlcnkgU2NlbmUgdGhhdCBpcyBhZGRlZCB0byB0aGUgY29udHJvbGxlciB1c2luZyB0aGUgYWRkU2NlbmUgbWV0aG9kLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBTY2VuZSBvcHRpb25zIHNlZSB7QGxpbmsgU2Nyb2xsTWFnaWMuU2NlbmV9LlxyXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sb2dsZXZlbD0yXSBMb2dsZXZlbCBmb3IgZGVidWdnaW5nLiBOb3RlIHRoYXQgbG9nZ2luZyBpcyBkaXNhYmxlZCBpbiB0aGUgbWluaWZpZWQgdmVyc2lvbiBvZiBTY3JvbGxNYWdpYy5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCAqKiBgMGAgPT4gc2lsZW50XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgKiogYDFgID0+IGVycm9yc1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ICoqIGAyYCA9PiBlcnJvcnMsIHdhcm5pbmdzXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgKiogYDNgID0+IGVycm9ycywgd2FybmluZ3MsIGRlYnVnaW5mb1xyXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmVmcmVzaEludGVydmFsPTEwMF0gLSBTb21lIGNoYW5nZXMgZG9uJ3QgY2FsbCBldmVudHMgYnkgZGVmYXVsdCwgbGlrZSBjaGFuZ2luZyB0aGUgY29udGFpbmVyIHNpemUgb3IgbW92aW5nIGEgc2NlbmUgdHJpZ2dlciBlbGVtZW50LiAgXHJcblx0IFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgVGhpcyBpbnRlcnZhbCBwb2xscyB0aGVzZSBwYXJhbWV0ZXJzIHRvIGZpcmUgdGhlIG5lY2Vzc2FyeSBldmVudHMuICBcclxuXHQgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCBJZiB5b3UgZG9uJ3QgdXNlIGN1c3RvbSBjb250YWluZXJzLCB0cmlnZ2VyIGVsZW1lbnRzIG9yIGhhdmUgc3RhdGljIGxheW91dHMsIHdoZXJlIHRoZSBwb3NpdGlvbnMgb2YgdGhlIHRyaWdnZXIgZWxlbWVudHMgZG9uJ3QgY2hhbmdlLCB5b3UgY2FuIHNldCB0aGlzIHRvIDAgZGlzYWJsZSBpbnRlcnZhbCBjaGVja2luZyBhbmQgaW1wcm92ZSBwZXJmb3JtYW5jZS5cclxuXHQgKlxyXG5cdCAqL1xyXG5cdFNjcm9sbE1hZ2ljLkNvbnRyb2xsZXIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG5cdFx0LypcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqIHNldHRpbmdzXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKi9cclxuXHRcdHZhclxyXG5cdFx0XHROQU1FU1BBQ0UgPSAnU2Nyb2xsTWFnaWMuQ29udHJvbGxlcicsXHJcblx0XHRcdFNDUk9MTF9ESVJFQ1RJT05fRk9SV0FSRCA9ICdGT1JXQVJEJyxcclxuXHRcdFx0U0NST0xMX0RJUkVDVElPTl9SRVZFUlNFID0gJ1JFVkVSU0UnLFxyXG5cdFx0XHRTQ1JPTExfRElSRUNUSU9OX1BBVVNFRCA9ICdQQVVTRUQnLFxyXG5cdFx0XHRERUZBVUxUX09QVElPTlMgPSBDT05UUk9MTEVSX09QVElPTlMuZGVmYXVsdHM7XHJcblxyXG5cdFx0LypcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqIHByaXZhdGUgdmFyc1xyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICovXHJcblx0XHR2YXJcclxuXHRcdFx0Q29udHJvbGxlciA9IHRoaXMsXHJcblx0XHRcdF9vcHRpb25zID0gX3V0aWwuZXh0ZW5kKHt9LCBERUZBVUxUX09QVElPTlMsIG9wdGlvbnMpLFxyXG5cdFx0XHRfc2NlbmVPYmplY3RzID0gW10sXHJcblx0XHRcdF91cGRhdGVTY2VuZXNPbk5leHRDeWNsZSA9IGZhbHNlLCAvLyBjYW4gYmUgYm9vbGVhbiAodHJ1ZSA9PiBhbGwgc2NlbmVzKSBvciBhbiBhcnJheSBvZiBzY2VuZXMgdG8gYmUgdXBkYXRlZFxyXG5cdFx0XHRfc2Nyb2xsUG9zID0gMCxcclxuXHRcdFx0X3Njcm9sbERpcmVjdGlvbiA9IFNDUk9MTF9ESVJFQ1RJT05fUEFVU0VELFxyXG5cdFx0XHRfaXNEb2N1bWVudCA9IHRydWUsXHJcblx0XHRcdF92aWV3UG9ydFNpemUgPSAwLFxyXG5cdFx0XHRfZW5hYmxlZCA9IHRydWUsXHJcblx0XHRcdF91cGRhdGVUaW1lb3V0LFxyXG5cdFx0XHRfcmVmcmVzaFRpbWVvdXQ7XHJcblxyXG5cdFx0LypcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqIHByaXZhdGUgZnVuY3Rpb25zXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKi9cclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEludGVybmFsIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIG9mIHRoZSBTY3JvbGxNYWdpYyBDb250cm9sbGVyXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gX29wdGlvbnMpIHtcclxuXHRcdFx0XHRpZiAoIURFRkFVTFRfT1BUSU9OUy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcblx0XHRcdFx0XHRsb2coMiwgXCJXQVJOSU5HOiBVbmtub3duIG9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XHJcblx0XHRcdFx0XHRkZWxldGUgX29wdGlvbnNba2V5XTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0X29wdGlvbnMuY29udGFpbmVyID0gX3V0aWwuZ2V0LmVsZW1lbnRzKF9vcHRpb25zLmNvbnRhaW5lcilbMF07XHJcblx0XHRcdC8vIGNoZWNrIFNjcm9sbENvbnRhaW5lclxyXG5cdFx0XHRpZiAoIV9vcHRpb25zLmNvbnRhaW5lcikge1xyXG5cdFx0XHRcdGxvZygxLCBcIkVSUk9SIGNyZWF0aW5nIG9iamVjdCBcIiArIE5BTUVTUEFDRSArIFwiOiBObyB2YWxpZCBzY3JvbGwgY29udGFpbmVyIHN1cHBsaWVkXCIpO1xyXG5cdFx0XHRcdHRocm93IE5BTUVTUEFDRSArIFwiIGluaXQgZmFpbGVkLlwiOyAvLyBjYW5jZWxcclxuXHRcdFx0fVxyXG5cdFx0XHRfaXNEb2N1bWVudCA9IF9vcHRpb25zLmNvbnRhaW5lciA9PT0gd2luZG93IHx8IF9vcHRpb25zLmNvbnRhaW5lciA9PT0gZG9jdW1lbnQuYm9keSB8fCAhZG9jdW1lbnQuYm9keS5jb250YWlucyhfb3B0aW9ucy5jb250YWluZXIpO1xyXG5cdFx0XHQvLyBub3JtYWxpemUgdG8gd2luZG93XHJcblx0XHRcdGlmIChfaXNEb2N1bWVudCkge1xyXG5cdFx0XHRcdF9vcHRpb25zLmNvbnRhaW5lciA9IHdpbmRvdztcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyB1cGRhdGUgY29udGFpbmVyIHNpemUgaW1tZWRpYXRlbHlcclxuXHRcdFx0X3ZpZXdQb3J0U2l6ZSA9IGdldFZpZXdwb3J0U2l6ZSgpO1xyXG5cdFx0XHQvLyBzZXQgZXZlbnQgaGFuZGxlcnNcclxuXHRcdFx0X29wdGlvbnMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgb25DaGFuZ2UpO1xyXG5cdFx0XHRfb3B0aW9ucy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBvbkNoYW5nZSk7XHJcblxyXG5cdFx0XHR2YXIgcmkgPSBwYXJzZUludChfb3B0aW9ucy5yZWZyZXNoSW50ZXJ2YWwsIDEwKTtcclxuXHRcdFx0X29wdGlvbnMucmVmcmVzaEludGVydmFsID0gX3V0aWwudHlwZS5OdW1iZXIocmkpID8gcmkgOiBERUZBVUxUX09QVElPTlMucmVmcmVzaEludGVydmFsO1xyXG5cdFx0XHRzY2hlZHVsZVJlZnJlc2goKTtcclxuXHJcblx0XHRcdGxvZygzLCBcImFkZGVkIG5ldyBcIiArIE5BTUVTUEFDRSArIFwiIGNvbnRyb2xsZXIgKHZcIiArIFNjcm9sbE1hZ2ljLnZlcnNpb24gKyBcIilcIik7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogU2NoZWR1bGUgdGhlIG5leHQgZXhlY3V0aW9uIG9mIHRoZSByZWZyZXNoIGZ1bmN0aW9uXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgc2NoZWR1bGVSZWZyZXNoID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRpZiAoX29wdGlvbnMucmVmcmVzaEludGVydmFsID4gMCkge1xyXG5cdFx0XHRcdF9yZWZyZXNoVGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KHJlZnJlc2gsIF9vcHRpb25zLnJlZnJlc2hJbnRlcnZhbCk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBEZWZhdWx0IGZ1bmN0aW9uIHRvIGdldCBzY3JvbGwgcG9zIC0gb3ZlcndyaXRlYWJsZSB1c2luZyBgQ29udHJvbGxlci5zY3JvbGxQb3MobmV3RnVuY3Rpb24pYFxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIGdldFNjcm9sbFBvcyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIF9vcHRpb25zLnZlcnRpY2FsID8gX3V0aWwuZ2V0LnNjcm9sbFRvcChfb3B0aW9ucy5jb250YWluZXIpIDogX3V0aWwuZ2V0LnNjcm9sbExlZnQoX29wdGlvbnMuY29udGFpbmVyKTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHZpZXdwb3J0IFNpemUgKHdpZHRoIHZvciBob3Jpem9udGFsLCBoZWlnaHQgZm9yIHZlcnRpY2FsKVxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIGdldFZpZXdwb3J0U2l6ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIF9vcHRpb25zLnZlcnRpY2FsID8gX3V0aWwuZ2V0LmhlaWdodChfb3B0aW9ucy5jb250YWluZXIpIDogX3V0aWwuZ2V0LndpZHRoKF9vcHRpb25zLmNvbnRhaW5lcik7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogRGVmYXVsdCBmdW5jdGlvbiB0byBzZXQgc2Nyb2xsIHBvcyAtIG92ZXJ3cml0ZWFibGUgdXNpbmcgYENvbnRyb2xsZXIuc2Nyb2xsVG8obmV3RnVuY3Rpb24pYFxyXG5cdFx0ICogTWFrZSBhdmFpbGFibGUgcHVibGljbHkgZm9yIHBpbm5lZCBtb3VzZXdoZWVsIHdvcmthcm91bmQuXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgc2V0U2Nyb2xsUG9zID0gdGhpcy5fc2V0U2Nyb2xsUG9zID0gZnVuY3Rpb24gKHBvcykge1xyXG5cdFx0XHRpZiAoX29wdGlvbnMudmVydGljYWwpIHtcclxuXHRcdFx0XHRpZiAoX2lzRG9jdW1lbnQpIHtcclxuXHRcdFx0XHRcdHdpbmRvdy5zY3JvbGxUbyhfdXRpbC5nZXQuc2Nyb2xsTGVmdCgpLCBwb3MpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRfb3B0aW9ucy5jb250YWluZXIuc2Nyb2xsVG9wID0gcG9zO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRpZiAoX2lzRG9jdW1lbnQpIHtcclxuXHRcdFx0XHRcdHdpbmRvdy5zY3JvbGxUbyhwb3MsIF91dGlsLmdldC5zY3JvbGxUb3AoKSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdF9vcHRpb25zLmNvbnRhaW5lci5zY3JvbGxMZWZ0ID0gcG9zO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEhhbmRsZSB1cGRhdGVzIGluIGN5Y2xlcyBpbnN0ZWFkIG9mIG9uIHNjcm9sbCAocGVyZm9ybWFuY2UpXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgdXBkYXRlU2NlbmVzID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRpZiAoX2VuYWJsZWQgJiYgX3VwZGF0ZVNjZW5lc09uTmV4dEN5Y2xlKSB7XHJcblx0XHRcdFx0Ly8gZGV0ZXJtaW5lIHNjZW5lcyB0byB1cGRhdGVcclxuXHRcdFx0XHR2YXIgc2NlbmVzVG9VcGRhdGUgPSBfdXRpbC50eXBlLkFycmF5KF91cGRhdGVTY2VuZXNPbk5leHRDeWNsZSkgPyBfdXBkYXRlU2NlbmVzT25OZXh0Q3ljbGUgOiBfc2NlbmVPYmplY3RzLnNsaWNlKDApO1xyXG5cdFx0XHRcdC8vIHJlc2V0IHNjZW5lc1xyXG5cdFx0XHRcdF91cGRhdGVTY2VuZXNPbk5leHRDeWNsZSA9IGZhbHNlO1xyXG5cdFx0XHRcdHZhciBvbGRTY3JvbGxQb3MgPSBfc2Nyb2xsUG9zO1xyXG5cdFx0XHRcdC8vIHVwZGF0ZSBzY3JvbGwgcG9zIG5vdyBpbnN0ZWFkIG9mIG9uQ2hhbmdlLCBhcyBpdCBtaWdodCBoYXZlIGNoYW5nZWQgc2luY2Ugc2NoZWR1bGluZyAoaS5lLiBpbi1icm93c2VyIHNtb290aCBzY3JvbGwpXHJcblx0XHRcdFx0X3Njcm9sbFBvcyA9IENvbnRyb2xsZXIuc2Nyb2xsUG9zKCk7XHJcblx0XHRcdFx0dmFyIGRlbHRhU2Nyb2xsID0gX3Njcm9sbFBvcyAtIG9sZFNjcm9sbFBvcztcclxuXHRcdFx0XHRpZiAoZGVsdGFTY3JvbGwgIT09IDApIHsgLy8gc2Nyb2xsIHBvc2l0aW9uIGNoYW5nZWQ/XHJcblx0XHRcdFx0XHRfc2Nyb2xsRGlyZWN0aW9uID0gKGRlbHRhU2Nyb2xsID4gMCkgPyBTQ1JPTExfRElSRUNUSU9OX0ZPUldBUkQgOiBTQ1JPTExfRElSRUNUSU9OX1JFVkVSU0U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdC8vIHJldmVyc2Ugb3JkZXIgb2Ygc2NlbmVzIGlmIHNjcm9sbGluZyByZXZlcnNlXHJcblx0XHRcdFx0aWYgKF9zY3JvbGxEaXJlY3Rpb24gPT09IFNDUk9MTF9ESVJFQ1RJT05fUkVWRVJTRSkge1xyXG5cdFx0XHRcdFx0c2NlbmVzVG9VcGRhdGUucmV2ZXJzZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvLyB1cGRhdGUgc2NlbmVzXHJcblx0XHRcdFx0c2NlbmVzVG9VcGRhdGUuZm9yRWFjaChmdW5jdGlvbiAoc2NlbmUsIGluZGV4KSB7XHJcblx0XHRcdFx0XHRsb2coMywgXCJ1cGRhdGluZyBTY2VuZSBcIiArIChpbmRleCArIDEpICsgXCIvXCIgKyBzY2VuZXNUb1VwZGF0ZS5sZW5ndGggKyBcIiAoXCIgKyBfc2NlbmVPYmplY3RzLmxlbmd0aCArIFwiIHRvdGFsKVwiKTtcclxuXHRcdFx0XHRcdHNjZW5lLnVwZGF0ZSh0cnVlKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRpZiAoc2NlbmVzVG9VcGRhdGUubGVuZ3RoID09PSAwICYmIF9vcHRpb25zLmxvZ2xldmVsID49IDMpIHtcclxuXHRcdFx0XHRcdGxvZygzLCBcInVwZGF0aW5nIDAgU2NlbmVzIChub3RoaW5nIGFkZGVkIHRvIGNvbnRyb2xsZXIpXCIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEluaXRpYWxpemVzIHJBRiBjYWxsYmFja1xyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIGRlYm91bmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRfdXBkYXRlVGltZW91dCA9IF91dGlsLnJBRih1cGRhdGVTY2VuZXMpO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEhhbmRsZXMgQ29udGFpbmVyIGNoYW5nZXNcclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciBvbkNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdGxvZygzLCBcImV2ZW50IGZpcmVkIGNhdXNpbmcgYW4gdXBkYXRlOlwiLCBlLnR5cGUpO1xyXG5cdFx0XHRpZiAoZS50eXBlID09IFwicmVzaXplXCIpIHtcclxuXHRcdFx0XHQvLyByZXNpemVcclxuXHRcdFx0XHRfdmlld1BvcnRTaXplID0gZ2V0Vmlld3BvcnRTaXplKCk7XHJcblx0XHRcdFx0X3Njcm9sbERpcmVjdGlvbiA9IFNDUk9MTF9ESVJFQ1RJT05fUEFVU0VEO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIHNjaGVkdWxlIHVwZGF0ZVxyXG5cdFx0XHRpZiAoX3VwZGF0ZVNjZW5lc09uTmV4dEN5Y2xlICE9PSB0cnVlKSB7XHJcblx0XHRcdFx0X3VwZGF0ZVNjZW5lc09uTmV4dEN5Y2xlID0gdHJ1ZTtcclxuXHRcdFx0XHRkZWJvdW5jZVVwZGF0ZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdHZhciByZWZyZXNoID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRpZiAoIV9pc0RvY3VtZW50KSB7XHJcblx0XHRcdFx0Ly8gc2ltdWxhdGUgcmVzaXplIGV2ZW50LiBPbmx5IHdvcmtzIGZvciB2aWV3cG9ydCByZWxldmFudCBwYXJhbSAocGVyZm9ybWFuY2UpXHJcblx0XHRcdFx0aWYgKF92aWV3UG9ydFNpemUgIT0gZ2V0Vmlld3BvcnRTaXplKCkpIHtcclxuXHRcdFx0XHRcdHZhciByZXNpemVFdmVudDtcclxuXHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdHJlc2l6ZUV2ZW50ID0gbmV3IEV2ZW50KCdyZXNpemUnLCB7XHJcblx0XHRcdFx0XHRcdFx0YnViYmxlczogZmFsc2UsXHJcblx0XHRcdFx0XHRcdFx0Y2FuY2VsYWJsZTogZmFsc2VcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9IGNhdGNoIChlKSB7IC8vIHN0dXBpZCBJRVxyXG5cdFx0XHRcdFx0XHRyZXNpemVFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XHJcblx0XHRcdFx0XHRcdHJlc2l6ZUV2ZW50LmluaXRFdmVudChcInJlc2l6ZVwiLCBmYWxzZSwgZmFsc2UpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0X29wdGlvbnMuY29udGFpbmVyLmRpc3BhdGNoRXZlbnQocmVzaXplRXZlbnQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRfc2NlbmVPYmplY3RzLmZvckVhY2goZnVuY3Rpb24gKHNjZW5lLCBpbmRleCkgeyAvLyByZWZyZXNoIGFsbCBzY2VuZXNcclxuXHRcdFx0XHRzY2VuZS5yZWZyZXNoKCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRzY2hlZHVsZVJlZnJlc2goKTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBTZW5kIGEgZGVidWcgbWVzc2FnZSB0byB0aGUgY29uc29sZS5cclxuXHRcdCAqIHByb3ZpZGVkIHB1YmxpY2x5IHdpdGggX2xvZyBmb3IgcGx1Z2luc1xyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge251bWJlcn0gbG9nbGV2ZWwgLSBUaGUgbG9nbGV2ZWwgcmVxdWlyZWQgdG8gaW5pdGlhdGUgb3V0cHV0IGZvciB0aGUgbWVzc2FnZS5cclxuXHRcdCAqIEBwYXJhbSB7Li4ubWl4ZWR9IG91dHB1dCAtIE9uZSBvciBtb3JlIHZhcmlhYmxlcyB0aGF0IHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIGNvbnNvbGUuXHJcblx0XHQgKi9cclxuXHRcdHZhciBsb2cgPSB0aGlzLl9sb2cgPSBmdW5jdGlvbiAobG9nbGV2ZWwsIG91dHB1dCkge1xyXG5cdFx0XHRpZiAoX29wdGlvbnMubG9nbGV2ZWwgPj0gbG9nbGV2ZWwpIHtcclxuXHRcdFx0XHRBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoYXJndW1lbnRzLCAxLCAwLCBcIihcIiArIE5BTUVTUEFDRSArIFwiKSAtPlwiKTtcclxuXHRcdFx0XHRfdXRpbC5sb2cuYXBwbHkod2luZG93LCBhcmd1bWVudHMpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdFx0Ly8gZm9yIHNjZW5lcyB3ZSBoYXZlIGdldHRlcnMgZm9yIGVhY2ggb3B0aW9uLCBidXQgZm9yIHRoZSBjb250cm9sbGVyIHdlIGRvbid0LCBzbyB3ZSBuZWVkIHRvIG1ha2UgaXQgYXZhaWxhYmxlIGV4dGVybmFsbHkgZm9yIHBsdWdpbnNcclxuXHRcdHRoaXMuX29wdGlvbnMgPSBfb3B0aW9ucztcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFNvcnQgc2NlbmVzIGluIGFzY2VuZGluZyBvcmRlciBvZiB0aGVpciBzdGFydCBvZmZzZXQuXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7YXJyYXl9IFNjZW5lc0FycmF5IC0gYW4gYXJyYXkgb2YgU2Nyb2xsTWFnaWMgU2NlbmVzIHRoYXQgc2hvdWxkIGJlIHNvcnRlZFxyXG5cdFx0ICogQHJldHVybiB7YXJyYXl9IFRoZSBzb3J0ZWQgYXJyYXkgb2YgU2NlbmVzLlxyXG5cdFx0ICovXHJcblx0XHR2YXIgc29ydFNjZW5lcyA9IGZ1bmN0aW9uIChTY2VuZXNBcnJheSkge1xyXG5cdFx0XHRpZiAoU2NlbmVzQXJyYXkubGVuZ3RoIDw9IDEpIHtcclxuXHRcdFx0XHRyZXR1cm4gU2NlbmVzQXJyYXk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dmFyIHNjZW5lcyA9IFNjZW5lc0FycmF5LnNsaWNlKDApO1xyXG5cdFx0XHRcdHNjZW5lcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gYS5zY3JvbGxPZmZzZXQoKSA+IGIuc2Nyb2xsT2Zmc2V0KCkgPyAxIDogLTE7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmV0dXJuIHNjZW5lcztcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqIHB1YmxpYyBmdW5jdGlvbnNcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqL1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQWRkIG9uZSBvcmUgbW9yZSBzY2VuZShzKSB0byB0aGUgY29udHJvbGxlci4gIFxyXG5cdFx0ICogVGhpcyBpcyB0aGUgZXF1aXZhbGVudCB0byBgU2NlbmUuYWRkVG8oY29udHJvbGxlcilgLlxyXG5cdFx0ICogQHB1YmxpY1xyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIHdpdGggYSBwcmV2aW91c2x5IGRlZmluZWQgc2NlbmVcclxuXHRcdCAqIGNvbnRyb2xsZXIuYWRkU2NlbmUoc2NlbmUpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHdpdGggYSBuZXdseSBjcmVhdGVkIHNjZW5lLlxyXG5cdFx0ICogY29udHJvbGxlci5hZGRTY2VuZShuZXcgU2Nyb2xsTWFnaWMuU2NlbmUoe2R1cmF0aW9uIDogMH0pKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBhZGRpbmcgbXVsdGlwbGUgc2NlbmVzXHJcblx0XHQgKiBjb250cm9sbGVyLmFkZFNjZW5lKFtzY2VuZSwgc2NlbmUyLCBuZXcgU2Nyb2xsTWFnaWMuU2NlbmUoe2R1cmF0aW9uIDogMH0pXSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHsoU2Nyb2xsTWFnaWMuU2NlbmV8YXJyYXkpfSBuZXdTY2VuZSAtIFNjcm9sbE1hZ2ljIFNjZW5lIG9yIEFycmF5IG9mIFNjZW5lcyB0byBiZSBhZGRlZCB0byB0aGUgY29udHJvbGxlci5cclxuXHRcdCAqIEByZXR1cm4ge0NvbnRyb2xsZXJ9IFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLmFkZFNjZW5lID0gZnVuY3Rpb24gKG5ld1NjZW5lKSB7XHJcblx0XHRcdGlmIChfdXRpbC50eXBlLkFycmF5KG5ld1NjZW5lKSkge1xyXG5cdFx0XHRcdG5ld1NjZW5lLmZvckVhY2goZnVuY3Rpb24gKHNjZW5lLCBpbmRleCkge1xyXG5cdFx0XHRcdFx0Q29udHJvbGxlci5hZGRTY2VuZShzY2VuZSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0gZWxzZSBpZiAobmV3U2NlbmUgaW5zdGFuY2VvZiBTY3JvbGxNYWdpYy5TY2VuZSkge1xyXG5cdFx0XHRcdGlmIChuZXdTY2VuZS5jb250cm9sbGVyKCkgIT09IENvbnRyb2xsZXIpIHtcclxuXHRcdFx0XHRcdG5ld1NjZW5lLmFkZFRvKENvbnRyb2xsZXIpO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoX3NjZW5lT2JqZWN0cy5pbmRleE9mKG5ld1NjZW5lKSA8IDApIHtcclxuXHRcdFx0XHRcdC8vIG5ldyBzY2VuZVxyXG5cdFx0XHRcdFx0X3NjZW5lT2JqZWN0cy5wdXNoKG5ld1NjZW5lKTsgLy8gYWRkIHRvIGFycmF5XHJcblx0XHRcdFx0XHRfc2NlbmVPYmplY3RzID0gc29ydFNjZW5lcyhfc2NlbmVPYmplY3RzKTsgLy8gc29ydFxyXG5cdFx0XHRcdFx0bmV3U2NlbmUub24oXCJzaGlmdC5jb250cm9sbGVyX3NvcnRcIiwgZnVuY3Rpb24gKCkgeyAvLyByZXNvcnQgd2hlbmV2ZXIgc2NlbmUgbW92ZXNcclxuXHRcdFx0XHRcdFx0X3NjZW5lT2JqZWN0cyA9IHNvcnRTY2VuZXMoX3NjZW5lT2JqZWN0cyk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdC8vIGluc2VydCBHbG9iYWwgZGVmYXVsdHMuXHJcblx0XHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gX29wdGlvbnMuZ2xvYmFsU2NlbmVPcHRpb25zKSB7XHJcblx0XHRcdFx0XHRcdGlmIChuZXdTY2VuZVtrZXldKSB7XHJcblx0XHRcdFx0XHRcdFx0bmV3U2NlbmVba2V5XS5jYWxsKG5ld1NjZW5lLCBfb3B0aW9ucy5nbG9iYWxTY2VuZU9wdGlvbnNba2V5XSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGxvZygzLCBcImFkZGluZyBTY2VuZSAobm93IFwiICsgX3NjZW5lT2JqZWN0cy5sZW5ndGggKyBcIiB0b3RhbClcIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGxvZygxLCBcIkVSUk9SOiBpbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIGZvciAnLmFkZFNjZW5lKCknXCIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBDb250cm9sbGVyO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFJlbW92ZSBvbmUgb3JlIG1vcmUgc2NlbmUocykgZnJvbSB0aGUgY29udHJvbGxlci4gIFxyXG5cdFx0ICogVGhpcyBpcyB0aGUgZXF1aXZhbGVudCB0byBgU2NlbmUucmVtb3ZlKClgLlxyXG5cdFx0ICogQHB1YmxpY1xyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIHJlbW92ZSBhIHNjZW5lIGZyb20gdGhlIGNvbnRyb2xsZXJcclxuXHRcdCAqIGNvbnRyb2xsZXIucmVtb3ZlU2NlbmUoc2NlbmUpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHJlbW92ZSBtdWx0aXBsZSBzY2VuZXMgZnJvbSB0aGUgY29udHJvbGxlclxyXG5cdFx0ICogY29udHJvbGxlci5yZW1vdmVTY2VuZShbc2NlbmUsIHNjZW5lMiwgc2NlbmUzXSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHsoU2Nyb2xsTWFnaWMuU2NlbmV8YXJyYXkpfSBTY2VuZSAtIFNjcm9sbE1hZ2ljIFNjZW5lIG9yIEFycmF5IG9mIFNjZW5lcyB0byBiZSByZW1vdmVkIGZyb20gdGhlIGNvbnRyb2xsZXIuXHJcblx0XHQgKiBAcmV0dXJucyB7Q29udHJvbGxlcn0gUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMucmVtb3ZlU2NlbmUgPSBmdW5jdGlvbiAoU2NlbmUpIHtcclxuXHRcdFx0aWYgKF91dGlsLnR5cGUuQXJyYXkoU2NlbmUpKSB7XHJcblx0XHRcdFx0U2NlbmUuZm9yRWFjaChmdW5jdGlvbiAoc2NlbmUsIGluZGV4KSB7XHJcblx0XHRcdFx0XHRDb250cm9sbGVyLnJlbW92ZVNjZW5lKHNjZW5lKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR2YXIgaW5kZXggPSBfc2NlbmVPYmplY3RzLmluZGV4T2YoU2NlbmUpO1xyXG5cdFx0XHRcdGlmIChpbmRleCA+IC0xKSB7XHJcblx0XHRcdFx0XHRTY2VuZS5vZmYoXCJzaGlmdC5jb250cm9sbGVyX3NvcnRcIik7XHJcblx0XHRcdFx0XHRfc2NlbmVPYmplY3RzLnNwbGljZShpbmRleCwgMSk7XHJcblx0XHRcdFx0XHRsb2coMywgXCJyZW1vdmluZyBTY2VuZSAobm93IFwiICsgX3NjZW5lT2JqZWN0cy5sZW5ndGggKyBcIiBsZWZ0KVwiKTtcclxuXHRcdFx0XHRcdFNjZW5lLnJlbW92ZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gQ29udHJvbGxlcjtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0ICogVXBkYXRlIG9uZSBvcmUgbW9yZSBzY2VuZShzKSBhY2NvcmRpbmcgdG8gdGhlIHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgY29udGFpbmVyLiAgXHJcblx0ICogVGhpcyBpcyB0aGUgZXF1aXZhbGVudCB0byBgU2NlbmUudXBkYXRlKClgLiAgXHJcblx0ICogVGhlIHVwZGF0ZSBtZXRob2QgY2FsY3VsYXRlcyB0aGUgc2NlbmUncyBzdGFydCBhbmQgZW5kIHBvc2l0aW9uIChiYXNlZCBvbiB0aGUgdHJpZ2dlciBlbGVtZW50LCB0cmlnZ2VyIGhvb2ssIGR1cmF0aW9uIGFuZCBvZmZzZXQpIGFuZCBjaGVja3MgaXQgYWdhaW5zdCB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIGNvbnRhaW5lci4gIFxyXG5cdCAqIEl0IHRoZW4gdXBkYXRlcyB0aGUgY3VycmVudCBzY2VuZSBzdGF0ZSBhY2NvcmRpbmdseSAob3IgZG9lcyBub3RoaW5nLCBpZiB0aGUgc3RhdGUgaXMgYWxyZWFkeSBjb3JyZWN0KSDigJMgUGlucyB3aWxsIGJlIHNldCB0byB0aGVpciBjb3JyZWN0IHBvc2l0aW9uIGFuZCB0d2VlbnMgd2lsbCBiZSB1cGRhdGVkIHRvIHRoZWlyIGNvcnJlY3QgcHJvZ3Jlc3MuICBcclxuXHQgKiBfKipOb3RlOioqIFRoaXMgbWV0aG9kIGdldHMgY2FsbGVkIGNvbnN0YW50bHkgd2hlbmV2ZXIgQ29udHJvbGxlciBkZXRlY3RzIGEgY2hhbmdlLiBUaGUgb25seSBhcHBsaWNhdGlvbiBmb3IgeW91IGlzIGlmIHlvdSBjaGFuZ2Ugc29tZXRoaW5nIG91dHNpZGUgb2YgdGhlIHJlYWxtIG9mIFNjcm9sbE1hZ2ljLCBsaWtlIG1vdmluZyB0aGUgdHJpZ2dlciBvciBjaGFuZ2luZyB0d2VlbiBwYXJhbWV0ZXJzLl9cclxuXHQgKiBAcHVibGljXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiAvLyB1cGRhdGUgYSBzcGVjaWZpYyBzY2VuZSBvbiBuZXh0IGN5Y2xlXHJcbiBcdCAqIGNvbnRyb2xsZXIudXBkYXRlU2NlbmUoc2NlbmUpO1xyXG4gXHQgKlxyXG5cdCAqIC8vIHVwZGF0ZSBhIHNwZWNpZmljIHNjZW5lIGltbWVkaWF0ZWx5XHJcblx0ICogY29udHJvbGxlci51cGRhdGVTY2VuZShzY2VuZSwgdHJ1ZSk7XHJcbiBcdCAqXHJcblx0ICogLy8gdXBkYXRlIG11bHRpcGxlIHNjZW5lcyBzY2VuZSBvbiBuZXh0IGN5Y2xlXHJcblx0ICogY29udHJvbGxlci51cGRhdGVTY2VuZShbc2NlbmUxLCBzY2VuZTIsIHNjZW5lM10pO1xyXG5cdCAqXHJcblx0ICogQHBhcmFtIHtTY3JvbGxNYWdpYy5TY2VuZX0gU2NlbmUgLSBTY3JvbGxNYWdpYyBTY2VuZSBvciBBcnJheSBvZiBTY2VuZXMgdGhhdCBpcy9hcmUgc3VwcG9zZWQgdG8gYmUgdXBkYXRlZC5cclxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbW1lZGlhdGVseT1mYWxzZV0gLSBJZiBgdHJ1ZWAgdGhlIHVwZGF0ZSB3aWxsIGJlIGluc3RhbnQsIGlmIGBmYWxzZWAgaXQgd2lsbCB3YWl0IHVudGlsIG5leHQgdXBkYXRlIGN5Y2xlLiAgXHJcblx0IFx0XHRcdFx0XHRcdFx0XHRcdFx0ICBUaGlzIGlzIHVzZWZ1bCB3aGVuIGNoYW5naW5nIG11bHRpcGxlIHByb3BlcnRpZXMgb2YgdGhlIHNjZW5lIC0gdGhpcyB3YXkgaXQgd2lsbCBvbmx5IGJlIHVwZGF0ZWQgb25jZSBhbGwgbmV3IHByb3BlcnRpZXMgYXJlIHNldCAodXBkYXRlU2NlbmVzKS5cclxuXHQgKiBAcmV0dXJuIHtDb250cm9sbGVyfSBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHQgKi9cclxuXHRcdHRoaXMudXBkYXRlU2NlbmUgPSBmdW5jdGlvbiAoU2NlbmUsIGltbWVkaWF0ZWx5KSB7XHJcblx0XHRcdGlmIChfdXRpbC50eXBlLkFycmF5KFNjZW5lKSkge1xyXG5cdFx0XHRcdFNjZW5lLmZvckVhY2goZnVuY3Rpb24gKHNjZW5lLCBpbmRleCkge1xyXG5cdFx0XHRcdFx0Q29udHJvbGxlci51cGRhdGVTY2VuZShzY2VuZSwgaW1tZWRpYXRlbHkpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGlmIChpbW1lZGlhdGVseSkge1xyXG5cdFx0XHRcdFx0U2NlbmUudXBkYXRlKHRydWUpO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoX3VwZGF0ZVNjZW5lc09uTmV4dEN5Y2xlICE9PSB0cnVlICYmIFNjZW5lIGluc3RhbmNlb2YgU2Nyb2xsTWFnaWMuU2NlbmUpIHsgLy8gaWYgX3VwZGF0ZVNjZW5lc09uTmV4dEN5Y2xlIGlzIHRydWUsIGFsbCBjb25uZWN0ZWQgc2NlbmVzIGFyZSBhbHJlYWR5IHNjaGVkdWxlZCBmb3IgdXBkYXRlXHJcblx0XHRcdFx0XHQvLyBwcmVwIGFycmF5IGZvciBuZXh0IHVwZGF0ZSBjeWNsZVxyXG5cdFx0XHRcdFx0X3VwZGF0ZVNjZW5lc09uTmV4dEN5Y2xlID0gX3VwZGF0ZVNjZW5lc09uTmV4dEN5Y2xlIHx8IFtdO1xyXG5cdFx0XHRcdFx0aWYgKF91cGRhdGVTY2VuZXNPbk5leHRDeWNsZS5pbmRleE9mKFNjZW5lKSA9PSAtMSkge1xyXG5cdFx0XHRcdFx0XHRfdXBkYXRlU2NlbmVzT25OZXh0Q3ljbGUucHVzaChTY2VuZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRfdXBkYXRlU2NlbmVzT25OZXh0Q3ljbGUgPSBzb3J0U2NlbmVzKF91cGRhdGVTY2VuZXNPbk5leHRDeWNsZSk7IC8vIHNvcnRcclxuXHRcdFx0XHRcdGRlYm91bmNlVXBkYXRlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBDb250cm9sbGVyO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFVwZGF0ZXMgdGhlIGNvbnRyb2xsZXIgcGFyYW1zIGFuZCBjYWxscyB1cGRhdGVTY2VuZSBvbiBldmVyeSBzY2VuZSwgdGhhdCBpcyBhdHRhY2hlZCB0byB0aGUgY29udHJvbGxlci4gIFxyXG5cdFx0ICogU2VlIGBDb250cm9sbGVyLnVwZGF0ZVNjZW5lKClgIGZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgdGhpcyBtZWFucy4gIFxyXG5cdFx0ICogSW4gbW9zdCBjYXNlcyB5b3Ugd2lsbCBub3QgbmVlZCB0aGlzIGZ1bmN0aW9uLCBhcyBpdCBpcyBjYWxsZWQgY29uc3RhbnRseSwgd2hlbmV2ZXIgU2Nyb2xsTWFnaWMgZGV0ZWN0cyBhIHN0YXRlIGNoYW5nZSBldmVudCwgbGlrZSByZXNpemUgb3Igc2Nyb2xsLiAgXHJcblx0XHQgKiBUaGUgb25seSBhcHBsaWNhdGlvbiBmb3IgdGhpcyBtZXRob2QgaXMgd2hlbiBTY3JvbGxNYWdpYyBmYWlscyB0byBkZXRlY3QgdGhlc2UgZXZlbnRzLiAgXHJcblx0XHQgKiBPbmUgYXBwbGljYXRpb24gaXMgd2l0aCBzb21lIGV4dGVybmFsIHNjcm9sbCBsaWJyYXJpZXMgKGxpa2UgaVNjcm9sbCkgdGhhdCBtb3ZlIGFuIGludGVybmFsIGNvbnRhaW5lciB0byBhIG5lZ2F0aXZlIG9mZnNldCBpbnN0ZWFkIG9mIGFjdHVhbGx5IHNjcm9sbGluZy4gSW4gdGhpcyBjYXNlIHRoZSB1cGRhdGUgb24gdGhlIGNvbnRyb2xsZXIgbmVlZHMgdG8gYmUgY2FsbGVkIHdoZW5ldmVyIHRoZSBjaGlsZCBjb250YWluZXIncyBwb3NpdGlvbiBjaGFuZ2VzLlxyXG5cdFx0ICogRm9yIHRoaXMgY2FzZSB0aGVyZSB3aWxsIGFsc28gYmUgdGhlIG5lZWQgdG8gcHJvdmlkZSBhIGN1c3RvbSBmdW5jdGlvbiB0byBjYWxjdWxhdGUgdGhlIGNvcnJlY3Qgc2Nyb2xsIHBvc2l0aW9uLiBTZWUgYENvbnRyb2xsZXIuc2Nyb2xsUG9zKClgIGZvciBkZXRhaWxzLlxyXG5cdFx0ICogQHB1YmxpY1xyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIHVwZGF0ZSB0aGUgY29udHJvbGxlciBvbiBuZXh0IGN5Y2xlIChzYXZlcyBwZXJmb3JtYW5jZSBkdWUgdG8gZWxpbWluYXRpb24gb2YgcmVkdW5kYW50IHVwZGF0ZXMpXHJcblx0XHQgKiBjb250cm9sbGVyLnVwZGF0ZSgpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHVwZGF0ZSB0aGUgY29udHJvbGxlciBpbW1lZGlhdGVseVxyXG5cdFx0ICogY29udHJvbGxlci51cGRhdGUodHJ1ZSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBbaW1tZWRpYXRlbHk9ZmFsc2VdIC0gSWYgYHRydWVgIHRoZSB1cGRhdGUgd2lsbCBiZSBpbnN0YW50LCBpZiBgZmFsc2VgIGl0IHdpbGwgd2FpdCB1bnRpbCBuZXh0IHVwZGF0ZSBjeWNsZSAoYmV0dGVyIHBlcmZvcm1hbmNlKVxyXG5cdFx0ICogQHJldHVybiB7Q29udHJvbGxlcn0gUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMudXBkYXRlID0gZnVuY3Rpb24gKGltbWVkaWF0ZWx5KSB7XHJcblx0XHRcdG9uQ2hhbmdlKHtcclxuXHRcdFx0XHR0eXBlOiBcInJlc2l6ZVwiXHJcblx0XHRcdH0pOyAvLyB3aWxsIHVwZGF0ZSBzaXplIGFuZCBzZXQgX3VwZGF0ZVNjZW5lc09uTmV4dEN5Y2xlIHRvIHRydWVcclxuXHRcdFx0aWYgKGltbWVkaWF0ZWx5KSB7XHJcblx0XHRcdFx0dXBkYXRlU2NlbmVzKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIENvbnRyb2xsZXI7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogU2Nyb2xsIHRvIGEgbnVtZXJpYyBzY3JvbGwgb2Zmc2V0LCBhIERPTSBlbGVtZW50LCB0aGUgc3RhcnQgb2YgYSBzY2VuZSBvciBwcm92aWRlIGFuIGFsdGVybmF0ZSBtZXRob2QgZm9yIHNjcm9sbGluZy4gIFxyXG5cdFx0ICogRm9yIHZlcnRpY2FsIGNvbnRyb2xsZXJzIGl0IHdpbGwgY2hhbmdlIHRoZSB0b3Agc2Nyb2xsIG9mZnNldCBhbmQgZm9yIGhvcml6b250YWwgYXBwbGljYXRpb25zIGl0IHdpbGwgY2hhbmdlIHRoZSBsZWZ0IG9mZnNldC5cclxuXHRcdCAqIEBwdWJsaWNcclxuXHRcdCAqXHJcblx0XHQgKiBAc2luY2UgMS4xLjBcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBzY3JvbGwgdG8gYW4gb2Zmc2V0IG9mIDEwMFxyXG5cdFx0ICogY29udHJvbGxlci5zY3JvbGxUbygxMDApO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHNjcm9sbCB0byBhIERPTSBlbGVtZW50XHJcblx0XHQgKiBjb250cm9sbGVyLnNjcm9sbFRvKFwiI2FuY2hvclwiKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBzY3JvbGwgdG8gdGhlIGJlZ2lubmluZyBvZiBhIHNjZW5lXHJcblx0XHQgKiB2YXIgc2NlbmUgPSBuZXcgU2Nyb2xsTWFnaWMuU2NlbmUoe29mZnNldDogMjAwfSk7XHJcblx0XHQgKiBjb250cm9sbGVyLnNjcm9sbFRvKHNjZW5lKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBkZWZpbmUgYSBuZXcgc2Nyb2xsIHBvc2l0aW9uIG1vZGlmaWNhdGlvbiBmdW5jdGlvbiAoalF1ZXJ5IGFuaW1hdGUgaW5zdGVhZCBvZiBqdW1wKVxyXG5cdFx0ICogY29udHJvbGxlci5zY3JvbGxUbyhmdW5jdGlvbiAobmV3U2Nyb2xsUG9zKSB7XHJcblx0XHQgKlx0JChcImh0bWwsIGJvZHlcIikuYW5pbWF0ZSh7c2Nyb2xsVG9wOiBuZXdTY3JvbGxQb3N9KTtcclxuXHRcdCAqIH0pO1xyXG5cdFx0ICogY29udHJvbGxlci5zY3JvbGxUbygxMDApOyAvLyBjYWxsIGFzIHVzdWFsLCBidXQgdGhlIG5ldyBmdW5jdGlvbiB3aWxsIGJlIHVzZWQgaW5zdGVhZFxyXG5cdFx0ICpcclxuXHRcdCAqIC8vIGRlZmluZSBhIG5ldyBzY3JvbGwgZnVuY3Rpb24gd2l0aCBhbiBhZGRpdGlvbmFsIHBhcmFtZXRlclxyXG5cdFx0ICogY29udHJvbGxlci5zY3JvbGxUbyhmdW5jdGlvbiAobmV3U2Nyb2xsUG9zLCBtZXNzYWdlKSB7XHJcblx0XHQgKiAgY29uc29sZS5sb2cobWVzc2FnZSk7XHJcblx0XHQgKlx0JCh0aGlzKS5hbmltYXRlKHtzY3JvbGxUb3A6IG5ld1Njcm9sbFBvc30pO1xyXG5cdFx0ICogfSk7XHJcblx0XHQgKiAvLyBjYWxsIGFzIHVzdWFsLCBidXQgc3VwcGx5IGFuIGV4dHJhIHBhcmFtZXRlciB0byB0aGUgZGVmaW5lZCBjdXN0b20gZnVuY3Rpb25cclxuXHRcdCAqIGNvbnRyb2xsZXIuc2Nyb2xsVG8oMTAwLCBcIm15IG1lc3NhZ2VcIik7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gZGVmaW5lIGEgbmV3IHNjcm9sbCBmdW5jdGlvbiB3aXRoIGFuIGFkZGl0aW9uYWwgcGFyYW1ldGVyIGNvbnRhaW5pbmcgbXVsdGlwbGUgdmFyaWFibGVzXHJcblx0XHQgKiBjb250cm9sbGVyLnNjcm9sbFRvKGZ1bmN0aW9uIChuZXdTY3JvbGxQb3MsIG9wdGlvbnMpIHtcclxuXHRcdCAqICBzb21lR2xvYmFsVmFyID0gb3B0aW9ucy5hICsgb3B0aW9ucy5iO1xyXG5cdFx0ICpcdCQodGhpcykuYW5pbWF0ZSh7c2Nyb2xsVG9wOiBuZXdTY3JvbGxQb3N9KTtcclxuXHRcdCAqIH0pO1xyXG5cdFx0ICogLy8gY2FsbCBhcyB1c3VhbCwgYnV0IHN1cHBseSBhbiBleHRyYSBwYXJhbWV0ZXIgY29udGFpbmluZyBtdWx0aXBsZSBvcHRpb25zXHJcblx0XHQgKiBjb250cm9sbGVyLnNjcm9sbFRvKDEwMCwge2E6IDEsIGI6IDJ9KTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBkZWZpbmUgYSBuZXcgc2Nyb2xsIGZ1bmN0aW9uIHdpdGggYSBjYWxsYmFjayBzdXBwbGllZCBhcyBhbiBhZGRpdGlvbmFsIHBhcmFtZXRlclxyXG5cdFx0ICogY29udHJvbGxlci5zY3JvbGxUbyhmdW5jdGlvbiAobmV3U2Nyb2xsUG9zLCBjYWxsYmFjaykge1xyXG5cdFx0ICpcdCQodGhpcykuYW5pbWF0ZSh7c2Nyb2xsVG9wOiBuZXdTY3JvbGxQb3N9LCA0MDAsIFwic3dpbmdcIiwgY2FsbGJhY2spO1xyXG5cdFx0ICogfSk7XHJcblx0XHQgKiAvLyBjYWxsIGFzIHVzdWFsLCBidXQgc3VwcGx5IGFuIGV4dHJhIHBhcmFtZXRlciwgd2hpY2ggaXMgdXNlZCBhcyBhIGNhbGxiYWNrIGluIHRoZSBwcmV2aW91c2x5IGRlZmluZWQgY3VzdG9tIHNjcm9sbCBmdW5jdGlvblxyXG5cdFx0ICogY29udHJvbGxlci5zY3JvbGxUbygxMDAsIGZ1bmN0aW9uKCkge1xyXG5cdFx0ICpcdGNvbnNvbGUubG9nKFwic2Nyb2xsIGhhcyBmaW5pc2hlZC5cIik7XHJcblx0XHQgKiB9KTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge21peGVkfSBzY3JvbGxUYXJnZXQgLSBUaGUgc3VwcGxpZWQgYXJndW1lbnQgY2FuIGJlIG9uZSBvZiB0aGVzZSB0eXBlczpcclxuXHRcdCAqIDEuIGBudW1iZXJgIC0+IFRoZSBjb250YWluZXIgd2lsbCBzY3JvbGwgdG8gdGhpcyBuZXcgc2Nyb2xsIG9mZnNldC5cclxuXHRcdCAqIDIuIGBzdHJpbmdgIG9yIGBvYmplY3RgIC0+IENhbiBiZSBhIHNlbGVjdG9yIG9yIGEgRE9NIG9iamVjdC4gIFxyXG5cdFx0ICogIFRoZSBjb250YWluZXIgd2lsbCBzY3JvbGwgdG8gdGhlIHBvc2l0aW9uIG9mIHRoaXMgZWxlbWVudC5cclxuXHRcdCAqIDMuIGBTY3JvbGxNYWdpYyBTY2VuZWAgLT4gVGhlIGNvbnRhaW5lciB3aWxsIHNjcm9sbCB0byB0aGUgc3RhcnQgb2YgdGhpcyBzY2VuZS5cclxuXHRcdCAqIDQuIGBmdW5jdGlvbmAgLT4gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGZ1dHVyZSBzY3JvbGwgcG9zaXRpb24gbW9kaWZpY2F0aW9ucy4gIFxyXG5cdFx0ICogIFRoaXMgcHJvdmlkZXMgYSB3YXkgZm9yIHlvdSB0byBjaGFuZ2UgdGhlIGJlaGF2aW91ciBvZiBzY3JvbGxpbmcgYW5kIGFkZGluZyBuZXcgYmVoYXZpb3VyIGxpa2UgYW5pbWF0aW9uLiBUaGUgZnVuY3Rpb24gcmVjZWl2ZXMgdGhlIG5ldyBzY3JvbGwgcG9zaXRpb24gYXMgYSBwYXJhbWV0ZXIgYW5kIGEgcmVmZXJlbmNlIHRvIHRoZSBjb250YWluZXIgZWxlbWVudCB1c2luZyBgdGhpc2AuICBcclxuXHRcdCAqICBJdCBtYXkgYWxzbyBvcHRpb25hbGx5IHJlY2VpdmUgYW4gb3B0aW9uYWwgYWRkaXRpb25hbCBwYXJhbWV0ZXIgKHNlZSBiZWxvdykgIFxyXG5cdFx0ICogIF8qKk5PVEU6KiogIFxyXG5cdFx0ICogIEFsbCBvdGhlciBvcHRpb25zIHdpbGwgc3RpbGwgd29yayBhcyBleHBlY3RlZCwgdXNpbmcgdGhlIG5ldyBmdW5jdGlvbiB0byBzY3JvbGwuX1xyXG5cdFx0ICogQHBhcmFtIHttaXhlZH0gW2FkZGl0aW9uYWxQYXJhbWV0ZXJdIC0gSWYgYSBjdXN0b20gc2Nyb2xsIGZ1bmN0aW9uIHdhcyBkZWZpbmVkIChzZWUgYWJvdmUgNC4pLCB5b3UgbWF5IHdhbnQgdG8gc3VwcGx5IGFkZGl0aW9uYWwgcGFyYW1ldGVycyB0byBpdCwgd2hlbiBjYWxsaW5nIGl0LiBZb3UgY2FuIGRvIHRoaXMgdXNpbmcgdGhpcyBwYXJhbWV0ZXIg4oCTIHNlZSBleGFtcGxlcyBmb3IgZGV0YWlscy4gUGxlYXNlIG5vdGUsIHRoYXQgdGhpcyBwYXJhbWV0ZXIgd2lsbCBoYXZlIG5vIGVmZmVjdCwgaWYgeW91IHVzZSB0aGUgZGVmYXVsdCBzY3JvbGxpbmcgZnVuY3Rpb24uXHJcblx0XHQgKiBAcmV0dXJucyB7Q29udHJvbGxlcn0gUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuc2Nyb2xsVG8gPSBmdW5jdGlvbiAoc2Nyb2xsVGFyZ2V0LCBhZGRpdGlvbmFsUGFyYW1ldGVyKSB7XHJcblx0XHRcdGlmIChfdXRpbC50eXBlLk51bWJlcihzY3JvbGxUYXJnZXQpKSB7IC8vIGV4Y2VjdXRlXHJcblx0XHRcdFx0c2V0U2Nyb2xsUG9zLmNhbGwoX29wdGlvbnMuY29udGFpbmVyLCBzY3JvbGxUYXJnZXQsIGFkZGl0aW9uYWxQYXJhbWV0ZXIpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHNjcm9sbFRhcmdldCBpbnN0YW5jZW9mIFNjcm9sbE1hZ2ljLlNjZW5lKSB7IC8vIHNjcm9sbCB0byBzY2VuZVxyXG5cdFx0XHRcdGlmIChzY3JvbGxUYXJnZXQuY29udHJvbGxlcigpID09PSBDb250cm9sbGVyKSB7IC8vIGNoZWNrIGlmIHRoZSBjb250cm9sbGVyIGlzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHNjZW5lXHJcblx0XHRcdFx0XHRDb250cm9sbGVyLnNjcm9sbFRvKHNjcm9sbFRhcmdldC5zY3JvbGxPZmZzZXQoKSwgYWRkaXRpb25hbFBhcmFtZXRlcik7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGxvZygyLCBcInNjcm9sbFRvKCk6IFRoZSBzdXBwbGllZCBzY2VuZSBkb2VzIG5vdCBiZWxvbmcgdG8gdGhpcyBjb250cm9sbGVyLiBTY3JvbGwgY2FuY2VsbGVkLlwiLCBzY3JvbGxUYXJnZXQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIGlmIChfdXRpbC50eXBlLkZ1bmN0aW9uKHNjcm9sbFRhcmdldCkpIHsgLy8gYXNzaWduIG5ldyBzY3JvbGwgZnVuY3Rpb25cclxuXHRcdFx0XHRzZXRTY3JvbGxQb3MgPSBzY3JvbGxUYXJnZXQ7XHJcblx0XHRcdH0gZWxzZSB7IC8vIHNjcm9sbCB0byBlbGVtZW50XHJcblx0XHRcdFx0dmFyIGVsZW0gPSBfdXRpbC5nZXQuZWxlbWVudHMoc2Nyb2xsVGFyZ2V0KVswXTtcclxuXHRcdFx0XHRpZiAoZWxlbSkge1xyXG5cdFx0XHRcdFx0Ly8gaWYgcGFyZW50IGlzIHBpbiBzcGFjZXIsIHVzZSBzcGFjZXIgcG9zaXRpb24gaW5zdGVhZCBzbyBjb3JyZWN0IHN0YXJ0IHBvc2l0aW9uIGlzIHJldHVybmVkIGZvciBwaW5uZWQgZWxlbWVudHMuXHJcblx0XHRcdFx0XHR3aGlsZSAoZWxlbS5wYXJlbnROb2RlLmhhc0F0dHJpYnV0ZShQSU5fU1BBQ0VSX0FUVFJJQlVURSkpIHtcclxuXHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR2YXJcclxuXHRcdFx0XHRcdFx0cGFyYW0gPSBfb3B0aW9ucy52ZXJ0aWNhbCA/IFwidG9wXCIgOiBcImxlZnRcIiwgLy8gd2hpY2ggcGFyYW0gaXMgb2YgaW50ZXJlc3QgP1xyXG5cdFx0XHRcdFx0XHRjb250YWluZXJPZmZzZXQgPSBfdXRpbC5nZXQub2Zmc2V0KF9vcHRpb25zLmNvbnRhaW5lciksIC8vIGNvbnRhaW5lciBwb3NpdGlvbiBpcyBuZWVkZWQgYmVjYXVzZSBlbGVtZW50IG9mZnNldCBpcyByZXR1cm5lZCBpbiByZWxhdGlvbiB0byBkb2N1bWVudCwgbm90IGluIHJlbGF0aW9uIHRvIGNvbnRhaW5lci5cclxuXHRcdFx0XHRcdFx0ZWxlbWVudE9mZnNldCA9IF91dGlsLmdldC5vZmZzZXQoZWxlbSk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCFfaXNEb2N1bWVudCkgeyAvLyBjb250YWluZXIgaXMgbm90IHRoZSBkb2N1bWVudCByb290LCBzbyBzdWJzdHJhY3Qgc2Nyb2xsIFBvc2l0aW9uIHRvIGdldCBjb3JyZWN0IHRyaWdnZXIgZWxlbWVudCBwb3NpdGlvbiByZWxhdGl2ZSB0byBzY3JvbGxjb250ZW50XHJcblx0XHRcdFx0XHRcdGNvbnRhaW5lck9mZnNldFtwYXJhbV0gLT0gQ29udHJvbGxlci5zY3JvbGxQb3MoKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRDb250cm9sbGVyLnNjcm9sbFRvKGVsZW1lbnRPZmZzZXRbcGFyYW1dIC0gY29udGFpbmVyT2Zmc2V0W3BhcmFtXSwgYWRkaXRpb25hbFBhcmFtZXRlcik7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGxvZygyLCBcInNjcm9sbFRvKCk6IFRoZSBzdXBwbGllZCBhcmd1bWVudCBpcyBpbnZhbGlkLiBTY3JvbGwgY2FuY2VsbGVkLlwiLCBzY3JvbGxUYXJnZXQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gQ29udHJvbGxlcjtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAqKkdldCoqIHRoZSBjdXJyZW50IHNjcm9sbFBvc2l0aW9uIG9yICoqU2V0KiogYSBuZXcgbWV0aG9kIHRvIGNhbGN1bGF0ZSBpdC4gIFxyXG5cdFx0ICogLT4gKipHRVQqKjpcclxuXHRcdCAqIFdoZW4gdXNlZCBhcyBhIGdldHRlciB0aGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbi4gIFxyXG5cdFx0ICogVG8gZ2V0IGEgY2FjaGVkIHZhbHVlIHVzZSBDb250cm9sbGVyLmluZm8oXCJzY3JvbGxQb3NcIiksIHdoaWNoIHdpbGwgYmUgdXBkYXRlZCBpbiB0aGUgdXBkYXRlIGN5Y2xlLiAgXHJcblx0XHQgKiBGb3IgdmVydGljYWwgY29udHJvbGxlcnMgaXQgd2lsbCByZXR1cm4gdGhlIHRvcCBzY3JvbGwgb2Zmc2V0IGFuZCBmb3IgaG9yaXpvbnRhbCBhcHBsaWNhdGlvbnMgaXQgd2lsbCByZXR1cm4gdGhlIGxlZnQgb2Zmc2V0LlxyXG5cdFx0ICpcclxuXHRcdCAqIC0+ICoqU0VUKio6XHJcblx0XHQgKiBXaGVuIHVzZWQgYXMgYSBzZXR0ZXIgdGhpcyBtZXRob2QgcHJvZGVzIGEgd2F5IHRvIHBlcm1hbmVudGx5IG92ZXJ3cml0ZSB0aGUgY29udHJvbGxlcidzIHNjcm9sbCBwb3NpdGlvbiBjYWxjdWxhdGlvbi4gIFxyXG5cdFx0ICogQSB0eXBpY2FsIHVzZWNhc2UgaXMgd2hlbiB0aGUgc2Nyb2xsIHBvc2l0aW9uIGlzIG5vdCByZWZsZWN0ZWQgYnkgdGhlIGNvbnRhaW5lcnMgc2Nyb2xsVG9wIG9yIHNjcm9sbExlZnQgdmFsdWVzLCBidXQgZm9yIGV4YW1wbGUgYnkgdGhlIGlubmVyIG9mZnNldCBvZiBhIGNoaWxkIGNvbnRhaW5lci4gIFxyXG5cdFx0ICogTW92aW5nIGEgY2hpbGQgY29udGFpbmVyIGluc2lkZSBhIHBhcmVudCBpcyBhIGNvbW1vbmx5IHVzZWQgbWV0aG9kIGZvciBzZXZlcmFsIHNjcm9sbGluZyBmcmFtZXdvcmtzLCBpbmNsdWRpbmcgaVNjcm9sbC4gIFxyXG5cdFx0ICogQnkgcHJvdmlkaW5nIGFuIGFsdGVybmF0ZSBjYWxjdWxhdGlvbiBmdW5jdGlvbiB5b3UgY2FuIG1ha2Ugc3VyZSBTY3JvbGxNYWdpYyByZWNlaXZlcyB0aGUgY29ycmVjdCBzY3JvbGwgcG9zaXRpb24uICBcclxuXHRcdCAqIFBsZWFzZSBhbHNvIGJlYXIgaW4gbWluZCB0aGF0IHlvdXIgZnVuY3Rpb24gc2hvdWxkIHJldHVybiB5IHZhbHVlcyBmb3IgdmVydGljYWwgc2Nyb2xscyBhbiB4IGZvciBob3Jpem9udGFscy5cclxuXHRcdCAqXHJcblx0XHQgKiBUbyBjaGFuZ2UgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIHBsZWFzZSB1c2UgYENvbnRyb2xsZXIuc2Nyb2xsVG8oKWAuXHJcblx0XHQgKiBAcHVibGljXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGdldCB0aGUgY3VycmVudCBzY3JvbGwgUG9zaXRpb25cclxuXHRcdCAqIHZhciBzY3JvbGxQb3MgPSBjb250cm9sbGVyLnNjcm9sbFBvcygpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHNldCBhIG5ldyBzY3JvbGwgcG9zaXRpb24gY2FsY3VsYXRpb24gbWV0aG9kXHJcblx0XHQgKiBjb250cm9sbGVyLnNjcm9sbFBvcyhmdW5jdGlvbiAoKSB7XHJcblx0XHQgKlx0cmV0dXJuIHRoaXMuaW5mbyhcInZlcnRpY2FsXCIpID8gLW15Y2hpbGRjb250YWluZXIueSA6IC1teWNoaWxkY29udGFpbmVyLnhcclxuXHRcdCAqIH0pO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb259IFtzY3JvbGxQb3NNZXRob2RdIC0gVGhlIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIHRoZSBzY3JvbGwgcG9zaXRpb24gY2FsY3VsYXRpb24gb2YgdGhlIGNvbnRhaW5lci5cclxuXHRcdCAqIEByZXR1cm5zIHsobnVtYmVyfENvbnRyb2xsZXIpfSBDdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBvciBwYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5zY3JvbGxQb3MgPSBmdW5jdGlvbiAoc2Nyb2xsUG9zTWV0aG9kKSB7XHJcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkgeyAvLyBnZXRcclxuXHRcdFx0XHRyZXR1cm4gZ2V0U2Nyb2xsUG9zLmNhbGwoQ29udHJvbGxlcik7XHJcblx0XHRcdH0gZWxzZSB7IC8vIHNldFxyXG5cdFx0XHRcdGlmIChfdXRpbC50eXBlLkZ1bmN0aW9uKHNjcm9sbFBvc01ldGhvZCkpIHtcclxuXHRcdFx0XHRcdGdldFNjcm9sbFBvcyA9IHNjcm9sbFBvc01ldGhvZDtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0bG9nKDIsIFwiUHJvdmlkZWQgdmFsdWUgZm9yIG1ldGhvZCAnc2Nyb2xsUG9zJyBpcyBub3QgYSBmdW5jdGlvbi4gVG8gY2hhbmdlIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiB1c2UgJ3Njcm9sbFRvKCknLlwiKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIENvbnRyb2xsZXI7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogKipHZXQqKiBhbGwgaW5mb3Mgb3Igb25lIGluIHBhcnRpY3VsYXIgYWJvdXQgdGhlIGNvbnRyb2xsZXIuXHJcblx0XHQgKiBAcHVibGljXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gcmV0dXJucyB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gKG51bWJlcilcclxuXHRcdCAqIHZhciBzY3JvbGxQb3MgPSBjb250cm9sbGVyLmluZm8oXCJzY3JvbGxQb3NcIik7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gcmV0dXJucyBhbGwgaW5mb3MgYXMgYW4gb2JqZWN0XHJcblx0XHQgKiB2YXIgaW5mb3MgPSBjb250cm9sbGVyLmluZm8oKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gW2Fib3V0XSAtIElmIHBhc3NlZCBvbmx5IHRoaXMgaW5mbyB3aWxsIGJlIHJldHVybmVkIGluc3RlYWQgb2YgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsLiAgXHJcblx0XHQgXHRcdFx0XHRcdFx0XHQgVmFsaWQgb3B0aW9ucyBhcmU6XHJcblx0XHQgXHRcdFx0XHRcdFx0XHQgKiogYFwic2l6ZVwiYCA9PiB0aGUgY3VycmVudCB2aWV3cG9ydCBzaXplIG9mIHRoZSBjb250YWluZXJcclxuXHRcdCBcdFx0XHRcdFx0XHRcdCAqKiBgXCJ2ZXJ0aWNhbFwiYCA9PiB0cnVlIGlmIHZlcnRpY2FsIHNjcm9sbGluZywgb3RoZXJ3aXNlIGZhbHNlXHJcblx0XHQgXHRcdFx0XHRcdFx0XHQgKiogYFwic2Nyb2xsUG9zXCJgID0+IHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvblxyXG5cdFx0IFx0XHRcdFx0XHRcdFx0ICoqIGBcInNjcm9sbERpcmVjdGlvblwiYCA9PiB0aGUgbGFzdCBrbm93biBkaXJlY3Rpb24gb2YgdGhlIHNjcm9sbFxyXG5cdFx0IFx0XHRcdFx0XHRcdFx0ICoqIGBcImNvbnRhaW5lclwiYCA9PiB0aGUgY29udGFpbmVyIGVsZW1lbnRcclxuXHRcdCBcdFx0XHRcdFx0XHRcdCAqKiBgXCJpc0RvY3VtZW50XCJgID0+IHRydWUgaWYgY29udGFpbmVyIGVsZW1lbnQgaXMgdGhlIGRvY3VtZW50LlxyXG5cdFx0ICogQHJldHVybnMgeyhtaXhlZHxvYmplY3QpfSBUaGUgcmVxdWVzdGVkIGluZm8ocykuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuaW5mbyA9IGZ1bmN0aW9uIChhYm91dCkge1xyXG5cdFx0XHR2YXIgdmFsdWVzID0ge1xyXG5cdFx0XHRcdHNpemU6IF92aWV3UG9ydFNpemUsIC8vIGNvbnRhaW5zIGhlaWdodCBvciB3aWR0aCAoaW4gcmVnYXJkIHRvIG9yaWVudGF0aW9uKTtcclxuXHRcdFx0XHR2ZXJ0aWNhbDogX29wdGlvbnMudmVydGljYWwsXHJcblx0XHRcdFx0c2Nyb2xsUG9zOiBfc2Nyb2xsUG9zLFxyXG5cdFx0XHRcdHNjcm9sbERpcmVjdGlvbjogX3Njcm9sbERpcmVjdGlvbixcclxuXHRcdFx0XHRjb250YWluZXI6IF9vcHRpb25zLmNvbnRhaW5lcixcclxuXHRcdFx0XHRpc0RvY3VtZW50OiBfaXNEb2N1bWVudFxyXG5cdFx0XHR9O1xyXG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHsgLy8gZ2V0IGFsbCBhcyBhbiBvYmplY3RcclxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHZhbHVlc1thYm91dF0gIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdHJldHVybiB2YWx1ZXNbYWJvdXRdO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGxvZygxLCBcIkVSUk9SOiBvcHRpb24gXFxcIlwiICsgYWJvdXQgKyBcIlxcXCIgaXMgbm90IGF2YWlsYWJsZVwiKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAqKkdldCoqIG9yICoqU2V0KiogdGhlIGN1cnJlbnQgbG9nbGV2ZWwgb3B0aW9uIHZhbHVlLlxyXG5cdFx0ICogQHB1YmxpY1xyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBnZXQgdGhlIGN1cnJlbnQgdmFsdWVcclxuXHRcdCAqIHZhciBsb2dsZXZlbCA9IGNvbnRyb2xsZXIubG9nbGV2ZWwoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBzZXQgYSBuZXcgdmFsdWVcclxuXHRcdCAqIGNvbnRyb2xsZXIubG9nbGV2ZWwoMyk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IFtuZXdMb2dsZXZlbF0gLSBUaGUgbmV3IGxvZ2xldmVsIHNldHRpbmcgb2YgdGhlIENvbnRyb2xsZXIuIGBbMC0zXWBcclxuXHRcdCAqIEByZXR1cm5zIHsobnVtYmVyfENvbnRyb2xsZXIpfSBDdXJyZW50IGxvZ2xldmVsIG9yIHBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLmxvZ2xldmVsID0gZnVuY3Rpb24gKG5ld0xvZ2xldmVsKSB7XHJcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkgeyAvLyBnZXRcclxuXHRcdFx0XHRyZXR1cm4gX29wdGlvbnMubG9nbGV2ZWw7XHJcblx0XHRcdH0gZWxzZSBpZiAoX29wdGlvbnMubG9nbGV2ZWwgIT0gbmV3TG9nbGV2ZWwpIHsgLy8gc2V0XHJcblx0XHRcdFx0X29wdGlvbnMubG9nbGV2ZWwgPSBuZXdMb2dsZXZlbDtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gQ29udHJvbGxlcjtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAqKkdldCoqIG9yICoqU2V0KiogdGhlIGN1cnJlbnQgZW5hYmxlZCBzdGF0ZSBvZiB0aGUgY29udHJvbGxlci4gIFxyXG5cdFx0ICogVGhpcyBjYW4gYmUgdXNlZCB0byBkaXNhYmxlIGFsbCBTY2VuZXMgY29ubmVjdGVkIHRvIHRoZSBjb250cm9sbGVyIHdpdGhvdXQgZGVzdHJveWluZyBvciByZW1vdmluZyB0aGVtLlxyXG5cdFx0ICogQHB1YmxpY1xyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBnZXQgdGhlIGN1cnJlbnQgdmFsdWVcclxuXHRcdCAqIHZhciBlbmFibGVkID0gY29udHJvbGxlci5lbmFibGVkKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gZGlzYWJsZSB0aGUgY29udHJvbGxlclxyXG5cdFx0ICogY29udHJvbGxlci5lbmFibGVkKGZhbHNlKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtuZXdTdGF0ZV0gLSBUaGUgbmV3IGVuYWJsZWQgc3RhdGUgb2YgdGhlIGNvbnRyb2xsZXIgYHRydWVgIG9yIGBmYWxzZWAuXHJcblx0XHQgKiBAcmV0dXJucyB7KGJvb2xlYW58Q29udHJvbGxlcil9IEN1cnJlbnQgZW5hYmxlZCBzdGF0ZSBvciBwYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5lbmFibGVkID0gZnVuY3Rpb24gKG5ld1N0YXRlKSB7XHJcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkgeyAvLyBnZXRcclxuXHRcdFx0XHRyZXR1cm4gX2VuYWJsZWQ7XHJcblx0XHRcdH0gZWxzZSBpZiAoX2VuYWJsZWQgIT0gbmV3U3RhdGUpIHsgLy8gc2V0XHJcblx0XHRcdFx0X2VuYWJsZWQgPSAhIW5ld1N0YXRlO1xyXG5cdFx0XHRcdENvbnRyb2xsZXIudXBkYXRlU2NlbmUoX3NjZW5lT2JqZWN0cywgdHJ1ZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIENvbnRyb2xsZXI7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogRGVzdHJveSB0aGUgQ29udHJvbGxlciwgYWxsIFNjZW5lcyBhbmQgZXZlcnl0aGluZy5cclxuXHRcdCAqIEBwdWJsaWNcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gd2l0aG91dCByZXNldHRpbmcgdGhlIHNjZW5lc1xyXG5cdFx0ICogY29udHJvbGxlciA9IGNvbnRyb2xsZXIuZGVzdHJveSgpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHdpdGggc2NlbmUgcmVzZXRcclxuXHRcdCAqIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyLmRlc3Ryb3kodHJ1ZSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBbcmVzZXRTY2VuZXM9ZmFsc2VdIC0gSWYgYHRydWVgIHRoZSBwaW5zIGFuZCB0d2VlbnMgKGlmIGV4aXN0ZW50KSBvZiBhbGwgc2NlbmVzIHdpbGwgYmUgcmVzZXQuXHJcblx0XHQgKiBAcmV0dXJucyB7bnVsbH0gTnVsbCB0byB1bnNldCBoYW5kbGVyIHZhcmlhYmxlcy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5kZXN0cm95ID0gZnVuY3Rpb24gKHJlc2V0U2NlbmVzKSB7XHJcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoX3JlZnJlc2hUaW1lb3V0KTtcclxuXHRcdFx0dmFyIGkgPSBfc2NlbmVPYmplY3RzLmxlbmd0aDtcclxuXHRcdFx0d2hpbGUgKGktLSkge1xyXG5cdFx0XHRcdF9zY2VuZU9iamVjdHNbaV0uZGVzdHJveShyZXNldFNjZW5lcyk7XHJcblx0XHRcdH1cclxuXHRcdFx0X29wdGlvbnMuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgb25DaGFuZ2UpO1xyXG5cdFx0XHRfb3B0aW9ucy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBvbkNoYW5nZSk7XHJcblx0XHRcdF91dGlsLmNBRihfdXBkYXRlVGltZW91dCk7XHJcblx0XHRcdGxvZygzLCBcImRlc3Ryb3llZCBcIiArIE5BTUVTUEFDRSArIFwiIChyZXNldDogXCIgKyAocmVzZXRTY2VuZXMgPyBcInRydWVcIiA6IFwiZmFsc2VcIikgKyBcIilcIik7XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBJTklUXHJcblx0XHRjb25zdHJ1Y3QoKTtcclxuXHRcdHJldHVybiBDb250cm9sbGVyO1xyXG5cdH07XHJcblxyXG5cdC8vIHN0b3JlIHBhZ2V3aWRlIGNvbnRyb2xsZXIgb3B0aW9uc1xyXG5cdHZhciBDT05UUk9MTEVSX09QVElPTlMgPSB7XHJcblx0XHRkZWZhdWx0czoge1xyXG5cdFx0XHRjb250YWluZXI6IHdpbmRvdyxcclxuXHRcdFx0dmVydGljYWw6IHRydWUsXHJcblx0XHRcdGdsb2JhbFNjZW5lT3B0aW9uczoge30sXHJcblx0XHRcdGxvZ2xldmVsOiAyLFxyXG5cdFx0XHRyZWZyZXNoSW50ZXJ2YWw6IDEwMFxyXG5cdFx0fVxyXG5cdH07XHJcblx0LypcclxuXHQgKiBtZXRob2QgdXNlZCB0byBhZGQgYW4gb3B0aW9uIHRvIFNjcm9sbE1hZ2ljIFNjZW5lcy5cclxuXHQgKi9cclxuXHRTY3JvbGxNYWdpYy5Db250cm9sbGVyLmFkZE9wdGlvbiA9IGZ1bmN0aW9uIChuYW1lLCBkZWZhdWx0VmFsdWUpIHtcclxuXHRcdENPTlRST0xMRVJfT1BUSU9OUy5kZWZhdWx0c1tuYW1lXSA9IGRlZmF1bHRWYWx1ZTtcclxuXHR9O1xyXG5cdC8vIGluc3RhbmNlIGV4dGVuc2lvbiBmdW5jdGlvbiBmb3IgcGx1Z2luc1xyXG5cdFNjcm9sbE1hZ2ljLkNvbnRyb2xsZXIuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuc2lvbikge1xyXG5cdFx0dmFyIG9sZENsYXNzID0gdGhpcztcclxuXHRcdFNjcm9sbE1hZ2ljLkNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdG9sZENsYXNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblx0XHRcdHRoaXMuJHN1cGVyID0gX3V0aWwuZXh0ZW5kKHt9LCB0aGlzKTsgLy8gY29weSBwYXJlbnQgc3RhdGVcclxuXHRcdFx0cmV0dXJuIGV4dGVuc2lvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcblx0XHR9O1xyXG5cdFx0X3V0aWwuZXh0ZW5kKFNjcm9sbE1hZ2ljLkNvbnRyb2xsZXIsIG9sZENsYXNzKTsgLy8gY29weSBwcm9wZXJ0aWVzXHJcblx0XHRTY3JvbGxNYWdpYy5Db250cm9sbGVyLnByb3RvdHlwZSA9IG9sZENsYXNzLnByb3RvdHlwZTsgLy8gY29weSBwcm90b3R5cGVcclxuXHRcdFNjcm9sbE1hZ2ljLkNvbnRyb2xsZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2Nyb2xsTWFnaWMuQ29udHJvbGxlcjsgLy8gcmVzdG9yZSBjb25zdHJ1Y3RvclxyXG5cdH07XHJcblxyXG5cclxuXHQvKipcclxuXHQgKiBBIFNjZW5lIGRlZmluZXMgd2hlcmUgdGhlIGNvbnRyb2xsZXIgc2hvdWxkIHJlYWN0IGFuZCBob3cuXHJcblx0ICpcclxuXHQgKiBAY2xhc3NcclxuXHQgKlxyXG5cdCAqIEBleGFtcGxlXHJcblx0ICogLy8gY3JlYXRlIGEgc3RhbmRhcmQgc2NlbmUgYW5kIGFkZCBpdCB0byBhIGNvbnRyb2xsZXJcclxuXHQgKiBuZXcgU2Nyb2xsTWFnaWMuU2NlbmUoKVxyXG5cdCAqXHRcdC5hZGRUbyhjb250cm9sbGVyKTtcclxuXHQgKlxyXG5cdCAqIC8vIGNyZWF0ZSBhIHNjZW5lIHdpdGggY3VzdG9tIG9wdGlvbnMgYW5kIGFzc2lnbiBhIGhhbmRsZXIgdG8gaXQuXHJcblx0ICogdmFyIHNjZW5lID0gbmV3IFNjcm9sbE1hZ2ljLlNjZW5lKHtcclxuXHQgKiBcdFx0ZHVyYXRpb246IDEwMCxcclxuXHQgKlx0XHRvZmZzZXQ6IDIwMCxcclxuXHQgKlx0XHR0cmlnZ2VySG9vazogXCJvbkVudGVyXCIsXHJcblx0ICpcdFx0cmV2ZXJzZTogZmFsc2VcclxuXHQgKiB9KTtcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25zIGZvciB0aGUgU2NlbmUuIFRoZSBvcHRpb25zIGNhbiBiZSB1cGRhdGVkIGF0IGFueSB0aW1lLiAgXHJcblx0IFx0XHRcdFx0XHRcdFx0ICAgSW5zdGVhZCBvZiBzZXR0aW5nIHRoZSBvcHRpb25zIGZvciBlYWNoIHNjZW5lIGluZGl2aWR1YWxseSB5b3UgY2FuIGFsc28gc2V0IHRoZW0gZ2xvYmFsbHkgaW4gdGhlIGNvbnRyb2xsZXIgYXMgdGhlIGNvbnRyb2xsZXJzIGBnbG9iYWxTY2VuZU9wdGlvbnNgIG9wdGlvbi4gVGhlIG9iamVjdCBhY2NlcHRzIHRoZSBzYW1lIHByb3BlcnRpZXMgYXMgdGhlIG9uZXMgYmVsb3cuICBcclxuXHQgXHRcdFx0XHRcdFx0XHQgICBXaGVuIGEgc2NlbmUgaXMgYWRkZWQgdG8gdGhlIGNvbnRyb2xsZXIgdGhlIG9wdGlvbnMgZGVmaW5lZCB1c2luZyB0aGUgU2NlbmUgY29uc3RydWN0b3Igd2lsbCBiZSBvdmVyd3JpdHRlbiBieSB0aG9zZSBzZXQgaW4gYGdsb2JhbFNjZW5lT3B0aW9uc2AuXHJcblx0ICogQHBhcmFtIHsobnVtYmVyfHN0cmluZ3xmdW5jdGlvbil9IFtvcHRpb25zLmR1cmF0aW9uPTBdIC0gVGhlIGR1cmF0aW9uIG9mIHRoZSBzY2VuZS4gXHJcblx0IFx0XHRcdFx0XHRQbGVhc2Ugc2VlIGBTY2VuZS5kdXJhdGlvbigpYCBmb3IgZGV0YWlscy5cclxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMub2Zmc2V0PTBdIC0gT2Zmc2V0IFZhbHVlIGZvciB0aGUgVHJpZ2dlciBQb3NpdGlvbi4gSWYgbm8gdHJpZ2dlckVsZW1lbnQgaXMgZGVmaW5lZCB0aGlzIHdpbGwgYmUgdGhlIHNjcm9sbCBkaXN0YW5jZSBmcm9tIHRoZSBzdGFydCBvZiB0aGUgcGFnZSwgYWZ0ZXIgd2hpY2ggdGhlIHNjZW5lIHdpbGwgc3RhcnQuXHJcblx0ICogQHBhcmFtIHsoc3RyaW5nfG9iamVjdCl9IFtvcHRpb25zLnRyaWdnZXJFbGVtZW50PW51bGxdIC0gU2VsZWN0b3Igb3IgRE9NIG9iamVjdCB0aGF0IGRlZmluZXMgdGhlIHN0YXJ0IG9mIHRoZSBzY2VuZS4gSWYgdW5kZWZpbmVkIHRoZSBzY2VuZSB3aWxsIHN0YXJ0IHJpZ2h0IGF0IHRoZSBzdGFydCBvZiB0aGUgcGFnZSAodW5sZXNzIGFuIG9mZnNldCBpcyBzZXQpLlxyXG5cdCAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpfSBbb3B0aW9ucy50cmlnZ2VySG9vaz1cIm9uQ2VudGVyXCJdIC0gQ2FuIGJlIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMSBkZWZpbmluZyB0aGUgcG9zaXRpb24gb2YgdGhlIHRyaWdnZXIgSG9vayBpbiByZWxhdGlvbiB0byB0aGUgdmlld3BvcnQuICBcclxuXHQgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ICBDYW4gYWxzbyBiZSBkZWZpbmVkIHVzaW5nIGEgc3RyaW5nOlxyXG5cdCBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgICoqIGBcIm9uRW50ZXJcImAgPT4gYDFgXHJcblx0IFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCAgKiogYFwib25DZW50ZXJcImAgPT4gYDAuNWBcclxuXHQgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ICAqKiBgXCJvbkxlYXZlXCJgID0+IGAwYFxyXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmV2ZXJzZT10cnVlXSAtIFNob3VsZCB0aGUgc2NlbmUgcmV2ZXJzZSwgd2hlbiBzY3JvbGxpbmcgdXA/XHJcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxvZ2xldmVsPTJdIC0gTG9nbGV2ZWwgZm9yIGRlYnVnZ2luZy4gTm90ZSB0aGF0IGxvZ2dpbmcgaXMgZGlzYWJsZWQgaW4gdGhlIG1pbmlmaWVkIHZlcnNpb24gb2YgU2Nyb2xsTWFnaWMuXHJcblx0IFx0XHRcdFx0XHRcdFx0XHRcdFx0ICAqKiBgMGAgPT4gc2lsZW50XHJcblx0IFx0XHRcdFx0XHRcdFx0XHRcdFx0ICAqKiBgMWAgPT4gZXJyb3JzXHJcblx0IFx0XHRcdFx0XHRcdFx0XHRcdFx0ICAqKiBgMmAgPT4gZXJyb3JzLCB3YXJuaW5nc1xyXG5cdCBcdFx0XHRcdFx0XHRcdFx0XHRcdCAgKiogYDNgID0+IGVycm9ycywgd2FybmluZ3MsIGRlYnVnaW5mb1xyXG5cdCAqIFxyXG5cdCAqL1xyXG5cdFNjcm9sbE1hZ2ljLlNjZW5lID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHJcblx0XHQvKlxyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICogc2V0dGluZ3NcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqL1xyXG5cclxuXHRcdHZhclxyXG5cdFx0XHROQU1FU1BBQ0UgPSAnU2Nyb2xsTWFnaWMuU2NlbmUnLFxyXG5cdFx0XHRTQ0VORV9TVEFURV9CRUZPUkUgPSAnQkVGT1JFJyxcclxuXHRcdFx0U0NFTkVfU1RBVEVfRFVSSU5HID0gJ0RVUklORycsXHJcblx0XHRcdFNDRU5FX1NUQVRFX0FGVEVSID0gJ0FGVEVSJyxcclxuXHRcdFx0REVGQVVMVF9PUFRJT05TID0gU0NFTkVfT1BUSU9OUy5kZWZhdWx0cztcclxuXHJcblx0XHQvKlxyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICogcHJpdmF0ZSB2YXJzXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKi9cclxuXHJcblx0XHR2YXJcclxuXHRcdFx0U2NlbmUgPSB0aGlzLFxyXG5cdFx0XHRfb3B0aW9ucyA9IF91dGlsLmV4dGVuZCh7fSwgREVGQVVMVF9PUFRJT05TLCBvcHRpb25zKSxcclxuXHRcdFx0X3N0YXRlID0gU0NFTkVfU1RBVEVfQkVGT1JFLFxyXG5cdFx0XHRfcHJvZ3Jlc3MgPSAwLFxyXG5cdFx0XHRfc2Nyb2xsT2Zmc2V0ID0ge1xyXG5cdFx0XHRcdHN0YXJ0OiAwLFxyXG5cdFx0XHRcdGVuZDogMFxyXG5cdFx0XHR9LCAvLyByZWZsZWN0cyB0aGUgY29udHJvbGxlcnMncyBzY3JvbGwgcG9zaXRpb24gZm9yIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSBzY2VuZSByZXNwZWN0aXZlbHlcclxuXHRcdFx0X3RyaWdnZXJQb3MgPSAwLFxyXG5cdFx0XHRfZW5hYmxlZCA9IHRydWUsXHJcblx0XHRcdF9kdXJhdGlvblVwZGF0ZU1ldGhvZCxcclxuXHRcdFx0X2NvbnRyb2xsZXI7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBJbnRlcm5hbCBjb25zdHJ1Y3RvciBmdW5jdGlvbiBvZiB0aGUgU2Nyb2xsTWFnaWMgU2NlbmVcclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGZvciAodmFyIGtleSBpbiBfb3B0aW9ucykgeyAvLyBjaGVjayBzdXBwbGllZCBvcHRpb25zXHJcblx0XHRcdFx0aWYgKCFERUZBVUxUX09QVElPTlMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG5cdFx0XHRcdFx0bG9nKDIsIFwiV0FSTklORzogVW5rbm93biBvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiXCIpO1xyXG5cdFx0XHRcdFx0ZGVsZXRlIF9vcHRpb25zW2tleV07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdC8vIGFkZCBnZXR0ZXJzL3NldHRlcnMgZm9yIGFsbCBwb3NzaWJsZSBvcHRpb25zXHJcblx0XHRcdGZvciAodmFyIG9wdGlvbk5hbWUgaW4gREVGQVVMVF9PUFRJT05TKSB7XHJcblx0XHRcdFx0YWRkU2NlbmVPcHRpb24ob3B0aW9uTmFtZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gdmFsaWRhdGUgYWxsIG9wdGlvbnNcclxuXHRcdFx0dmFsaWRhdGVPcHRpb24oKTtcclxuXHRcdH07XHJcblxyXG5cdFx0LypcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqIEV2ZW50IE1hbmFnZW1lbnRcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqL1xyXG5cclxuXHRcdHZhciBfbGlzdGVuZXJzID0ge307XHJcblx0XHQvKipcclxuXHRcdCAqIFNjZW5lIHN0YXJ0IGV2ZW50LiAgXHJcblx0XHQgKiBGaXJlcyB3aGVuZXZlciB0aGUgc2Nyb2xsIHBvc2l0aW9uIGl0cyB0aGUgc3RhcnRpbmcgcG9pbnQgb2YgdGhlIHNjZW5lLiAgXHJcblx0XHQgKiBJdCB3aWxsIGFsc28gZmlyZSB3aGVuIHNjcm9sbGluZyBiYWNrIHVwIGdvaW5nIG92ZXIgdGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBzY2VuZS4gSWYgeW91IHdhbnQgc29tZXRoaW5nIHRvIGhhcHBlbiBvbmx5IHdoZW4gc2Nyb2xsaW5nIGRvd24vcmlnaHQsIHVzZSB0aGUgc2Nyb2xsRGlyZWN0aW9uIHBhcmFtZXRlciBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrLlxyXG5cdFx0ICpcclxuXHRcdCAqIEZvciBkZXRhaWxzIG9uIHRoaXMgZXZlbnQgYW5kIHRoZSBvcmRlciBpbiB3aGljaCBpdCBpcyBmaXJlZCwgcGxlYXNlIHJldmlldyB0aGUge0BsaW5rIFNjZW5lLnByb2dyZXNzfSBtZXRob2QuXHJcblx0XHQgKlxyXG5cdFx0ICogQGV2ZW50IFNjcm9sbE1hZ2ljLlNjZW5lI3N0YXJ0XHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIHNjZW5lLm9uKFwic3RhcnRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcblx0XHQgKiBcdGNvbnNvbGUubG9nKFwiSGl0IHN0YXJ0IHBvaW50IG9mIHNjZW5lLlwiKTtcclxuXHRcdCAqIH0pO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBldmVudCAtIFRoZSBldmVudCBPYmplY3QgcGFzc2VkIHRvIGVhY2ggY2FsbGJhY2tcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC50eXBlIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge1NjZW5lfSBldmVudC50YXJnZXQgLSBUaGUgU2NlbmUgb2JqZWN0IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBldmVudC5wcm9ncmVzcyAtIFJlZmxlY3RzIHRoZSBjdXJyZW50IHByb2dyZXNzIG9mIHRoZSBzY2VuZVxyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnN0YXRlIC0gVGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHNjZW5lIGBcIkJFRk9SRVwiYCBvciBgXCJEVVJJTkdcImBcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC5zY3JvbGxEaXJlY3Rpb24gLSBJbmRpY2F0ZXMgd2hpY2ggd2F5IHdlIGFyZSBzY3JvbGxpbmcgYFwiUEFVU0VEXCJgLCBgXCJGT1JXQVJEXCJgIG9yIGBcIlJFVkVSU0VcImBcclxuXHRcdCAqL1xyXG5cdFx0LyoqXHJcblx0XHQgKiBTY2VuZSBlbmQgZXZlbnQuICBcclxuXHRcdCAqIEZpcmVzIHdoZW5ldmVyIHRoZSBzY3JvbGwgcG9zaXRpb24gaXRzIHRoZSBlbmRpbmcgcG9pbnQgb2YgdGhlIHNjZW5lLiAgXHJcblx0XHQgKiBJdCB3aWxsIGFsc28gZmlyZSB3aGVuIHNjcm9sbGluZyBiYWNrIHVwIGZyb20gYWZ0ZXIgdGhlIHNjZW5lIGFuZCBnb2luZyBvdmVyIGl0cyBlbmQgcG9zaXRpb24uIElmIHlvdSB3YW50IHNvbWV0aGluZyB0byBoYXBwZW4gb25seSB3aGVuIHNjcm9sbGluZyBkb3duL3JpZ2h0LCB1c2UgdGhlIHNjcm9sbERpcmVjdGlvbiBwYXJhbWV0ZXIgcGFzc2VkIHRvIHRoZSBjYWxsYmFjay5cclxuXHRcdCAqXHJcblx0XHQgKiBGb3IgZGV0YWlscyBvbiB0aGlzIGV2ZW50IGFuZCB0aGUgb3JkZXIgaW4gd2hpY2ggaXQgaXMgZmlyZWQsIHBsZWFzZSByZXZpZXcgdGhlIHtAbGluayBTY2VuZS5wcm9ncmVzc30gbWV0aG9kLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBldmVudCBTY3JvbGxNYWdpYy5TY2VuZSNlbmRcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogc2NlbmUub24oXCJlbmRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcblx0XHQgKiBcdGNvbnNvbGUubG9nKFwiSGl0IGVuZCBwb2ludCBvZiBzY2VuZS5cIik7XHJcblx0XHQgKiB9KTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcHJvcGVydHkge29iamVjdH0gZXZlbnQgLSBUaGUgZXZlbnQgT2JqZWN0IHBhc3NlZCB0byBlYWNoIGNhbGxiYWNrXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQudHlwZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtTY2VuZX0gZXZlbnQudGFyZ2V0IC0gVGhlIFNjZW5lIG9iamVjdCB0aGF0IHRyaWdnZXJlZCB0aGlzIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge251bWJlcn0gZXZlbnQucHJvZ3Jlc3MgLSBSZWZsZWN0cyB0aGUgY3VycmVudCBwcm9ncmVzcyBvZiB0aGUgc2NlbmVcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC5zdGF0ZSAtIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBzY2VuZSBgXCJEVVJJTkdcImAgb3IgYFwiQUZURVJcImBcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC5zY3JvbGxEaXJlY3Rpb24gLSBJbmRpY2F0ZXMgd2hpY2ggd2F5IHdlIGFyZSBzY3JvbGxpbmcgYFwiUEFVU0VEXCJgLCBgXCJGT1JXQVJEXCJgIG9yIGBcIlJFVkVSU0VcImBcclxuXHRcdCAqL1xyXG5cdFx0LyoqXHJcblx0XHQgKiBTY2VuZSBlbnRlciBldmVudC4gIFxyXG5cdFx0ICogRmlyZXMgd2hlbmV2ZXIgdGhlIHNjZW5lIGVudGVycyB0aGUgXCJEVVJJTkdcIiBzdGF0ZS4gIFxyXG5cdFx0ICogS2VlcCBpbiBtaW5kIHRoYXQgaXQgZG9lc24ndCBtYXR0ZXIgaWYgdGhlIHNjZW5lIHBsYXlzIGZvcndhcmQgb3IgYmFja3dhcmQ6IFRoaXMgZXZlbnQgYWx3YXlzIGZpcmVzIHdoZW4gdGhlIHNjZW5lIGVudGVycyBpdHMgYWN0aXZlIHNjcm9sbCB0aW1lZnJhbWUsIHJlZ2FyZGxlc3Mgb2YgdGhlIHNjcm9sbC1kaXJlY3Rpb24uXHJcblx0XHQgKlxyXG5cdFx0ICogRm9yIGRldGFpbHMgb24gdGhpcyBldmVudCBhbmQgdGhlIG9yZGVyIGluIHdoaWNoIGl0IGlzIGZpcmVkLCBwbGVhc2UgcmV2aWV3IHRoZSB7QGxpbmsgU2NlbmUucHJvZ3Jlc3N9IG1ldGhvZC5cclxuXHRcdCAqXHJcblx0XHQgKiBAZXZlbnQgU2Nyb2xsTWFnaWMuU2NlbmUjZW50ZXJcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogc2NlbmUub24oXCJlbnRlclwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHRcdCAqIFx0Y29uc29sZS5sb2coXCJTY2VuZSBlbnRlcmVkLlwiKTtcclxuXHRcdCAqIH0pO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBldmVudCAtIFRoZSBldmVudCBPYmplY3QgcGFzc2VkIHRvIGVhY2ggY2FsbGJhY2tcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC50eXBlIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge1NjZW5lfSBldmVudC50YXJnZXQgLSBUaGUgU2NlbmUgb2JqZWN0IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBldmVudC5wcm9ncmVzcyAtIFJlZmxlY3RzIHRoZSBjdXJyZW50IHByb2dyZXNzIG9mIHRoZSBzY2VuZVxyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnN0YXRlIC0gVGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHNjZW5lIC0gYWx3YXlzIGBcIkRVUklOR1wiYFxyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnNjcm9sbERpcmVjdGlvbiAtIEluZGljYXRlcyB3aGljaCB3YXkgd2UgYXJlIHNjcm9sbGluZyBgXCJQQVVTRURcImAsIGBcIkZPUldBUkRcImAgb3IgYFwiUkVWRVJTRVwiYFxyXG5cdFx0ICovXHJcblx0XHQvKipcclxuXHRcdCAqIFNjZW5lIGxlYXZlIGV2ZW50LiAgXHJcblx0XHQgKiBGaXJlcyB3aGVuZXZlciB0aGUgc2NlbmUncyBzdGF0ZSBnb2VzIGZyb20gXCJEVVJJTkdcIiB0byBlaXRoZXIgXCJCRUZPUkVcIiBvciBcIkFGVEVSXCIuICBcclxuXHRcdCAqIEtlZXAgaW4gbWluZCB0aGF0IGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHRoZSBzY2VuZSBwbGF5cyBmb3J3YXJkIG9yIGJhY2t3YXJkOiBUaGlzIGV2ZW50IGFsd2F5cyBmaXJlcyB3aGVuIHRoZSBzY2VuZSBsZWF2ZXMgaXRzIGFjdGl2ZSBzY3JvbGwgdGltZWZyYW1lLCByZWdhcmRsZXNzIG9mIHRoZSBzY3JvbGwtZGlyZWN0aW9uLlxyXG5cdFx0ICpcclxuXHRcdCAqIEZvciBkZXRhaWxzIG9uIHRoaXMgZXZlbnQgYW5kIHRoZSBvcmRlciBpbiB3aGljaCBpdCBpcyBmaXJlZCwgcGxlYXNlIHJldmlldyB0aGUge0BsaW5rIFNjZW5lLnByb2dyZXNzfSBtZXRob2QuXHJcblx0XHQgKlxyXG5cdFx0ICogQGV2ZW50IFNjcm9sbE1hZ2ljLlNjZW5lI2xlYXZlXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIHNjZW5lLm9uKFwibGVhdmVcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcblx0XHQgKiBcdGNvbnNvbGUubG9nKFwiU2NlbmUgbGVmdC5cIik7XHJcblx0XHQgKiB9KTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcHJvcGVydHkge29iamVjdH0gZXZlbnQgLSBUaGUgZXZlbnQgT2JqZWN0IHBhc3NlZCB0byBlYWNoIGNhbGxiYWNrXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQudHlwZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtTY2VuZX0gZXZlbnQudGFyZ2V0IC0gVGhlIFNjZW5lIG9iamVjdCB0aGF0IHRyaWdnZXJlZCB0aGlzIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge251bWJlcn0gZXZlbnQucHJvZ3Jlc3MgLSBSZWZsZWN0cyB0aGUgY3VycmVudCBwcm9ncmVzcyBvZiB0aGUgc2NlbmVcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC5zdGF0ZSAtIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBzY2VuZSBgXCJCRUZPUkVcImAgb3IgYFwiQUZURVJcImBcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC5zY3JvbGxEaXJlY3Rpb24gLSBJbmRpY2F0ZXMgd2hpY2ggd2F5IHdlIGFyZSBzY3JvbGxpbmcgYFwiUEFVU0VEXCJgLCBgXCJGT1JXQVJEXCJgIG9yIGBcIlJFVkVSU0VcImBcclxuXHRcdCAqL1xyXG5cdFx0LyoqXHJcblx0XHQgKiBTY2VuZSB1cGRhdGUgZXZlbnQuICBcclxuXHRcdCAqIEZpcmVzIHdoZW5ldmVyIHRoZSBzY2VuZSBpcyB1cGRhdGVkIChidXQgbm90IG5lY2Vzc2FyaWx5IGNoYW5nZXMgdGhlIHByb2dyZXNzKS5cclxuXHRcdCAqXHJcblx0XHQgKiBAZXZlbnQgU2Nyb2xsTWFnaWMuU2NlbmUjdXBkYXRlXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIHNjZW5lLm9uKFwidXBkYXRlXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cdFx0ICogXHRjb25zb2xlLmxvZyhcIlNjZW5lIHVwZGF0ZWQuXCIpO1xyXG5cdFx0ICogfSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHByb3BlcnR5IHtvYmplY3R9IGV2ZW50IC0gVGhlIGV2ZW50IE9iamVjdCBwYXNzZWQgdG8gZWFjaCBjYWxsYmFja1xyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnR5cGUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7U2NlbmV9IGV2ZW50LnRhcmdldCAtIFRoZSBTY2VuZSBvYmplY3QgdGhhdCB0cmlnZ2VyZWQgdGhpcyBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtudW1iZXJ9IGV2ZW50LnN0YXJ0UG9zIC0gVGhlIHN0YXJ0aW5nIHBvc2l0aW9uIG9mIHRoZSBzY2VuZSAoaW4gcmVsYXRpb24gdG8gdGhlIGNvbmFpbmVyKVxyXG5cdFx0ICogQHByb3BlcnR5IHtudW1iZXJ9IGV2ZW50LmVuZFBvcyAtIFRoZSBlbmRpbmcgcG9zaXRpb24gb2YgdGhlIHNjZW5lIChpbiByZWxhdGlvbiB0byB0aGUgY29uYWluZXIpXHJcblx0XHQgKiBAcHJvcGVydHkge251bWJlcn0gZXZlbnQuc2Nyb2xsUG9zIC0gVGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBjb250YWluZXJcclxuXHRcdCAqL1xyXG5cdFx0LyoqXHJcblx0XHQgKiBTY2VuZSBwcm9ncmVzcyBldmVudC4gIFxyXG5cdFx0ICogRmlyZXMgd2hlbmV2ZXIgdGhlIHByb2dyZXNzIG9mIHRoZSBzY2VuZSBjaGFuZ2VzLlxyXG5cdFx0ICpcclxuXHRcdCAqIEZvciBkZXRhaWxzIG9uIHRoaXMgZXZlbnQgYW5kIHRoZSBvcmRlciBpbiB3aGljaCBpdCBpcyBmaXJlZCwgcGxlYXNlIHJldmlldyB0aGUge0BsaW5rIFNjZW5lLnByb2dyZXNzfSBtZXRob2QuXHJcblx0XHQgKlxyXG5cdFx0ICogQGV2ZW50IFNjcm9sbE1hZ2ljLlNjZW5lI3Byb2dyZXNzXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIHNjZW5lLm9uKFwicHJvZ3Jlc3NcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcblx0XHQgKiBcdGNvbnNvbGUubG9nKFwiU2NlbmUgcHJvZ3Jlc3MgY2hhbmdlZCB0byBcIiArIGV2ZW50LnByb2dyZXNzKTtcclxuXHRcdCAqIH0pO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBldmVudCAtIFRoZSBldmVudCBPYmplY3QgcGFzc2VkIHRvIGVhY2ggY2FsbGJhY2tcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC50eXBlIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge1NjZW5lfSBldmVudC50YXJnZXQgLSBUaGUgU2NlbmUgb2JqZWN0IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBldmVudC5wcm9ncmVzcyAtIFJlZmxlY3RzIHRoZSBjdXJyZW50IHByb2dyZXNzIG9mIHRoZSBzY2VuZVxyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnN0YXRlIC0gVGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHNjZW5lIGBcIkJFRk9SRVwiYCwgYFwiRFVSSU5HXCJgIG9yIGBcIkFGVEVSXCJgXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQuc2Nyb2xsRGlyZWN0aW9uIC0gSW5kaWNhdGVzIHdoaWNoIHdheSB3ZSBhcmUgc2Nyb2xsaW5nIGBcIlBBVVNFRFwiYCwgYFwiRk9SV0FSRFwiYCBvciBgXCJSRVZFUlNFXCJgXHJcblx0XHQgKi9cclxuXHRcdC8qKlxyXG5cdFx0ICogU2NlbmUgY2hhbmdlIGV2ZW50LiAgXHJcblx0XHQgKiBGaXJlcyB3aGVudmV2ZXIgYSBwcm9wZXJ0eSBvZiB0aGUgc2NlbmUgaXMgY2hhbmdlZC5cclxuXHRcdCAqXHJcblx0XHQgKiBAZXZlbnQgU2Nyb2xsTWFnaWMuU2NlbmUjY2hhbmdlXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIHNjZW5lLm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cdFx0ICogXHRjb25zb2xlLmxvZyhcIlNjZW5lIFByb3BlcnR5IFxcXCJcIiArIGV2ZW50LndoYXQgKyBcIlxcXCIgY2hhbmdlZCB0byBcIiArIGV2ZW50Lm5ld3ZhbCk7XHJcblx0XHQgKiB9KTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcHJvcGVydHkge29iamVjdH0gZXZlbnQgLSBUaGUgZXZlbnQgT2JqZWN0IHBhc3NlZCB0byBlYWNoIGNhbGxiYWNrXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQudHlwZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtTY2VuZX0gZXZlbnQudGFyZ2V0IC0gVGhlIFNjZW5lIG9iamVjdCB0aGF0IHRyaWdnZXJlZCB0aGlzIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQud2hhdCAtIEluZGljYXRlcyB3aGF0IHZhbHVlIGhhcyBiZWVuIGNoYW5nZWRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7bWl4ZWR9IGV2ZW50Lm5ld3ZhbCAtIFRoZSBuZXcgdmFsdWUgb2YgdGhlIGNoYW5nZWQgcHJvcGVydHlcclxuXHRcdCAqL1xyXG5cdFx0LyoqXHJcblx0XHQgKiBTY2VuZSBzaGlmdCBldmVudC4gIFxyXG5cdFx0ICogRmlyZXMgd2hlbnZldmVyIHRoZSBzdGFydCBvciBlbmQgKipzY3JvbGwgb2Zmc2V0Kiogb2YgdGhlIHNjZW5lIGNoYW5nZS5cclxuXHRcdCAqIFRoaXMgaGFwcGVucyBleHBsaWNpdGVseSwgd2hlbiBvbmUgb2YgdGhlc2UgdmFsdWVzIGNoYW5nZTogYG9mZnNldGAsIGBkdXJhdGlvbmAgb3IgYHRyaWdnZXJIb29rYC5cclxuXHRcdCAqIEl0IHdpbGwgZmlyZSBpbXBsaWNpdGx5IHdoZW4gdGhlIGB0cmlnZ2VyRWxlbWVudGAgY2hhbmdlcywgaWYgdGhlIG5ldyBlbGVtZW50IGhhcyBhIGRpZmZlcmVudCBwb3NpdGlvbiAobW9zdCBjYXNlcykuXHJcblx0XHQgKiBJdCB3aWxsIGFsc28gZmlyZSBpbXBsaWNpdGx5IHdoZW4gdGhlIHNpemUgb2YgdGhlIGNvbnRhaW5lciBjaGFuZ2VzIGFuZCB0aGUgdHJpZ2dlckhvb2sgaXMgYW55dGhpbmcgb3RoZXIgdGhhbiBgb25MZWF2ZWAuXHJcblx0XHQgKlxyXG5cdFx0ICogQGV2ZW50IFNjcm9sbE1hZ2ljLlNjZW5lI3NoaWZ0XHJcblx0XHQgKiBAc2luY2UgMS4xLjBcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogc2NlbmUub24oXCJzaGlmdFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHRcdCAqIFx0Y29uc29sZS5sb2coXCJTY2VuZSBtb3ZlZCwgYmVjYXVzZSB0aGUgXCIgKyBldmVudC5yZWFzb24gKyBcIiBoYXMgY2hhbmdlZC4pXCIpO1xyXG5cdFx0ICogfSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHByb3BlcnR5IHtvYmplY3R9IGV2ZW50IC0gVGhlIGV2ZW50IE9iamVjdCBwYXNzZWQgdG8gZWFjaCBjYWxsYmFja1xyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnR5cGUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7U2NlbmV9IGV2ZW50LnRhcmdldCAtIFRoZSBTY2VuZSBvYmplY3QgdGhhdCB0cmlnZ2VyZWQgdGhpcyBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnJlYXNvbiAtIEluZGljYXRlcyB3aHkgdGhlIHNjZW5lIGhhcyBzaGlmdGVkXHJcblx0XHQgKi9cclxuXHRcdC8qKlxyXG5cdFx0ICogU2NlbmUgZGVzdHJveSBldmVudC4gIFxyXG5cdFx0ICogRmlyZXMgd2hlbnZldmVyIHRoZSBzY2VuZSBpcyBkZXN0cm95ZWQuXHJcblx0XHQgKiBUaGlzIGNhbiBiZSB1c2VkIHRvIHRpZHkgdXAgY3VzdG9tIGJlaGF2aW91ciB1c2VkIGluIGV2ZW50cy5cclxuXHRcdCAqXHJcblx0XHQgKiBAZXZlbnQgU2Nyb2xsTWFnaWMuU2NlbmUjZGVzdHJveVxyXG5cdFx0ICogQHNpbmNlIDEuMS4wXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIHNjZW5lLm9uKFwiZW50ZXJcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcblx0XHQgKiAgICAgICAgLy8gYWRkIGN1c3RvbSBhY3Rpb25cclxuXHRcdCAqICAgICAgICAkKFwiI215LWVsZW1cIikubGVmdChcIjIwMFwiKTtcclxuXHRcdCAqICAgICAgfSlcclxuXHRcdCAqICAgICAgLm9uKFwiZGVzdHJveVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHRcdCAqICAgICAgICAvLyByZXNldCBteSBlbGVtZW50IHRvIHN0YXJ0IHBvc2l0aW9uXHJcblx0XHQgKiAgICAgICAgaWYgKGV2ZW50LnJlc2V0KSB7XHJcblx0XHQgKiAgICAgICAgICAkKFwiI215LWVsZW1cIikubGVmdChcIjBcIik7XHJcblx0XHQgKiAgICAgICAgfVxyXG5cdFx0ICogICAgICB9KTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcHJvcGVydHkge29iamVjdH0gZXZlbnQgLSBUaGUgZXZlbnQgT2JqZWN0IHBhc3NlZCB0byBlYWNoIGNhbGxiYWNrXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQudHlwZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtTY2VuZX0gZXZlbnQudGFyZ2V0IC0gVGhlIFNjZW5lIG9iamVjdCB0aGF0IHRyaWdnZXJlZCB0aGlzIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge2Jvb2xlYW59IGV2ZW50LnJlc2V0IC0gSW5kaWNhdGVzIGlmIHRoZSBkZXN0cm95IG1ldGhvZCB3YXMgY2FsbGVkIHdpdGggcmVzZXQgYHRydWVgIG9yIGBmYWxzZWAuXHJcblx0XHQgKi9cclxuXHRcdC8qKlxyXG5cdFx0ICogU2NlbmUgYWRkIGV2ZW50LiAgXHJcblx0XHQgKiBGaXJlcyB3aGVuIHRoZSBzY2VuZSBpcyBhZGRlZCB0byBhIGNvbnRyb2xsZXIuXHJcblx0XHQgKiBUaGlzIGlzIG1vc3RseSB1c2VkIGJ5IHBsdWdpbnMgdG8ga25vdyB0aGF0IGNoYW5nZSBtaWdodCBiZSBkdWUuXHJcblx0XHQgKlxyXG5cdFx0ICogQGV2ZW50IFNjcm9sbE1hZ2ljLlNjZW5lI2FkZFxyXG5cdFx0ICogQHNpbmNlIDIuMC4wXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIHNjZW5lLm9uKFwiYWRkXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cdFx0ICogXHRjb25zb2xlLmxvZygnU2NlbmUgd2FzIGFkZGVkIHRvIGEgbmV3IGNvbnRyb2xsZXIuJyk7XHJcblx0XHQgKiB9KTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcHJvcGVydHkge29iamVjdH0gZXZlbnQgLSBUaGUgZXZlbnQgT2JqZWN0IHBhc3NlZCB0byBlYWNoIGNhbGxiYWNrXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQudHlwZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtTY2VuZX0gZXZlbnQudGFyZ2V0IC0gVGhlIFNjZW5lIG9iamVjdCB0aGF0IHRyaWdnZXJlZCB0aGlzIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge2Jvb2xlYW59IGV2ZW50LmNvbnRyb2xsZXIgLSBUaGUgY29udHJvbGxlciBvYmplY3QgdGhlIHNjZW5lIHdhcyBhZGRlZCB0by5cclxuXHRcdCAqL1xyXG5cdFx0LyoqXHJcblx0XHQgKiBTY2VuZSByZW1vdmUgZXZlbnQuICBcclxuXHRcdCAqIEZpcmVzIHdoZW4gdGhlIHNjZW5lIGlzIHJlbW92ZWQgZnJvbSBhIGNvbnRyb2xsZXIuXHJcblx0XHQgKiBUaGlzIGlzIG1vc3RseSB1c2VkIGJ5IHBsdWdpbnMgdG8ga25vdyB0aGF0IGNoYW5nZSBtaWdodCBiZSBkdWUuXHJcblx0XHQgKlxyXG5cdFx0ICogQGV2ZW50IFNjcm9sbE1hZ2ljLlNjZW5lI3JlbW92ZVxyXG5cdFx0ICogQHNpbmNlIDIuMC4wXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIHNjZW5lLm9uKFwicmVtb3ZlXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cdFx0ICogXHRjb25zb2xlLmxvZygnU2NlbmUgd2FzIHJlbW92ZWQgZnJvbSBpdHMgY29udHJvbGxlci4nKTtcclxuXHRcdCAqIH0pO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBldmVudCAtIFRoZSBldmVudCBPYmplY3QgcGFzc2VkIHRvIGVhY2ggY2FsbGJhY2tcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC50eXBlIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge1NjZW5lfSBldmVudC50YXJnZXQgLSBUaGUgU2NlbmUgb2JqZWN0IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZXZlbnRcclxuXHRcdCAqL1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQWRkIG9uZSBvcmUgbW9yZSBldmVudCBsaXN0ZW5lci4gIFxyXG5cdFx0ICogVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdpbGwgYmUgZmlyZWQgYXQgdGhlIHJlc3BlY3RpdmUgZXZlbnQsIGFuZCBhbiBvYmplY3QgY29udGFpbmluZyByZWxldmFudCBkYXRhIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBjYWxsYmFjay5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjb25cclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogZnVuY3Rpb24gY2FsbGJhY2sgKGV2ZW50KSB7XHJcblx0XHQgKiBcdFx0Y29uc29sZS5sb2coXCJFdmVudCBmaXJlZCEgKFwiICsgZXZlbnQudHlwZSArIFwiKVwiKTtcclxuXHRcdCAqIH1cclxuXHRcdCAqIC8vIGFkZCBsaXN0ZW5lcnNcclxuXHRcdCAqIHNjZW5lLm9uKFwiY2hhbmdlIHVwZGF0ZSBwcm9ncmVzcyBzdGFydCBlbmQgZW50ZXIgbGVhdmVcIiwgY2FsbGJhY2spO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lcyAtIFRoZSBuYW1lIG9yIG5hbWVzIG9mIHRoZSBldmVudCB0aGUgY2FsbGJhY2sgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxyXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBBIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGV4ZWN1dGVkLCB3aGVuIHRoZSBldmVudCBpcyBkaXNwYXRjaGVkLiBBbiBldmVudCBvYmplY3Qgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrLlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5vbiA9IGZ1bmN0aW9uIChuYW1lcywgY2FsbGJhY2spIHtcclxuXHRcdFx0aWYgKF91dGlsLnR5cGUuRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcblx0XHRcdFx0bmFtZXMgPSBuYW1lcy50cmltKCkuc3BsaXQoJyAnKTtcclxuXHRcdFx0XHRuYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChmdWxsbmFtZSkge1xyXG5cdFx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRcdG5hbWVwYXJ0cyA9IGZ1bGxuYW1lLnNwbGl0KCcuJyksXHJcblx0XHRcdFx0XHRcdGV2ZW50bmFtZSA9IG5hbWVwYXJ0c1swXSxcclxuXHRcdFx0XHRcdFx0bmFtZXNwYWNlID0gbmFtZXBhcnRzWzFdO1xyXG5cdFx0XHRcdFx0aWYgKGV2ZW50bmFtZSAhPSBcIipcIikgeyAvLyBkaXNhbGxvdyB3aWxkY2FyZHNcclxuXHRcdFx0XHRcdFx0aWYgKCFfbGlzdGVuZXJzW2V2ZW50bmFtZV0pIHtcclxuXHRcdFx0XHRcdFx0XHRfbGlzdGVuZXJzW2V2ZW50bmFtZV0gPSBbXTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRfbGlzdGVuZXJzW2V2ZW50bmFtZV0ucHVzaCh7XHJcblx0XHRcdFx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2UgfHwgJycsXHJcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2s6IGNhbGxiYWNrXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGxvZygxLCBcIkVSUk9SIHdoZW4gY2FsbGluZyAnLm9uKCknOiBTdXBwbGllZCBjYWxsYmFjayBmb3IgJ1wiICsgbmFtZXMgKyBcIicgaXMgbm90IGEgdmFsaWQgZnVuY3Rpb24hXCIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBTY2VuZTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBSZW1vdmUgb25lIG9yIG1vcmUgZXZlbnQgbGlzdGVuZXIuXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI29mZlxyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiBmdW5jdGlvbiBjYWxsYmFjayAoZXZlbnQpIHtcclxuXHRcdCAqIFx0XHRjb25zb2xlLmxvZyhcIkV2ZW50IGZpcmVkISAoXCIgKyBldmVudC50eXBlICsgXCIpXCIpO1xyXG5cdFx0ICogfVxyXG5cdFx0ICogLy8gYWRkIGxpc3RlbmVyc1xyXG5cdFx0ICogc2NlbmUub24oXCJjaGFuZ2UgdXBkYXRlXCIsIGNhbGxiYWNrKTtcclxuXHRcdCAqIC8vIHJlbW92ZSBsaXN0ZW5lcnNcclxuXHRcdCAqIHNjZW5lLm9mZihcImNoYW5nZSB1cGRhdGVcIiwgY2FsbGJhY2spO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lcyAtIFRoZSBuYW1lIG9yIG5hbWVzIG9mIHRoZSBldmVudCB0aGF0IHNob3VsZCBiZSByZW1vdmVkLlxyXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEEgc3BlY2lmaWMgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgcmVtb3ZlZC4gSWYgbm9uZSBpcyBwYXNzZWQgYWxsIGNhbGxiYWNrcyB0byB0aGUgZXZlbnQgbGlzdGVuZXIgd2lsbCBiZSByZW1vdmVkLlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5vZmYgPSBmdW5jdGlvbiAobmFtZXMsIGNhbGxiYWNrKSB7XHJcblx0XHRcdGlmICghbmFtZXMpIHtcclxuXHRcdFx0XHRsb2coMSwgXCJFUlJPUjogSW52YWxpZCBldmVudCBuYW1lIHN1cHBsaWVkLlwiKTtcclxuXHRcdFx0XHRyZXR1cm4gU2NlbmU7XHJcblx0XHRcdH1cclxuXHRcdFx0bmFtZXMgPSBuYW1lcy50cmltKCkuc3BsaXQoJyAnKTtcclxuXHRcdFx0bmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoZnVsbG5hbWUsIGtleSkge1xyXG5cdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0bmFtZXBhcnRzID0gZnVsbG5hbWUuc3BsaXQoJy4nKSxcclxuXHRcdFx0XHRcdGV2ZW50bmFtZSA9IG5hbWVwYXJ0c1swXSxcclxuXHRcdFx0XHRcdG5hbWVzcGFjZSA9IG5hbWVwYXJ0c1sxXSB8fCAnJyxcclxuXHRcdFx0XHRcdHJlbW92ZUxpc3QgPSBldmVudG5hbWUgPT09ICcqJyA/IE9iamVjdC5rZXlzKF9saXN0ZW5lcnMpIDogW2V2ZW50bmFtZV07XHJcblx0XHRcdFx0cmVtb3ZlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChyZW1vdmUpIHtcclxuXHRcdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0XHRsaXN0ID0gX2xpc3RlbmVyc1tyZW1vdmVdIHx8IFtdLFxyXG5cdFx0XHRcdFx0XHRpID0gbGlzdC5sZW5ndGg7XHJcblx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XHJcblx0XHRcdFx0XHRcdHZhciBsaXN0ZW5lciA9IGxpc3RbaV07XHJcblx0XHRcdFx0XHRcdGlmIChsaXN0ZW5lciAmJiAobmFtZXNwYWNlID09PSBsaXN0ZW5lci5uYW1lc3BhY2UgfHwgbmFtZXNwYWNlID09PSAnKicpICYmICghY2FsbGJhY2sgfHwgY2FsbGJhY2sgPT0gbGlzdGVuZXIuY2FsbGJhY2spKSB7XHJcblx0XHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoaSwgMSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICghbGlzdC5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdFx0ZGVsZXRlIF9saXN0ZW5lcnNbcmVtb3ZlXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdHJldHVybiBTY2VuZTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBUcmlnZ2VyIGFuIGV2ZW50LlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSN0cmlnZ2VyXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIHRoaXMudHJpZ2dlcihcImNoYW5nZVwiKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0aGF0IHNob3VsZCBiZSB0cmlnZ2VyZWQuXHJcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gW3ZhcnNdIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgaW5mbyB0aGF0IHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrLlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy50cmlnZ2VyID0gZnVuY3Rpb24gKG5hbWUsIHZhcnMpIHtcclxuXHRcdFx0aWYgKG5hbWUpIHtcclxuXHRcdFx0XHR2YXJcclxuXHRcdFx0XHRcdG5hbWVwYXJ0cyA9IG5hbWUudHJpbSgpLnNwbGl0KCcuJyksXHJcblx0XHRcdFx0XHRldmVudG5hbWUgPSBuYW1lcGFydHNbMF0sXHJcblx0XHRcdFx0XHRuYW1lc3BhY2UgPSBuYW1lcGFydHNbMV0sXHJcblx0XHRcdFx0XHRsaXN0ZW5lcnMgPSBfbGlzdGVuZXJzW2V2ZW50bmFtZV07XHJcblx0XHRcdFx0bG9nKDMsICdldmVudCBmaXJlZDonLCBldmVudG5hbWUsIHZhcnMgPyBcIi0+XCIgOiAnJywgdmFycyB8fCAnJyk7XHJcblx0XHRcdFx0aWYgKGxpc3RlbmVycykge1xyXG5cdFx0XHRcdFx0bGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyLCBrZXkpIHtcclxuXHRcdFx0XHRcdFx0aWYgKCFuYW1lc3BhY2UgfHwgbmFtZXNwYWNlID09PSBsaXN0ZW5lci5uYW1lc3BhY2UpIHtcclxuXHRcdFx0XHRcdFx0XHRsaXN0ZW5lci5jYWxsYmFjay5jYWxsKFNjZW5lLCBuZXcgU2Nyb2xsTWFnaWMuRXZlbnQoZXZlbnRuYW1lLCBsaXN0ZW5lci5uYW1lc3BhY2UsIFNjZW5lLCB2YXJzKSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRsb2coMSwgXCJFUlJPUjogSW52YWxpZCBldmVudCBuYW1lIHN1cHBsaWVkLlwiKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gU2NlbmU7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIHNldCBldmVudCBsaXN0ZW5lcnNcclxuXHRcdFNjZW5lXHJcblx0XHRcdC5vbihcImNoYW5nZS5pbnRlcm5hbFwiLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdGlmIChlLndoYXQgIT09IFwibG9nbGV2ZWxcIiAmJiBlLndoYXQgIT09IFwidHdlZW5DaGFuZ2VzXCIpIHsgLy8gbm8gbmVlZCBmb3IgYSBzY2VuZSB1cGRhdGUgc2NlbmUgd2l0aCB0aGVzZSBvcHRpb25zLi4uXHJcblx0XHRcdFx0XHRpZiAoZS53aGF0ID09PSBcInRyaWdnZXJFbGVtZW50XCIpIHtcclxuXHRcdFx0XHRcdFx0dXBkYXRlVHJpZ2dlckVsZW1lbnRQb3NpdGlvbigpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChlLndoYXQgPT09IFwicmV2ZXJzZVwiKSB7IC8vIHRoZSBvbmx5IHByb3BlcnR5IGxlZnQgdGhhdCBtYXkgaGF2ZSBhbiBpbXBhY3Qgb24gdGhlIGN1cnJlbnQgc2NlbmUgc3RhdGUuIEV2ZXJ5dGhpbmcgZWxzZSBpcyBoYW5kbGVkIGJ5IHRoZSBzaGlmdCBldmVudC5cclxuXHRcdFx0XHRcdFx0U2NlbmUudXBkYXRlKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0XHQub24oXCJzaGlmdC5pbnRlcm5hbFwiLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdHVwZGF0ZVNjcm9sbE9mZnNldCgpO1xyXG5cdFx0XHRcdFNjZW5lLnVwZGF0ZSgpOyAvLyB1cGRhdGUgc2NlbmUgdG8gcmVmbGVjdCBuZXcgcG9zaXRpb25cclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBTZW5kIGEgZGVidWcgbWVzc2FnZSB0byB0aGUgY29uc29sZS5cclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKiBidXQgcHJvdmlkZWQgcHVibGljbHkgd2l0aCBfbG9nIGZvciBwbHVnaW5zXHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IGxvZ2xldmVsIC0gVGhlIGxvZ2xldmVsIHJlcXVpcmVkIHRvIGluaXRpYXRlIG91dHB1dCBmb3IgdGhlIG1lc3NhZ2UuXHJcblx0XHQgKiBAcGFyYW0gey4uLm1peGVkfSBvdXRwdXQgLSBPbmUgb3IgbW9yZSB2YXJpYWJsZXMgdGhhdCBzaG91bGQgYmUgcGFzc2VkIHRvIHRoZSBjb25zb2xlLlxyXG5cdFx0ICovXHJcblx0XHR2YXIgbG9nID0gdGhpcy5fbG9nID0gZnVuY3Rpb24gKGxvZ2xldmVsLCBvdXRwdXQpIHtcclxuXHRcdFx0aWYgKF9vcHRpb25zLmxvZ2xldmVsID49IGxvZ2xldmVsKSB7XHJcblx0XHRcdFx0QXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGFyZ3VtZW50cywgMSwgMCwgXCIoXCIgKyBOQU1FU1BBQ0UgKyBcIikgLT5cIik7XHJcblx0XHRcdFx0X3V0aWwubG9nLmFwcGx5KHdpbmRvdywgYXJndW1lbnRzKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFkZCB0aGUgc2NlbmUgdG8gYSBjb250cm9sbGVyLiAgXHJcblx0XHQgKiBUaGlzIGlzIHRoZSBlcXVpdmFsZW50IHRvIGBDb250cm9sbGVyLmFkZFNjZW5lKHNjZW5lKWAuXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI2FkZFRvXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGFkZCBhIHNjZW5lIHRvIGEgU2Nyb2xsTWFnaWMgQ29udHJvbGxlclxyXG5cdFx0ICogc2NlbmUuYWRkVG8oY29udHJvbGxlcik7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtTY3JvbGxNYWdpYy5Db250cm9sbGVyfSBjb250cm9sbGVyIC0gVGhlIGNvbnRyb2xsZXIgdG8gd2hpY2ggdGhlIHNjZW5lIHNob3VsZCBiZSBhZGRlZC5cclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuYWRkVG8gPSBmdW5jdGlvbiAoY29udHJvbGxlcikge1xyXG5cdFx0XHRpZiAoIShjb250cm9sbGVyIGluc3RhbmNlb2YgU2Nyb2xsTWFnaWMuQ29udHJvbGxlcikpIHtcclxuXHRcdFx0XHRsb2coMSwgXCJFUlJPUjogc3VwcGxpZWQgYXJndW1lbnQgb2YgJ2FkZFRvKCknIGlzIG5vdCBhIHZhbGlkIFNjcm9sbE1hZ2ljIENvbnRyb2xsZXJcIik7XHJcblx0XHRcdH0gZWxzZSBpZiAoX2NvbnRyb2xsZXIgIT0gY29udHJvbGxlcikge1xyXG5cdFx0XHRcdC8vIG5ldyBjb250cm9sbGVyXHJcblx0XHRcdFx0aWYgKF9jb250cm9sbGVyKSB7IC8vIHdhcyBhc3NvY2lhdGVkIHRvIGEgZGlmZmVyZW50IGNvbnRyb2xsZXIgYmVmb3JlLCBzbyByZW1vdmUgaXQuLi5cclxuXHRcdFx0XHRcdF9jb250cm9sbGVyLnJlbW92ZVNjZW5lKFNjZW5lKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0X2NvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xyXG5cdFx0XHRcdHZhbGlkYXRlT3B0aW9uKCk7XHJcblx0XHRcdFx0dXBkYXRlRHVyYXRpb24odHJ1ZSk7XHJcblx0XHRcdFx0dXBkYXRlVHJpZ2dlckVsZW1lbnRQb3NpdGlvbih0cnVlKTtcclxuXHRcdFx0XHR1cGRhdGVTY3JvbGxPZmZzZXQoKTtcclxuXHRcdFx0XHRfY29udHJvbGxlci5pbmZvKFwiY29udGFpbmVyXCIpLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uQ29udGFpbmVyUmVzaXplKTtcclxuXHRcdFx0XHRjb250cm9sbGVyLmFkZFNjZW5lKFNjZW5lKTtcclxuXHRcdFx0XHRTY2VuZS50cmlnZ2VyKFwiYWRkXCIsIHtcclxuXHRcdFx0XHRcdGNvbnRyb2xsZXI6IF9jb250cm9sbGVyXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0bG9nKDMsIFwiYWRkZWQgXCIgKyBOQU1FU1BBQ0UgKyBcIiB0byBjb250cm9sbGVyXCIpO1xyXG5cdFx0XHRcdFNjZW5lLnVwZGF0ZSgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBTY2VuZTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAqKkdldCoqIG9yICoqU2V0KiogdGhlIGN1cnJlbnQgZW5hYmxlZCBzdGF0ZSBvZiB0aGUgc2NlbmUuICBcclxuXHRcdCAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gZGlzYWJsZSB0aGlzIHNjZW5lIHdpdGhvdXQgcmVtb3Zpbmcgb3IgZGVzdHJveWluZyBpdC5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjZW5hYmxlZFxyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBnZXQgdGhlIGN1cnJlbnQgdmFsdWVcclxuXHRcdCAqIHZhciBlbmFibGVkID0gc2NlbmUuZW5hYmxlZCgpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIGRpc2FibGUgdGhlIHNjZW5lXHJcblx0XHQgKiBzY2VuZS5lbmFibGVkKGZhbHNlKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtuZXdTdGF0ZV0gLSBUaGUgbmV3IGVuYWJsZWQgc3RhdGUgb2YgdGhlIHNjZW5lIGB0cnVlYCBvciBgZmFsc2VgLlxyXG5cdFx0ICogQHJldHVybnMgeyhib29sZWFufFNjZW5lKX0gQ3VycmVudCBlbmFibGVkIHN0YXRlIG9yIHBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLmVuYWJsZWQgPSBmdW5jdGlvbiAobmV3U3RhdGUpIHtcclxuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7IC8vIGdldFxyXG5cdFx0XHRcdHJldHVybiBfZW5hYmxlZDtcclxuXHRcdFx0fSBlbHNlIGlmIChfZW5hYmxlZCAhPSBuZXdTdGF0ZSkgeyAvLyBzZXRcclxuXHRcdFx0XHRfZW5hYmxlZCA9ICEhbmV3U3RhdGU7XHJcblx0XHRcdFx0U2NlbmUudXBkYXRlKHRydWUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBTY2VuZTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBSZW1vdmUgdGhlIHNjZW5lIGZyb20gdGhlIGNvbnRyb2xsZXIuICBcclxuXHRcdCAqIFRoaXMgaXMgdGhlIGVxdWl2YWxlbnQgdG8gYENvbnRyb2xsZXIucmVtb3ZlU2NlbmUoc2NlbmUpYC5cclxuXHRcdCAqIFRoZSBzY2VuZSB3aWxsIG5vdCBiZSB1cGRhdGVkIGFueW1vcmUgdW50aWwgeW91IHJlYWRkIGl0IHRvIGEgY29udHJvbGxlci5cclxuXHRcdCAqIFRvIHJlbW92ZSB0aGUgcGluIG9yIHRoZSB0d2VlbiB5b3UgbmVlZCB0byBjYWxsIHJlbW92ZVR3ZWVuKCkgb3IgcmVtb3ZlUGluKCkgcmVzcGVjdGl2ZWx5LlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNyZW1vdmVcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyByZW1vdmUgdGhlIHNjZW5lIGZyb20gaXRzIGNvbnRyb2xsZXJcclxuXHRcdCAqIHNjZW5lLnJlbW92ZSgpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRpZiAoX2NvbnRyb2xsZXIpIHtcclxuXHRcdFx0XHRfY29udHJvbGxlci5pbmZvKFwiY29udGFpbmVyXCIpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uQ29udGFpbmVyUmVzaXplKTtcclxuXHRcdFx0XHR2YXIgdG1wUGFyZW50ID0gX2NvbnRyb2xsZXI7XHJcblx0XHRcdFx0X2NvbnRyb2xsZXIgPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0dG1wUGFyZW50LnJlbW92ZVNjZW5lKFNjZW5lKTtcclxuXHRcdFx0XHRTY2VuZS50cmlnZ2VyKFwicmVtb3ZlXCIpO1xyXG5cdFx0XHRcdGxvZygzLCBcInJlbW92ZWQgXCIgKyBOQU1FU1BBQ0UgKyBcIiBmcm9tIGNvbnRyb2xsZXJcIik7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIFNjZW5lO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIERlc3Ryb3kgdGhlIHNjZW5lIGFuZCBldmVyeXRoaW5nLlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNkZXN0cm95XHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gZGVzdHJveSB0aGUgc2NlbmUgd2l0aG91dCByZXNldHRpbmcgdGhlIHBpbiBhbmQgdHdlZW4gdG8gdGhlaXIgaW5pdGlhbCBwb3NpdGlvbnNcclxuXHRcdCAqIHNjZW5lID0gc2NlbmUuZGVzdHJveSgpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIGRlc3Ryb3kgdGhlIHNjZW5lIGFuZCByZXNldCB0aGUgcGluIGFuZCB0d2VlblxyXG5cdFx0ICogc2NlbmUgPSBzY2VuZS5kZXN0cm95KHRydWUpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Jlc2V0PWZhbHNlXSAtIElmIGB0cnVlYCB0aGUgcGluIGFuZCB0d2VlbiAoaWYgZXhpc3RlbnQpIHdpbGwgYmUgcmVzZXQuXHJcblx0XHQgKiBAcmV0dXJucyB7bnVsbH0gTnVsbCB0byB1bnNldCBoYW5kbGVyIHZhcmlhYmxlcy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5kZXN0cm95ID0gZnVuY3Rpb24gKHJlc2V0KSB7XHJcblx0XHRcdFNjZW5lLnRyaWdnZXIoXCJkZXN0cm95XCIsIHtcclxuXHRcdFx0XHRyZXNldDogcmVzZXRcclxuXHRcdFx0fSk7XHJcblx0XHRcdFNjZW5lLnJlbW92ZSgpO1xyXG5cdFx0XHRTY2VuZS5vZmYoXCIqLipcIik7XHJcblx0XHRcdGxvZygzLCBcImRlc3Ryb3llZCBcIiArIE5BTUVTUEFDRSArIFwiIChyZXNldDogXCIgKyAocmVzZXQgPyBcInRydWVcIiA6IFwiZmFsc2VcIikgKyBcIilcIik7XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0fTtcclxuXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBVcGRhdGVzIHRoZSBTY2VuZSB0byByZWZsZWN0IHRoZSBjdXJyZW50IHN0YXRlLiAgXHJcblx0XHQgKiBUaGlzIGlzIHRoZSBlcXVpdmFsZW50IHRvIGBDb250cm9sbGVyLnVwZGF0ZVNjZW5lKHNjZW5lLCBpbW1lZGlhdGVseSlgLiAgXHJcblx0XHQgKiBUaGUgdXBkYXRlIG1ldGhvZCBjYWxjdWxhdGVzIHRoZSBzY2VuZSdzIHN0YXJ0IGFuZCBlbmQgcG9zaXRpb24gKGJhc2VkIG9uIHRoZSB0cmlnZ2VyIGVsZW1lbnQsIHRyaWdnZXIgaG9vaywgZHVyYXRpb24gYW5kIG9mZnNldCkgYW5kIGNoZWNrcyBpdCBhZ2FpbnN0IHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgY29udGFpbmVyLiAgXHJcblx0XHQgKiBJdCB0aGVuIHVwZGF0ZXMgdGhlIGN1cnJlbnQgc2NlbmUgc3RhdGUgYWNjb3JkaW5nbHkgKG9yIGRvZXMgbm90aGluZywgaWYgdGhlIHN0YXRlIGlzIGFscmVhZHkgY29ycmVjdCkg4oCTIFBpbnMgd2lsbCBiZSBzZXQgdG8gdGhlaXIgY29ycmVjdCBwb3NpdGlvbiBhbmQgdHdlZW5zIHdpbGwgYmUgdXBkYXRlZCB0byB0aGVpciBjb3JyZWN0IHByb2dyZXNzLlxyXG5cdFx0ICogVGhpcyBtZWFucyBhbiB1cGRhdGUgZG9lc24ndCBuZWNlc3NhcmlseSByZXN1bHQgaW4gYSBwcm9ncmVzcyBjaGFuZ2UuIFRoZSBgcHJvZ3Jlc3NgIGV2ZW50IHdpbGwgYmUgZmlyZWQgaWYgdGhlIHByb2dyZXNzIGhhcyBpbmRlZWQgY2hhbmdlZCBiZXR3ZWVuIHRoaXMgdXBkYXRlIGFuZCB0aGUgbGFzdC4gIFxyXG5cdFx0ICogXyoqTk9URToqKiBUaGlzIG1ldGhvZCBnZXRzIGNhbGxlZCBjb25zdGFudGx5IHdoZW5ldmVyIFNjcm9sbE1hZ2ljIGRldGVjdHMgYSBjaGFuZ2UuIFRoZSBvbmx5IGFwcGxpY2F0aW9uIGZvciB5b3UgaXMgaWYgeW91IGNoYW5nZSBzb21ldGhpbmcgb3V0c2lkZSBvZiB0aGUgcmVhbG0gb2YgU2Nyb2xsTWFnaWMsIGxpa2UgbW92aW5nIHRoZSB0cmlnZ2VyIG9yIGNoYW5naW5nIHR3ZWVuIHBhcmFtZXRlcnMuX1xyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSN1cGRhdGVcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyB1cGRhdGUgdGhlIHNjZW5lIG9uIG5leHQgdGlja1xyXG5cdFx0ICogc2NlbmUudXBkYXRlKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gdXBkYXRlIHRoZSBzY2VuZSBpbW1lZGlhdGVseVxyXG5cdFx0ICogc2NlbmUudXBkYXRlKHRydWUpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBmaXJlcyBTY2VuZS51cGRhdGVcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbW1lZGlhdGVseT1mYWxzZV0gLSBJZiBgdHJ1ZWAgdGhlIHVwZGF0ZSB3aWxsIGJlIGluc3RhbnQsIGlmIGBmYWxzZWAgaXQgd2lsbCB3YWl0IHVudGlsIG5leHQgdXBkYXRlIGN5Y2xlIChiZXR0ZXIgcGVyZm9ybWFuY2UpLlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy51cGRhdGUgPSBmdW5jdGlvbiAoaW1tZWRpYXRlbHkpIHtcclxuXHRcdFx0aWYgKF9jb250cm9sbGVyKSB7XHJcblx0XHRcdFx0aWYgKGltbWVkaWF0ZWx5KSB7XHJcblx0XHRcdFx0XHRpZiAoX2NvbnRyb2xsZXIuZW5hYmxlZCgpICYmIF9lbmFibGVkKSB7XHJcblx0XHRcdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0XHRcdHNjcm9sbFBvcyA9IF9jb250cm9sbGVyLmluZm8oXCJzY3JvbGxQb3NcIiksXHJcblx0XHRcdFx0XHRcdFx0bmV3UHJvZ3Jlc3M7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoX29wdGlvbnMuZHVyYXRpb24gPiAwKSB7XHJcblx0XHRcdFx0XHRcdFx0bmV3UHJvZ3Jlc3MgPSAoc2Nyb2xsUG9zIC0gX3Njcm9sbE9mZnNldC5zdGFydCkgLyAoX3Njcm9sbE9mZnNldC5lbmQgLSBfc2Nyb2xsT2Zmc2V0LnN0YXJ0KTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRuZXdQcm9ncmVzcyA9IHNjcm9sbFBvcyA+PSBfc2Nyb2xsT2Zmc2V0LnN0YXJ0ID8gMSA6IDA7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFNjZW5lLnRyaWdnZXIoXCJ1cGRhdGVcIiwge1xyXG5cdFx0XHRcdFx0XHRcdHN0YXJ0UG9zOiBfc2Nyb2xsT2Zmc2V0LnN0YXJ0LFxyXG5cdFx0XHRcdFx0XHRcdGVuZFBvczogX3Njcm9sbE9mZnNldC5lbmQsXHJcblx0XHRcdFx0XHRcdFx0c2Nyb2xsUG9zOiBzY3JvbGxQb3NcclxuXHRcdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRTY2VuZS5wcm9ncmVzcyhuZXdQcm9ncmVzcyk7XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKF9waW4gJiYgX3N0YXRlID09PSBTQ0VORV9TVEFURV9EVVJJTkcpIHtcclxuXHRcdFx0XHRcdFx0dXBkYXRlUGluU3RhdGUodHJ1ZSk7IC8vIHVucGluIGluIHBvc2l0aW9uXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdF9jb250cm9sbGVyLnVwZGF0ZVNjZW5lKFNjZW5lLCBmYWxzZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBTY2VuZTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBVcGRhdGVzIGR5bmFtaWMgc2NlbmUgdmFyaWFibGVzIGxpa2UgdGhlIHRyaWdnZXIgZWxlbWVudCBwb3NpdGlvbiBvciB0aGUgZHVyYXRpb24uXHJcblx0XHQgKiBUaGlzIG1ldGhvZCBpcyBhdXRvbWF0aWNhbGx5IGNhbGxlZCBpbiByZWd1bGFyIGludGVydmFscyBmcm9tIHRoZSBjb250cm9sbGVyLiBTZWUge0BsaW5rIFNjcm9sbE1hZ2ljLkNvbnRyb2xsZXJ9IG9wdGlvbiBgcmVmcmVzaEludGVydmFsYC5cclxuXHRcdCAqIFxyXG5cdFx0ICogWW91IGNhbiBjYWxsIGl0IHRvIG1pbmltaXplIGxhZywgZm9yIGV4YW1wbGUgd2hlbiB5b3UgaW50ZW50aW9uYWxseSBjaGFuZ2UgdGhlIHBvc2l0aW9uIG9mIHRoZSB0cmlnZ2VyRWxlbWVudC5cclxuXHRcdCAqIElmIHlvdSBkb24ndCBpdCB3aWxsIHNpbXBseSBiZSB1cGRhdGVkIGluIHRoZSBuZXh0IHJlZnJlc2ggaW50ZXJ2YWwgb2YgdGhlIGNvbnRhaW5lciwgd2hpY2ggaXMgdXN1YWxseSBzdWZmaWNpZW50LlxyXG5cdFx0ICpcclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjcmVmcmVzaFxyXG5cdFx0ICogQHNpbmNlIDEuMS4wXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogc2NlbmUgPSBuZXcgU2Nyb2xsTWFnaWMuU2NlbmUoe3RyaWdnZXJFbGVtZW50OiBcIiN0cmlnZ2VyXCJ9KTtcclxuXHRcdCAqIFxyXG5cdFx0ICogLy8gY2hhbmdlIHRoZSBwb3NpdGlvbiBvZiB0aGUgdHJpZ2dlclxyXG5cdFx0ICogJChcIiN0cmlnZ2VyXCIpLmNzcyhcInRvcFwiLCA1MDApO1xyXG5cdFx0ICogLy8gaW1tZWRpYXRlbHkgbGV0IHRoZSBzY2VuZSBrbm93IG9mIHRoaXMgY2hhbmdlXHJcblx0XHQgKiBzY2VuZS5yZWZyZXNoKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5zaGlmdH0sIGlmIHRoZSB0cmlnZ2VyIGVsZW1lbnQgcG9zaXRpb24gb3IgdGhlIGR1cmF0aW9uIGNoYW5nZWRcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUuY2hhbmdlfSwgaWYgdGhlIGR1cmF0aW9uIGNoYW5nZWRcclxuXHRcdCAqXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHVwZGF0ZUR1cmF0aW9uKCk7XHJcblx0XHRcdHVwZGF0ZVRyaWdnZXJFbGVtZW50UG9zaXRpb24oKTtcclxuXHRcdFx0Ly8gdXBkYXRlIHRyaWdnZXIgZWxlbWVudCBwb3NpdGlvblxyXG5cdFx0XHRyZXR1cm4gU2NlbmU7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogKipHZXQqKiBvciAqKlNldCoqIHRoZSBzY2VuZSdzIHByb2dyZXNzLiAgXHJcblx0XHQgKiBVc3VhbGx5IGl0IHNob3VsZG4ndCBiZSBuZWNlc3NhcnkgdG8gdXNlIHRoaXMgYXMgYSBzZXR0ZXIsIGFzIGl0IGlzIHNldCBhdXRvbWF0aWNhbGx5IGJ5IHNjZW5lLnVwZGF0ZSgpLiAgXHJcblx0XHQgKiBUaGUgb3JkZXIgaW4gd2hpY2ggdGhlIGV2ZW50cyBhcmUgZmlyZWQgZGVwZW5kcyBvbiB0aGUgZHVyYXRpb24gb2YgdGhlIHNjZW5lOlxyXG5cdFx0ICogIDEuIFNjZW5lcyB3aXRoIGBkdXJhdGlvbiA9PSAwYDogIFxyXG5cdFx0ICogIFNjZW5lcyB0aGF0IGhhdmUgbm8gZHVyYXRpb24gYnkgZGVmaW5pdGlvbiBoYXZlIG5vIGVuZGluZy4gVGh1cyB0aGUgYGVuZGAgZXZlbnQgd2lsbCBuZXZlciBiZSBmaXJlZC4gIFxyXG5cdFx0ICogIFdoZW4gdGhlIHRyaWdnZXIgcG9zaXRpb24gb2YgdGhlIHNjZW5lIGlzIHBhc3NlZCB0aGUgZXZlbnRzIGFyZSBhbHdheXMgZmlyZWQgaW4gdGhpcyBvcmRlcjogIFxyXG5cdFx0ICogIGBlbnRlcmAsIGBzdGFydGAsIGBwcm9ncmVzc2Agd2hlbiBzY3JvbGxpbmcgZm9yd2FyZCAgXHJcblx0XHQgKiAgYW5kICBcclxuXHRcdCAqICBgcHJvZ3Jlc3NgLCBgc3RhcnRgLCBgbGVhdmVgIHdoZW4gc2Nyb2xsaW5nIGluIHJldmVyc2VcclxuXHRcdCAqICAyLiBTY2VuZXMgd2l0aCBgZHVyYXRpb24gPiAwYDogIFxyXG5cdFx0ICogIFNjZW5lcyB3aXRoIGEgc2V0IGR1cmF0aW9uIGhhdmUgYSBkZWZpbmVkIHN0YXJ0IGFuZCBlbmQgcG9pbnQuICBcclxuXHRcdCAqICBXaGVuIHNjcm9sbGluZyBwYXN0IHRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc2NlbmUgaXQgd2lsbCBmaXJlIHRoZXNlIGV2ZW50cyBpbiB0aGlzIG9yZGVyOiAgXHJcblx0XHQgKiAgYGVudGVyYCwgYHN0YXJ0YCwgYHByb2dyZXNzYCAgXHJcblx0XHQgKiAgV2hlbiBjb250aW51aW5nIHRvIHNjcm9sbCBhbmQgcGFzc2luZyB0aGUgZW5kIHBvaW50IGl0IHdpbGwgZmlyZSB0aGVzZSBldmVudHM6ICBcclxuXHRcdCAqICBgcHJvZ3Jlc3NgLCBgZW5kYCwgYGxlYXZlYCAgXHJcblx0XHQgKiAgV2hlbiByZXZlcnNpbmcgdGhyb3VnaCB0aGUgZW5kIHBvaW50IHRoZXNlIGV2ZW50cyBhcmUgZmlyZWQ6ICBcclxuXHRcdCAqICBgZW50ZXJgLCBgZW5kYCwgYHByb2dyZXNzYCAgXHJcblx0XHQgKiAgQW5kIHdoZW4gY29udGludWluZyB0byBzY3JvbGwgcGFzdCB0aGUgc3RhcnQgcG9zaXRpb24gaW4gcmV2ZXJzZSBpdCB3aWxsIGZpcmU6ICBcclxuXHRcdCAqICBgcHJvZ3Jlc3NgLCBgc3RhcnRgLCBgbGVhdmVgICBcclxuXHRcdCAqICBJbiBiZXR3ZWVuIHN0YXJ0IGFuZCBlbmQgdGhlIGBwcm9ncmVzc2AgZXZlbnQgd2lsbCBiZSBjYWxsZWQgY29uc3RhbnRseSwgd2hlbmV2ZXIgdGhlIHByb2dyZXNzIGNoYW5nZXMuXHJcblx0XHQgKiBcclxuXHRcdCAqIEluIHNob3J0OiAgXHJcblx0XHQgKiBgZW50ZXJgIGV2ZW50cyB3aWxsIGFsd2F5cyB0cmlnZ2VyICoqYmVmb3JlKiogdGhlIHByb2dyZXNzIHVwZGF0ZSBhbmQgYGxlYXZlYCBlbnZlbnRzIHdpbGwgdHJpZ2dlciAqKmFmdGVyKiogdGhlIHByb2dyZXNzIHVwZGF0ZS4gIFxyXG5cdFx0ICogYHN0YXJ0YCBhbmQgYGVuZGAgd2lsbCBhbHdheXMgdHJpZ2dlciBhdCB0aGVpciByZXNwZWN0aXZlIHBvc2l0aW9uLlxyXG5cdFx0ICogXHJcblx0XHQgKiBQbGVhc2UgcmV2aWV3IHRoZSBldmVudCBkZXNjcmlwdGlvbnMgZm9yIGRldGFpbHMgb24gdGhlIGV2ZW50cyBhbmQgdGhlIGV2ZW50IG9iamVjdCB0aGF0IGlzIHBhc3NlZCB0byB0aGUgY2FsbGJhY2suXHJcblx0XHQgKiBcclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjcHJvZ3Jlc3NcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBnZXQgdGhlIGN1cnJlbnQgc2NlbmUgcHJvZ3Jlc3NcclxuXHRcdCAqIHZhciBwcm9ncmVzcyA9IHNjZW5lLnByb2dyZXNzKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gc2V0IG5ldyBzY2VuZSBwcm9ncmVzc1xyXG5cdFx0ICogc2NlbmUucHJvZ3Jlc3MoMC4zKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLmVudGVyfSwgd2hlbiB1c2VkIGFzIHNldHRlclxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5zdGFydH0sIHdoZW4gdXNlZCBhcyBzZXR0ZXJcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUucHJvZ3Jlc3N9LCB3aGVuIHVzZWQgYXMgc2V0dGVyXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLmVuZH0sIHdoZW4gdXNlZCBhcyBzZXR0ZXJcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUubGVhdmV9LCB3aGVuIHVzZWQgYXMgc2V0dGVyXHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IFtwcm9ncmVzc10gLSBUaGUgbmV3IHByb2dyZXNzIHZhbHVlIG9mIHRoZSBzY2VuZSBgWzAtMV1gLlxyXG5cdFx0ICogQHJldHVybnMge251bWJlcn0gYGdldGAgLSAgQ3VycmVudCBzY2VuZSBwcm9ncmVzcy5cclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gYHNldGAgLSAgUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMucHJvZ3Jlc3MgPSBmdW5jdGlvbiAocHJvZ3Jlc3MpIHtcclxuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7IC8vIGdldFxyXG5cdFx0XHRcdHJldHVybiBfcHJvZ3Jlc3M7XHJcblx0XHRcdH0gZWxzZSB7IC8vIHNldFxyXG5cdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0ZG9VcGRhdGUgPSBmYWxzZSxcclxuXHRcdFx0XHRcdG9sZFN0YXRlID0gX3N0YXRlLFxyXG5cdFx0XHRcdFx0c2Nyb2xsRGlyZWN0aW9uID0gX2NvbnRyb2xsZXIgPyBfY29udHJvbGxlci5pbmZvKFwic2Nyb2xsRGlyZWN0aW9uXCIpIDogJ1BBVVNFRCcsXHJcblx0XHRcdFx0XHRyZXZlcnNlT3JGb3J3YXJkID0gX29wdGlvbnMucmV2ZXJzZSB8fCBwcm9ncmVzcyA+PSBfcHJvZ3Jlc3M7XHJcblx0XHRcdFx0aWYgKF9vcHRpb25zLmR1cmF0aW9uID09PSAwKSB7XHJcblx0XHRcdFx0XHQvLyB6ZXJvIGR1cmF0aW9uIHNjZW5lc1xyXG5cdFx0XHRcdFx0ZG9VcGRhdGUgPSBfcHJvZ3Jlc3MgIT0gcHJvZ3Jlc3M7XHJcblx0XHRcdFx0XHRfcHJvZ3Jlc3MgPSBwcm9ncmVzcyA8IDEgJiYgcmV2ZXJzZU9yRm9yd2FyZCA/IDAgOiAxO1xyXG5cdFx0XHRcdFx0X3N0YXRlID0gX3Byb2dyZXNzID09PSAwID8gU0NFTkVfU1RBVEVfQkVGT1JFIDogU0NFTkVfU1RBVEVfRFVSSU5HO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyBzY2VuZXMgd2l0aCBzdGFydCBhbmQgZW5kXHJcblx0XHRcdFx0XHRpZiAocHJvZ3Jlc3MgPCAwICYmIF9zdGF0ZSAhPT0gU0NFTkVfU1RBVEVfQkVGT1JFICYmIHJldmVyc2VPckZvcndhcmQpIHtcclxuXHRcdFx0XHRcdFx0Ly8gZ28gYmFjayB0byBpbml0aWFsIHN0YXRlXHJcblx0XHRcdFx0XHRcdF9wcm9ncmVzcyA9IDA7XHJcblx0XHRcdFx0XHRcdF9zdGF0ZSA9IFNDRU5FX1NUQVRFX0JFRk9SRTtcclxuXHRcdFx0XHRcdFx0ZG9VcGRhdGUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwcm9ncmVzcyA+PSAwICYmIHByb2dyZXNzIDwgMSAmJiByZXZlcnNlT3JGb3J3YXJkKSB7XHJcblx0XHRcdFx0XHRcdF9wcm9ncmVzcyA9IHByb2dyZXNzO1xyXG5cdFx0XHRcdFx0XHRfc3RhdGUgPSBTQ0VORV9TVEFURV9EVVJJTkc7XHJcblx0XHRcdFx0XHRcdGRvVXBkYXRlID0gdHJ1ZTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAocHJvZ3Jlc3MgPj0gMSAmJiBfc3RhdGUgIT09IFNDRU5FX1NUQVRFX0FGVEVSKSB7XHJcblx0XHRcdFx0XHRcdF9wcm9ncmVzcyA9IDE7XHJcblx0XHRcdFx0XHRcdF9zdGF0ZSA9IFNDRU5FX1NUQVRFX0FGVEVSO1xyXG5cdFx0XHRcdFx0XHRkb1VwZGF0ZSA9IHRydWU7XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKF9zdGF0ZSA9PT0gU0NFTkVfU1RBVEVfRFVSSU5HICYmICFyZXZlcnNlT3JGb3J3YXJkKSB7XHJcblx0XHRcdFx0XHRcdHVwZGF0ZVBpblN0YXRlKCk7IC8vIGluIGNhc2Ugd2Ugc2Nyb2xsZWQgYmFja3dhcmRzIG1pZC1zY2VuZSBhbmQgcmV2ZXJzZSBpcyBkaXNhYmxlZCA9PiB1cGRhdGUgdGhlIHBpbiBwb3NpdGlvbiwgc28gaXQgZG9lc24ndCBtb3ZlIGJhY2sgYXMgd2VsbC5cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKGRvVXBkYXRlKSB7XHJcblx0XHRcdFx0XHQvLyBmaXJlIGV2ZW50c1xyXG5cdFx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRcdGV2ZW50VmFycyA9IHtcclxuXHRcdFx0XHRcdFx0XHRwcm9ncmVzczogX3Byb2dyZXNzLFxyXG5cdFx0XHRcdFx0XHRcdHN0YXRlOiBfc3RhdGUsXHJcblx0XHRcdFx0XHRcdFx0c2Nyb2xsRGlyZWN0aW9uOiBzY3JvbGxEaXJlY3Rpb25cclxuXHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0c3RhdGVDaGFuZ2VkID0gX3N0YXRlICE9IG9sZFN0YXRlO1xyXG5cclxuXHRcdFx0XHRcdHZhciB0cmlnZ2VyID0gZnVuY3Rpb24gKGV2ZW50TmFtZSkgeyAvLyB0bXAgaGVscGVyIHRvIHNpbXBsaWZ5IGNvZGVcclxuXHRcdFx0XHRcdFx0U2NlbmUudHJpZ2dlcihldmVudE5hbWUsIGV2ZW50VmFycyk7XHJcblx0XHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRcdGlmIChzdGF0ZUNoYW5nZWQpIHsgLy8gZW50ZXIgZXZlbnRzXHJcblx0XHRcdFx0XHRcdGlmIChvbGRTdGF0ZSAhPT0gU0NFTkVfU1RBVEVfRFVSSU5HKSB7XHJcblx0XHRcdFx0XHRcdFx0dHJpZ2dlcihcImVudGVyXCIpO1xyXG5cdFx0XHRcdFx0XHRcdHRyaWdnZXIob2xkU3RhdGUgPT09IFNDRU5FX1NUQVRFX0JFRk9SRSA/IFwic3RhcnRcIiA6IFwiZW5kXCIpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR0cmlnZ2VyKFwicHJvZ3Jlc3NcIik7XHJcblx0XHRcdFx0XHRpZiAoc3RhdGVDaGFuZ2VkKSB7IC8vIGxlYXZlIGV2ZW50c1xyXG5cdFx0XHRcdFx0XHRpZiAoX3N0YXRlICE9PSBTQ0VORV9TVEFURV9EVVJJTkcpIHtcclxuXHRcdFx0XHRcdFx0XHR0cmlnZ2VyKF9zdGF0ZSA9PT0gU0NFTkVfU1RBVEVfQkVGT1JFID8gXCJzdGFydFwiIDogXCJlbmRcIik7XHJcblx0XHRcdFx0XHRcdFx0dHJpZ2dlcihcImxlYXZlXCIpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gU2NlbmU7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogVXBkYXRlIHRoZSBzdGFydCBhbmQgZW5kIHNjcm9sbE9mZnNldCBvZiB0aGUgY29udGFpbmVyLlxyXG5cdFx0ICogVGhlIHBvc2l0aW9ucyByZWZsZWN0IHdoYXQgdGhlIGNvbnRyb2xsZXIncyBzY3JvbGwgcG9zaXRpb24gd2lsbCBiZSBhdCB0aGUgc3RhcnQgYW5kIGVuZCByZXNwZWN0aXZlbHkuXHJcblx0XHQgKiBJcyBjYWxsZWQsIHdoZW46XHJcblx0XHQgKiAgIC0gU2NlbmUgZXZlbnQgXCJjaGFuZ2VcIiBpcyBjYWxsZWQgd2l0aDogb2Zmc2V0LCB0cmlnZ2VySG9vaywgZHVyYXRpb24gXHJcblx0XHQgKiAgIC0gc2Nyb2xsIGNvbnRhaW5lciBldmVudCBcInJlc2l6ZVwiIGlzIGNhbGxlZFxyXG5cdFx0ICogICAtIHRoZSBwb3NpdGlvbiBvZiB0aGUgdHJpZ2dlckVsZW1lbnQgY2hhbmdlc1xyXG5cdFx0ICogICAtIHRoZSBjb250cm9sbGVyIGNoYW5nZXMgLT4gYWRkVG8oKVxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIHVwZGF0ZVNjcm9sbE9mZnNldCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0X3Njcm9sbE9mZnNldCA9IHtcclxuXHRcdFx0XHRzdGFydDogX3RyaWdnZXJQb3MgKyBfb3B0aW9ucy5vZmZzZXRcclxuXHRcdFx0fTtcclxuXHRcdFx0aWYgKF9jb250cm9sbGVyICYmIF9vcHRpb25zLnRyaWdnZXJFbGVtZW50KSB7XHJcblx0XHRcdFx0Ly8gdGFrZSBhd2F5IHRyaWdnZXJIb29rIHBvcnRpb24gdG8gZ2V0IHJlbGF0aXZlIHRvIHRvcFxyXG5cdFx0XHRcdF9zY3JvbGxPZmZzZXQuc3RhcnQgLT0gX2NvbnRyb2xsZXIuaW5mbyhcInNpemVcIikgKiBfb3B0aW9ucy50cmlnZ2VySG9vaztcclxuXHRcdFx0fVxyXG5cdFx0XHRfc2Nyb2xsT2Zmc2V0LmVuZCA9IF9zY3JvbGxPZmZzZXQuc3RhcnQgKyBfb3B0aW9ucy5kdXJhdGlvbjtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBVcGRhdGVzIHRoZSBkdXJhdGlvbiBpZiBzZXQgdG8gYSBkeW5hbWljIGZ1bmN0aW9uLlxyXG5cdFx0ICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gdGhlIHNjZW5lIGlzIGFkZGVkIHRvIGEgY29udHJvbGxlciBhbmQgaW4gcmVndWxhciBpbnRlcnZhbHMgZnJvbSB0aGUgY29udHJvbGxlciB0aHJvdWdoIHNjZW5lLnJlZnJlc2goKS5cclxuXHRcdCAqIFxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5jaGFuZ2V9LCBpZiB0aGUgZHVyYXRpb24gY2hhbmdlZFxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5zaGlmdH0sIGlmIHRoZSBkdXJhdGlvbiBjaGFuZ2VkXHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBbc3VwcHJlc3NFdmVudHM9ZmFsc2VdIC0gSWYgdHJ1ZSB0aGUgc2hpZnQgZXZlbnQgd2lsbCBiZSBzdXBwcmVzc2VkLlxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIHVwZGF0ZUR1cmF0aW9uID0gZnVuY3Rpb24gKHN1cHByZXNzRXZlbnRzKSB7XHJcblx0XHRcdC8vIHVwZGF0ZSBkdXJhdGlvblxyXG5cdFx0XHRpZiAoX2R1cmF0aW9uVXBkYXRlTWV0aG9kKSB7XHJcblx0XHRcdFx0dmFyIHZhcm5hbWUgPSBcImR1cmF0aW9uXCI7XHJcblx0XHRcdFx0aWYgKGNoYW5nZU9wdGlvbih2YXJuYW1lLCBfZHVyYXRpb25VcGRhdGVNZXRob2QuY2FsbChTY2VuZSkpICYmICFzdXBwcmVzc0V2ZW50cykgeyAvLyBzZXRcclxuXHRcdFx0XHRcdFNjZW5lLnRyaWdnZXIoXCJjaGFuZ2VcIiwge1xyXG5cdFx0XHRcdFx0XHR3aGF0OiB2YXJuYW1lLFxyXG5cdFx0XHRcdFx0XHRuZXd2YWw6IF9vcHRpb25zW3Zhcm5hbWVdXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFNjZW5lLnRyaWdnZXIoXCJzaGlmdFwiLCB7XHJcblx0XHRcdFx0XHRcdHJlYXNvbjogdmFybmFtZVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogVXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHRyaWdnZXJFbGVtZW50LCBpZiBwcmVzZW50LlxyXG5cdFx0ICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIC4uLlxyXG5cdFx0ICogIC0gLi4uIHdoZW4gdGhlIHRyaWdnZXJFbGVtZW50IGlzIGNoYW5nZWRcclxuXHRcdCAqICAtIC4uLiB3aGVuIHRoZSBzY2VuZSBpcyBhZGRlZCB0byBhIChuZXcpIGNvbnRyb2xsZXJcclxuXHRcdCAqICAtIC4uLiBpbiByZWd1bGFyIGludGVydmFscyBmcm9tIHRoZSBjb250cm9sbGVyIHRocm91Z2ggc2NlbmUucmVmcmVzaCgpLlxyXG5cdFx0ICogXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLnNoaWZ0fSwgaWYgdGhlIHBvc2l0aW9uIGNoYW5nZWRcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtzdXBwcmVzc0V2ZW50cz1mYWxzZV0gLSBJZiB0cnVlIHRoZSBzaGlmdCBldmVudCB3aWxsIGJlIHN1cHByZXNzZWQuXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgdXBkYXRlVHJpZ2dlckVsZW1lbnRQb3NpdGlvbiA9IGZ1bmN0aW9uIChzdXBwcmVzc0V2ZW50cykge1xyXG5cdFx0XHR2YXJcclxuXHRcdFx0XHRlbGVtZW50UG9zID0gMCxcclxuXHRcdFx0XHR0ZWxlbSA9IF9vcHRpb25zLnRyaWdnZXJFbGVtZW50O1xyXG5cdFx0XHRpZiAoX2NvbnRyb2xsZXIgJiYgKHRlbGVtIHx8IF90cmlnZ2VyUG9zID4gMCkpIHsgLy8gZWl0aGVyIGFuIGVsZW1lbnQgZXhpc3RzIG9yIHdhcyByZW1vdmVkIGFuZCB0aGUgdHJpZ2dlclBvcyBpcyBzdGlsbCA+IDBcclxuXHRcdFx0XHRpZiAodGVsZW0pIHsgLy8gdGhlcmUgY3VycmVudGx5IGEgdHJpZ2dlckVsZW1lbnQgc2V0XHJcblx0XHRcdFx0XHRpZiAodGVsZW0ucGFyZW50Tm9kZSkgeyAvLyBjaGVjayBpZiBlbGVtZW50IGlzIHN0aWxsIGF0dGFjaGVkIHRvIERPTVxyXG5cdFx0XHRcdFx0XHR2YXJcclxuXHRcdFx0XHRcdFx0XHRjb250cm9sbGVySW5mbyA9IF9jb250cm9sbGVyLmluZm8oKSxcclxuXHRcdFx0XHRcdFx0XHRjb250YWluZXJPZmZzZXQgPSBfdXRpbC5nZXQub2Zmc2V0KGNvbnRyb2xsZXJJbmZvLmNvbnRhaW5lciksIC8vIGNvbnRhaW5lciBwb3NpdGlvbiBpcyBuZWVkZWQgYmVjYXVzZSBlbGVtZW50IG9mZnNldCBpcyByZXR1cm5lZCBpbiByZWxhdGlvbiB0byBkb2N1bWVudCwgbm90IGluIHJlbGF0aW9uIHRvIGNvbnRhaW5lci5cclxuXHRcdFx0XHRcdFx0XHRwYXJhbSA9IGNvbnRyb2xsZXJJbmZvLnZlcnRpY2FsID8gXCJ0b3BcIiA6IFwibGVmdFwiOyAvLyB3aGljaCBwYXJhbSBpcyBvZiBpbnRlcmVzdCA/XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBpZiBwYXJlbnQgaXMgc3BhY2VyLCB1c2Ugc3BhY2VyIHBvc2l0aW9uIGluc3RlYWQgc28gY29ycmVjdCBzdGFydCBwb3NpdGlvbiBpcyByZXR1cm5lZCBmb3IgcGlubmVkIGVsZW1lbnRzLlxyXG5cdFx0XHRcdFx0XHR3aGlsZSAodGVsZW0ucGFyZW50Tm9kZS5oYXNBdHRyaWJ1dGUoUElOX1NQQUNFUl9BVFRSSUJVVEUpKSB7XHJcblx0XHRcdFx0XHRcdFx0dGVsZW0gPSB0ZWxlbS5wYXJlbnROb2RlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgZWxlbWVudE9mZnNldCA9IF91dGlsLmdldC5vZmZzZXQodGVsZW0pO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCFjb250cm9sbGVySW5mby5pc0RvY3VtZW50KSB7IC8vIGNvbnRhaW5lciBpcyBub3QgdGhlIGRvY3VtZW50IHJvb3QsIHNvIHN1YnN0cmFjdCBzY3JvbGwgUG9zaXRpb24gdG8gZ2V0IGNvcnJlY3QgdHJpZ2dlciBlbGVtZW50IHBvc2l0aW9uIHJlbGF0aXZlIHRvIHNjcm9sbGNvbnRlbnRcclxuXHRcdFx0XHRcdFx0XHRjb250YWluZXJPZmZzZXRbcGFyYW1dIC09IF9jb250cm9sbGVyLnNjcm9sbFBvcygpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRlbGVtZW50UG9zID0gZWxlbWVudE9mZnNldFtwYXJhbV0gLSBjb250YWluZXJPZmZzZXRbcGFyYW1dO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7IC8vIHRoZXJlIHdhcyBhbiBlbGVtZW50LCBidXQgaXQgd2FzIHJlbW92ZWQgZnJvbSBET01cclxuXHRcdFx0XHRcdFx0bG9nKDIsIFwiV0FSTklORzogdHJpZ2dlckVsZW1lbnQgd2FzIHJlbW92ZWQgZnJvbSBET00gYW5kIHdpbGwgYmUgcmVzZXQgdG9cIiwgdW5kZWZpbmVkKTtcclxuXHRcdFx0XHRcdFx0U2NlbmUudHJpZ2dlckVsZW1lbnQodW5kZWZpbmVkKTsgLy8gdW5zZXQsIHNvIGEgY2hhbmdlIGV2ZW50IGlzIHRyaWdnZXJlZFxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dmFyIGNoYW5nZWQgPSBlbGVtZW50UG9zICE9IF90cmlnZ2VyUG9zO1xyXG5cdFx0XHRcdF90cmlnZ2VyUG9zID0gZWxlbWVudFBvcztcclxuXHRcdFx0XHRpZiAoY2hhbmdlZCAmJiAhc3VwcHJlc3NFdmVudHMpIHtcclxuXHRcdFx0XHRcdFNjZW5lLnRyaWdnZXIoXCJzaGlmdFwiLCB7XHJcblx0XHRcdFx0XHRcdHJlYXNvbjogXCJ0cmlnZ2VyRWxlbWVudFBvc2l0aW9uXCJcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFRyaWdnZXIgYSBzaGlmdCBldmVudCwgd2hlbiB0aGUgY29udGFpbmVyIGlzIHJlc2l6ZWQgYW5kIHRoZSB0cmlnZ2VySG9vayBpcyA+IDEuXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgb25Db250YWluZXJSZXNpemUgPSBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRpZiAoX29wdGlvbnMudHJpZ2dlckhvb2sgPiAwKSB7XHJcblx0XHRcdFx0U2NlbmUudHJpZ2dlcihcInNoaWZ0XCIsIHtcclxuXHRcdFx0XHRcdHJlYXNvbjogXCJjb250YWluZXJSZXNpemVcIlxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHJcblx0XHR2YXIgX3ZhbGlkYXRlID0gX3V0aWwuZXh0ZW5kKFNDRU5FX09QVElPTlMudmFsaWRhdGUsIHtcclxuXHRcdFx0Ly8gdmFsaWRhdGlvbiBmb3IgZHVyYXRpb24gaGFuZGxlZCBpbnRlcm5hbGx5IGZvciByZWZlcmVuY2UgdG8gcHJpdmF0ZSB2YXIgX2R1cmF0aW9uTWV0aG9kXHJcblx0XHRcdGR1cmF0aW9uOiBmdW5jdGlvbiAodmFsKSB7XHJcblx0XHRcdFx0aWYgKF91dGlsLnR5cGUuU3RyaW5nKHZhbCkgJiYgdmFsLm1hdGNoKC9eKFxcLnxcXGQpKlxcZCslJC8pKSB7XHJcblx0XHRcdFx0XHQvLyBwZXJjZW50YWdlIHZhbHVlXHJcblx0XHRcdFx0XHR2YXIgcGVyYyA9IHBhcnNlRmxvYXQodmFsKSAvIDEwMDtcclxuXHRcdFx0XHRcdHZhbCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIF9jb250cm9sbGVyID8gX2NvbnRyb2xsZXIuaW5mbyhcInNpemVcIikgKiBwZXJjIDogMDtcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChfdXRpbC50eXBlLkZ1bmN0aW9uKHZhbCkpIHtcclxuXHRcdFx0XHRcdC8vIGZ1bmN0aW9uXHJcblx0XHRcdFx0XHRfZHVyYXRpb25VcGRhdGVNZXRob2QgPSB2YWw7XHJcblx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHR2YWwgPSBwYXJzZUZsb2F0KF9kdXJhdGlvblVwZGF0ZU1ldGhvZC5jYWxsKFNjZW5lKSk7XHJcblx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XHJcblx0XHRcdFx0XHRcdHZhbCA9IC0xOyAvLyB3aWxsIGNhdXNlIGVycm9yIGJlbG93XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdC8vIHZhbCBoYXMgdG8gYmUgZmxvYXRcclxuXHRcdFx0XHR2YWwgPSBwYXJzZUZsb2F0KHZhbCk7XHJcblx0XHRcdFx0aWYgKCFfdXRpbC50eXBlLk51bWJlcih2YWwpIHx8IHZhbCA8IDApIHtcclxuXHRcdFx0XHRcdGlmIChfZHVyYXRpb25VcGRhdGVNZXRob2QpIHtcclxuXHRcdFx0XHRcdFx0X2R1cmF0aW9uVXBkYXRlTWV0aG9kID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdFx0XHR0aHJvdyBbXCJJbnZhbGlkIHJldHVybiB2YWx1ZSBvZiBzdXBwbGllZCBmdW5jdGlvbiBmb3Igb3B0aW9uIFxcXCJkdXJhdGlvblxcXCI6XCIsIHZhbF07XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHR0aHJvdyBbXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcImR1cmF0aW9uXFxcIjpcIiwgdmFsXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHZhbDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDaGVja3MgdGhlIHZhbGlkaXR5IG9mIGEgc3BlY2lmaWMgb3IgYWxsIG9wdGlvbnMgYW5kIHJlc2V0IHRvIGRlZmF1bHQgaWYgbmVjY2Vzc2FyeS5cclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciB2YWxpZGF0ZU9wdGlvbiA9IGZ1bmN0aW9uIChjaGVjaykge1xyXG5cdFx0XHRjaGVjayA9IGFyZ3VtZW50cy5sZW5ndGggPyBbY2hlY2tdIDogT2JqZWN0LmtleXMoX3ZhbGlkYXRlKTtcclxuXHRcdFx0Y2hlY2suZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uTmFtZSwga2V5KSB7XHJcblx0XHRcdFx0dmFyIHZhbHVlO1xyXG5cdFx0XHRcdGlmIChfdmFsaWRhdGVbb3B0aW9uTmFtZV0pIHsgLy8gdGhlcmUgaXMgYSB2YWxpZGF0aW9uIG1ldGhvZCBmb3IgdGhpcyBvcHRpb25cclxuXHRcdFx0XHRcdHRyeSB7IC8vIHZhbGlkYXRlIHZhbHVlXHJcblx0XHRcdFx0XHRcdHZhbHVlID0gX3ZhbGlkYXRlW29wdGlvbk5hbWVdKF9vcHRpb25zW29wdGlvbk5hbWVdKTtcclxuXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHsgLy8gdmFsaWRhdGlvbiBmYWlsZWQgLT4gcmVzZXQgdG8gZGVmYXVsdFxyXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IERFRkFVTFRfT1BUSU9OU1tvcHRpb25OYW1lXTtcclxuXHRcdFx0XHRcdFx0dmFyIGxvZ01TRyA9IF91dGlsLnR5cGUuU3RyaW5nKGUpID8gW2VdIDogZTtcclxuXHRcdFx0XHRcdFx0aWYgKF91dGlsLnR5cGUuQXJyYXkobG9nTVNHKSkge1xyXG5cdFx0XHRcdFx0XHRcdGxvZ01TR1swXSA9IFwiRVJST1I6IFwiICsgbG9nTVNHWzBdO1xyXG5cdFx0XHRcdFx0XHRcdGxvZ01TRy51bnNoaWZ0KDEpOyAvLyBsb2dsZXZlbCAxIGZvciBlcnJvciBtc2dcclxuXHRcdFx0XHRcdFx0XHRsb2cuYXBwbHkodGhpcywgbG9nTVNHKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRsb2coMSwgXCJFUlJPUjogUHJvYmxlbSBleGVjdXRpbmcgdmFsaWRhdGlvbiBjYWxsYmFjayBmb3Igb3B0aW9uICdcIiArIG9wdGlvbk5hbWUgKyBcIic6XCIsIGUubWVzc2FnZSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0gZmluYWxseSB7XHJcblx0XHRcdFx0XHRcdF9vcHRpb25zW29wdGlvbk5hbWVdID0gdmFsdWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBIZWxwZXIgdXNlZCBieSB0aGUgc2V0dGVyL2dldHRlcnMgZm9yIHNjZW5lIG9wdGlvbnNcclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciBjaGFuZ2VPcHRpb24gPSBmdW5jdGlvbiAodmFybmFtZSwgbmV3dmFsKSB7XHJcblx0XHRcdHZhclxyXG5cdFx0XHRcdGNoYW5nZWQgPSBmYWxzZSxcclxuXHRcdFx0XHRvbGR2YWwgPSBfb3B0aW9uc1t2YXJuYW1lXTtcclxuXHRcdFx0aWYgKF9vcHRpb25zW3Zhcm5hbWVdICE9IG5ld3ZhbCkge1xyXG5cdFx0XHRcdF9vcHRpb25zW3Zhcm5hbWVdID0gbmV3dmFsO1xyXG5cdFx0XHRcdHZhbGlkYXRlT3B0aW9uKHZhcm5hbWUpOyAvLyByZXNldHMgdG8gZGVmYXVsdCBpZiBuZWNlc3NhcnlcclxuXHRcdFx0XHRjaGFuZ2VkID0gb2xkdmFsICE9IF9vcHRpb25zW3Zhcm5hbWVdO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBjaGFuZ2VkO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBnZW5lcmF0ZSBnZXR0ZXJzL3NldHRlcnMgZm9yIGFsbCBvcHRpb25zXHJcblx0XHR2YXIgYWRkU2NlbmVPcHRpb24gPSBmdW5jdGlvbiAob3B0aW9uTmFtZSkge1xyXG5cdFx0XHRpZiAoIVNjZW5lW29wdGlvbk5hbWVdKSB7XHJcblx0XHRcdFx0U2NlbmVbb3B0aW9uTmFtZV0gPSBmdW5jdGlvbiAobmV3VmFsKSB7XHJcblx0XHRcdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHsgLy8gZ2V0XHJcblx0XHRcdFx0XHRcdHJldHVybiBfb3B0aW9uc1tvcHRpb25OYW1lXTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGlmIChvcHRpb25OYW1lID09PSBcImR1cmF0aW9uXCIpIHsgLy8gbmV3IGR1cmF0aW9uIGlzIHNldCwgc28gYW55IHByZXZpb3VzbHkgc2V0IGZ1bmN0aW9uIG11c3QgYmUgdW5zZXRcclxuXHRcdFx0XHRcdFx0XHRfZHVyYXRpb25VcGRhdGVNZXRob2QgPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYgKGNoYW5nZU9wdGlvbihvcHRpb25OYW1lLCBuZXdWYWwpKSB7IC8vIHNldFxyXG5cdFx0XHRcdFx0XHRcdFNjZW5lLnRyaWdnZXIoXCJjaGFuZ2VcIiwge1xyXG5cdFx0XHRcdFx0XHRcdFx0d2hhdDogb3B0aW9uTmFtZSxcclxuXHRcdFx0XHRcdFx0XHRcdG5ld3ZhbDogX29wdGlvbnNbb3B0aW9uTmFtZV1cclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoU0NFTkVfT1BUSU9OUy5zaGlmdHMuaW5kZXhPZihvcHRpb25OYW1lKSA+IC0xKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRTY2VuZS50cmlnZ2VyKFwic2hpZnRcIiwge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZWFzb246IG9wdGlvbk5hbWVcclxuXHRcdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIFNjZW5lO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAqKkdldCoqIG9yICoqU2V0KiogdGhlIGR1cmF0aW9uIG9wdGlvbiB2YWx1ZS5cclxuXHRcdCAqXHJcblx0XHQgKiBBcyBhICoqc2V0dGVyKiogaXQgYWNjZXB0cyB0aHJlZSB0eXBlcyBvZiBwYXJhbWV0ZXJzOlxyXG5cdFx0ICogMS4gYG51bWJlcmA6IFNldHMgdGhlIGR1cmF0aW9uIG9mIHRoZSBzY2VuZSB0byBleGFjdGx5IHRoaXMgYW1vdW50IG9mIHBpeGVscy4gIFxyXG5cdFx0ICogICBUaGlzIG1lYW5zIHRoZSBzY2VuZSB3aWxsIGxhc3QgZm9yIGV4YWN0bHkgdGhpcyBhbW91bnQgb2YgcGl4ZWxzIHNjcm9sbGVkLiBTdWItUGl4ZWxzIGFyZSBhbHNvIHZhbGlkLlxyXG5cdFx0ICogICBBIHZhbHVlIG9mIGAwYCBtZWFucyB0aGF0IHRoZSBzY2VuZSBpcyAnb3BlbiBlbmQnIGFuZCBubyBlbmQgd2lsbCBiZSB0cmlnZ2VyZWQuIFBpbnMgd2lsbCBuZXZlciB1bnBpbiBhbmQgYW5pbWF0aW9ucyB3aWxsIHBsYXkgaW5kZXBlbmRlbnRseSBvZiBzY3JvbGwgcHJvZ3Jlc3MuXHJcblx0XHQgKiAyLiBgc3RyaW5nYDogQWx3YXlzIHVwZGF0ZXMgdGhlIGR1cmF0aW9uIHJlbGF0aXZlIHRvIHBhcmVudCBzY3JvbGwgY29udGFpbmVyLiAgXHJcblx0XHQgKiAgIEZvciBleGFtcGxlIGBcIjEwMCVcImAgd2lsbCBrZWVwIHRoZSBkdXJhdGlvbiBhbHdheXMgZXhhY3RseSBhdCB0aGUgaW5uZXIgaGVpZ2h0IG9mIHRoZSBzY3JvbGwgY29udGFpbmVyLlxyXG5cdFx0ICogICBXaGVuIHNjcm9sbGluZyB2ZXJ0aWNhbGx5IHRoZSB3aWR0aCBpcyB1c2VkIGZvciByZWZlcmVuY2UgcmVzcGVjdGl2ZWx5LlxyXG5cdFx0ICogMy4gYGZ1bmN0aW9uYDogVGhlIHN1cHBsaWVkIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHRvIHJldHVybiB0aGUgc2NlbmUgZHVyYXRpb24uXHJcblx0XHQgKiAgIFRoaXMgaXMgdXNlZnVsIGluIHNldHVwcyB3aGVyZSB0aGUgZHVyYXRpb24gZGVwZW5kcyBvbiBvdGhlciBlbGVtZW50cyB3aG8gbWlnaHQgY2hhbmdlIHNpemUuIEJ5IHN1cHBseWluZyBhIGZ1bmN0aW9uIHlvdSBjYW4gcmV0dXJuIGEgdmFsdWUgaW5zdGVhZCBvZiB1cGRhdGluZyBwb3RlbnRpYWxseSBtdWx0aXBsZSBzY2VuZSBkdXJhdGlvbnMuICBcclxuXHRcdCAqICAgVGhlIHNjZW5lIGNhbiBiZSByZWZlcmVuY2VkIGluc2lkZSB0aGUgY2FsbGJhY2sgdXNpbmcgYHRoaXNgLlxyXG5cdFx0ICogICBfKipXQVJOSU5HOioqIFRoaXMgaXMgYW4gZWFzeSB3YXkgdG8ga2lsbCBwZXJmb3JtYW5jZSwgYXMgdGhlIGNhbGxiYWNrIHdpbGwgYmUgZXhlY3V0ZWQgZXZlcnkgdGltZSBgU2NlbmUucmVmcmVzaCgpYCBpcyBjYWxsZWQsIHdoaWNoIGhhcHBlbnMgYSBsb3QuIFRoZSBpbnRlcnZhbCBpcyBkZWZpbmVkIGJ5IHRoZSBjb250cm9sbGVyIChzZWUgU2Nyb2xsTWFnaWMuQ29udHJvbGxlciBvcHRpb24gYHJlZnJlc2hJbnRlcnZhbGApLiAgXHJcblx0XHQgKiAgIEl0J3MgcmVjb21lbmRlZCB0byBhdm9pZCBjYWxjdWxhdGlvbnMgd2l0aGluIHRoZSBmdW5jdGlvbiBhbmQgdXNlIGNhY2hlZCB2YXJpYWJsZXMgYXMgcmV0dXJuIHZhbHVlcy4gIFxyXG5cdFx0ICogICBUaGlzIGNvdW50cyBkb3VibGUgaWYgeW91IHVzZSB0aGUgc2FtZSBmdW5jdGlvbiBmb3IgbXVsdGlwbGUgc2NlbmVzLl9cclxuXHRcdCAqXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI2R1cmF0aW9uXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gZ2V0IHRoZSBjdXJyZW50IGR1cmF0aW9uIHZhbHVlXHJcblx0XHQgKiB2YXIgZHVyYXRpb24gPSBzY2VuZS5kdXJhdGlvbigpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHNldCBhIG5ldyBkdXJhdGlvblxyXG5cdFx0ICogc2NlbmUuZHVyYXRpb24oMzAwKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBzZXQgZHVyYXRpb24gcmVzcG9uc2l2ZWx5IHRvIGNvbnRhaW5lciBzaXplXHJcblx0XHQgKiBzY2VuZS5kdXJhdGlvbihcIjEwMCVcIik7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gdXNlIGEgZnVuY3Rpb24gdG8gcmFuZG9taXplIHRoZSBkdXJhdGlvbiBmb3Igc29tZSByZWFzb24uXHJcblx0XHQgKiB2YXIgZHVyYXRpb25WYWx1ZUNhY2hlO1xyXG5cdFx0ICogZnVuY3Rpb24gZHVyYXRpb25DYWxsYmFjayAoKSB7XHJcblx0XHQgKiAgIHJldHVybiBkdXJhdGlvblZhbHVlQ2FjaGU7XHJcblx0XHQgKiB9XHJcblx0XHQgKiBmdW5jdGlvbiB1cGRhdGVEdXJhdGlvbiAoKSB7XHJcblx0XHQgKiAgIGR1cmF0aW9uVmFsdWVDYWNoZSA9IE1hdGgucmFuZG9tKCkgKiAxMDA7XHJcblx0XHQgKiB9XHJcblx0XHQgKiB1cGRhdGVEdXJhdGlvbigpOyAvLyBzZXQgdG8gaW5pdGlhbCB2YWx1ZVxyXG5cdFx0ICogc2NlbmUuZHVyYXRpb24oZHVyYXRpb25DYWxsYmFjayk7IC8vIHNldCBkdXJhdGlvbiBjYWxsYmFja1xyXG5cdFx0ICpcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUuY2hhbmdlfSwgd2hlbiB1c2VkIGFzIHNldHRlclxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5zaGlmdH0sIHdoZW4gdXNlZCBhcyBzZXR0ZXJcclxuXHRcdCAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmd8ZnVuY3Rpb24pfSBbbmV3RHVyYXRpb25dIC0gVGhlIG5ldyBkdXJhdGlvbiBzZXR0aW5nIGZvciB0aGUgc2NlbmUuXHJcblx0XHQgKiBAcmV0dXJucyB7bnVtYmVyfSBgZ2V0YCAtICBDdXJyZW50IHNjZW5lIGR1cmF0aW9uLlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBgc2V0YCAtICBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogKipHZXQqKiBvciAqKlNldCoqIHRoZSBvZmZzZXQgb3B0aW9uIHZhbHVlLlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNvZmZzZXRcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBnZXQgdGhlIGN1cnJlbnQgb2Zmc2V0XHJcblx0XHQgKiB2YXIgb2Zmc2V0ID0gc2NlbmUub2Zmc2V0KCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gc2V0IGEgbmV3IG9mZnNldFxyXG5cdFx0ICogc2NlbmUub2Zmc2V0KDEwMCk7XHJcblx0XHQgKlxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5jaGFuZ2V9LCB3aGVuIHVzZWQgYXMgc2V0dGVyXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLnNoaWZ0fSwgd2hlbiB1c2VkIGFzIHNldHRlclxyXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IFtuZXdPZmZzZXRdIC0gVGhlIG5ldyBvZmZzZXQgb2YgdGhlIHNjZW5lLlxyXG5cdFx0ICogQHJldHVybnMge251bWJlcn0gYGdldGAgLSAgQ3VycmVudCBzY2VuZSBvZmZzZXQuXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IGBzZXRgIC0gIFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAqKkdldCoqIG9yICoqU2V0KiogdGhlIHRyaWdnZXJFbGVtZW50IG9wdGlvbiB2YWx1ZS5cclxuXHRcdCAqIERvZXMgKipub3QqKiBmaXJlIGBTY2VuZS5zaGlmdGAsIGJlY2F1c2UgY2hhbmdpbmcgdGhlIHRyaWdnZXIgRWxlbWVudCBkb2Vzbid0IG5lY2Vzc2FyaWx5IG1lYW4gdGhlIHN0YXJ0IHBvc2l0aW9uIGNoYW5nZXMuIFRoaXMgd2lsbCBiZSBkZXRlcm1pbmVkIGluIGBTY2VuZS5yZWZyZXNoKClgLCB3aGljaCBpcyBhdXRvbWF0aWNhbGx5IHRyaWdnZXJlZC5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjdHJpZ2dlckVsZW1lbnRcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBnZXQgdGhlIGN1cnJlbnQgdHJpZ2dlckVsZW1lbnRcclxuXHRcdCAqIHZhciB0cmlnZ2VyRWxlbWVudCA9IHNjZW5lLnRyaWdnZXJFbGVtZW50KCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gc2V0IGEgbmV3IHRyaWdnZXJFbGVtZW50IHVzaW5nIGEgc2VsZWN0b3JcclxuXHRcdCAqIHNjZW5lLnRyaWdnZXJFbGVtZW50KFwiI3RyaWdnZXJcIik7XHJcblx0XHQgKiAvLyBzZXQgYSBuZXcgdHJpZ2dlckVsZW1lbnQgdXNpbmcgYSBET00gb2JqZWN0XHJcblx0XHQgKiBzY2VuZS50cmlnZ2VyRWxlbWVudChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRyaWdnZXJcIikpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUuY2hhbmdlfSwgd2hlbiB1c2VkIGFzIHNldHRlclxyXG5cdFx0ICogQHBhcmFtIHsoc3RyaW5nfG9iamVjdCl9IFtuZXdUcmlnZ2VyRWxlbWVudF0gLSBUaGUgbmV3IHRyaWdnZXIgZWxlbWVudCBmb3IgdGhlIHNjZW5lLlxyXG5cdFx0ICogQHJldHVybnMgeyhzdHJpbmd8b2JqZWN0KX0gYGdldGAgLSAgQ3VycmVudCB0cmlnZ2VyRWxlbWVudC5cclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gYHNldGAgLSAgUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHJcblx0XHQvKipcclxuXHRcdCAqICoqR2V0Kiogb3IgKipTZXQqKiB0aGUgdHJpZ2dlckhvb2sgb3B0aW9uIHZhbHVlLlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSN0cmlnZ2VySG9va1xyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGdldCB0aGUgY3VycmVudCB0cmlnZ2VySG9vayB2YWx1ZVxyXG5cdFx0ICogdmFyIHRyaWdnZXJIb29rID0gc2NlbmUudHJpZ2dlckhvb2soKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBzZXQgYSBuZXcgdHJpZ2dlckhvb2sgdXNpbmcgYSBzdHJpbmdcclxuXHRcdCAqIHNjZW5lLnRyaWdnZXJIb29rKFwib25MZWF2ZVwiKTtcclxuXHRcdCAqIC8vIHNldCBhIG5ldyB0cmlnZ2VySG9vayB1c2luZyBhIG51bWJlclxyXG5cdFx0ICogc2NlbmUudHJpZ2dlckhvb2soMC43KTtcclxuXHRcdCAqXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLmNoYW5nZX0sIHdoZW4gdXNlZCBhcyBzZXR0ZXJcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUuc2hpZnR9LCB3aGVuIHVzZWQgYXMgc2V0dGVyXHJcblx0XHQgKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKX0gW25ld1RyaWdnZXJIb29rXSAtIFRoZSBuZXcgdHJpZ2dlckhvb2sgb2YgdGhlIHNjZW5lLiBTZWUge0BsaW5rIFNjZW5lfSBwYXJhbWV0ZXIgZGVzY3JpcHRpb24gZm9yIHZhbHVlIG9wdGlvbnMuXHJcblx0XHQgKiBAcmV0dXJucyB7bnVtYmVyfSBgZ2V0YCAtICBDdXJyZW50IHRyaWdnZXJIb29rIChBTFdBWVMgbnVtZXJpY2FsKS5cclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gYHNldGAgLSAgUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHJcblx0XHQvKipcclxuXHRcdCAqICoqR2V0Kiogb3IgKipTZXQqKiB0aGUgcmV2ZXJzZSBvcHRpb24gdmFsdWUuXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI3JldmVyc2VcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBnZXQgdGhlIGN1cnJlbnQgcmV2ZXJzZSBvcHRpb25cclxuXHRcdCAqIHZhciByZXZlcnNlID0gc2NlbmUucmV2ZXJzZSgpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHNldCBuZXcgcmV2ZXJzZSBvcHRpb25cclxuXHRcdCAqIHNjZW5lLnJldmVyc2UoZmFsc2UpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUuY2hhbmdlfSwgd2hlbiB1c2VkIGFzIHNldHRlclxyXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBbbmV3UmV2ZXJzZV0gLSBUaGUgbmV3IHJldmVyc2Ugc2V0dGluZyBvZiB0aGUgc2NlbmUuXHJcblx0XHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYGdldGAgLSAgQ3VycmVudCByZXZlcnNlIG9wdGlvbiB2YWx1ZS5cclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gYHNldGAgLSAgUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHJcblx0XHQvKipcclxuXHRcdCAqICoqR2V0Kiogb3IgKipTZXQqKiB0aGUgbG9nbGV2ZWwgb3B0aW9uIHZhbHVlLlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNsb2dsZXZlbFxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGdldCB0aGUgY3VycmVudCBsb2dsZXZlbFxyXG5cdFx0ICogdmFyIGxvZ2xldmVsID0gc2NlbmUubG9nbGV2ZWwoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBzZXQgbmV3IGxvZ2xldmVsXHJcblx0XHQgKiBzY2VuZS5sb2dsZXZlbCgzKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLmNoYW5nZX0sIHdoZW4gdXNlZCBhcyBzZXR0ZXJcclxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBbbmV3TG9nbGV2ZWxdIC0gVGhlIG5ldyBsb2dsZXZlbCBzZXR0aW5nIG9mIHRoZSBzY2VuZS4gYFswLTNdYFxyXG5cdFx0ICogQHJldHVybnMge251bWJlcn0gYGdldGAgLSAgQ3VycmVudCBsb2dsZXZlbC5cclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gYHNldGAgLSAgUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHJcblx0XHQvKipcclxuXHRcdCAqICoqR2V0KiogdGhlIGFzc29jaWF0ZWQgY29udHJvbGxlci5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjY29udHJvbGxlclxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGdldCB0aGUgY29udHJvbGxlciBvZiBhIHNjZW5lXHJcblx0XHQgKiB2YXIgY29udHJvbGxlciA9IHNjZW5lLmNvbnRyb2xsZXIoKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcmV0dXJucyB7U2Nyb2xsTWFnaWMuQ29udHJvbGxlcn0gUGFyZW50IGNvbnRyb2xsZXIgb3IgYHVuZGVmaW5lZGBcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5jb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRyZXR1cm4gX2NvbnRyb2xsZXI7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogKipHZXQqKiB0aGUgY3VycmVudCBzdGF0ZS5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjc3RhdGVcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBnZXQgdGhlIGN1cnJlbnQgc3RhdGVcclxuXHRcdCAqIHZhciBzdGF0ZSA9IHNjZW5lLnN0YXRlKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybnMge3N0cmluZ30gYFwiQkVGT1JFXCJgLCBgXCJEVVJJTkdcImAgb3IgYFwiQUZURVJcImBcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5zdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIF9zdGF0ZTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAqKkdldCoqIHRoZSBjdXJyZW50IHNjcm9sbCBvZmZzZXQgZm9yIHRoZSBzdGFydCBvZiB0aGUgc2NlbmUuICBcclxuXHRcdCAqIE1pbmQsIHRoYXQgdGhlIHNjcm9sbE9mZnNldCBpcyByZWxhdGVkIHRvIHRoZSBzaXplIG9mIHRoZSBjb250YWluZXIsIGlmIGB0cmlnZ2VySG9va2AgaXMgYmlnZ2VyIHRoYW4gYDBgIChvciBgXCJvbkxlYXZlXCJgKS4gIFxyXG5cdFx0ICogVGhpcyBtZWFucywgdGhhdCByZXNpemluZyB0aGUgY29udGFpbmVyIG9yIGNoYW5naW5nIHRoZSBgdHJpZ2dlckhvb2tgIHdpbGwgaW5mbHVlbmNlIHRoZSBzY2VuZSdzIHN0YXJ0IG9mZnNldC5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjc2Nyb2xsT2Zmc2V0XHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gZ2V0IHRoZSBjdXJyZW50IHNjcm9sbCBvZmZzZXQgZm9yIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSBzY2VuZS5cclxuXHRcdCAqIHZhciBzdGFydCA9IHNjZW5lLnNjcm9sbE9mZnNldCgpO1xyXG5cdFx0ICogdmFyIGVuZCA9IHNjZW5lLnNjcm9sbE9mZnNldCgpICsgc2NlbmUuZHVyYXRpb24oKTtcclxuXHRcdCAqIGNvbnNvbGUubG9nKFwidGhlIHNjZW5lIHN0YXJ0cyBhdFwiLCBzdGFydCwgXCJhbmQgZW5kcyBhdFwiLCBlbmQpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBzY3JvbGwgb2Zmc2V0IChvZiB0aGUgY29udGFpbmVyKSBhdCB3aGljaCB0aGUgc2NlbmUgd2lsbCB0cmlnZ2VyLiBZIHZhbHVlIGZvciB2ZXJ0aWNhbCBhbmQgWCB2YWx1ZSBmb3IgaG9yaXpvbnRhbCBzY3JvbGxzLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLnNjcm9sbE9mZnNldCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIF9zY3JvbGxPZmZzZXQuc3RhcnQ7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogKipHZXQqKiB0aGUgdHJpZ2dlciBwb3NpdGlvbiBvZiB0aGUgc2NlbmUgKGluY2x1ZGluZyB0aGUgdmFsdWUgb2YgdGhlIGBvZmZzZXRgIG9wdGlvbikuICBcclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjdHJpZ2dlclBvc2l0aW9uXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gZ2V0IHRoZSBzY2VuZSdzIHRyaWdnZXIgcG9zaXRpb25cclxuXHRcdCAqIHZhciB0cmlnZ2VyUG9zaXRpb24gPSBzY2VuZS50cmlnZ2VyUG9zaXRpb24oKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcmV0dXJucyB7bnVtYmVyfSBTdGFydCBwb3NpdGlvbiBvZiB0aGUgc2NlbmUuIFRvcCBwb3NpdGlvbiB2YWx1ZSBmb3IgdmVydGljYWwgYW5kIGxlZnQgcG9zaXRpb24gdmFsdWUgZm9yIGhvcml6b250YWwgc2Nyb2xscy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy50cmlnZ2VyUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHZhciBwb3MgPSBfb3B0aW9ucy5vZmZzZXQ7IC8vIHRoZSBvZmZzZXQgaXMgdGhlIGJhc2lzXHJcblx0XHRcdGlmIChfY29udHJvbGxlcikge1xyXG5cdFx0XHRcdC8vIGdldCB0aGUgdHJpZ2dlciBwb3NpdGlvblxyXG5cdFx0XHRcdGlmIChfb3B0aW9ucy50cmlnZ2VyRWxlbWVudCkge1xyXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBhcyB0cmlnZ2VyXHJcblx0XHRcdFx0XHRwb3MgKz0gX3RyaWdnZXJQb3M7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIHJldHVybiB0aGUgaGVpZ2h0IG9mIHRoZSB0cmlnZ2VySG9vayB0byBzdGFydCBhdCB0aGUgYmVnaW5uaW5nXHJcblx0XHRcdFx0XHRwb3MgKz0gX2NvbnRyb2xsZXIuaW5mbyhcInNpemVcIikgKiBTY2VuZS50cmlnZ2VySG9vaygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcG9zO1xyXG5cdFx0fTtcclxuXHJcblxyXG5cdFx0dmFyXHJcblx0XHRcdF9waW4sXHJcblx0XHRcdF9waW5PcHRpb25zO1xyXG5cclxuXHRcdFNjZW5lXHJcblx0XHRcdC5vbihcInNoaWZ0LmludGVybmFsXCIsIGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0dmFyIGR1cmF0aW9uQ2hhbmdlZCA9IGUucmVhc29uID09PSBcImR1cmF0aW9uXCI7XHJcblx0XHRcdFx0aWYgKChfc3RhdGUgPT09IFNDRU5FX1NUQVRFX0FGVEVSICYmIGR1cmF0aW9uQ2hhbmdlZCkgfHwgKF9zdGF0ZSA9PT0gU0NFTkVfU1RBVEVfRFVSSU5HICYmIF9vcHRpb25zLmR1cmF0aW9uID09PSAwKSkge1xyXG5cdFx0XHRcdFx0Ly8gaWYgW2R1cmF0aW9uIGNoYW5nZWQgYWZ0ZXIgYSBzY2VuZSAoaW5zaWRlIHNjZW5lIHByb2dyZXNzIHVwZGF0ZXMgcGluIHBvc2l0aW9uKV0gb3IgW2R1cmF0aW9uIGlzIDAsIHdlIGFyZSBpbiBwaW4gcGhhc2UgYW5kIHNvbWUgb3RoZXIgdmFsdWUgY2hhbmdlZF0uXHJcblx0XHRcdFx0XHR1cGRhdGVQaW5TdGF0ZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoZHVyYXRpb25DaGFuZ2VkKSB7XHJcblx0XHRcdFx0XHR1cGRhdGVQaW5EaW1lbnNpb25zKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0XHQub24oXCJwcm9ncmVzcy5pbnRlcm5hbFwiLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdHVwZGF0ZVBpblN0YXRlKCk7XHJcblx0XHRcdH0pXHJcblx0XHRcdC5vbihcImFkZC5pbnRlcm5hbFwiLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdHVwZGF0ZVBpbkRpbWVuc2lvbnMoKTtcclxuXHRcdFx0fSlcclxuXHRcdFx0Lm9uKFwiZGVzdHJveS5pbnRlcm5hbFwiLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdFNjZW5lLnJlbW92ZVBpbihlLnJlc2V0KTtcclxuXHRcdFx0fSk7XHJcblx0XHQvKipcclxuXHRcdCAqIFVwZGF0ZSB0aGUgcGluIHN0YXRlLlxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIHVwZGF0ZVBpblN0YXRlID0gZnVuY3Rpb24gKGZvcmNlVW5waW4pIHtcclxuXHRcdFx0aWYgKF9waW4gJiYgX2NvbnRyb2xsZXIpIHtcclxuXHRcdFx0XHR2YXJcclxuXHRcdFx0XHRcdGNvbnRhaW5lckluZm8gPSBfY29udHJvbGxlci5pbmZvKCksXHJcblx0XHRcdFx0XHRwaW5UYXJnZXQgPSBfcGluT3B0aW9ucy5zcGFjZXIuZmlyc3RDaGlsZDsgLy8gbWF5IGJlIHBpbiBlbGVtZW50IG9yIGFub3RoZXIgc3BhY2VyLCBpZiBjYXNjYWRpbmcgcGluc1xyXG5cclxuXHRcdFx0XHRpZiAoIWZvcmNlVW5waW4gJiYgX3N0YXRlID09PSBTQ0VORV9TVEFURV9EVVJJTkcpIHsgLy8gZHVyaW5nIHNjZW5lIG9yIGlmIGR1cmF0aW9uIGlzIDAgYW5kIHdlIGFyZSBwYXN0IHRoZSB0cmlnZ2VyXHJcblx0XHRcdFx0XHQvLyBwaW5uZWQgc3RhdGVcclxuXHRcdFx0XHRcdGlmIChfdXRpbC5jc3MocGluVGFyZ2V0LCBcInBvc2l0aW9uXCIpICE9IFwiZml4ZWRcIikge1xyXG5cdFx0XHRcdFx0XHQvLyBjaGFuZ2Ugc3RhdGUgYmVmb3JlIHVwZGF0aW5nIHBpbiBzcGFjZXIgKHBvc2l0aW9uIGNoYW5nZXMgZHVlIHRvIGZpeGVkIGNvbGxhcHNpbmcgbWlnaHQgb2NjdXIuKVxyXG5cdFx0XHRcdFx0XHRfdXRpbC5jc3MocGluVGFyZ2V0LCB7XHJcblx0XHRcdFx0XHRcdFx0XCJwb3NpdGlvblwiOiBcImZpeGVkXCJcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdC8vIHVwZGF0ZSBwaW4gc3BhY2VyXHJcblx0XHRcdFx0XHRcdHVwZGF0ZVBpbkRpbWVuc2lvbnMoKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR2YXJcclxuXHRcdFx0XHRcdFx0Zml4ZWRQb3MgPSBfdXRpbC5nZXQub2Zmc2V0KF9waW5PcHRpb25zLnNwYWNlciwgdHJ1ZSksIC8vIGdldCB2aWV3cG9ydCBwb3NpdGlvbiBvZiBzcGFjZXJcclxuXHRcdFx0XHRcdFx0c2Nyb2xsRGlzdGFuY2UgPSBfb3B0aW9ucy5yZXZlcnNlIHx8IF9vcHRpb25zLmR1cmF0aW9uID09PSAwID9cclxuXHRcdFx0XHRcdFx0Y29udGFpbmVySW5mby5zY3JvbGxQb3MgLSBfc2Nyb2xsT2Zmc2V0LnN0YXJ0IC8vIHF1aWNrZXJcclxuXHRcdFx0XHRcdFx0OlxyXG5cdFx0XHRcdFx0XHRNYXRoLnJvdW5kKF9wcm9ncmVzcyAqIF9vcHRpb25zLmR1cmF0aW9uICogMTApIC8gMTA7IC8vIGlmIG5vIHJldmVyc2UgYW5kIGR1cmluZyBwaW4gdGhlIHBvc2l0aW9uIG5lZWRzIHRvIGJlIHJlY2FsY3VsYXRlZCB1c2luZyB0aGUgcHJvZ3Jlc3NcclxuXHJcblx0XHRcdFx0XHQvLyBhZGQgc2Nyb2xsRGlzdGFuY2VcclxuXHRcdFx0XHRcdGZpeGVkUG9zW2NvbnRhaW5lckluZm8udmVydGljYWwgPyBcInRvcFwiIDogXCJsZWZ0XCJdICs9IHNjcm9sbERpc3RhbmNlO1xyXG5cclxuXHRcdFx0XHRcdC8vIHNldCBuZXcgdmFsdWVzXHJcblx0XHRcdFx0XHRfdXRpbC5jc3MoX3Bpbk9wdGlvbnMuc3BhY2VyLmZpcnN0Q2hpbGQsIHtcclxuXHRcdFx0XHRcdFx0dG9wOiBmaXhlZFBvcy50b3AsXHJcblx0XHRcdFx0XHRcdGxlZnQ6IGZpeGVkUG9zLmxlZnRcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyB1bnBpbm5lZCBzdGF0ZVxyXG5cdFx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRcdG5ld0NTUyA9IHtcclxuXHRcdFx0XHRcdFx0XHRwb3NpdGlvbjogX3Bpbk9wdGlvbnMuaW5GbG93ID8gXCJyZWxhdGl2ZVwiIDogXCJhYnNvbHV0ZVwiLFxyXG5cdFx0XHRcdFx0XHRcdHRvcDogMCxcclxuXHRcdFx0XHRcdFx0XHRsZWZ0OiAwXHJcblx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdGNoYW5nZSA9IF91dGlsLmNzcyhwaW5UYXJnZXQsIFwicG9zaXRpb25cIikgIT0gbmV3Q1NTLnBvc2l0aW9uO1xyXG5cclxuXHRcdFx0XHRcdGlmICghX3Bpbk9wdGlvbnMucHVzaEZvbGxvd2Vycykge1xyXG5cdFx0XHRcdFx0XHRuZXdDU1NbY29udGFpbmVySW5mby52ZXJ0aWNhbCA/IFwidG9wXCIgOiBcImxlZnRcIl0gPSBfb3B0aW9ucy5kdXJhdGlvbiAqIF9wcm9ncmVzcztcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoX29wdGlvbnMuZHVyYXRpb24gPiAwKSB7IC8vIG9ubHkgY29uY2VybnMgc2NlbmVzIHdpdGggZHVyYXRpb25cclxuXHRcdFx0XHRcdFx0aWYgKF9zdGF0ZSA9PT0gU0NFTkVfU1RBVEVfQUZURVIgJiYgcGFyc2VGbG9hdChfdXRpbC5jc3MoX3Bpbk9wdGlvbnMuc3BhY2VyLCBcInBhZGRpbmctdG9wXCIpKSA9PT0gMCkge1xyXG5cdFx0XHRcdFx0XHRcdGNoYW5nZSA9IHRydWU7IC8vIGlmIGluIGFmdGVyIHN0YXRlIGJ1dCBoYXZlbnQgdXBkYXRlZCBzcGFjZXIgeWV0IChqdW1wZWQgcGFzdCBwaW4pXHJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoX3N0YXRlID09PSBTQ0VORV9TVEFURV9CRUZPUkUgJiYgcGFyc2VGbG9hdChfdXRpbC5jc3MoX3Bpbk9wdGlvbnMuc3BhY2VyLCBcInBhZGRpbmctYm90dG9tXCIpKSA9PT0gMCkgeyAvLyBiZWZvcmVcclxuXHRcdFx0XHRcdFx0XHRjaGFuZ2UgPSB0cnVlOyAvLyBqdW1wZWQgcGFzdCBmaXhlZCBzdGF0ZSB1cHdhcmQgZGlyZWN0aW9uXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdC8vIHNldCBuZXcgdmFsdWVzXHJcblx0XHRcdFx0XHRfdXRpbC5jc3MocGluVGFyZ2V0LCBuZXdDU1MpO1xyXG5cdFx0XHRcdFx0aWYgKGNoYW5nZSkge1xyXG5cdFx0XHRcdFx0XHQvLyB1cGRhdGUgcGluIHNwYWNlciBpZiBzdGF0ZSBjaGFuZ2VkXHJcblx0XHRcdFx0XHRcdHVwZGF0ZVBpbkRpbWVuc2lvbnMoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBVcGRhdGUgdGhlIHBpbiBzcGFjZXIgYW5kL29yIGVsZW1lbnQgc2l6ZS5cclxuXHRcdCAqIFRoZSBzaXplIG9mIHRoZSBzcGFjZXIgbmVlZHMgdG8gYmUgdXBkYXRlZCB3aGVuZXZlciB0aGUgZHVyYXRpb24gb2YgdGhlIHNjZW5lIGNoYW5nZXMsIGlmIGl0IGlzIHRvIHB1c2ggZG93biBmb2xsb3dpbmcgZWxlbWVudHMuXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgdXBkYXRlUGluRGltZW5zaW9ucyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0aWYgKF9waW4gJiYgX2NvbnRyb2xsZXIgJiYgX3Bpbk9wdGlvbnMuaW5GbG93KSB7IC8vIG5vIHNwYWNlcnJlc2l6ZSwgaWYgb3JpZ2luYWwgcG9zaXRpb24gaXMgYWJzb2x1dGVcclxuXHRcdFx0XHR2YXJcclxuXHRcdFx0XHRcdGFmdGVyID0gKF9zdGF0ZSA9PT0gU0NFTkVfU1RBVEVfQUZURVIpLFxyXG5cdFx0XHRcdFx0YmVmb3JlID0gKF9zdGF0ZSA9PT0gU0NFTkVfU1RBVEVfQkVGT1JFKSxcclxuXHRcdFx0XHRcdGR1cmluZyA9IChfc3RhdGUgPT09IFNDRU5FX1NUQVRFX0RVUklORyksXHJcblx0XHRcdFx0XHR2ZXJ0aWNhbCA9IF9jb250cm9sbGVyLmluZm8oXCJ2ZXJ0aWNhbFwiKSxcclxuXHRcdFx0XHRcdHBpblRhcmdldCA9IF9waW5PcHRpb25zLnNwYWNlci5maXJzdENoaWxkLCAvLyB1c3VhbGx5IHRoZSBwaW5lZCBlbGVtZW50IGJ1dCBjYW4gYWxzbyBiZSBhbm90aGVyIHNwYWNlciAoY2FzY2FkZWQgcGlucylcclxuXHRcdFx0XHRcdG1hcmdpbkNvbGxhcHNlID0gX3V0aWwuaXNNYXJnaW5Db2xsYXBzZVR5cGUoX3V0aWwuY3NzKF9waW5PcHRpb25zLnNwYWNlciwgXCJkaXNwbGF5XCIpKSxcclxuXHRcdFx0XHRcdGNzcyA9IHt9O1xyXG5cclxuXHRcdFx0XHQvLyBzZXQgbmV3IHNpemVcclxuXHRcdFx0XHQvLyBpZiByZWxzaXplOiBzcGFjZXIgLT4gcGluIHwgZWxzZTogcGluIC0+IHNwYWNlclxyXG5cdFx0XHRcdGlmIChfcGluT3B0aW9ucy5yZWxTaXplLndpZHRoIHx8IF9waW5PcHRpb25zLnJlbFNpemUuYXV0b0Z1bGxXaWR0aCkge1xyXG5cdFx0XHRcdFx0aWYgKGR1cmluZykge1xyXG5cdFx0XHRcdFx0XHRfdXRpbC5jc3MoX3Bpbiwge1xyXG5cdFx0XHRcdFx0XHRcdFwid2lkdGhcIjogX3V0aWwuZ2V0LndpZHRoKF9waW5PcHRpb25zLnNwYWNlcilcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRfdXRpbC5jc3MoX3Bpbiwge1xyXG5cdFx0XHRcdFx0XHRcdFwid2lkdGhcIjogXCIxMDAlXCJcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIG1pbndpZHRoIGlzIG5lZWRlZCBmb3IgY2FzY2FkZWQgcGlucy5cclxuXHRcdFx0XHRcdGNzc1tcIm1pbi13aWR0aFwiXSA9IF91dGlsLmdldC53aWR0aCh2ZXJ0aWNhbCA/IF9waW4gOiBwaW5UYXJnZXQsIHRydWUsIHRydWUpO1xyXG5cdFx0XHRcdFx0Y3NzLndpZHRoID0gZHVyaW5nID8gY3NzW1wibWluLXdpZHRoXCJdIDogXCJhdXRvXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChfcGluT3B0aW9ucy5yZWxTaXplLmhlaWdodCkge1xyXG5cdFx0XHRcdFx0aWYgKGR1cmluZykge1xyXG5cdFx0XHRcdFx0XHQvLyB0aGUgb25seSBwYWRkaW5nIHRoZSBzcGFjZXIgc2hvdWxkIGV2ZXIgaW5jbHVkZSBpcyB0aGUgZHVyYXRpb24gKGlmIHB1c2hGb2xsb3dlcnMgPSB0cnVlKSwgc28gd2UgbmVlZCB0byBzdWJzdHJhY3QgdGhhdC5cclxuXHRcdFx0XHRcdFx0X3V0aWwuY3NzKF9waW4sIHtcclxuXHRcdFx0XHRcdFx0XHRcImhlaWdodFwiOiBfdXRpbC5nZXQuaGVpZ2h0KF9waW5PcHRpb25zLnNwYWNlcikgLSAoX3Bpbk9wdGlvbnMucHVzaEZvbGxvd2VycyA/IF9vcHRpb25zLmR1cmF0aW9uIDogMClcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRfdXRpbC5jc3MoX3Bpbiwge1xyXG5cdFx0XHRcdFx0XHRcdFwiaGVpZ2h0XCI6IFwiMTAwJVwiXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyBtYXJnaW4gaXMgb25seSBpbmNsdWRlZCBpZiBpdCdzIGEgY2FzY2FkZWQgcGluIHRvIHJlc29sdmUgYW4gSUU5IGJ1Z1xyXG5cdFx0XHRcdFx0Y3NzW1wibWluLWhlaWdodFwiXSA9IF91dGlsLmdldC5oZWlnaHQodmVydGljYWwgPyBwaW5UYXJnZXQgOiBfcGluLCB0cnVlLCAhbWFyZ2luQ29sbGFwc2UpOyAvLyBuZWVkZWQgZm9yIGNhc2NhZGluZyBwaW5zXHJcblx0XHRcdFx0XHRjc3MuaGVpZ2h0ID0gZHVyaW5nID8gY3NzW1wibWluLWhlaWdodFwiXSA6IFwiYXV0b1wiO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gYWRkIHNwYWNlIGZvciBkdXJhdGlvbiBpZiBwdXNoRm9sbG93ZXJzIGlzIHRydWVcclxuXHRcdFx0XHRpZiAoX3Bpbk9wdGlvbnMucHVzaEZvbGxvd2Vycykge1xyXG5cdFx0XHRcdFx0Y3NzW1wicGFkZGluZ1wiICsgKHZlcnRpY2FsID8gXCJUb3BcIiA6IFwiTGVmdFwiKV0gPSBfb3B0aW9ucy5kdXJhdGlvbiAqIF9wcm9ncmVzcztcclxuXHRcdFx0XHRcdGNzc1tcInBhZGRpbmdcIiArICh2ZXJ0aWNhbCA/IFwiQm90dG9tXCIgOiBcIlJpZ2h0XCIpXSA9IF9vcHRpb25zLmR1cmF0aW9uICogKDEgLSBfcHJvZ3Jlc3MpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRfdXRpbC5jc3MoX3Bpbk9wdGlvbnMuc3BhY2VyLCBjc3MpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogVXBkYXRlcyB0aGUgUGluIHN0YXRlIChpbiBjZXJ0YWluIHNjZW5hcmlvcylcclxuXHRcdCAqIElmIHRoZSBjb250cm9sbGVyIGNvbnRhaW5lciBpcyBub3QgdGhlIGRvY3VtZW50IGFuZCB3ZSBhcmUgbWlkLXBpbi1waGFzZSBzY3JvbGxpbmcgb3IgcmVzaXppbmcgdGhlIG1haW4gZG9jdW1lbnQgY2FuIHJlc3VsdCB0byB3cm9uZyBwaW4gcG9zaXRpb25zLlxyXG5cdFx0ICogU28gdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgb24gcmVzaXplIGFuZCBzY3JvbGwgb2YgdGhlIGRvY3VtZW50LlxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIHVwZGF0ZVBpbkluQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRpZiAoX2NvbnRyb2xsZXIgJiYgX3BpbiAmJiBfc3RhdGUgPT09IFNDRU5FX1NUQVRFX0RVUklORyAmJiAhX2NvbnRyb2xsZXIuaW5mbyhcImlzRG9jdW1lbnRcIikpIHtcclxuXHRcdFx0XHR1cGRhdGVQaW5TdGF0ZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogVXBkYXRlcyB0aGUgUGluIHNwYWNlciBzaXplIHN0YXRlIChpbiBjZXJ0YWluIHNjZW5hcmlvcylcclxuXHRcdCAqIElmIGNvbnRhaW5lciBpcyByZXNpemVkIGR1cmluZyBwaW4gYW5kIHJlbGF0aXZlbHkgc2l6ZWQgdGhlIHNpemUgb2YgdGhlIHBpbiBtaWdodCBuZWVkIHRvIGJlIHVwZGF0ZWQuLi5cclxuXHRcdCAqIFNvIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIHJlc2l6ZSBvZiB0aGUgY29udGFpbmVyLlxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIHVwZGF0ZVJlbGF0aXZlUGluU3BhY2VyID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRpZiAoX2NvbnRyb2xsZXIgJiYgX3BpbiAmJiAvLyB3ZWxsLCBkdWhcclxuXHRcdFx0XHRfc3RhdGUgPT09IFNDRU5FX1NUQVRFX0RVUklORyAmJiAvLyBlbGVtZW50IGluIHBpbm5lZCBzdGF0ZT9cclxuXHRcdFx0XHQoIC8vIGlzIHdpZHRoIG9yIGhlaWdodCByZWxhdGl2ZWx5IHNpemVkLCBidXQgbm90IGluIHJlbGF0aW9uIHRvIGJvZHk/IHRoZW4gd2UgbmVlZCB0byByZWNhbGMuXHJcblx0XHRcdFx0XHQoKF9waW5PcHRpb25zLnJlbFNpemUud2lkdGggfHwgX3Bpbk9wdGlvbnMucmVsU2l6ZS5hdXRvRnVsbFdpZHRoKSAmJiBfdXRpbC5nZXQud2lkdGgod2luZG93KSAhPSBfdXRpbC5nZXQud2lkdGgoX3Bpbk9wdGlvbnMuc3BhY2VyLnBhcmVudE5vZGUpKSB8fFxyXG5cdFx0XHRcdFx0KF9waW5PcHRpb25zLnJlbFNpemUuaGVpZ2h0ICYmIF91dGlsLmdldC5oZWlnaHQod2luZG93KSAhPSBfdXRpbC5nZXQuaGVpZ2h0KF9waW5PcHRpb25zLnNwYWNlci5wYXJlbnROb2RlKSlcclxuXHRcdFx0XHQpXHJcblx0XHRcdCkge1xyXG5cdFx0XHRcdHVwZGF0ZVBpbkRpbWVuc2lvbnMoKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIElzIGNhbGxlZCwgd2hlbiB0aGUgbW91c2V3aGVsIGlzIHVzZWQgd2hpbGUgb3ZlciBhIHBpbm5lZCBlbGVtZW50IGluc2lkZSBhIGRpdiBjb250YWluZXIuXHJcblx0XHQgKiBJZiB0aGUgc2NlbmUgaXMgaW4gZml4ZWQgc3RhdGUgc2Nyb2xsIGV2ZW50cyB3b3VsZCBiZSBjb3VudGVkIHRvd2FyZHMgdGhlIGJvZHkuIFRoaXMgZm9yd2FyZHMgdGhlIGV2ZW50IHRvIHRoZSBzY3JvbGwgY29udGFpbmVyLlxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIG9uTW91c2V3aGVlbE92ZXJQaW4gPSBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRpZiAoX2NvbnRyb2xsZXIgJiYgX3BpbiAmJiBfc3RhdGUgPT09IFNDRU5FX1NUQVRFX0RVUklORyAmJiAhX2NvbnRyb2xsZXIuaW5mbyhcImlzRG9jdW1lbnRcIikpIHsgLy8gaW4gcGluIHN0YXRlXHJcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdF9jb250cm9sbGVyLl9zZXRTY3JvbGxQb3MoX2NvbnRyb2xsZXIuaW5mbyhcInNjcm9sbFBvc1wiKSAtICgoZS53aGVlbERlbHRhIHx8IGVbX2NvbnRyb2xsZXIuaW5mbyhcInZlcnRpY2FsXCIpID8gXCJ3aGVlbERlbHRhWVwiIDogXCJ3aGVlbERlbHRhWFwiXSkgLyAzIHx8IC1lLmRldGFpbCAqIDMwKSk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBQaW4gYW4gZWxlbWVudCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBzY2VuZS5cclxuXHRcdCAqIElmIHRoZSBzY2VuZSBkdXJhdGlvbiBpcyAwIHRoZSBlbGVtZW50IHdpbGwgb25seSBiZSB1bnBpbm5lZCwgaWYgdGhlIHVzZXIgc2Nyb2xscyBiYWNrIHBhc3QgdGhlIHN0YXJ0IHBvc2l0aW9uLiAgXHJcblx0XHQgKiBNYWtlIHN1cmUgb25seSBvbmUgcGluIGlzIGFwcGxpZWQgdG8gYW4gZWxlbWVudCBhdCB0aGUgc2FtZSB0aW1lLlxyXG5cdFx0ICogQW4gZWxlbWVudCBjYW4gYmUgcGlubmVkIG11bHRpcGxlIHRpbWVzLCBidXQgb25seSBzdWNjZXNzaXZlbHkuXHJcblx0XHQgKiBfKipOT1RFOioqIFRoZSBvcHRpb24gYHB1c2hGb2xsb3dlcnNgIGhhcyBubyBlZmZlY3QsIHdoZW4gdGhlIHNjZW5lIGR1cmF0aW9uIGlzIDAuX1xyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNzZXRQaW5cclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBwaW4gZWxlbWVudCBhbmQgcHVzaCBhbGwgZm9sbG93aW5nIGVsZW1lbnRzIGRvd24gYnkgdGhlIGFtb3VudCBvZiB0aGUgcGluIGR1cmF0aW9uLlxyXG5cdFx0ICogc2NlbmUuc2V0UGluKFwiI3BpblwiKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBwaW4gZWxlbWVudCBhbmQga2VlcGluZyBhbGwgZm9sbG93aW5nIGVsZW1lbnRzIGluIHRoZWlyIHBsYWNlLiBUaGUgcGlubmVkIGVsZW1lbnQgd2lsbCBtb3ZlIHBhc3QgdGhlbS5cclxuXHRcdCAqIHNjZW5lLnNldFBpbihcIiNwaW5cIiwge3B1c2hGb2xsb3dlcnM6IGZhbHNlfSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHsoc3RyaW5nfG9iamVjdCl9IGVsZW1lbnQgLSBBIFNlbGVjdG9yIHRhcmdldGluZyBhbiBlbGVtZW50IG9yIGEgRE9NIG9iamVjdCB0aGF0IGlzIHN1cHBvc2VkIHRvIGJlIHBpbm5lZC5cclxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBbc2V0dGluZ3NdIC0gc2V0dGluZ3MgZm9yIHRoZSBwaW5cclxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3NldHRpbmdzLnB1c2hGb2xsb3dlcnM9dHJ1ZV0gLSBJZiBgdHJ1ZWAgZm9sbG93aW5nIGVsZW1lbnRzIHdpbGwgYmUgXCJwdXNoZWRcIiBkb3duIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIHBpbiwgaWYgYGZhbHNlYCB0aGUgcGlubmVkIGVsZW1lbnQgd2lsbCBqdXN0IHNjcm9sbCBwYXN0IHRoZW0uICBcclxuXHRcdCBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgICBJZ25vcmVkLCB3aGVuIGR1cmF0aW9uIGlzIGAwYC5cclxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBbc2V0dGluZ3Muc3BhY2VyQ2xhc3M9XCJzY3JvbGxtYWdpYy1waW4tc3BhY2VyXCJdIC0gQ2xhc3NuYW1lIG9mIHRoZSBwaW4gc3BhY2VyIGVsZW1lbnQsIHdoaWNoIGlzIHVzZWQgdG8gcmVwbGFjZSB0aGUgZWxlbWVudC5cclxuXHRcdCAqXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLnNldFBpbiA9IGZ1bmN0aW9uIChlbGVtZW50LCBzZXR0aW5ncykge1xyXG5cdFx0XHR2YXJcclxuXHRcdFx0XHRkZWZhdWx0U2V0dGluZ3MgPSB7XHJcblx0XHRcdFx0XHRwdXNoRm9sbG93ZXJzOiB0cnVlLFxyXG5cdFx0XHRcdFx0c3BhY2VyQ2xhc3M6IFwic2Nyb2xsbWFnaWMtcGluLXNwYWNlclwiXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0dmFyIHB1c2hGb2xsb3dlcnNBY3RpdmVseVNldCA9IHNldHRpbmdzICYmIHNldHRpbmdzLmhhc093blByb3BlcnR5KCdwdXNoRm9sbG93ZXJzJyk7XHJcblx0XHRcdHNldHRpbmdzID0gX3V0aWwuZXh0ZW5kKHt9LCBkZWZhdWx0U2V0dGluZ3MsIHNldHRpbmdzKTtcclxuXHJcblx0XHRcdC8vIHZhbGlkYXRlIEVsZW1lbnRcclxuXHRcdFx0ZWxlbWVudCA9IF91dGlsLmdldC5lbGVtZW50cyhlbGVtZW50KVswXTtcclxuXHRcdFx0aWYgKCFlbGVtZW50KSB7XHJcblx0XHRcdFx0bG9nKDEsIFwiRVJST1IgY2FsbGluZyBtZXRob2QgJ3NldFBpbigpJzogSW52YWxpZCBwaW4gZWxlbWVudCBzdXBwbGllZC5cIik7XHJcblx0XHRcdFx0cmV0dXJuIFNjZW5lOyAvLyBjYW5jZWxcclxuXHRcdFx0fSBlbHNlIGlmIChfdXRpbC5jc3MoZWxlbWVudCwgXCJwb3NpdGlvblwiKSA9PT0gXCJmaXhlZFwiKSB7XHJcblx0XHRcdFx0bG9nKDEsIFwiRVJST1IgY2FsbGluZyBtZXRob2QgJ3NldFBpbigpJzogUGluIGRvZXMgbm90IHdvcmsgd2l0aCBlbGVtZW50cyB0aGF0IGFyZSBwb3NpdGlvbmVkICdmaXhlZCcuXCIpO1xyXG5cdFx0XHRcdHJldHVybiBTY2VuZTsgLy8gY2FuY2VsXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChfcGluKSB7IC8vIHByZWV4aXN0aW5nIHBpbj9cclxuXHRcdFx0XHRpZiAoX3BpbiA9PT0gZWxlbWVudCkge1xyXG5cdFx0XHRcdFx0Ly8gc2FtZSBwaW4gd2UgYWxyZWFkeSBoYXZlIC0+IGRvIG5vdGhpbmdcclxuXHRcdFx0XHRcdHJldHVybiBTY2VuZTsgLy8gY2FuY2VsXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIGtpbGwgb2xkIHBpblxyXG5cdFx0XHRcdFx0U2NlbmUucmVtb3ZlUGluKCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cdFx0XHRfcGluID0gZWxlbWVudDtcclxuXHJcblx0XHRcdHZhclxyXG5cdFx0XHRcdHBhcmVudERpc3BsYXkgPSBfcGluLnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSxcclxuXHRcdFx0XHRib3VuZHNQYXJhbXMgPSBbXCJ0b3BcIiwgXCJsZWZ0XCIsIFwiYm90dG9tXCIsIFwicmlnaHRcIiwgXCJtYXJnaW5cIiwgXCJtYXJnaW5MZWZ0XCIsIFwibWFyZ2luUmlnaHRcIiwgXCJtYXJnaW5Ub3BcIiwgXCJtYXJnaW5Cb3R0b21cIl07XHJcblxyXG5cdFx0XHRfcGluLnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9ICdub25lJzsgLy8gaGFjayBzdGFydCB0byBmb3JjZSBjc3MgdG8gcmV0dXJuIHN0eWxlc2hlZXQgdmFsdWVzIGluc3RlYWQgb2YgY2FsY3VsYXRlZCBweCB2YWx1ZXMuXHJcblx0XHRcdHZhclxyXG5cdFx0XHRcdGluRmxvdyA9IF91dGlsLmNzcyhfcGluLCBcInBvc2l0aW9uXCIpICE9IFwiYWJzb2x1dGVcIixcclxuXHRcdFx0XHRwaW5DU1MgPSBfdXRpbC5jc3MoX3BpbiwgYm91bmRzUGFyYW1zLmNvbmNhdChbXCJkaXNwbGF5XCJdKSksXHJcblx0XHRcdFx0c2l6ZUNTUyA9IF91dGlsLmNzcyhfcGluLCBbXCJ3aWR0aFwiLCBcImhlaWdodFwiXSk7XHJcblx0XHRcdF9waW4ucGFyZW50Tm9kZS5zdHlsZS5kaXNwbGF5ID0gcGFyZW50RGlzcGxheTsgLy8gaGFjayBlbmQuXHJcblxyXG5cdFx0XHRpZiAoIWluRmxvdyAmJiBzZXR0aW5ncy5wdXNoRm9sbG93ZXJzKSB7XHJcblx0XHRcdFx0bG9nKDIsIFwiV0FSTklORzogSWYgdGhlIHBpbm5lZCBlbGVtZW50IGlzIHBvc2l0aW9uZWQgYWJzb2x1dGVseSBwdXNoRm9sbG93ZXJzIHdpbGwgYmUgZGlzYWJsZWQuXCIpO1xyXG5cdFx0XHRcdHNldHRpbmdzLnB1c2hGb2xsb3dlcnMgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IC8vIHdhaXQgdW50aWwgYWxsIGZpbmlzaGVkLCBiZWNhdXNlIHdpdGggcmVzcG9uc2l2ZSBkdXJhdGlvbiBpdCB3aWxsIG9ubHkgYmUgc2V0IGFmdGVyIHNjZW5lIGlzIGFkZGVkIHRvIGNvbnRyb2xsZXJcclxuXHRcdFx0XHRpZiAoX3BpbiAmJiBfb3B0aW9ucy5kdXJhdGlvbiA9PT0gMCAmJiBwdXNoRm9sbG93ZXJzQWN0aXZlbHlTZXQgJiYgc2V0dGluZ3MucHVzaEZvbGxvd2Vycykge1xyXG5cdFx0XHRcdFx0bG9nKDIsIFwiV0FSTklORzogcHVzaEZvbGxvd2VycyA9XCIsIHRydWUsIFwiaGFzIG5vIGVmZmVjdCwgd2hlbiBzY2VuZSBkdXJhdGlvbiBpcyAwLlwiKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIDApO1xyXG5cclxuXHRcdFx0Ly8gY3JlYXRlIHNwYWNlciBhbmQgaW5zZXJ0XHJcblx0XHRcdHZhclxyXG5cdFx0XHRcdHNwYWNlciA9IF9waW4ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIF9waW4pLFxyXG5cdFx0XHRcdHNwYWNlckNTUyA9IF91dGlsLmV4dGVuZChwaW5DU1MsIHtcclxuXHRcdFx0XHRcdHBvc2l0aW9uOiBpbkZsb3cgPyBcInJlbGF0aXZlXCIgOiBcImFic29sdXRlXCIsXHJcblx0XHRcdFx0XHRib3hTaXppbmc6IFwiY29udGVudC1ib3hcIixcclxuXHRcdFx0XHRcdG1vekJveFNpemluZzogXCJjb250ZW50LWJveFwiLFxyXG5cdFx0XHRcdFx0d2Via2l0Qm94U2l6aW5nOiBcImNvbnRlbnQtYm94XCJcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdGlmICghaW5GbG93KSB7IC8vIGNvcHkgc2l6ZSBpZiBwb3NpdGlvbmVkIGFic29sdXRlbHksIHRvIHdvcmsgZm9yIGJvdHRvbS9yaWdodCBwb3NpdGlvbmVkIGVsZW1lbnRzLlxyXG5cdFx0XHRcdF91dGlsLmV4dGVuZChzcGFjZXJDU1MsIF91dGlsLmNzcyhfcGluLCBbXCJ3aWR0aFwiLCBcImhlaWdodFwiXSkpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRfdXRpbC5jc3Moc3BhY2VyLCBzcGFjZXJDU1MpO1xyXG5cdFx0XHRzcGFjZXIuc2V0QXR0cmlidXRlKFBJTl9TUEFDRVJfQVRUUklCVVRFLCBcIlwiKTtcclxuXHRcdFx0X3V0aWwuYWRkQ2xhc3Moc3BhY2VyLCBzZXR0aW5ncy5zcGFjZXJDbGFzcyk7XHJcblxyXG5cdFx0XHQvLyBzZXQgdGhlIHBpbiBPcHRpb25zXHJcblx0XHRcdF9waW5PcHRpb25zID0ge1xyXG5cdFx0XHRcdHNwYWNlcjogc3BhY2VyLFxyXG5cdFx0XHRcdHJlbFNpemU6IHsgLy8gc2F2ZSBpZiBzaXplIGlzIGRlZmluZWQgdXNpbmcgJSB2YWx1ZXMuIGlmIHNvLCBoYW5kbGUgc3BhY2VyIHJlc2l6ZSBkaWZmZXJlbnRseS4uLlxyXG5cdFx0XHRcdFx0d2lkdGg6IHNpemVDU1Mud2lkdGguc2xpY2UoLTEpID09PSBcIiVcIixcclxuXHRcdFx0XHRcdGhlaWdodDogc2l6ZUNTUy5oZWlnaHQuc2xpY2UoLTEpID09PSBcIiVcIixcclxuXHRcdFx0XHRcdGF1dG9GdWxsV2lkdGg6IHNpemVDU1Mud2lkdGggPT09IFwiYXV0b1wiICYmIGluRmxvdyAmJiBfdXRpbC5pc01hcmdpbkNvbGxhcHNlVHlwZShwaW5DU1MuZGlzcGxheSlcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHB1c2hGb2xsb3dlcnM6IHNldHRpbmdzLnB1c2hGb2xsb3dlcnMsXHJcblx0XHRcdFx0aW5GbG93OiBpbkZsb3csIC8vIHN0b3JlcyBpZiB0aGUgZWxlbWVudCB0YWtlcyB1cCBzcGFjZSBpbiB0aGUgZG9jdW1lbnQgZmxvd1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0aWYgKCFfcGluLl9fX29yaWdTdHlsZSkge1xyXG5cdFx0XHRcdF9waW4uX19fb3JpZ1N0eWxlID0ge307XHJcblx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRwaW5JbmxpbmVDU1MgPSBfcGluLnN0eWxlLFxyXG5cdFx0XHRcdFx0Y29weVN0eWxlcyA9IGJvdW5kc1BhcmFtcy5jb25jYXQoW1wid2lkdGhcIiwgXCJoZWlnaHRcIiwgXCJwb3NpdGlvblwiLCBcImJveFNpemluZ1wiLCBcIm1vekJveFNpemluZ1wiLCBcIndlYmtpdEJveFNpemluZ1wiXSk7XHJcblx0XHRcdFx0Y29weVN0eWxlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWwpIHtcclxuXHRcdFx0XHRcdF9waW4uX19fb3JpZ1N0eWxlW3ZhbF0gPSBwaW5JbmxpbmVDU1NbdmFsXSB8fCBcIlwiO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBpZiByZWxhdGl2ZSBzaXplLCB0cmFuc2ZlciBpdCB0byBzcGFjZXIgYW5kIG1ha2UgcGluIGNhbGN1bGF0ZSBpdC4uLlxyXG5cdFx0XHRpZiAoX3Bpbk9wdGlvbnMucmVsU2l6ZS53aWR0aCkge1xyXG5cdFx0XHRcdF91dGlsLmNzcyhzcGFjZXIsIHtcclxuXHRcdFx0XHRcdHdpZHRoOiBzaXplQ1NTLndpZHRoXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKF9waW5PcHRpb25zLnJlbFNpemUuaGVpZ2h0KSB7XHJcblx0XHRcdFx0X3V0aWwuY3NzKHNwYWNlciwge1xyXG5cdFx0XHRcdFx0aGVpZ2h0OiBzaXplQ1NTLmhlaWdodFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBub3cgcGxhY2UgdGhlIHBpbiBlbGVtZW50IGluc2lkZSB0aGUgc3BhY2VyXHRcclxuXHRcdFx0c3BhY2VyLmFwcGVuZENoaWxkKF9waW4pO1xyXG5cdFx0XHQvLyBhbmQgc2V0IG5ldyBjc3NcclxuXHRcdFx0X3V0aWwuY3NzKF9waW4sIHtcclxuXHRcdFx0XHRwb3NpdGlvbjogaW5GbG93ID8gXCJyZWxhdGl2ZVwiIDogXCJhYnNvbHV0ZVwiLFxyXG5cdFx0XHRcdG1hcmdpbjogXCJhdXRvXCIsXHJcblx0XHRcdFx0dG9wOiBcImF1dG9cIixcclxuXHRcdFx0XHRsZWZ0OiBcImF1dG9cIixcclxuXHRcdFx0XHRib3R0b206IFwiYXV0b1wiLFxyXG5cdFx0XHRcdHJpZ2h0OiBcImF1dG9cIlxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGlmIChfcGluT3B0aW9ucy5yZWxTaXplLndpZHRoIHx8IF9waW5PcHRpb25zLnJlbFNpemUuYXV0b0Z1bGxXaWR0aCkge1xyXG5cdFx0XHRcdF91dGlsLmNzcyhfcGluLCB7XHJcblx0XHRcdFx0XHRib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxyXG5cdFx0XHRcdFx0bW96Qm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcclxuXHRcdFx0XHRcdHdlYmtpdEJveFNpemluZzogXCJib3JkZXItYm94XCJcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gYWRkIGxpc3RlbmVyIHRvIGRvY3VtZW50IHRvIHVwZGF0ZSBwaW4gcG9zaXRpb24gaW4gY2FzZSBjb250cm9sbGVyIGlzIG5vdCB0aGUgZG9jdW1lbnQuXHJcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB1cGRhdGVQaW5JbkNvbnRhaW5lcik7XHJcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB1cGRhdGVQaW5JbkNvbnRhaW5lcik7XHJcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB1cGRhdGVSZWxhdGl2ZVBpblNwYWNlcik7XHJcblx0XHRcdC8vIGFkZCBtb3VzZXdoZWVsIGxpc3RlbmVyIHRvIGNhdGNoIHNjcm9sbHMgb3ZlciBmaXhlZCBlbGVtZW50c1xyXG5cdFx0XHRfcGluLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXdoZWVsXCIsIG9uTW91c2V3aGVlbE92ZXJQaW4pO1xyXG5cdFx0XHRfcGluLmFkZEV2ZW50TGlzdGVuZXIoXCJET01Nb3VzZVNjcm9sbFwiLCBvbk1vdXNld2hlZWxPdmVyUGluKTtcclxuXHJcblx0XHRcdGxvZygzLCBcImFkZGVkIHBpblwiKTtcclxuXHJcblx0XHRcdC8vIGZpbmFsbHkgdXBkYXRlIHRoZSBwaW4gdG8gaW5pdFxyXG5cdFx0XHR1cGRhdGVQaW5TdGF0ZSgpO1xyXG5cclxuXHRcdFx0cmV0dXJuIFNjZW5lO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFJlbW92ZSB0aGUgcGluIGZyb20gdGhlIHNjZW5lLlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNyZW1vdmVQaW5cclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyByZW1vdmUgdGhlIHBpbiBmcm9tIHRoZSBzY2VuZSB3aXRob3V0IHJlc2V0dGluZyBpdCAodGhlIHNwYWNlciBpcyBub3QgcmVtb3ZlZClcclxuXHRcdCAqIHNjZW5lLnJlbW92ZVBpbigpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHJlbW92ZSB0aGUgcGluIGZyb20gdGhlIHNjZW5lIGFuZCByZXNldCB0aGUgcGluIGVsZW1lbnQgdG8gaXRzIGluaXRpYWwgcG9zaXRpb24gKHNwYWNlciBpcyByZW1vdmVkKVxyXG5cdFx0ICogc2NlbmUucmVtb3ZlUGluKHRydWUpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Jlc2V0PWZhbHNlXSAtIElmIGBmYWxzZWAgdGhlIHNwYWNlciB3aWxsIG5vdCBiZSByZW1vdmVkIGFuZCB0aGUgZWxlbWVudCdzIHBvc2l0aW9uIHdpbGwgbm90IGJlIHJlc2V0LlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5yZW1vdmVQaW4gPSBmdW5jdGlvbiAocmVzZXQpIHtcclxuXHRcdFx0aWYgKF9waW4pIHtcclxuXHRcdFx0XHRpZiAoX3N0YXRlID09PSBTQ0VORV9TVEFURV9EVVJJTkcpIHtcclxuXHRcdFx0XHRcdHVwZGF0ZVBpblN0YXRlKHRydWUpOyAvLyBmb3JjZSB1bnBpbiBhdCBwb3NpdGlvblxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAocmVzZXQgfHwgIV9jb250cm9sbGVyKSB7IC8vIGlmIHRoZXJlJ3Mgbm8gY29udHJvbGxlciBubyBwcm9ncmVzcyB3YXMgbWFkZSBhbnl3YXkuLi5cclxuXHRcdFx0XHRcdHZhciBwaW5UYXJnZXQgPSBfcGluT3B0aW9ucy5zcGFjZXIuZmlyc3RDaGlsZDsgLy8gdXN1YWxseSB0aGUgcGluIGVsZW1lbnQsIGJ1dCBtYXkgYmUgYW5vdGhlciBzcGFjZXIgKGNhc2NhZGVkIHBpbnMpLi4uXHJcblx0XHRcdFx0XHRpZiAocGluVGFyZ2V0Lmhhc0F0dHJpYnV0ZShQSU5fU1BBQ0VSX0FUVFJJQlVURSkpIHsgLy8gY29weSBtYXJnaW5zIHRvIGNoaWxkIHNwYWNlclxyXG5cdFx0XHRcdFx0XHR2YXJcclxuXHRcdFx0XHRcdFx0XHRzdHlsZSA9IF9waW5PcHRpb25zLnNwYWNlci5zdHlsZSxcclxuXHRcdFx0XHRcdFx0XHR2YWx1ZXMgPSBbXCJtYXJnaW5cIiwgXCJtYXJnaW5MZWZ0XCIsIFwibWFyZ2luUmlnaHRcIiwgXCJtYXJnaW5Ub3BcIiwgXCJtYXJnaW5Cb3R0b21cIl0sXHJcblx0XHRcdFx0XHRcdFx0bWFyZ2lucyA9IHt9O1xyXG5cdFx0XHRcdFx0XHR2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsKSB7XHJcblx0XHRcdFx0XHRcdFx0bWFyZ2luc1t2YWxdID0gc3R5bGVbdmFsXSB8fCBcIlwiO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0X3V0aWwuY3NzKHBpblRhcmdldCwgbWFyZ2lucyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRfcGluT3B0aW9ucy5zcGFjZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocGluVGFyZ2V0LCBfcGluT3B0aW9ucy5zcGFjZXIpO1xyXG5cdFx0XHRcdFx0X3Bpbk9wdGlvbnMuc3BhY2VyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoX3Bpbk9wdGlvbnMuc3BhY2VyKTtcclxuXHRcdFx0XHRcdGlmICghX3Bpbi5wYXJlbnROb2RlLmhhc0F0dHJpYnV0ZShQSU5fU1BBQ0VSX0FUVFJJQlVURSkpIHsgLy8gaWYgaXQncyB0aGUgbGFzdCBwaW4gZm9yIHRoaXMgZWxlbWVudCAtPiByZXN0b3JlIGlubGluZSBzdHlsZXNcclxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogb25seSBjb3JyZWN0bHkgc2V0IGZvciBmaXJzdCBwaW4gKHdoZW4gY2FzY2FkaW5nKSAtIGhvdyB0byBmaXg/XHJcblx0XHRcdFx0XHRcdF91dGlsLmNzcyhfcGluLCBfcGluLl9fX29yaWdTdHlsZSk7XHJcblx0XHRcdFx0XHRcdGRlbGV0ZSBfcGluLl9fX29yaWdTdHlsZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHVwZGF0ZVBpbkluQ29udGFpbmVyKTtcclxuXHRcdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdXBkYXRlUGluSW5Db250YWluZXIpO1xyXG5cdFx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB1cGRhdGVSZWxhdGl2ZVBpblNwYWNlcik7XHJcblx0XHRcdFx0X3Bpbi5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V3aGVlbFwiLCBvbk1vdXNld2hlZWxPdmVyUGluKTtcclxuXHRcdFx0XHRfcGluLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Nb3VzZVNjcm9sbFwiLCBvbk1vdXNld2hlZWxPdmVyUGluKTtcclxuXHRcdFx0XHRfcGluID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdGxvZygzLCBcInJlbW92ZWQgcGluIChyZXNldDogXCIgKyAocmVzZXQgPyBcInRydWVcIiA6IFwiZmFsc2VcIikgKyBcIilcIik7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIFNjZW5lO1xyXG5cdFx0fTtcclxuXHJcblxyXG5cdFx0dmFyXHJcblx0XHRcdF9jc3NDbGFzc2VzLFxyXG5cdFx0XHRfY3NzQ2xhc3NFbGVtcyA9IFtdO1xyXG5cclxuXHRcdFNjZW5lXHJcblx0XHRcdC5vbihcImRlc3Ryb3kuaW50ZXJuYWxcIiwgZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0XHRTY2VuZS5yZW1vdmVDbGFzc1RvZ2dsZShlLnJlc2V0KTtcclxuXHRcdFx0fSk7XHJcblx0XHQvKipcclxuXHRcdCAqIERlZmluZSBhIGNzcyBjbGFzcyBtb2RpZmljYXRpb24gd2hpbGUgdGhlIHNjZW5lIGlzIGFjdGl2ZS4gIFxyXG5cdFx0ICogV2hlbiB0aGUgc2NlbmUgdHJpZ2dlcnMgdGhlIGNsYXNzZXMgd2lsbCBiZSBhZGRlZCB0byB0aGUgc3VwcGxpZWQgZWxlbWVudCBhbmQgcmVtb3ZlZCwgd2hlbiB0aGUgc2NlbmUgaXMgb3Zlci5cclxuXHRcdCAqIElmIHRoZSBzY2VuZSBkdXJhdGlvbiBpcyAwIHRoZSBjbGFzc2VzIHdpbGwgb25seSBiZSByZW1vdmVkIGlmIHRoZSB1c2VyIHNjcm9sbHMgYmFjayBwYXN0IHRoZSBzdGFydCBwb3NpdGlvbi5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjc2V0Q2xhc3NUb2dnbGVcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBhZGQgdGhlIGNsYXNzICdteWNsYXNzJyB0byB0aGUgZWxlbWVudCB3aXRoIHRoZSBpZCAnbXktZWxlbScgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgc2NlbmVcclxuXHRcdCAqIHNjZW5lLnNldENsYXNzVG9nZ2xlKFwiI215LWVsZW1cIiwgXCJteWNsYXNzXCIpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIGFkZCBtdWx0aXBsZSBjbGFzc2VzIHRvIG11bHRpcGxlIGVsZW1lbnRzIGRlZmluZWQgYnkgdGhlIHNlbGVjdG9yICcuY2xhc3NDaGFuZ2UnXHJcblx0XHQgKiBzY2VuZS5zZXRDbGFzc1RvZ2dsZShcIi5jbGFzc0NoYW5nZVwiLCBcImNsYXNzMSBjbGFzczIgY2xhc3MzXCIpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7KHN0cmluZ3xvYmplY3QpfSBlbGVtZW50IC0gQSBTZWxlY3RvciB0YXJnZXRpbmcgb25lIG9yIG1vcmUgZWxlbWVudHMgb3IgYSBET00gb2JqZWN0IHRoYXQgaXMgc3VwcG9zZWQgdG8gYmUgbW9kaWZpZWQuXHJcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NlcyAtIE9uZSBvciBtb3JlIENsYXNzbmFtZXMgKHNlcGFyYXRlZCBieSBzcGFjZSkgdGhhdCBzaG91bGQgYmUgYWRkZWQgdG8gdGhlIGVsZW1lbnQgZHVyaW5nIHRoZSBzY2VuZS5cclxuXHRcdCAqXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLnNldENsYXNzVG9nZ2xlID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNsYXNzZXMpIHtcclxuXHRcdFx0dmFyIGVsZW1zID0gX3V0aWwuZ2V0LmVsZW1lbnRzKGVsZW1lbnQpO1xyXG5cdFx0XHRpZiAoZWxlbXMubGVuZ3RoID09PSAwIHx8ICFfdXRpbC50eXBlLlN0cmluZyhjbGFzc2VzKSkge1xyXG5cdFx0XHRcdGxvZygxLCBcIkVSUk9SIGNhbGxpbmcgbWV0aG9kICdzZXRDbGFzc1RvZ2dsZSgpJzogSW52YWxpZCBcIiArIChlbGVtcy5sZW5ndGggPT09IDAgPyBcImVsZW1lbnRcIiA6IFwiY2xhc3Nlc1wiKSArIFwiIHN1cHBsaWVkLlwiKTtcclxuXHRcdFx0XHRyZXR1cm4gU2NlbmU7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKF9jc3NDbGFzc0VsZW1zLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0XHQvLyByZW1vdmUgb2xkIG9uZXNcclxuXHRcdFx0XHRTY2VuZS5yZW1vdmVDbGFzc1RvZ2dsZSgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdF9jc3NDbGFzc2VzID0gY2xhc3NlcztcclxuXHRcdFx0X2Nzc0NsYXNzRWxlbXMgPSBlbGVtcztcclxuXHRcdFx0U2NlbmUub24oXCJlbnRlci5pbnRlcm5hbF9jbGFzcyBsZWF2ZS5pbnRlcm5hbF9jbGFzc1wiLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdHZhciB0b2dnbGUgPSBlLnR5cGUgPT09IFwiZW50ZXJcIiA/IF91dGlsLmFkZENsYXNzIDogX3V0aWwucmVtb3ZlQ2xhc3M7XHJcblx0XHRcdFx0X2Nzc0NsYXNzRWxlbXMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbSwga2V5KSB7XHJcblx0XHRcdFx0XHR0b2dnbGUoZWxlbSwgX2Nzc0NsYXNzZXMpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0cmV0dXJuIFNjZW5lO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFJlbW92ZSB0aGUgY2xhc3MgYmluZGluZyBmcm9tIHRoZSBzY2VuZS5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjcmVtb3ZlQ2xhc3NUb2dnbGVcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyByZW1vdmUgY2xhc3MgYmluZGluZyBmcm9tIHRoZSBzY2VuZSB3aXRob3V0IHJlc2V0XHJcblx0XHQgKiBzY2VuZS5yZW1vdmVDbGFzc1RvZ2dsZSgpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHJlbW92ZSBjbGFzcyBiaW5kaW5nIGFuZCByZW1vdmUgdGhlIGNoYW5nZXMgaXQgY2F1c2VkXHJcblx0XHQgKiBzY2VuZS5yZW1vdmVDbGFzc1RvZ2dsZSh0cnVlKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXNldD1mYWxzZV0gLSBJZiBgZmFsc2VgIGFuZCB0aGUgY2xhc3NlcyBhcmUgY3VycmVudGx5IGFjdGl2ZSwgdGhleSB3aWxsIHJlbWFpbiBvbiB0aGUgZWxlbWVudC4gSWYgYHRydWVgIHRoZXkgd2lsbCBiZSByZW1vdmVkLlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5yZW1vdmVDbGFzc1RvZ2dsZSA9IGZ1bmN0aW9uIChyZXNldCkge1xyXG5cdFx0XHRpZiAocmVzZXQpIHtcclxuXHRcdFx0XHRfY3NzQ2xhc3NFbGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtLCBrZXkpIHtcclxuXHRcdFx0XHRcdF91dGlsLnJlbW92ZUNsYXNzKGVsZW0sIF9jc3NDbGFzc2VzKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRTY2VuZS5vZmYoXCJzdGFydC5pbnRlcm5hbF9jbGFzcyBlbmQuaW50ZXJuYWxfY2xhc3NcIik7XHJcblx0XHRcdF9jc3NDbGFzc2VzID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRfY3NzQ2xhc3NFbGVtcyA9IFtdO1xyXG5cdFx0XHRyZXR1cm4gU2NlbmU7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIElOSVRcclxuXHRcdGNvbnN0cnVjdCgpO1xyXG5cdFx0cmV0dXJuIFNjZW5lO1xyXG5cdH07XHJcblxyXG5cdC8vIHN0b3JlIHBhZ2V3aWRlIHNjZW5lIG9wdGlvbnNcclxuXHR2YXIgU0NFTkVfT1BUSU9OUyA9IHtcclxuXHRcdGRlZmF1bHRzOiB7XHJcblx0XHRcdGR1cmF0aW9uOiAwLFxyXG5cdFx0XHRvZmZzZXQ6IDAsXHJcblx0XHRcdHRyaWdnZXJFbGVtZW50OiB1bmRlZmluZWQsXHJcblx0XHRcdHRyaWdnZXJIb29rOiAwLjUsXHJcblx0XHRcdHJldmVyc2U6IHRydWUsXHJcblx0XHRcdGxvZ2xldmVsOiAyXHJcblx0XHR9LFxyXG5cdFx0dmFsaWRhdGU6IHtcclxuXHRcdFx0b2Zmc2V0OiBmdW5jdGlvbiAodmFsKSB7XHJcblx0XHRcdFx0dmFsID0gcGFyc2VGbG9hdCh2YWwpO1xyXG5cdFx0XHRcdGlmICghX3V0aWwudHlwZS5OdW1iZXIodmFsKSkge1xyXG5cdFx0XHRcdFx0dGhyb3cgW1wiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJvZmZzZXRcXFwiOlwiLCB2YWxdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdmFsO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHR0cmlnZ2VyRWxlbWVudDogZnVuY3Rpb24gKHZhbCkge1xyXG5cdFx0XHRcdHZhbCA9IHZhbCB8fCB1bmRlZmluZWQ7XHJcblx0XHRcdFx0aWYgKHZhbCkge1xyXG5cdFx0XHRcdFx0dmFyIGVsZW0gPSBfdXRpbC5nZXQuZWxlbWVudHModmFsKVswXTtcclxuXHRcdFx0XHRcdGlmIChlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSkge1xyXG5cdFx0XHRcdFx0XHR2YWwgPSBlbGVtO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0dGhyb3cgW1wiRWxlbWVudCBkZWZpbmVkIGluIG9wdGlvbiBcXFwidHJpZ2dlckVsZW1lbnRcXFwiIHdhcyBub3QgZm91bmQ6XCIsIHZhbF07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB2YWw7XHJcblx0XHRcdH0sXHJcblx0XHRcdHRyaWdnZXJIb29rOiBmdW5jdGlvbiAodmFsKSB7XHJcblx0XHRcdFx0dmFyIHRyYW5zbGF0ZSA9IHtcclxuXHRcdFx0XHRcdFwib25DZW50ZXJcIjogMC41LFxyXG5cdFx0XHRcdFx0XCJvbkVudGVyXCI6IDEsXHJcblx0XHRcdFx0XHRcIm9uTGVhdmVcIjogMFxyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0aWYgKF91dGlsLnR5cGUuTnVtYmVyKHZhbCkpIHtcclxuXHRcdFx0XHRcdHZhbCA9IE1hdGgubWF4KDAsIE1hdGgubWluKHBhcnNlRmxvYXQodmFsKSwgMSkpOyAvLyAgbWFrZSBzdXJlIGl0cyBiZXR3ZWVlbiAwIGFuZCAxXHJcblx0XHRcdFx0fSBlbHNlIGlmICh2YWwgaW4gdHJhbnNsYXRlKSB7XHJcblx0XHRcdFx0XHR2YWwgPSB0cmFuc2xhdGVbdmFsXTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dGhyb3cgW1wiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJ0cmlnZ2VySG9va1xcXCI6IFwiLCB2YWxdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdmFsO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRyZXZlcnNlOiBmdW5jdGlvbiAodmFsKSB7XHJcblx0XHRcdFx0cmV0dXJuICEhdmFsOyAvLyBmb3JjZSBib29sZWFuXHJcblx0XHRcdH0sXHJcblx0XHRcdGxvZ2xldmVsOiBmdW5jdGlvbiAodmFsKSB7XHJcblx0XHRcdFx0dmFsID0gcGFyc2VJbnQodmFsKTtcclxuXHRcdFx0XHRpZiAoIV91dGlsLnR5cGUuTnVtYmVyKHZhbCkgfHwgdmFsIDwgMCB8fCB2YWwgPiAzKSB7XHJcblx0XHRcdFx0XHR0aHJvdyBbXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcImxvZ2xldmVsXFxcIjpcIiwgdmFsXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHZhbDtcclxuXHRcdFx0fVxyXG5cdFx0fSwgLy8gaG9sZGVyIGZvciAgdmFsaWRhdGlvbiBtZXRob2RzLiBkdXJhdGlvbiB2YWxpZGF0aW9uIGlzIGhhbmRsZWQgaW4gJ2dldHRlcnMtc2V0dGVycy5qcydcclxuXHRcdHNoaWZ0czogW1wiZHVyYXRpb25cIiwgXCJvZmZzZXRcIiwgXCJ0cmlnZ2VySG9va1wiXSwgLy8gbGlzdCBvZiBvcHRpb25zIHRoYXQgdHJpZ2dlciBhIGBzaGlmdGAgZXZlbnRcclxuXHR9O1xyXG5cdC8qXHJcblx0ICogbWV0aG9kIHVzZWQgdG8gYWRkIGFuIG9wdGlvbiB0byBTY3JvbGxNYWdpYyBTY2VuZXMuXHJcblx0ICogVE9ETzogRE9DIChwcml2YXRlIGZvciBkZXYpXHJcblx0ICovXHJcblx0U2Nyb2xsTWFnaWMuU2NlbmUuYWRkT3B0aW9uID0gZnVuY3Rpb24gKG5hbWUsIGRlZmF1bHRWYWx1ZSwgdmFsaWRhdGlvbkNhbGxiYWNrLCBzaGlmdHMpIHtcclxuXHRcdGlmICghKG5hbWUgaW4gU0NFTkVfT1BUSU9OUy5kZWZhdWx0cykpIHtcclxuXHRcdFx0U0NFTkVfT1BUSU9OUy5kZWZhdWx0c1tuYW1lXSA9IGRlZmF1bHRWYWx1ZTtcclxuXHRcdFx0U0NFTkVfT1BUSU9OUy52YWxpZGF0ZVtuYW1lXSA9IHZhbGlkYXRpb25DYWxsYmFjaztcclxuXHRcdFx0aWYgKHNoaWZ0cykge1xyXG5cdFx0XHRcdFNDRU5FX09QVElPTlMuc2hpZnRzLnB1c2gobmFtZSk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdFNjcm9sbE1hZ2ljLl91dGlsLmxvZygxLCBcIltzdGF0aWNdIFNjcm9sbE1hZ2ljLlNjZW5lIC0+IENhbm5vdCBhZGQgU2NlbmUgb3B0aW9uICdcIiArIG5hbWUgKyBcIicsIGJlY2F1c2UgaXQgYWxyZWFkeSBleGlzdHMuXCIpO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0Ly8gaW5zdGFuY2UgZXh0ZW5zaW9uIGZ1bmN0aW9uIGZvciBwbHVnaW5zXHJcblx0Ly8gVE9ETzogRE9DIChwcml2YXRlIGZvciBkZXYpXHJcblx0U2Nyb2xsTWFnaWMuU2NlbmUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuc2lvbikge1xyXG5cdFx0dmFyIG9sZENsYXNzID0gdGhpcztcclxuXHRcdFNjcm9sbE1hZ2ljLlNjZW5lID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRvbGRDbGFzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdFx0XHR0aGlzLiRzdXBlciA9IF91dGlsLmV4dGVuZCh7fSwgdGhpcyk7IC8vIGNvcHkgcGFyZW50IHN0YXRlXHJcblx0XHRcdHJldHVybiBleHRlbnNpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG5cdFx0fTtcclxuXHRcdF91dGlsLmV4dGVuZChTY3JvbGxNYWdpYy5TY2VuZSwgb2xkQ2xhc3MpOyAvLyBjb3B5IHByb3BlcnRpZXNcclxuXHRcdFNjcm9sbE1hZ2ljLlNjZW5lLnByb3RvdHlwZSA9IG9sZENsYXNzLnByb3RvdHlwZTsgLy8gY29weSBwcm90b3R5cGVcclxuXHRcdFNjcm9sbE1hZ2ljLlNjZW5lLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNjcm9sbE1hZ2ljLlNjZW5lOyAvLyByZXN0b3JlIGNvbnN0cnVjdG9yXHJcblx0fTtcclxuXHJcblxyXG5cclxuXHQvKipcclxuXHQgKiBUT0RPOiBET0NTIChwcml2YXRlIGZvciBkZXYpXHJcblx0ICogQGNsYXNzXHJcblx0ICogQHByaXZhdGVcclxuXHQgKi9cclxuXHJcblx0U2Nyb2xsTWFnaWMuRXZlbnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZXNwYWNlLCB0YXJnZXQsIHZhcnMpIHtcclxuXHRcdHZhcnMgPSB2YXJzIHx8IHt9O1xyXG5cdFx0Zm9yICh2YXIga2V5IGluIHZhcnMpIHtcclxuXHRcdFx0dGhpc1trZXldID0gdmFyc1trZXldO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy50eXBlID0gdHlwZTtcclxuXHRcdHRoaXMudGFyZ2V0ID0gdGhpcy5jdXJyZW50VGFyZ2V0ID0gdGFyZ2V0O1xyXG5cdFx0dGhpcy5uYW1lc3BhY2UgPSBuYW1lc3BhY2UgfHwgJyc7XHJcblx0XHR0aGlzLnRpbWVTdGFtcCA9IHRoaXMudGltZXN0YW1wID0gRGF0ZS5ub3coKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH07XHJcblxyXG5cdC8qXHJcblx0ICogVE9ETzogRE9DUyAocHJpdmF0ZSBmb3IgZGV2KVxyXG5cdCAqL1xyXG5cclxuXHR2YXIgX3V0aWwgPSBTY3JvbGxNYWdpYy5fdXRpbCA9IChmdW5jdGlvbiAod2luZG93KSB7XHJcblx0XHR2YXIgVSA9IHt9LFxyXG5cdFx0XHRpO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKiBpbnRlcm5hbCBoZWxwZXJzXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqL1xyXG5cclxuXHRcdC8vIHBhcnNlIGZsb2F0IGFuZCBmYWxsIGJhY2sgdG8gMC5cclxuXHRcdHZhciBmbG9hdHZhbCA9IGZ1bmN0aW9uIChudW1iZXIpIHtcclxuXHRcdFx0cmV0dXJuIHBhcnNlRmxvYXQobnVtYmVyKSB8fCAwO1xyXG5cdFx0fTtcclxuXHRcdC8vIGdldCBjdXJyZW50IHN0eWxlIElFIHNhZmUgKG90aGVyd2lzZSBJRSB3b3VsZCByZXR1cm4gY2FsY3VsYXRlZCB2YWx1ZXMgZm9yICdhdXRvJylcclxuXHRcdHZhciBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGZ1bmN0aW9uIChlbGVtKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLmN1cnJlbnRTdHlsZSA/IGVsZW0uY3VycmVudFN0eWxlIDogd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbSk7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIGdldCBlbGVtZW50IGRpbWVuc2lvbiAod2lkdGggb3IgaGVpZ2h0KVxyXG5cdFx0dmFyIF9kaW1lbnNpb24gPSBmdW5jdGlvbiAod2hpY2gsIGVsZW0sIG91dGVyLCBpbmNsdWRlTWFyZ2luKSB7XHJcblx0XHRcdGVsZW0gPSAoZWxlbSA9PT0gZG9jdW1lbnQpID8gd2luZG93IDogZWxlbTtcclxuXHRcdFx0aWYgKGVsZW0gPT09IHdpbmRvdykge1xyXG5cdFx0XHRcdGluY2x1ZGVNYXJnaW4gPSBmYWxzZTtcclxuXHRcdFx0fSBlbHNlIGlmICghX3R5cGUuRG9tRWxlbWVudChlbGVtKSkge1xyXG5cdFx0XHRcdHJldHVybiAwO1xyXG5cdFx0XHR9XHJcblx0XHRcdHdoaWNoID0gd2hpY2guY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB3aGljaC5zdWJzdHIoMSkudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0dmFyIGRpbWVuc2lvbiA9IChvdXRlciA/IGVsZW1bJ29mZnNldCcgKyB3aGljaF0gfHwgZWxlbVsnb3V0ZXInICsgd2hpY2hdIDogZWxlbVsnY2xpZW50JyArIHdoaWNoXSB8fCBlbGVtWydpbm5lcicgKyB3aGljaF0pIHx8IDA7XHJcblx0XHRcdGlmIChvdXRlciAmJiBpbmNsdWRlTWFyZ2luKSB7XHJcblx0XHRcdFx0dmFyIHN0eWxlID0gX2dldENvbXB1dGVkU3R5bGUoZWxlbSk7XHJcblx0XHRcdFx0ZGltZW5zaW9uICs9IHdoaWNoID09PSAnSGVpZ2h0JyA/IGZsb2F0dmFsKHN0eWxlLm1hcmdpblRvcCkgKyBmbG9hdHZhbChzdHlsZS5tYXJnaW5Cb3R0b20pIDogZmxvYXR2YWwoc3R5bGUubWFyZ2luTGVmdCkgKyBmbG9hdHZhbChzdHlsZS5tYXJnaW5SaWdodCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGRpbWVuc2lvbjtcclxuXHRcdH07XHJcblx0XHQvLyBjb252ZXJ0cyAnbWFyZ2luLXRvcCcgaW50byAnbWFyZ2luVG9wJ1xyXG5cdFx0dmFyIF9jYW1lbENhc2UgPSBmdW5jdGlvbiAoc3RyKSB7XHJcblx0XHRcdHJldHVybiBzdHIucmVwbGFjZSgvXlteYS16XSsoW2Etel0pL2csICckMScpLnJlcGxhY2UoLy0oW2Etel0pL2csIGZ1bmN0aW9uIChnKSB7XHJcblx0XHRcdFx0cmV0dXJuIGdbMV0udG9VcHBlckNhc2UoKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKiBleHRlcm5hbCBoZWxwZXJzXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqL1xyXG5cclxuXHRcdC8vIGV4dGVuZCBvYmog4oCTIHNhbWUgYXMgalF1ZXJ5LmV4dGVuZCh7fSwgb2JqQSwgb2JqQilcclxuXHRcdFUuZXh0ZW5kID0gZnVuY3Rpb24gKG9iaikge1xyXG5cdFx0XHRvYmogPSBvYmogfHwge307XHJcblx0XHRcdGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRpZiAoIWFyZ3VtZW50c1tpXSkge1xyXG5cdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmd1bWVudHNbaV0pIHtcclxuXHRcdFx0XHRcdGlmIChhcmd1bWVudHNbaV0uaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG5cdFx0XHRcdFx0XHRvYmpba2V5XSA9IGFyZ3VtZW50c1tpXVtrZXldO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gb2JqO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBjaGVjayBpZiBhIGNzcyBkaXNwbGF5IHR5cGUgcmVzdWx0cyBpbiBtYXJnaW4tY29sbGFwc2Ugb3Igbm90XHJcblx0XHRVLmlzTWFyZ2luQ29sbGFwc2VUeXBlID0gZnVuY3Rpb24gKHN0cikge1xyXG5cdFx0XHRyZXR1cm4gW1wiYmxvY2tcIiwgXCJmbGV4XCIsIFwibGlzdC1pdGVtXCIsIFwidGFibGVcIiwgXCItd2Via2l0LWJveFwiXS5pbmRleE9mKHN0cikgPiAtMTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gaW1wbGVtZW50YXRpb24gb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lXHJcblx0XHQvLyBiYXNlZCBvbiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9wYXVsaXJpc2gvMTU3OTY3MVxyXG5cdFx0dmFyXHJcblx0XHRcdGxhc3RUaW1lID0gMCxcclxuXHRcdFx0dmVuZG9ycyA9IFsnbXMnLCAnbW96JywgJ3dlYmtpdCcsICdvJ107XHJcblx0XHR2YXIgX3JlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XHJcblx0XHR2YXIgX2NhbmNlbEFuaW1hdGlvbkZyYW1lID0gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1xyXG5cdFx0Ly8gdHJ5IHZlbmRvciBwcmVmaXhlcyBpZiB0aGUgYWJvdmUgZG9lc24ndCB3b3JrXHJcblx0XHRmb3IgKGkgPSAwOyAhX3JlcXVlc3RBbmltYXRpb25GcmFtZSAmJiBpIDwgdmVuZG9ycy5sZW5ndGg7ICsraSkge1xyXG5cdFx0XHRfcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZlbmRvcnNbaV0gKyAnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XHJcblx0XHRcdF9jYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2ZW5kb3JzW2ldICsgJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ10gfHwgd2luZG93W3ZlbmRvcnNbaV0gKyAnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZmFsbGJhY2tzXHJcblx0XHRpZiAoIV9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcclxuXHRcdFx0X3JlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG5cdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0Y3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcclxuXHRcdFx0XHRcdHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSksXHJcblx0XHRcdFx0XHRpZCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0Y2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKTtcclxuXHRcdFx0XHRcdH0sIHRpbWVUb0NhbGwpO1xyXG5cdFx0XHRcdGxhc3RUaW1lID0gY3VyclRpbWUgKyB0aW1lVG9DYWxsO1xyXG5cdFx0XHRcdHJldHVybiBpZDtcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHRcdGlmICghX2NhbmNlbEFuaW1hdGlvbkZyYW1lKSB7XHJcblx0XHRcdF9jYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChpZCkge1xyXG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoaWQpO1xyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdFx0VS5yQUYgPSBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KTtcclxuXHRcdFUuY0FGID0gX2NhbmNlbEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KTtcclxuXHJcblx0XHR2YXJcclxuXHRcdFx0bG9nbGV2ZWxzID0gW1wiZXJyb3JcIiwgXCJ3YXJuXCIsIFwibG9nXCJdLFxyXG5cdFx0XHRjb25zb2xlID0gd2luZG93LmNvbnNvbGUgfHwge307XHJcblxyXG5cdFx0Y29uc29sZS5sb2cgPSBjb25zb2xlLmxvZyB8fCBmdW5jdGlvbiAoKSB7fTsgLy8gbm8gY29uc29sZSBsb2csIHdlbGwgLSBkbyBub3RoaW5nIHRoZW4uLi5cclxuXHRcdC8vIG1ha2Ugc3VyZSBtZXRob2RzIGZvciBhbGwgbGV2ZWxzIGV4aXN0LlxyXG5cdFx0Zm9yIChpID0gMDsgaSA8IGxvZ2xldmVscy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgbWV0aG9kID0gbG9nbGV2ZWxzW2ldO1xyXG5cdFx0XHRpZiAoIWNvbnNvbGVbbWV0aG9kXSkge1xyXG5cdFx0XHRcdGNvbnNvbGVbbWV0aG9kXSA9IGNvbnNvbGUubG9nOyAvLyBwcmVmZXIgLmxvZyBvdmVyIG5vdGhpbmdcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0VS5sb2cgPSBmdW5jdGlvbiAobG9nbGV2ZWwpIHtcclxuXHRcdFx0aWYgKGxvZ2xldmVsID4gbG9nbGV2ZWxzLmxlbmd0aCB8fCBsb2dsZXZlbCA8PSAwKSBsb2dsZXZlbCA9IGxvZ2xldmVscy5sZW5ndGg7XHJcblx0XHRcdHZhciBub3cgPSBuZXcgRGF0ZSgpLFxyXG5cdFx0XHRcdHRpbWUgPSAoXCIwXCIgKyBub3cuZ2V0SG91cnMoKSkuc2xpY2UoLTIpICsgXCI6XCIgKyAoXCIwXCIgKyBub3cuZ2V0TWludXRlcygpKS5zbGljZSgtMikgKyBcIjpcIiArIChcIjBcIiArIG5vdy5nZXRTZWNvbmRzKCkpLnNsaWNlKC0yKSArIFwiOlwiICsgKFwiMDBcIiArIG5vdy5nZXRNaWxsaXNlY29uZHMoKSkuc2xpY2UoLTMpLFxyXG5cdFx0XHRcdG1ldGhvZCA9IGxvZ2xldmVsc1tsb2dsZXZlbCAtIDFdLFxyXG5cdFx0XHRcdGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcclxuXHRcdFx0XHRmdW5jID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChjb25zb2xlW21ldGhvZF0sIGNvbnNvbGUpO1xyXG5cdFx0XHRhcmdzLnVuc2hpZnQodGltZSk7XHJcblx0XHRcdGZ1bmMuYXBwbHkoY29uc29sZSwgYXJncyk7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKiB0eXBlIHRlc3RpbmdcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICovXHJcblxyXG5cdFx0dmFyIF90eXBlID0gVS50eXBlID0gZnVuY3Rpb24gKHYpIHtcclxuXHRcdFx0cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KS5yZXBsYWNlKC9eXFxbb2JqZWN0ICguKylcXF0kLywgXCIkMVwiKS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0fTtcclxuXHRcdF90eXBlLlN0cmluZyA9IGZ1bmN0aW9uICh2KSB7XHJcblx0XHRcdHJldHVybiBfdHlwZSh2KSA9PT0gJ3N0cmluZyc7XHJcblx0XHR9O1xyXG5cdFx0X3R5cGUuRnVuY3Rpb24gPSBmdW5jdGlvbiAodikge1xyXG5cdFx0XHRyZXR1cm4gX3R5cGUodikgPT09ICdmdW5jdGlvbic7XHJcblx0XHR9O1xyXG5cdFx0X3R5cGUuQXJyYXkgPSBmdW5jdGlvbiAodikge1xyXG5cdFx0XHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2KTtcclxuXHRcdH07XHJcblx0XHRfdHlwZS5OdW1iZXIgPSBmdW5jdGlvbiAodikge1xyXG5cdFx0XHRyZXR1cm4gIV90eXBlLkFycmF5KHYpICYmICh2IC0gcGFyc2VGbG9hdCh2KSArIDEpID49IDA7XHJcblx0XHR9O1xyXG5cdFx0X3R5cGUuRG9tRWxlbWVudCA9IGZ1bmN0aW9uIChvKSB7XHJcblx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0dHlwZW9mIEhUTUxFbGVtZW50ID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBIVE1MRWxlbWVudCA9PT0gXCJmdW5jdGlvblwiID8gbyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8IG8gaW5zdGFuY2VvZiBTVkdFbGVtZW50IDogLy9ET00yXHJcblx0XHRcdFx0byAmJiB0eXBlb2YgbyA9PT0gXCJvYmplY3RcIiAmJiBvICE9PSBudWxsICYmIG8ubm9kZVR5cGUgPT09IDEgJiYgdHlwZW9mIG8ubm9kZU5hbWUgPT09IFwic3RyaW5nXCJcclxuXHRcdFx0KTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqIERPTSBFbGVtZW50IGluZm9cclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICovXHJcblx0XHQvLyBhbHdheXMgcmV0dXJucyBhIGxpc3Qgb2YgbWF0Y2hpbmcgRE9NIGVsZW1lbnRzLCBmcm9tIGEgc2VsZWN0b3IsIGEgRE9NIGVsZW1lbnQgb3IgYW4gbGlzdCBvZiBlbGVtZW50cyBvciBldmVuIGFuIGFycmF5IG9mIHNlbGVjdG9yc1xyXG5cdFx0dmFyIF9nZXQgPSBVLmdldCA9IHt9O1xyXG5cdFx0X2dldC5lbGVtZW50cyA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xyXG5cdFx0XHR2YXIgYXJyID0gW107XHJcblx0XHRcdGlmIChfdHlwZS5TdHJpbmcoc2VsZWN0b3IpKSB7XHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdHNlbGVjdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcblx0XHRcdFx0fSBjYXRjaCAoZSkgeyAvLyBpbnZhbGlkIHNlbGVjdG9yXHJcblx0XHRcdFx0XHRyZXR1cm4gYXJyO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoX3R5cGUoc2VsZWN0b3IpID09PSAnbm9kZWxpc3QnIHx8IF90eXBlLkFycmF5KHNlbGVjdG9yKSB8fCBzZWxlY3RvciBpbnN0YW5jZW9mIE5vZGVMaXN0KSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIHJlZiA9IGFyci5sZW5ndGggPSBzZWxlY3Rvci5sZW5ndGg7IGkgPCByZWY7IGkrKykgeyAvLyBsaXN0IG9mIGVsZW1lbnRzXHJcblx0XHRcdFx0XHR2YXIgZWxlbSA9IHNlbGVjdG9yW2ldO1xyXG5cdFx0XHRcdFx0YXJyW2ldID0gX3R5cGUuRG9tRWxlbWVudChlbGVtKSA/IGVsZW0gOiBfZ2V0LmVsZW1lbnRzKGVsZW0pOyAvLyBpZiBub3QgYW4gZWxlbWVudCwgdHJ5IHRvIHJlc29sdmUgcmVjdXJzaXZlbHlcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSBpZiAoX3R5cGUuRG9tRWxlbWVudChzZWxlY3RvcikgfHwgc2VsZWN0b3IgPT09IGRvY3VtZW50IHx8IHNlbGVjdG9yID09PSB3aW5kb3cpIHtcclxuXHRcdFx0XHRhcnIgPSBbc2VsZWN0b3JdOyAvLyBvbmx5IHRoZSBlbGVtZW50XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGFycjtcclxuXHRcdH07XHJcblx0XHQvLyBnZXQgc2Nyb2xsIHRvcCB2YWx1ZVxyXG5cdFx0X2dldC5zY3JvbGxUb3AgPSBmdW5jdGlvbiAoZWxlbSkge1xyXG5cdFx0XHRyZXR1cm4gKGVsZW0gJiYgdHlwZW9mIGVsZW0uc2Nyb2xsVG9wID09PSAnbnVtYmVyJykgPyBlbGVtLnNjcm9sbFRvcCA6IHdpbmRvdy5wYWdlWU9mZnNldCB8fCAwO1xyXG5cdFx0fTtcclxuXHRcdC8vIGdldCBzY3JvbGwgbGVmdCB2YWx1ZVxyXG5cdFx0X2dldC5zY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKGVsZW0pIHtcclxuXHRcdFx0cmV0dXJuIChlbGVtICYmIHR5cGVvZiBlbGVtLnNjcm9sbExlZnQgPT09ICdudW1iZXInKSA/IGVsZW0uc2Nyb2xsTGVmdCA6IHdpbmRvdy5wYWdlWE9mZnNldCB8fCAwO1xyXG5cdFx0fTtcclxuXHRcdC8vIGdldCBlbGVtZW50IGhlaWdodFxyXG5cdFx0X2dldC53aWR0aCA9IGZ1bmN0aW9uIChlbGVtLCBvdXRlciwgaW5jbHVkZU1hcmdpbikge1xyXG5cdFx0XHRyZXR1cm4gX2RpbWVuc2lvbignd2lkdGgnLCBlbGVtLCBvdXRlciwgaW5jbHVkZU1hcmdpbik7XHJcblx0XHR9O1xyXG5cdFx0Ly8gZ2V0IGVsZW1lbnQgd2lkdGhcclxuXHRcdF9nZXQuaGVpZ2h0ID0gZnVuY3Rpb24gKGVsZW0sIG91dGVyLCBpbmNsdWRlTWFyZ2luKSB7XHJcblx0XHRcdHJldHVybiBfZGltZW5zaW9uKCdoZWlnaHQnLCBlbGVtLCBvdXRlciwgaW5jbHVkZU1hcmdpbik7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIGdldCBlbGVtZW50IHBvc2l0aW9uIChvcHRpb25hbGx5IHJlbGF0aXZlIHRvIHZpZXdwb3J0KVxyXG5cdFx0X2dldC5vZmZzZXQgPSBmdW5jdGlvbiAoZWxlbSwgcmVsYXRpdmVUb1ZpZXdwb3J0KSB7XHJcblx0XHRcdHZhciBvZmZzZXQgPSB7XHJcblx0XHRcdFx0dG9wOiAwLFxyXG5cdFx0XHRcdGxlZnQ6IDBcclxuXHRcdFx0fTtcclxuXHRcdFx0aWYgKGVsZW0gJiYgZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHsgLy8gY2hlY2sgaWYgYXZhaWxhYmxlXHJcblx0XHRcdFx0dmFyIHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cdFx0XHRcdG9mZnNldC50b3AgPSByZWN0LnRvcDtcclxuXHRcdFx0XHRvZmZzZXQubGVmdCA9IHJlY3QubGVmdDtcclxuXHRcdFx0XHRpZiAoIXJlbGF0aXZlVG9WaWV3cG9ydCkgeyAvLyBjbGllbnRSZWN0IGlzIGJ5IGRlZmF1bHQgcmVsYXRpdmUgdG8gdmlld3BvcnQuLi5cclxuXHRcdFx0XHRcdG9mZnNldC50b3AgKz0gX2dldC5zY3JvbGxUb3AoKTtcclxuXHRcdFx0XHRcdG9mZnNldC5sZWZ0ICs9IF9nZXQuc2Nyb2xsTGVmdCgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gb2Zmc2V0O1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICogRE9NIEVsZW1lbnQgbWFuaXB1bGF0aW9uXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqL1xyXG5cclxuXHRcdFUuYWRkQ2xhc3MgPSBmdW5jdGlvbiAoZWxlbSwgY2xhc3NuYW1lKSB7XHJcblx0XHRcdGlmIChjbGFzc25hbWUpIHtcclxuXHRcdFx0XHRpZiAoZWxlbS5jbGFzc0xpc3QpXHJcblx0XHRcdFx0XHRlbGVtLmNsYXNzTGlzdC5hZGQoY2xhc3NuYW1lKTtcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRlbGVtLmNsYXNzTmFtZSArPSAnICcgKyBjbGFzc25hbWU7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHRVLnJlbW92ZUNsYXNzID0gZnVuY3Rpb24gKGVsZW0sIGNsYXNzbmFtZSkge1xyXG5cdFx0XHRpZiAoY2xhc3NuYW1lKSB7XHJcblx0XHRcdFx0aWYgKGVsZW0uY2xhc3NMaXN0KVxyXG5cdFx0XHRcdFx0ZWxlbS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzbmFtZSk7XHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0ZWxlbS5jbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoJyhefFxcXFxiKScgKyBjbGFzc25hbWUuc3BsaXQoJyAnKS5qb2luKCd8JykgKyAnKFxcXFxifCQpJywgJ2dpJyksICcgJyk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHQvLyBpZiBvcHRpb25zIGlzIHN0cmluZyAtPiByZXR1cm5zIGNzcyB2YWx1ZVxyXG5cdFx0Ly8gaWYgb3B0aW9ucyBpcyBhcnJheSAtPiByZXR1cm5zIG9iamVjdCB3aXRoIGNzcyB2YWx1ZSBwYWlyc1xyXG5cdFx0Ly8gaWYgb3B0aW9ucyBpcyBvYmplY3QgLT4gc2V0IG5ldyBjc3MgdmFsdWVzXHJcblx0XHRVLmNzcyA9IGZ1bmN0aW9uIChlbGVtLCBvcHRpb25zKSB7XHJcblx0XHRcdGlmIChfdHlwZS5TdHJpbmcob3B0aW9ucykpIHtcclxuXHRcdFx0XHRyZXR1cm4gX2dldENvbXB1dGVkU3R5bGUoZWxlbSlbX2NhbWVsQ2FzZShvcHRpb25zKV07XHJcblx0XHRcdH0gZWxzZSBpZiAoX3R5cGUuQXJyYXkob3B0aW9ucykpIHtcclxuXHRcdFx0XHR2YXJcclxuXHRcdFx0XHRcdG9iaiA9IHt9LFxyXG5cdFx0XHRcdFx0c3R5bGUgPSBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTtcclxuXHRcdFx0XHRvcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvbiwga2V5KSB7XHJcblx0XHRcdFx0XHRvYmpbb3B0aW9uXSA9IHN0eWxlW19jYW1lbENhc2Uob3B0aW9uKV07XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmV0dXJuIG9iajtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRmb3IgKHZhciBvcHRpb24gaW4gb3B0aW9ucykge1xyXG5cdFx0XHRcdFx0dmFyIHZhbCA9IG9wdGlvbnNbb3B0aW9uXTtcclxuXHRcdFx0XHRcdGlmICh2YWwgPT0gcGFyc2VGbG9hdCh2YWwpKSB7IC8vIGFzc3VtZSBwaXhlbCBmb3Igc2VlbWluZ2x5IG51bWVyaWNhbCB2YWx1ZXNcclxuXHRcdFx0XHRcdFx0dmFsICs9ICdweCc7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbGVtLnN0eWxlW19jYW1lbENhc2Uob3B0aW9uKV0gPSB2YWw7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdHJldHVybiBVO1xyXG5cdH0od2luZG93IHx8IHt9KSk7XHJcblxyXG5cclxuXHRTY3JvbGxNYWdpYy5TY2VuZS5wcm90b3R5cGUuYWRkSW5kaWNhdG9ycyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFNjcm9sbE1hZ2ljLl91dGlsLmxvZygxLCAnKFNjcm9sbE1hZ2ljLlNjZW5lKSAtPiBFUlJPUiBjYWxsaW5nIGFkZEluZGljYXRvcnMoKSBkdWUgdG8gbWlzc2luZyBQbHVnaW4gXFwnZGVidWcuYWRkSW5kaWNhdG9yc1xcJy4gUGxlYXNlIG1ha2Ugc3VyZSB0byBpbmNsdWRlIHBsdWdpbnMvZGVidWcuYWRkSW5kaWNhdG9ycy5qcycpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdFNjcm9sbE1hZ2ljLlNjZW5lLnByb3RvdHlwZS5yZW1vdmVJbmRpY2F0b3JzID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0U2Nyb2xsTWFnaWMuX3V0aWwubG9nKDEsICcoU2Nyb2xsTWFnaWMuU2NlbmUpIC0+IEVSUk9SIGNhbGxpbmcgcmVtb3ZlSW5kaWNhdG9ycygpIGR1ZSB0byBtaXNzaW5nIFBsdWdpbiBcXCdkZWJ1Zy5hZGRJbmRpY2F0b3JzXFwnLiBQbGVhc2UgbWFrZSBzdXJlIHRvIGluY2x1ZGUgcGx1Z2lucy9kZWJ1Zy5hZGRJbmRpY2F0b3JzLmpzJyk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0U2Nyb2xsTWFnaWMuU2NlbmUucHJvdG90eXBlLnNldFR3ZWVuID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0U2Nyb2xsTWFnaWMuX3V0aWwubG9nKDEsICcoU2Nyb2xsTWFnaWMuU2NlbmUpIC0+IEVSUk9SIGNhbGxpbmcgc2V0VHdlZW4oKSBkdWUgdG8gbWlzc2luZyBQbHVnaW4gXFwnYW5pbWF0aW9uLmdzYXBcXCcuIFBsZWFzZSBtYWtlIHN1cmUgdG8gaW5jbHVkZSBwbHVnaW5zL2FuaW1hdGlvbi5nc2FwLmpzJyk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0U2Nyb2xsTWFnaWMuU2NlbmUucHJvdG90eXBlLnJlbW92ZVR3ZWVuID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0U2Nyb2xsTWFnaWMuX3V0aWwubG9nKDEsICcoU2Nyb2xsTWFnaWMuU2NlbmUpIC0+IEVSUk9SIGNhbGxpbmcgcmVtb3ZlVHdlZW4oKSBkdWUgdG8gbWlzc2luZyBQbHVnaW4gXFwnYW5pbWF0aW9uLmdzYXBcXCcuIFBsZWFzZSBtYWtlIHN1cmUgdG8gaW5jbHVkZSBwbHVnaW5zL2FuaW1hdGlvbi5nc2FwLmpzJyk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0U2Nyb2xsTWFnaWMuU2NlbmUucHJvdG90eXBlLnNldFZlbG9jaXR5ID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0U2Nyb2xsTWFnaWMuX3V0aWwubG9nKDEsICcoU2Nyb2xsTWFnaWMuU2NlbmUpIC0+IEVSUk9SIGNhbGxpbmcgc2V0VmVsb2NpdHkoKSBkdWUgdG8gbWlzc2luZyBQbHVnaW4gXFwnYW5pbWF0aW9uLnZlbG9jaXR5XFwnLiBQbGVhc2UgbWFrZSBzdXJlIHRvIGluY2x1ZGUgcGx1Z2lucy9hbmltYXRpb24udmVsb2NpdHkuanMnKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRTY3JvbGxNYWdpYy5TY2VuZS5wcm90b3R5cGUucmVtb3ZlVmVsb2NpdHkgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRTY3JvbGxNYWdpYy5fdXRpbC5sb2coMSwgJyhTY3JvbGxNYWdpYy5TY2VuZSkgLT4gRVJST1IgY2FsbGluZyByZW1vdmVWZWxvY2l0eSgpIGR1ZSB0byBtaXNzaW5nIFBsdWdpbiBcXCdhbmltYXRpb24udmVsb2NpdHlcXCcuIFBsZWFzZSBtYWtlIHN1cmUgdG8gaW5jbHVkZSBwbHVnaW5zL2FuaW1hdGlvbi52ZWxvY2l0eS5qcycpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gU2Nyb2xsTWFnaWM7XHJcbn0pKTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCIvKipcbiAqIFNTUiBXaW5kb3cgMS4wLjFcbiAqIEJldHRlciBoYW5kbGluZyBmb3Igd2luZG93IG9iamVjdCBpbiBTU1IgZW52aXJvbm1lbnRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2xpbWl0czR3ZWIvc3NyLXdpbmRvd1xuICpcbiAqIENvcHlyaWdodCAyMDE4LCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVFxuICpcbiAqIFJlbGVhc2VkIG9uOiBKdWx5IDE4LCAyMDE4XG4gKi9cbnZhciBkb2MgPSAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykgPyB7XG4gIGJvZHk6IHt9LFxuICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKCkge30sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgYWN0aXZlRWxlbWVudDoge1xuICAgIGJsdXI6IGZ1bmN0aW9uIGJsdXIoKSB7fSxcbiAgICBub2RlTmFtZTogJycsXG4gIH0sXG4gIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uIHF1ZXJ5U2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uIHF1ZXJ5U2VsZWN0b3JBbGwoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9LFxuICBnZXRFbGVtZW50QnlJZDogZnVuY3Rpb24gZ2V0RWxlbWVudEJ5SWQoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGNyZWF0ZUV2ZW50OiBmdW5jdGlvbiBjcmVhdGVFdmVudCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5pdEV2ZW50OiBmdW5jdGlvbiBpbml0RXZlbnQoKSB7fSxcbiAgICB9O1xuICB9LFxuICBjcmVhdGVFbGVtZW50OiBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KCkge1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogW10sXG4gICAgICBjaGlsZE5vZGVzOiBbXSxcbiAgICAgIHN0eWxlOiB7fSxcbiAgICAgIHNldEF0dHJpYnV0ZTogZnVuY3Rpb24gc2V0QXR0cmlidXRlKCkge30sXG4gICAgICBnZXRFbGVtZW50c0J5VGFnTmFtZTogZnVuY3Rpb24gZ2V0RWxlbWVudHNCeVRhZ05hbWUoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfSxcbiAgbG9jYXRpb246IHsgaGFzaDogJycgfSxcbn0gOiBkb2N1bWVudDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG52YXIgd2luID0gKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSA/IHtcbiAgZG9jdW1lbnQ6IGRvYyxcbiAgbmF2aWdhdG9yOiB7XG4gICAgdXNlckFnZW50OiAnJyxcbiAgfSxcbiAgbG9jYXRpb246IHt9LFxuICBoaXN0b3J5OiB7fSxcbiAgQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uIEN1c3RvbUV2ZW50KCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKCkge30sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgZ2V0Q29tcHV0ZWRTdHlsZTogZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0UHJvcGVydHlWYWx1ZTogZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSxcbiAgICB9O1xuICB9LFxuICBJbWFnZTogZnVuY3Rpb24gSW1hZ2UoKSB7fSxcbiAgRGF0ZTogZnVuY3Rpb24gRGF0ZSgpIHt9LFxuICBzY3JlZW46IHt9LFxuICBzZXRUaW1lb3V0OiBmdW5jdGlvbiBzZXRUaW1lb3V0KCkge30sXG4gIGNsZWFyVGltZW91dDogZnVuY3Rpb24gY2xlYXJUaW1lb3V0KCkge30sXG59IDogd2luZG93OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbmV4cG9ydCB7IHdpbiBhcyB3aW5kb3csIGRvYyBhcyBkb2N1bWVudCB9O1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIiwiLyoqXG4gKiBTd2lwZXIgNC41LjBcbiAqIE1vc3QgbW9kZXJuIG1vYmlsZSB0b3VjaCBzbGlkZXIgYW5kIGZyYW1ld29yayB3aXRoIGhhcmR3YXJlIGFjY2VsZXJhdGVkIHRyYW5zaXRpb25zXG4gKiBodHRwOi8vd3d3LmlkYW5nZXJvLnVzL3N3aXBlci9cbiAqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE5IFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKlxuICogUmVsZWFzZWQgb246IEZlYnJ1YXJ5IDIyLCAyMDE5XG4gKi9cblxuaW1wb3J0IHsgJCwgYWRkQ2xhc3MsIHJlbW92ZUNsYXNzLCBoYXNDbGFzcywgdG9nZ2xlQ2xhc3MsIGF0dHIsIHJlbW92ZUF0dHIsIGRhdGEsIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiBhcyB0cmFuc2l0aW9uJDEsIG9uLCBvZmYsIHRyaWdnZXIsIHRyYW5zaXRpb25FbmQgYXMgdHJhbnNpdGlvbkVuZCQxLCBvdXRlcldpZHRoLCBvdXRlckhlaWdodCwgb2Zmc2V0LCBjc3MsIGVhY2gsIGh0bWwsIHRleHQsIGlzLCBpbmRleCwgZXEsIGFwcGVuZCwgcHJlcGVuZCwgbmV4dCwgbmV4dEFsbCwgcHJldiwgcHJldkFsbCwgcGFyZW50LCBwYXJlbnRzLCBjbG9zZXN0LCBmaW5kLCBjaGlsZHJlbiwgcmVtb3ZlLCBhZGQsIHN0eWxlcyB9IGZyb20gJ2RvbTcvZGlzdC9kb203Lm1vZHVsYXInO1xuaW1wb3J0IHsgd2luZG93LCBkb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuXG5jb25zdCBNZXRob2RzID0ge1xuICBhZGRDbGFzcyxcbiAgcmVtb3ZlQ2xhc3MsXG4gIGhhc0NsYXNzLFxuICB0b2dnbGVDbGFzcyxcbiAgYXR0cixcbiAgcmVtb3ZlQXR0cixcbiAgZGF0YSxcbiAgdHJhbnNmb3JtLFxuICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uJDEsXG4gIG9uLFxuICBvZmYsXG4gIHRyaWdnZXIsXG4gIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQkMSxcbiAgb3V0ZXJXaWR0aCxcbiAgb3V0ZXJIZWlnaHQsXG4gIG9mZnNldCxcbiAgY3NzLFxuICBlYWNoLFxuICBodG1sLFxuICB0ZXh0LFxuICBpcyxcbiAgaW5kZXgsXG4gIGVxLFxuICBhcHBlbmQsXG4gIHByZXBlbmQsXG4gIG5leHQsXG4gIG5leHRBbGwsXG4gIHByZXYsXG4gIHByZXZBbGwsXG4gIHBhcmVudCxcbiAgcGFyZW50cyxcbiAgY2xvc2VzdCxcbiAgZmluZCxcbiAgY2hpbGRyZW4sXG4gIHJlbW92ZSxcbiAgYWRkLFxuICBzdHlsZXMsXG59O1xuXG5PYmplY3Qua2V5cyhNZXRob2RzKS5mb3JFYWNoKChtZXRob2ROYW1lKSA9PiB7XG4gICQuZm5bbWV0aG9kTmFtZV0gPSBNZXRob2RzW21ldGhvZE5hbWVdO1xufSk7XG5cbmNvbnN0IFV0aWxzID0ge1xuICBkZWxldGVQcm9wcyhvYmopIHtcbiAgICBjb25zdCBvYmplY3QgPSBvYmo7XG4gICAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gbnVsbDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gbm8gZ2V0dGVyIGZvciBvYmplY3RcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGRlbGV0ZSBvYmplY3Rba2V5XTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gc29tZXRoaW5nIGdvdCB3cm9uZ1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBuZXh0VGljayhjYWxsYmFjaywgZGVsYXkgPSAwKSB7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5KTtcbiAgfSxcbiAgbm93KCkge1xuICAgIHJldHVybiBEYXRlLm5vdygpO1xuICB9LFxuICBnZXRUcmFuc2xhdGUoZWwsIGF4aXMgPSAneCcpIHtcbiAgICBsZXQgbWF0cml4O1xuICAgIGxldCBjdXJUcmFuc2Zvcm07XG4gICAgbGV0IHRyYW5zZm9ybU1hdHJpeDtcblxuICAgIGNvbnN0IGN1clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpO1xuXG4gICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIHtcbiAgICAgIGN1clRyYW5zZm9ybSA9IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgICBpZiAoY3VyVHJhbnNmb3JtLnNwbGl0KCcsJykubGVuZ3RoID4gNikge1xuICAgICAgICBjdXJUcmFuc2Zvcm0gPSBjdXJUcmFuc2Zvcm0uc3BsaXQoJywgJykubWFwKGEgPT4gYS5yZXBsYWNlKCcsJywgJy4nKSkuam9pbignLCAnKTtcbiAgICAgIH1cbiAgICAgIC8vIFNvbWUgb2xkIHZlcnNpb25zIG9mIFdlYmtpdCBjaG9rZSB3aGVuICdub25lJyBpcyBwYXNzZWQ7IHBhc3NcbiAgICAgIC8vIGVtcHR5IHN0cmluZyBpbnN0ZWFkIGluIHRoaXMgY2FzZVxuICAgICAgdHJhbnNmb3JtTWF0cml4ID0gbmV3IHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgoY3VyVHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IGN1clRyYW5zZm9ybSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zZm9ybU1hdHJpeCA9IGN1clN0eWxlLk1velRyYW5zZm9ybSB8fCBjdXJTdHlsZS5PVHJhbnNmb3JtIHx8IGN1clN0eWxlLk1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLm1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKS5yZXBsYWNlKCd0cmFuc2xhdGUoJywgJ21hdHJpeCgxLCAwLCAwLCAxLCcpO1xuICAgICAgbWF0cml4ID0gdHJhbnNmb3JtTWF0cml4LnRvU3RyaW5nKCkuc3BsaXQoJywnKTtcbiAgICB9XG5cbiAgICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDE7XG4gICAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEyXSk7XG4gICAgICAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNF0pO1xuICAgIH1cbiAgICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDI7XG4gICAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEzXSk7XG4gICAgICAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNV0pO1xuICAgIH1cbiAgICByZXR1cm4gY3VyVHJhbnNmb3JtIHx8IDA7XG4gIH0sXG4gIHBhcnNlVXJsUXVlcnkodXJsKSB7XG4gICAgY29uc3QgcXVlcnkgPSB7fTtcbiAgICBsZXQgdXJsVG9QYXJzZSA9IHVybCB8fCB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICBsZXQgaTtcbiAgICBsZXQgcGFyYW1zO1xuICAgIGxldCBwYXJhbTtcbiAgICBsZXQgbGVuZ3RoO1xuICAgIGlmICh0eXBlb2YgdXJsVG9QYXJzZSA9PT0gJ3N0cmluZycgJiYgdXJsVG9QYXJzZS5sZW5ndGgpIHtcbiAgICAgIHVybFRvUGFyc2UgPSB1cmxUb1BhcnNlLmluZGV4T2YoJz8nKSA+IC0xID8gdXJsVG9QYXJzZS5yZXBsYWNlKC9cXFMqXFw/LywgJycpIDogJyc7XG4gICAgICBwYXJhbXMgPSB1cmxUb1BhcnNlLnNwbGl0KCcmJykuZmlsdGVyKHBhcmFtc1BhcnQgPT4gcGFyYW1zUGFydCAhPT0gJycpO1xuICAgICAgbGVuZ3RoID0gcGFyYW1zLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHBhcmFtID0gcGFyYW1zW2ldLnJlcGxhY2UoLyNcXFMrL2csICcnKS5zcGxpdCgnPScpO1xuICAgICAgICBxdWVyeVtkZWNvZGVVUklDb21wb25lbnQocGFyYW1bMF0pXSA9IHR5cGVvZiBwYXJhbVsxXSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBkZWNvZGVVUklDb21wb25lbnQocGFyYW1bMV0pIHx8ICcnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcXVlcnk7XG4gIH0sXG4gIGlzT2JqZWN0KG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIG8gIT09IG51bGwgJiYgby5jb25zdHJ1Y3RvciAmJiBvLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG4gIH0sXG4gIGV4dGVuZCguLi5hcmdzKSB7XG4gICAgY29uc3QgdG8gPSBPYmplY3QoYXJnc1swXSk7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBuZXh0U291cmNlID0gYXJnc1tpXTtcbiAgICAgIGlmIChuZXh0U291cmNlICE9PSB1bmRlZmluZWQgJiYgbmV4dFNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpO1xuICAgICAgICBmb3IgKGxldCBuZXh0SW5kZXggPSAwLCBsZW4gPSBrZXlzQXJyYXkubGVuZ3RoOyBuZXh0SW5kZXggPCBsZW47IG5leHRJbmRleCArPSAxKSB7XG4gICAgICAgICAgY29uc3QgbmV4dEtleSA9IGtleXNBcnJheVtuZXh0SW5kZXhdO1xuICAgICAgICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5leHRTb3VyY2UsIG5leHRLZXkpO1xuICAgICAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgICBpZiAoVXRpbHMuaXNPYmplY3QodG9bbmV4dEtleV0pICYmIFV0aWxzLmlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICAgIFV0aWxzLmV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFVdGlscy5pc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgVXRpbHMuaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSB7fTtcbiAgICAgICAgICAgICAgVXRpbHMuZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvO1xuICB9LFxufTtcblxuY29uc3QgU3VwcG9ydCA9IChmdW5jdGlvbiBTdXBwb3J0KCkge1xuICBjb25zdCB0ZXN0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHJldHVybiB7XG4gICAgdG91Y2g6ICh3aW5kb3cuTW9kZXJuaXpyICYmIHdpbmRvdy5Nb2Rlcm5penIudG91Y2ggPT09IHRydWUpIHx8IChmdW5jdGlvbiBjaGVja1RvdWNoKCkge1xuICAgICAgcmV0dXJuICEhKCh3aW5kb3cubmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMCkgfHwgKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykgfHwgKHdpbmRvdy5Eb2N1bWVudFRvdWNoICYmIGRvY3VtZW50IGluc3RhbmNlb2Ygd2luZG93LkRvY3VtZW50VG91Y2gpKTtcbiAgICB9KCkpLFxuXG4gICAgcG9pbnRlckV2ZW50czogISEod2luZG93Lm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCB8fCB3aW5kb3cuUG9pbnRlckV2ZW50IHx8ICgnbWF4VG91Y2hQb2ludHMnIGluIHdpbmRvdy5uYXZpZ2F0b3IgJiYgd2luZG93Lm5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDApKSxcbiAgICBwcmVmaXhlZFBvaW50ZXJFdmVudHM6ICEhd2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkLFxuXG4gICAgdHJhbnNpdGlvbjogKGZ1bmN0aW9uIGNoZWNrVHJhbnNpdGlvbigpIHtcbiAgICAgIGNvbnN0IHN0eWxlID0gdGVzdERpdi5zdHlsZTtcbiAgICAgIHJldHVybiAoJ3RyYW5zaXRpb24nIGluIHN0eWxlIHx8ICd3ZWJraXRUcmFuc2l0aW9uJyBpbiBzdHlsZSB8fCAnTW96VHJhbnNpdGlvbicgaW4gc3R5bGUpO1xuICAgIH0oKSksXG4gICAgdHJhbnNmb3JtczNkOiAod2luZG93Lk1vZGVybml6ciAmJiB3aW5kb3cuTW9kZXJuaXpyLmNzc3RyYW5zZm9ybXMzZCA9PT0gdHJ1ZSkgfHwgKGZ1bmN0aW9uIGNoZWNrVHJhbnNmb3JtczNkKCkge1xuICAgICAgY29uc3Qgc3R5bGUgPSB0ZXN0RGl2LnN0eWxlO1xuICAgICAgcmV0dXJuICgnd2Via2l0UGVyc3BlY3RpdmUnIGluIHN0eWxlIHx8ICdNb3pQZXJzcGVjdGl2ZScgaW4gc3R5bGUgfHwgJ09QZXJzcGVjdGl2ZScgaW4gc3R5bGUgfHwgJ01zUGVyc3BlY3RpdmUnIGluIHN0eWxlIHx8ICdwZXJzcGVjdGl2ZScgaW4gc3R5bGUpO1xuICAgIH0oKSksXG5cbiAgICBmbGV4Ym94OiAoZnVuY3Rpb24gY2hlY2tGbGV4Ym94KCkge1xuICAgICAgY29uc3Qgc3R5bGUgPSB0ZXN0RGl2LnN0eWxlO1xuICAgICAgY29uc3Qgc3R5bGVzID0gKCdhbGlnbkl0ZW1zIHdlYmtpdEFsaWduSXRlbXMgd2Via2l0Qm94QWxpZ24gbXNGbGV4QWxpZ24gbW96Qm94QWxpZ24gd2Via2l0RmxleERpcmVjdGlvbiBtc0ZsZXhEaXJlY3Rpb24gbW96Qm94RGlyZWN0aW9uIG1vekJveE9yaWVudCB3ZWJraXRCb3hEaXJlY3Rpb24gd2Via2l0Qm94T3JpZW50Jykuc3BsaXQoJyAnKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzdHlsZXNbaV0gaW4gc3R5bGUpIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0oKSksXG5cbiAgICBvYnNlcnZlcjogKGZ1bmN0aW9uIGNoZWNrT2JzZXJ2ZXIoKSB7XG4gICAgICByZXR1cm4gKCdNdXRhdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cgfHwgJ1dlYmtpdE11dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdyk7XG4gICAgfSgpKSxcblxuICAgIHBhc3NpdmVMaXN0ZW5lcjogKGZ1bmN0aW9uIGNoZWNrUGFzc2l2ZUxpc3RlbmVyKCkge1xuICAgICAgbGV0IHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3RQYXNzaXZlTGlzdGVuZXInLCBudWxsLCBvcHRzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gTm8gc3VwcG9ydFxuICAgICAgfVxuICAgICAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZTtcbiAgICB9KCkpLFxuXG4gICAgZ2VzdHVyZXM6IChmdW5jdGlvbiBjaGVja0dlc3R1cmVzKCkge1xuICAgICAgcmV0dXJuICdvbmdlc3R1cmVzdGFydCcgaW4gd2luZG93O1xuICAgIH0oKSksXG4gIH07XG59KCkpO1xuXG5jb25zdCBCcm93c2VyID0gKGZ1bmN0aW9uIEJyb3dzZXIoKSB7XG4gIGZ1bmN0aW9uIGlzU2FmYXJpKCkge1xuICAgIGNvbnN0IHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gKHVhLmluZGV4T2YoJ3NhZmFyaScpID49IDAgJiYgdWEuaW5kZXhPZignY2hyb21lJykgPCAwICYmIHVhLmluZGV4T2YoJ2FuZHJvaWQnKSA8IDApO1xuICB9XG4gIHJldHVybiB7XG4gICAgaXNJRTogISF3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVHJpZGVudC9nKSB8fCAhIXdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9NU0lFL2cpLFxuICAgIGlzRWRnZTogISF3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRWRnZS9nKSxcbiAgICBpc1NhZmFyaTogaXNTYWZhcmkoKSxcbiAgICBpc1VpV2ViVmlldzogLyhpUGhvbmV8aVBvZHxpUGFkKS4qQXBwbGVXZWJLaXQoPyEuKlNhZmFyaSkvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KSxcbiAgfTtcbn0oKSk7XG5cbmNsYXNzIFN3aXBlckNsYXNzIHtcbiAgY29uc3RydWN0b3IocGFyYW1zID0ge30pIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBzZWxmLnBhcmFtcyA9IHBhcmFtcztcblxuICAgIC8vIEV2ZW50c1xuICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzID0ge307XG5cbiAgICBpZiAoc2VsZi5wYXJhbXMgJiYgc2VsZi5wYXJhbXMub24pIHtcbiAgICAgIE9iamVjdC5rZXlzKHNlbGYucGFyYW1zLm9uKS5mb3JFYWNoKChldmVudE5hbWUpID0+IHtcbiAgICAgICAgc2VsZi5vbihldmVudE5hbWUsIHNlbGYucGFyYW1zLm9uW2V2ZW50TmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgb24oZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgbWV0aG9kID0gcHJpb3JpdHkgPyAndW5zaGlmdCcgOiAncHVzaCc7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaCgoZXZlbnQpID0+IHtcbiAgICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XVttZXRob2RdKGhhbmRsZXIpO1xuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG5cbiAgb25jZShldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBmdW5jdGlvbiBvbmNlSGFuZGxlciguLi5hcmdzKSB7XG4gICAgICBoYW5kbGVyLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgc2VsZi5vZmYoZXZlbnRzLCBvbmNlSGFuZGxlcik7XG4gICAgICBpZiAob25jZUhhbmRsZXIuZjdwcm94eSkge1xuICAgICAgICBkZWxldGUgb25jZUhhbmRsZXIuZjdwcm94eTtcbiAgICAgIH1cbiAgICB9XG4gICAgb25jZUhhbmRsZXIuZjdwcm94eSA9IGhhbmRsZXI7XG4gICAgcmV0dXJuIHNlbGYub24oZXZlbnRzLCBvbmNlSGFuZGxlciwgcHJpb3JpdHkpO1xuICB9XG5cbiAgb2ZmKGV2ZW50cywgaGFuZGxlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goKGV2ZW50KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmxlbmd0aCkge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaCgoZXZlbnRIYW5kbGVyLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChldmVudEhhbmRsZXIgPT09IGhhbmRsZXIgfHwgKGV2ZW50SGFuZGxlci5mN3Byb3h5ICYmIGV2ZW50SGFuZGxlci5mN3Byb3h5ID09PSBoYW5kbGVyKSkge1xuICAgICAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuXG4gIGVtaXQoLi4uYXJncykge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGxldCBldmVudHM7XG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGNvbnRleHQ7XG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyB8fCBBcnJheS5pc0FycmF5KGFyZ3NbMF0pKSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdO1xuICAgICAgZGF0YSA9IGFyZ3Muc2xpY2UoMSwgYXJncy5sZW5ndGgpO1xuICAgICAgY29udGV4dCA9IHNlbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF0uZXZlbnRzO1xuICAgICAgZGF0YSA9IGFyZ3NbMF0uZGF0YTtcbiAgICAgIGNvbnRleHQgPSBhcmdzWzBdLmNvbnRleHQgfHwgc2VsZjtcbiAgICB9XG4gICAgY29uc3QgZXZlbnRzQXJyYXkgPSBBcnJheS5pc0FycmF5KGV2ZW50cykgPyBldmVudHMgOiBldmVudHMuc3BsaXQoJyAnKTtcbiAgICBldmVudHNBcnJheS5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICBjb25zdCBoYW5kbGVycyA9IFtdO1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaCgoZXZlbnRIYW5kbGVyKSA9PiB7XG4gICAgICAgICAgaGFuZGxlcnMucHVzaChldmVudEhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgaGFuZGxlcnMuZm9yRWFjaCgoZXZlbnRIYW5kbGVyKSA9PiB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuXG4gIHVzZU1vZHVsZXNQYXJhbXMoaW5zdGFuY2VQYXJhbXMpIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXM7XG4gICAgaWYgKCFpbnN0YW5jZS5tb2R1bGVzKSByZXR1cm47XG4gICAgT2JqZWN0LmtleXMoaW5zdGFuY2UubW9kdWxlcykuZm9yRWFjaCgobW9kdWxlTmFtZSkgPT4ge1xuICAgICAgY29uc3QgbW9kdWxlID0gaW5zdGFuY2UubW9kdWxlc1ttb2R1bGVOYW1lXTtcbiAgICAgIC8vIEV4dGVuZCBwYXJhbXNcbiAgICAgIGlmIChtb2R1bGUucGFyYW1zKSB7XG4gICAgICAgIFV0aWxzLmV4dGVuZChpbnN0YW5jZVBhcmFtcywgbW9kdWxlLnBhcmFtcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB1c2VNb2R1bGVzKG1vZHVsZXNQYXJhbXMgPSB7fSkge1xuICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcztcbiAgICBpZiAoIWluc3RhbmNlLm1vZHVsZXMpIHJldHVybjtcbiAgICBPYmplY3Qua2V5cyhpbnN0YW5jZS5tb2R1bGVzKS5mb3JFYWNoKChtb2R1bGVOYW1lKSA9PiB7XG4gICAgICBjb25zdCBtb2R1bGUgPSBpbnN0YW5jZS5tb2R1bGVzW21vZHVsZU5hbWVdO1xuICAgICAgY29uc3QgbW9kdWxlUGFyYW1zID0gbW9kdWxlc1BhcmFtc1ttb2R1bGVOYW1lXSB8fCB7fTtcbiAgICAgIC8vIEV4dGVuZCBpbnN0YW5jZSBtZXRob2RzIGFuZCBwcm9wc1xuICAgICAgaWYgKG1vZHVsZS5pbnN0YW5jZSkge1xuICAgICAgICBPYmplY3Qua2V5cyhtb2R1bGUuaW5zdGFuY2UpLmZvckVhY2goKG1vZHVsZVByb3BOYW1lKSA9PiB7XG4gICAgICAgICAgY29uc3QgbW9kdWxlUHJvcCA9IG1vZHVsZS5pbnN0YW5jZVttb2R1bGVQcm9wTmFtZV07XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGVQcm9wID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpbnN0YW5jZVttb2R1bGVQcm9wTmFtZV0gPSBtb2R1bGVQcm9wLmJpbmQoaW5zdGFuY2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnN0YW5jZVttb2R1bGVQcm9wTmFtZV0gPSBtb2R1bGVQcm9wO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBBZGQgZXZlbnQgbGlzdGVuZXJzXG4gICAgICBpZiAobW9kdWxlLm9uICYmIGluc3RhbmNlLm9uKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG1vZHVsZS5vbikuZm9yRWFjaCgobW9kdWxlRXZlbnROYW1lKSA9PiB7XG4gICAgICAgICAgaW5zdGFuY2Uub24obW9kdWxlRXZlbnROYW1lLCBtb2R1bGUub25bbW9kdWxlRXZlbnROYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBNb2R1bGUgY3JlYXRlIGNhbGxiYWNrXG4gICAgICBpZiAobW9kdWxlLmNyZWF0ZSkge1xuICAgICAgICBtb2R1bGUuY3JlYXRlLmJpbmQoaW5zdGFuY2UpKG1vZHVsZVBhcmFtcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgc2V0IGNvbXBvbmVudHMoY29tcG9uZW50cykge1xuICAgIGNvbnN0IENsYXNzID0gdGhpcztcbiAgICBpZiAoIUNsYXNzLnVzZSkgcmV0dXJuO1xuICAgIENsYXNzLnVzZShjb21wb25lbnRzKTtcbiAgfVxuXG4gIHN0YXRpYyBpbnN0YWxsTW9kdWxlKG1vZHVsZSwgLi4ucGFyYW1zKSB7XG4gICAgY29uc3QgQ2xhc3MgPSB0aGlzO1xuICAgIGlmICghQ2xhc3MucHJvdG90eXBlLm1vZHVsZXMpIENsYXNzLnByb3RvdHlwZS5tb2R1bGVzID0ge307XG4gICAgY29uc3QgbmFtZSA9IG1vZHVsZS5uYW1lIHx8IChgJHtPYmplY3Qua2V5cyhDbGFzcy5wcm90b3R5cGUubW9kdWxlcykubGVuZ3RofV8ke1V0aWxzLm5vdygpfWApO1xuICAgIENsYXNzLnByb3RvdHlwZS5tb2R1bGVzW25hbWVdID0gbW9kdWxlO1xuICAgIC8vIFByb3RvdHlwZVxuICAgIGlmIChtb2R1bGUucHJvdG8pIHtcbiAgICAgIE9iamVjdC5rZXlzKG1vZHVsZS5wcm90bykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIENsYXNzLnByb3RvdHlwZVtrZXldID0gbW9kdWxlLnByb3RvW2tleV07XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gQ2xhc3NcbiAgICBpZiAobW9kdWxlLnN0YXRpYykge1xuICAgICAgT2JqZWN0LmtleXMobW9kdWxlLnN0YXRpYykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIENsYXNzW2tleV0gPSBtb2R1bGUuc3RhdGljW2tleV07XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gQ2FsbGJhY2tcbiAgICBpZiAobW9kdWxlLmluc3RhbGwpIHtcbiAgICAgIG1vZHVsZS5pbnN0YWxsLmFwcGx5KENsYXNzLCBwYXJhbXMpO1xuICAgIH1cbiAgICByZXR1cm4gQ2xhc3M7XG4gIH1cblxuICBzdGF0aWMgdXNlKG1vZHVsZSwgLi4ucGFyYW1zKSB7XG4gICAgY29uc3QgQ2xhc3MgPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgIG1vZHVsZS5mb3JFYWNoKG0gPT4gQ2xhc3MuaW5zdGFsbE1vZHVsZShtKSk7XG4gICAgICByZXR1cm4gQ2xhc3M7XG4gICAgfVxuICAgIHJldHVybiBDbGFzcy5pbnN0YWxsTW9kdWxlKG1vZHVsZSwgLi4ucGFyYW1zKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVTaXplICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHdpZHRoO1xuICBsZXQgaGVpZ2h0O1xuICBjb25zdCAkZWwgPSBzd2lwZXIuJGVsO1xuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMud2lkdGggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2lkdGggPSBzd2lwZXIucGFyYW1zLndpZHRoO1xuICB9IGVsc2Uge1xuICAgIHdpZHRoID0gJGVsWzBdLmNsaWVudFdpZHRoO1xuICB9XG4gIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcy5oZWlnaHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaGVpZ2h0ID0gc3dpcGVyLnBhcmFtcy5oZWlnaHQ7XG4gIH0gZWxzZSB7XG4gICAgaGVpZ2h0ID0gJGVsWzBdLmNsaWVudEhlaWdodDtcbiAgfVxuICBpZiAoKHdpZHRoID09PSAwICYmIHN3aXBlci5pc0hvcml6b250YWwoKSkgfHwgKGhlaWdodCA9PT0gMCAmJiBzd2lwZXIuaXNWZXJ0aWNhbCgpKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFN1YnRyYWN0IHBhZGRpbmdzXG4gIHdpZHRoID0gd2lkdGggLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLWxlZnQnKSwgMTApIC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1yaWdodCcpLCAxMCk7XG4gIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctdG9wJyksIDEwKSAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctYm90dG9tJyksIDEwKTtcblxuICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHNpemU6IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHdpZHRoIDogaGVpZ2h0LFxuICB9KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcblxuICBjb25zdCB7XG4gICAgJHdyYXBwZXJFbCwgc2l6ZTogc3dpcGVyU2l6ZSwgcnRsVHJhbnNsYXRlOiBydGwsIHdyb25nUlRMLFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBjb25zdCBwcmV2aW91c1NsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgY29uc3Qgc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWApO1xuICBjb25zdCBzbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc2xpZGVzLmxlbmd0aDtcbiAgbGV0IHNuYXBHcmlkID0gW107XG4gIGNvbnN0IHNsaWRlc0dyaWQgPSBbXTtcbiAgY29uc3Qgc2xpZGVzU2l6ZXNHcmlkID0gW107XG5cbiAgbGV0IG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmU7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0QmVmb3JlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2Zmc2V0QmVmb3JlID0gcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZS5jYWxsKHN3aXBlcik7XG4gIH1cblxuICBsZXQgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXI7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0QWZ0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlci5jYWxsKHN3aXBlcik7XG4gIH1cblxuICBjb25zdCBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgY29uc3QgcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcblxuICBsZXQgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgbGV0IHNsaWRlUG9zaXRpb24gPSAtb2Zmc2V0QmVmb3JlO1xuICBsZXQgcHJldlNsaWRlU2l6ZSA9IDA7XG4gIGxldCBpbmRleCA9IDA7XG4gIGlmICh0eXBlb2Ygc3dpcGVyU2l6ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnICYmIHNwYWNlQmV0d2Vlbi5pbmRleE9mKCclJykgPj0gMCkge1xuICAgIHNwYWNlQmV0d2VlbiA9IChwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbi5yZXBsYWNlKCclJywgJycpKSAvIDEwMCkgKiBzd2lwZXJTaXplO1xuICB9XG5cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gLXNwYWNlQmV0d2VlbjtcblxuICAvLyByZXNldCBtYXJnaW5zXG4gIGlmIChydGwpIHNsaWRlcy5jc3MoeyBtYXJnaW5MZWZ0OiAnJywgbWFyZ2luVG9wOiAnJyB9KTtcbiAgZWxzZSBzbGlkZXMuY3NzKHsgbWFyZ2luUmlnaHQ6ICcnLCBtYXJnaW5Cb3R0b206ICcnIH0pO1xuXG4gIGxldCBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzO1xuICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICBpZiAoTWF0aC5mbG9vcihzbGlkZXNMZW5ndGggLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSA9PT0gc2xpZGVzTGVuZ3RoIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pIHtcbiAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBzbGlkZXNMZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBNYXRoLmNlaWwoc2xpZGVzTGVuZ3RoIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgKiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ3JvdycpIHtcbiAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBNYXRoLm1heChzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzLCBwYXJhbXMuc2xpZGVzUGVyVmlldyAqIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pO1xuICAgIH1cbiAgfVxuXG4gIC8vIENhbGMgc2xpZGVzXG4gIGxldCBzbGlkZVNpemU7XG4gIGNvbnN0IHNsaWRlc1BlckNvbHVtbiA9IHBhcmFtcy5zbGlkZXNQZXJDb2x1bW47XG4gIGNvbnN0IHNsaWRlc1BlclJvdyA9IHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgLyBzbGlkZXNQZXJDb2x1bW47XG4gIGNvbnN0IG51bUZ1bGxDb2x1bW5zID0gTWF0aC5mbG9vcihzbGlkZXNMZW5ndGggLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNMZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlU2l6ZSA9IDA7XG4gICAgY29uc3Qgc2xpZGUgPSBzbGlkZXMuZXEoaSk7XG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgICAvLyBTZXQgc2xpZGVzIG9yZGVyXG4gICAgICBsZXQgbmV3U2xpZGVPcmRlckluZGV4O1xuICAgICAgbGV0IGNvbHVtbjtcbiAgICAgIGxldCByb3c7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICAgIGNvbHVtbiA9IE1hdGguZmxvb3IoaSAvIHNsaWRlc1BlckNvbHVtbik7XG4gICAgICAgIHJvdyA9IGkgLSAoY29sdW1uICogc2xpZGVzUGVyQ29sdW1uKTtcbiAgICAgICAgaWYgKGNvbHVtbiA+IG51bUZ1bGxDb2x1bW5zIHx8IChjb2x1bW4gPT09IG51bUZ1bGxDb2x1bW5zICYmIHJvdyA9PT0gc2xpZGVzUGVyQ29sdW1uIC0gMSkpIHtcbiAgICAgICAgICByb3cgKz0gMTtcbiAgICAgICAgICBpZiAocm93ID49IHNsaWRlc1BlckNvbHVtbikge1xuICAgICAgICAgICAgcm93ID0gMDtcbiAgICAgICAgICAgIGNvbHVtbiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdTbGlkZU9yZGVySW5kZXggPSBjb2x1bW4gKyAoKHJvdyAqIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MpIC8gc2xpZGVzUGVyQ29sdW1uKTtcbiAgICAgICAgc2xpZGVcbiAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICctd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgICAgJy1tb3otYm94LW9yZGluYWwtZ3JvdXAnOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgICAnLW1zLWZsZXgtb3JkZXInOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgICAnLXdlYmtpdC1vcmRlcic6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAgIG9yZGVyOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb3cgPSBNYXRoLmZsb29yKGkgLyBzbGlkZXNQZXJSb3cpO1xuICAgICAgICBjb2x1bW4gPSBpIC0gKHJvdyAqIHNsaWRlc1BlclJvdyk7XG4gICAgICB9XG4gICAgICBzbGlkZVxuICAgICAgICAuY3NzKFxuICAgICAgICAgIGBtYXJnaW4tJHtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAndG9wJyA6ICdsZWZ0J31gLFxuICAgICAgICAgIChyb3cgIT09IDAgJiYgcGFyYW1zLnNwYWNlQmV0d2VlbikgJiYgKGAke3BhcmFtcy5zcGFjZUJldHdlZW59cHhgKVxuICAgICAgICApXG4gICAgICAgIC5hdHRyKCdkYXRhLXN3aXBlci1jb2x1bW4nLCBjb2x1bW4pXG4gICAgICAgIC5hdHRyKCdkYXRhLXN3aXBlci1yb3cnLCByb3cpO1xuICAgIH1cbiAgICBpZiAoc2xpZGUuY3NzKCdkaXNwbGF5JykgPT09ICdub25lJykgY29udGludWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgICBjb25zdCBzbGlkZVN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHNsaWRlWzBdLCBudWxsKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRUcmFuc2Zvcm0gPSBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm07XG4gICAgICBjb25zdCBjdXJyZW50V2ViS2l0VHJhbnNmb3JtID0gc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGVbMF0uc3R5bGUudHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICAgICAgc2xpZGVTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpXG4gICAgICAgICAgPyBzbGlkZS5vdXRlcldpZHRoKHRydWUpXG4gICAgICAgICAgOiBzbGlkZS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgY29uc3Qgd2lkdGggPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3dpZHRoJykpO1xuICAgICAgICAgIGNvbnN0IHBhZGRpbmdMZWZ0ID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLWxlZnQnKSk7XG4gICAgICAgICAgY29uc3QgcGFkZGluZ1JpZ2h0ID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXJpZ2h0JykpO1xuICAgICAgICAgIGNvbnN0IG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1sZWZ0JykpO1xuICAgICAgICAgIGNvbnN0IG1hcmdpblJpZ2h0ID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tcmlnaHQnKSk7XG4gICAgICAgICAgY29uc3QgYm94U2l6aW5nID0gc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnYm94LXNpemluZycpO1xuICAgICAgICAgIGlmIChib3hTaXppbmcgJiYgYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcpIHtcbiAgICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzbGlkZVNpemUgPSB3aWR0aCArIHBhZGRpbmdMZWZ0ICsgcGFkZGluZ1JpZ2h0ICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBoZWlnaHQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2hlaWdodCcpKTtcbiAgICAgICAgICBjb25zdCBwYWRkaW5nVG9wID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXRvcCcpKTtcbiAgICAgICAgICBjb25zdCBwYWRkaW5nQm90dG9tID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLWJvdHRvbScpKTtcbiAgICAgICAgICBjb25zdCBtYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi10b3AnKSk7XG4gICAgICAgICAgY29uc3QgbWFyZ2luQm90dG9tID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tYm90dG9tJykpO1xuICAgICAgICAgIGNvbnN0IGJveFNpemluZyA9IHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2JveC1zaXppbmcnKTtcbiAgICAgICAgICBpZiAoYm94U2l6aW5nICYmIGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgICAgICBzbGlkZVNpemUgPSBoZWlnaHQgKyBtYXJnaW5Ub3AgKyBtYXJnaW5Cb3R0b207XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNsaWRlU2l6ZSA9IGhlaWdodCArIHBhZGRpbmdUb3AgKyBwYWRkaW5nQm90dG9tICsgbWFyZ2luVG9wICsgbWFyZ2luQm90dG9tO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGVbMF0uc3R5bGUudHJhbnNmb3JtID0gY3VycmVudFRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm07XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVNpemUgPSAoc3dpcGVyU2l6ZSAtICgocGFyYW1zLnNsaWRlc1BlclZpZXcgLSAxKSAqIHNwYWNlQmV0d2VlbikpIC8gcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuXG4gICAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICBzbGlkZXNbaV0uc3R5bGUud2lkdGggPSBgJHtzbGlkZVNpemV9cHhgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNsaWRlc1tpXS5zdHlsZS5oZWlnaHQgPSBgJHtzbGlkZVNpemV9cHhgO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgfVxuICAgIHNsaWRlc1NpemVzR3JpZC5wdXNoKHNsaWRlU2l6ZSk7XG5cblxuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgKHNsaWRlU2l6ZSAvIDIpICsgKHByZXZTbGlkZVNpemUgLyAyKSArIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChwcmV2U2xpZGVTaXplID09PSAwICYmIGkgIT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gKHN3aXBlclNpemUgLyAyKSAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChpID09PSAwKSBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiAtIChzd2lwZXJTaXplIC8gMikgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoTWF0aC5hYnMoc2xpZGVQb3NpdGlvbikgPCAxIC8gMTAwMCkgc2xpZGVQb3NpdGlvbiA9IDA7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7XG4gICAgICBpZiAoKGluZGV4KSAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKChpbmRleCkgJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDApIHNuYXBHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbjtcbiAgICB9XG5cbiAgICBzd2lwZXIudmlydHVhbFNpemUgKz0gc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuXG4gICAgcHJldlNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcblxuICAgIGluZGV4ICs9IDE7XG4gIH1cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5tYXgoc3dpcGVyLnZpcnR1YWxTaXplLCBzd2lwZXJTaXplKSArIG9mZnNldEFmdGVyO1xuICBsZXQgbmV3U2xpZGVzR3JpZDtcblxuICBpZiAoXG4gICAgcnRsICYmIHdyb25nUlRMICYmIChwYXJhbXMuZWZmZWN0ID09PSAnc2xpZGUnIHx8IHBhcmFtcy5lZmZlY3QgPT09ICdjb3ZlcmZsb3cnKSkge1xuICAgICR3cmFwcGVyRWwuY3NzKHsgd2lkdGg6IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW59cHhgIH0pO1xuICB9XG4gIGlmICghU3VwcG9ydC5mbGV4Ym94IHx8IHBhcmFtcy5zZXRXcmFwcGVyU2l6ZSkge1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpICR3cmFwcGVyRWwuY3NzKHsgd2lkdGg6IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW59cHhgIH0pO1xuICAgIGVsc2UgJHdyYXBwZXJFbC5jc3MoeyBoZWlnaHQ6IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW59cHhgIH0pO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgc3dpcGVyLnZpcnR1YWxTaXplID0gKHNsaWRlU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pICogc2xpZGVzTnVtYmVyRXZlblRvUm93cztcbiAgICBzd2lwZXIudmlydHVhbFNpemUgPSBNYXRoLmNlaWwoc3dpcGVyLnZpcnR1YWxTaXplIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgLSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpICR3cmFwcGVyRWwuY3NzKHsgd2lkdGg6IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW59cHhgIH0pO1xuICAgIGVsc2UgJHdyYXBwZXJFbC5jc3MoeyBoZWlnaHQ6IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW59cHhgIH0pO1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIG5ld1NsaWRlc0dyaWQgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc25hcEdyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgbGV0IHNsaWRlc0dyaWRJdGVtID0gc25hcEdyaWRbaV07XG4gICAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgICBpZiAoc25hcEdyaWRbaV0gPCBzd2lwZXIudmlydHVhbFNpemUgKyBzbmFwR3JpZFswXSkgbmV3U2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgIH1cbiAgICAgIHNuYXBHcmlkID0gbmV3U2xpZGVzR3JpZDtcbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgbGFzdCBncmlkIGVsZW1lbnRzIGRlcGVuZGluZyBvbiB3aWR0aFxuICBpZiAoIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgIG5ld1NsaWRlc0dyaWQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNuYXBHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBsZXQgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpXTtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgaWYgKHNuYXBHcmlkW2ldIDw9IHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIHtcbiAgICAgICAgbmV3U2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkO1xuICAgIGlmIChNYXRoLmZsb29yKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIC0gTWF0aC5mbG9vcihzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSkgPiAxKSB7XG4gICAgICBzbmFwR3JpZC5wdXNoKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpO1xuICAgIH1cbiAgfVxuICBpZiAoc25hcEdyaWQubGVuZ3RoID09PSAwKSBzbmFwR3JpZCA9IFswXTtcblxuICBpZiAocGFyYW1zLnNwYWNlQmV0d2VlbiAhPT0gMCkge1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIGlmIChydGwpIHNsaWRlcy5jc3MoeyBtYXJnaW5MZWZ0OiBgJHtzcGFjZUJldHdlZW59cHhgIH0pO1xuICAgICAgZWxzZSBzbGlkZXMuY3NzKHsgbWFyZ2luUmlnaHQ6IGAke3NwYWNlQmV0d2Vlbn1weGAgfSk7XG4gICAgfSBlbHNlIHNsaWRlcy5jc3MoeyBtYXJnaW5Cb3R0b206IGAke3NwYWNlQmV0d2Vlbn1weGAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNlbnRlckluc3VmZmljaWVudFNsaWRlcykge1xuICAgIGxldCBhbGxTbGlkZXNTaXplID0gMDtcbiAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaCgoc2xpZGVTaXplVmFsdWUpID0+IHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAocGFyYW1zLnNwYWNlQmV0d2VlbiA/IHBhcmFtcy5zcGFjZUJldHdlZW4gOiAwKTtcbiAgICB9KTtcbiAgICBhbGxTbGlkZXNTaXplIC09IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgaWYgKGFsbFNsaWRlc1NpemUgPCBzd2lwZXJTaXplKSB7XG4gICAgICBjb25zdCBhbGxTbGlkZXNPZmZzZXQgPSAoc3dpcGVyU2l6ZSAtIGFsbFNsaWRlc1NpemUpIC8gMjtcbiAgICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgICBzbmFwR3JpZFtzbmFwSW5kZXhdID0gc25hcCAtIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgICAgc2xpZGVzR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgICAgc2xpZGVzR3JpZFtzbmFwSW5kZXhdID0gc25hcCArIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICBzbGlkZXMsXG4gICAgc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBzbGlkZXNTaXplc0dyaWQsXG4gIH0pO1xuXG4gIGlmIChzbGlkZXNMZW5ndGggIT09IHByZXZpb3VzU2xpZGVzTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0xlbmd0aENoYW5nZScpO1xuICB9XG4gIGlmIChzbmFwR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU25hcEdyaWRMZW5ndGgpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIHN3aXBlci5lbWl0KCdzbmFwR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG4gIGlmIChzbGlkZXNHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0dyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUF1dG9IZWlnaHQgKHNwZWVkKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGFjdGl2ZVNsaWRlcyA9IFtdO1xuICBsZXQgbmV3SGVpZ2h0ID0gMDtcbiAgbGV0IGk7XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICdudW1iZXInKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICB9IGVsc2UgaWYgKHNwZWVkID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCk7XG4gIH1cbiAgLy8gRmluZCBzbGlkZXMgY3VycmVudGx5IGluIHZpZXdcbiAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyk7IGkgKz0gMSkge1xuICAgICAgY29uc3QgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggKyBpO1xuICAgICAgaWYgKGluZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGgpIGJyZWFrO1xuICAgICAgYWN0aXZlU2xpZGVzLnB1c2goc3dpcGVyLnNsaWRlcy5lcShpbmRleClbMF0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhY3RpdmVTbGlkZXMucHVzaChzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleClbMF0pO1xuICB9XG5cbiAgLy8gRmluZCBuZXcgaGVpZ2h0IGZyb20gaGlnaGVzdCBzbGlkZSBpbiB2aWV3XG4gIGZvciAoaSA9IDA7IGkgPCBhY3RpdmVTbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlc1tpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IGhlaWdodCA9IGFjdGl2ZVNsaWRlc1tpXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBuZXdIZWlnaHQgPSBoZWlnaHQgPiBuZXdIZWlnaHQgPyBoZWlnaHQgOiBuZXdIZWlnaHQ7XG4gICAgfVxuICB9XG5cbiAgLy8gVXBkYXRlIEhlaWdodFxuICBpZiAobmV3SGVpZ2h0KSBzd2lwZXIuJHdyYXBwZXJFbC5jc3MoJ2hlaWdodCcsIGAke25ld0hlaWdodH1weGApO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTbGlkZXNPZmZzZXQgKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZU9mZnNldCA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHNsaWRlc1tpXS5vZmZzZXRMZWZ0IDogc2xpZGVzW2ldLm9mZnNldFRvcDtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVTbGlkZXNQcm9ncmVzcyAodHJhbnNsYXRlID0gKHRoaXMgJiYgdGhpcy50cmFuc2xhdGUpIHx8IDApIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcblxuICBjb25zdCB7IHNsaWRlcywgcnRsVHJhbnNsYXRlOiBydGwgfSA9IHN3aXBlcjtcblxuICBpZiAoc2xpZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcblxuICBsZXQgb2Zmc2V0Q2VudGVyID0gLXRyYW5zbGF0ZTtcbiAgaWYgKHJ0bCkgb2Zmc2V0Q2VudGVyID0gdHJhbnNsYXRlO1xuXG4gIC8vIFZpc2libGUgU2xpZGVzXG4gIHNsaWRlcy5yZW1vdmVDbGFzcyhwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpO1xuXG4gIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcyA9IFtdO1xuICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qgc2xpZGUgPSBzbGlkZXNbaV07XG4gICAgY29uc3Qgc2xpZGVQcm9ncmVzcyA9IChcbiAgICAgIChvZmZzZXRDZW50ZXIgKyAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogMCkpIC0gc2xpZGUuc3dpcGVyU2xpZGVPZmZzZXRcbiAgICApIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pO1xuICAgIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgICBjb25zdCBzbGlkZUJlZm9yZSA9IC0ob2Zmc2V0Q2VudGVyIC0gc2xpZGUuc3dpcGVyU2xpZGVPZmZzZXQpO1xuICAgICAgY29uc3Qgc2xpZGVBZnRlciA9IHNsaWRlQmVmb3JlICsgc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICAgIGNvbnN0IGlzVmlzaWJsZSA9IChzbGlkZUJlZm9yZSA+PSAwICYmIHNsaWRlQmVmb3JlIDwgc3dpcGVyLnNpemUpXG4gICAgICAgICAgICAgICAgfHwgKHNsaWRlQWZ0ZXIgPiAwICYmIHNsaWRlQWZ0ZXIgPD0gc3dpcGVyLnNpemUpXG4gICAgICAgICAgICAgICAgfHwgKHNsaWRlQmVmb3JlIDw9IDAgJiYgc2xpZGVBZnRlciA+PSBzd2lwZXIuc2l6ZSk7XG4gICAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgICAgICAgc2xpZGVzLmVxKGkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICAgIHNsaWRlLnByb2dyZXNzID0gcnRsID8gLXNsaWRlUHJvZ3Jlc3MgOiBzbGlkZVByb2dyZXNzO1xuICB9XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzID0gJChzd2lwZXIudmlzaWJsZVNsaWRlcyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzICh0cmFuc2xhdGUgPSAodGhpcyAmJiB0aGlzLnRyYW5zbGF0ZSkgfHwgMCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuXG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBsZXQgeyBwcm9ncmVzcywgaXNCZWdpbm5pbmcsIGlzRW5kIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHdhc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nO1xuICBjb25zdCB3YXNFbmQgPSBpc0VuZDtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgcHJvZ3Jlc3MgPSAwO1xuICAgIGlzQmVnaW5uaW5nID0gdHJ1ZTtcbiAgICBpc0VuZCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvICh0cmFuc2xhdGVzRGlmZik7XG4gICAgaXNCZWdpbm5pbmcgPSBwcm9ncmVzcyA8PSAwO1xuICAgIGlzRW5kID0gcHJvZ3Jlc3MgPj0gMTtcbiAgfVxuICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgcHJvZ3Jlc3MsXG4gICAgaXNCZWdpbm5pbmcsXG4gICAgaXNFbmQsXG4gIH0pO1xuXG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSBzd2lwZXIudXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKTtcblxuICBpZiAoaXNCZWdpbm5pbmcgJiYgIXdhc0JlZ2lubmluZykge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEJlZ2lubmluZyB0b0VkZ2UnKTtcbiAgfVxuICBpZiAoaXNFbmQgJiYgIXdhc0VuZCkge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEVuZCB0b0VkZ2UnKTtcbiAgfVxuICBpZiAoKHdhc0JlZ2lubmluZyAmJiAhaXNCZWdpbm5pbmcpIHx8ICh3YXNFbmQgJiYgIWlzRW5kKSkge1xuICAgIHN3aXBlci5lbWl0KCdmcm9tRWRnZScpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3Byb2dyZXNzJywgcHJvZ3Jlc3MpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTbGlkZXNDbGFzc2VzICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBjb25zdCB7XG4gICAgc2xpZGVzLCBwYXJhbXMsICR3cmFwcGVyRWwsIGFjdGl2ZUluZGV4LCByZWFsSW5kZXgsXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG5cbiAgc2xpZGVzLnJlbW92ZUNsYXNzKGAke3BhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzfSAke3BhcmFtcy5zbGlkZU5leHRDbGFzc30gJHtwYXJhbXMuc2xpZGVQcmV2Q2xhc3N9ICR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3N9ICR7cGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzfSAke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzc31gKTtcblxuICBsZXQgYWN0aXZlU2xpZGU7XG4gIGlmIChpc1ZpcnR1YWwpIHtcbiAgICBhY3RpdmVTbGlkZSA9IHN3aXBlci4kd3JhcHBlckVsLmZpbmQoYC4ke3BhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7YWN0aXZlSW5kZXh9XCJdYCk7XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlU2xpZGUgPSBzbGlkZXMuZXEoYWN0aXZlSW5kZXgpO1xuICB9XG5cbiAgLy8gQWN0aXZlIGNsYXNzZXNcbiAgYWN0aXZlU2xpZGUuYWRkQ2xhc3MocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIC8vIER1cGxpY2F0ZSB0byBhbGwgbG9vcGVkIHNsaWRlc1xuICAgIGlmIChhY3RpdmVTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICR3cmFwcGVyRWxcbiAgICAgICAgLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc306bm90KC4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfSlbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl1gKVxuICAgICAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsXG4gICAgICAgIC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdYClcbiAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gIH1cbiAgLy8gTmV4dCBTbGlkZVxuICBsZXQgbmV4dFNsaWRlID0gYWN0aXZlU2xpZGUubmV4dEFsbChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YCkuZXEoMCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcbiAgaWYgKHBhcmFtcy5sb29wICYmIG5leHRTbGlkZS5sZW5ndGggPT09IDApIHtcbiAgICBuZXh0U2xpZGUgPSBzbGlkZXMuZXEoMCk7XG4gICAgbmV4dFNsaWRlLmFkZENsYXNzKHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gIH1cbiAgLy8gUHJldiBTbGlkZVxuICBsZXQgcHJldlNsaWRlID0gYWN0aXZlU2xpZGUucHJldkFsbChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YCkuZXEoMCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgaWYgKHBhcmFtcy5sb29wICYmIHByZXZTbGlkZS5sZW5ndGggPT09IDApIHtcbiAgICBwcmV2U2xpZGUgPSBzbGlkZXMuZXEoLTEpO1xuICAgIHByZXZTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIC8vIER1cGxpY2F0ZSB0byBhbGwgbG9vcGVkIHNsaWRlc1xuICAgIGlmIChuZXh0U2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAkd3JhcHBlckVsXG4gICAgICAgIC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9Om5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtuZXh0U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKX1cIl1gKVxuICAgICAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7bmV4dFNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyl9XCJdYClcbiAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyk7XG4gICAgfVxuICAgIGlmIChwcmV2U2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAkd3JhcHBlckVsXG4gICAgICAgIC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9Om5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtwcmV2U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKX1cIl1gKVxuICAgICAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cHJldlNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyl9XCJdYClcbiAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUFjdGl2ZUluZGV4IChuZXdBY3RpdmVJbmRleCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBjb25zdCB7XG4gICAgc2xpZGVzR3JpZCwgc25hcEdyaWQsIHBhcmFtcywgYWN0aXZlSW5kZXg6IHByZXZpb3VzSW5kZXgsIHJlYWxJbmRleDogcHJldmlvdXNSZWFsSW5kZXgsIHNuYXBJbmRleDogcHJldmlvdXNTbmFwSW5kZXgsXG4gIH0gPSBzd2lwZXI7XG4gIGxldCBhY3RpdmVJbmRleCA9IG5ld0FjdGl2ZUluZGV4O1xuICBsZXQgc25hcEluZGV4O1xuICBpZiAodHlwZW9mIGFjdGl2ZUluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldICYmIHRyYW5zbGF0ZSA8IHNsaWRlc0dyaWRbaSArIDFdIC0gKChzbGlkZXNHcmlkW2kgKyAxXSAtIHNsaWRlc0dyaWRbaV0pIC8gMikpIHtcbiAgICAgICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0pIHtcbiAgICAgICAgICBhY3RpdmVJbmRleCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcbiAgICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICAgIGlmIChhY3RpdmVJbmRleCA8IDAgfHwgdHlwZW9mIGFjdGl2ZUluZGV4ID09PSAndW5kZWZpbmVkJykgYWN0aXZlSW5kZXggPSAwO1xuICAgIH1cbiAgfVxuICBpZiAoc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpID49IDApIHtcbiAgICBzbmFwSW5kZXggPSBzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgc25hcEluZGV4ID0gTWF0aC5mbG9vcihhY3RpdmVJbmRleCAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIH1cbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG4gIGlmIChhY3RpdmVJbmRleCA9PT0gcHJldmlvdXNJbmRleCkge1xuICAgIGlmIChzbmFwSW5kZXggIT09IHByZXZpb3VzU25hcEluZGV4KSB7XG4gICAgICBzd2lwZXIuc25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBHZXQgcmVhbCBpbmRleFxuICBjb25zdCByZWFsSW5kZXggPSBwYXJzZUludChzd2lwZXIuc2xpZGVzLmVxKGFjdGl2ZUluZGV4KS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpIHx8IGFjdGl2ZUluZGV4LCAxMCk7XG5cbiAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgIHNuYXBJbmRleCxcbiAgICByZWFsSW5kZXgsXG4gICAgcHJldmlvdXNJbmRleCxcbiAgICBhY3RpdmVJbmRleCxcbiAgfSk7XG4gIHN3aXBlci5lbWl0KCdhY3RpdmVJbmRleENoYW5nZScpO1xuICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gIGlmIChwcmV2aW91c1JlYWxJbmRleCAhPT0gcmVhbEluZGV4KSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWxJbmRleENoYW5nZScpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZScpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDbGlja2VkU2xpZGUgKGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3Qgc2xpZGUgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKVswXTtcbiAgbGV0IHNsaWRlRm91bmQgPSBmYWxzZTtcbiAgaWYgKHNsaWRlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpXSA9PT0gc2xpZGUpIHNsaWRlRm91bmQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzbGlkZSAmJiBzbGlkZUZvdW5kKSB7XG4gICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHNsaWRlO1xuICAgIGlmIChzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHBhcnNlSW50KCQoc2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9ICQoc2xpZGUpLmluZGV4KCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSB1bmRlZmluZWQ7XG4gICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5zbGlkZVRvQ2xpY2tlZFNsaWRlICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHVuZGVmaW5lZCAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHtcbiAgICBzd2lwZXIuc2xpZGVUb0NsaWNrZWRTbGlkZSgpO1xuICB9XG59XG5cbnZhciB1cGRhdGUgPSB7XG4gIHVwZGF0ZVNpemUsXG4gIHVwZGF0ZVNsaWRlcyxcbiAgdXBkYXRlQXV0b0hlaWdodCxcbiAgdXBkYXRlU2xpZGVzT2Zmc2V0LFxuICB1cGRhdGVTbGlkZXNQcm9ncmVzcyxcbiAgdXBkYXRlUHJvZ3Jlc3MsXG4gIHVwZGF0ZVNsaWRlc0NsYXNzZXMsXG4gIHVwZGF0ZUFjdGl2ZUluZGV4LFxuICB1cGRhdGVDbGlja2VkU2xpZGUsXG59O1xuXG5mdW5jdGlvbiBnZXRUcmFuc2xhdGUgKGF4aXMgPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gJ3gnIDogJ3knKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgY29uc3Qge1xuICAgIHBhcmFtcywgcnRsVHJhbnNsYXRlOiBydGwsIHRyYW5zbGF0ZSwgJHdyYXBwZXJFbCxcbiAgfSA9IHN3aXBlcjtcblxuICBpZiAocGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICByZXR1cm4gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgfVxuXG4gIGxldCBjdXJyZW50VHJhbnNsYXRlID0gVXRpbHMuZ2V0VHJhbnNsYXRlKCR3cmFwcGVyRWxbMF0sIGF4aXMpO1xuICBpZiAocnRsKSBjdXJyZW50VHJhbnNsYXRlID0gLWN1cnJlbnRUcmFuc2xhdGU7XG5cbiAgcmV0dXJuIGN1cnJlbnRUcmFuc2xhdGUgfHwgMDtcbn1cblxuZnVuY3Rpb24gc2V0VHJhbnNsYXRlICh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcnRsVHJhbnNsYXRlOiBydGwsIHBhcmFtcywgJHdyYXBwZXJFbCwgcHJvZ3Jlc3MsXG4gIH0gPSBzd2lwZXI7XG4gIGxldCB4ID0gMDtcbiAgbGV0IHkgPSAwO1xuICBjb25zdCB6ID0gMDtcblxuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgeCA9IHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgeSA9IHRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgeCA9IE1hdGguZmxvb3IoeCk7XG4gICAgeSA9IE1hdGguZmxvb3IoeSk7XG4gIH1cblxuICBpZiAoIXBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgaWYgKFN1cHBvcnQudHJhbnNmb3JtczNkKSAkd3JhcHBlckVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt4fXB4LCAke3l9cHgsICR7en1weClgKTtcbiAgICBlbHNlICR3cmFwcGVyRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUoJHt4fXB4LCAke3l9cHgpYCk7XG4gIH1cbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgc3dpcGVyLnRyYW5zbGF0ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHggOiB5O1xuXG4gIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHByb2dyZXNzXG4gIGxldCBuZXdQcm9ncmVzcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gKHRyYW5zbGF0ZXNEaWZmKTtcbiAgfVxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTtcbn1cblxuZnVuY3Rpb24gbWluVHJhbnNsYXRlICgpIHtcbiAgcmV0dXJuICgtdGhpcy5zbmFwR3JpZFswXSk7XG59XG5cbmZ1bmN0aW9uIG1heFRyYW5zbGF0ZSAoKSB7XG4gIHJldHVybiAoLXRoaXMuc25hcEdyaWRbdGhpcy5zbmFwR3JpZC5sZW5ndGggLSAxXSk7XG59XG5cbnZhciB0cmFuc2xhdGUgPSB7XG4gIGdldFRyYW5zbGF0ZSxcbiAgc2V0VHJhbnNsYXRlLFxuICBtaW5UcmFuc2xhdGUsXG4gIG1heFRyYW5zbGF0ZSxcbn07XG5cbmZ1bmN0aW9uIHNldFRyYW5zaXRpb24gKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBzd2lwZXIuJHdyYXBwZXJFbC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcblxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNpdGlvbicsIGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uU3RhcnQgKHJ1bkNhbGxiYWNrcyA9IHRydWUsIGRpcmVjdGlvbikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7IGFjdGl2ZUluZGV4LCBwYXJhbXMsIHByZXZpb3VzSW5kZXggfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgfVxuXG4gIGxldCBkaXIgPSBkaXJlY3Rpb247XG4gIGlmICghZGlyKSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4ID4gcHJldmlvdXNJbmRleCkgZGlyID0gJ25leHQnO1xuICAgIGVsc2UgaWYgKGFjdGl2ZUluZGV4IDwgcHJldmlvdXNJbmRleCkgZGlyID0gJ3ByZXYnO1xuICAgIGVsc2UgZGlyID0gJ3Jlc2V0JztcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcblxuICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKGRpciA9PT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUmVzZXRUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlVHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgaWYgKGRpciA9PT0gJ25leHQnKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVOZXh0VHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZVByZXZUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbkVuZCAocnVuQ2FsbGJhY2tzID0gdHJ1ZSwgZGlyZWN0aW9uKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgYWN0aXZlSW5kZXgsIHByZXZpb3VzSW5kZXggfSA9IHN3aXBlcjtcbiAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcblxuICBsZXQgZGlyID0gZGlyZWN0aW9uO1xuICBpZiAoIWRpcikge1xuICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIGRpciA9ICduZXh0JztcbiAgICBlbHNlIGlmIChhY3RpdmVJbmRleCA8IHByZXZpb3VzSW5kZXgpIGRpciA9ICdwcmV2JztcbiAgICBlbHNlIGRpciA9ICdyZXNldCc7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuXG4gIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoZGlyID09PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVSZXNldFRyYW5zaXRpb25FbmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlVHJhbnNpdGlvbkVuZCcpO1xuICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlTmV4dFRyYW5zaXRpb25FbmQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUHJldlRyYW5zaXRpb25FbmQnKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHRyYW5zaXRpb24gPSB7XG4gIHNldFRyYW5zaXRpb24sXG4gIHRyYW5zaXRpb25TdGFydCxcbiAgdHJhbnNpdGlvbkVuZCxcbn07XG5cbmZ1bmN0aW9uIHNsaWRlVG8gKGluZGV4ID0gMCwgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgaW50ZXJuYWwpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHNsaWRlSW5kZXggPSBpbmRleDtcbiAgaWYgKHNsaWRlSW5kZXggPCAwKSBzbGlkZUluZGV4ID0gMDtcblxuICBjb25zdCB7XG4gICAgcGFyYW1zLCBzbmFwR3JpZCwgc2xpZGVzR3JpZCwgcHJldmlvdXNJbmRleCwgYWN0aXZlSW5kZXgsIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbGV0IHNuYXBJbmRleCA9IE1hdGguZmxvb3Ioc2xpZGVJbmRleCAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuXG4gIGlmICgoYWN0aXZlSW5kZXggfHwgcGFyYW1zLmluaXRpYWxTbGlkZSB8fCAwKSA9PT0gKHByZXZpb3VzSW5kZXggfHwgMCkgJiYgcnVuQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVNsaWRlQ2hhbmdlU3RhcnQnKTtcbiAgfVxuXG4gIGNvbnN0IHRyYW5zbGF0ZSA9IC1zbmFwR3JpZFtzbmFwSW5kZXhdO1xuXG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcblxuICAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICgtTWF0aC5mbG9vcih0cmFuc2xhdGUgKiAxMDApID49IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpXSAqIDEwMCkpIHtcbiAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCAmJiBzbGlkZUluZGV4ICE9PSBhY3RpdmVJbmRleCkge1xuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHRyYW5zbGF0ZSA8IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlIDwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHRyYW5zbGF0ZSA+IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlID4gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICBpZiAoKGFjdGl2ZUluZGV4IHx8IDApICE9PSBzbGlkZUluZGV4KSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgbGV0IGRpcmVjdGlvbjtcbiAgaWYgKHNsaWRlSW5kZXggPiBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ25leHQnO1xuICBlbHNlIGlmIChzbGlkZUluZGV4IDwgYWN0aXZlSW5kZXgpIGRpcmVjdGlvbiA9ICdwcmV2JztcbiAgZWxzZSBkaXJlY3Rpb24gPSAncmVzZXQnO1xuXG5cbiAgLy8gVXBkYXRlIEluZGV4XG4gIGlmICgocnRsICYmIC10cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUpIHx8ICghcnRsICYmIHRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSkpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gICAgLy8gVXBkYXRlIEhlaWdodFxuICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICB9XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBpZiAocGFyYW1zLmVmZmVjdCAhPT0gJ3NsaWRlJykge1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgIH1cbiAgICBpZiAoZGlyZWN0aW9uICE9PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHNwZWVkID09PSAwIHx8ICFTdXBwb3J0LnRyYW5zaXRpb24pIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgIGlmICghc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG4gICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2xpZGVUb0xvb3AgKGluZGV4ID0gMCwgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgaW50ZXJuYWwpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IG5ld0luZGV4ID0gaW5kZXg7XG4gIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBuZXdJbmRleCArPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICB9XG5cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVOZXh0IChzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCBpbnRlcm5hbCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7IHBhcmFtcywgYW5pbWF0aW5nIH0gPSBzd2lwZXI7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIHBhcmFtcy5zbGlkZXNQZXJHcm91cCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXAsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZVByZXYgKHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsIGFuaW1hdGluZywgc25hcEdyaWQsIHNsaWRlc0dyaWQsIHJ0bFRyYW5zbGF0ZSxcbiAgfSA9IHN3aXBlcjtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICB9XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgZnVuY3Rpb24gbm9ybWFsaXplKHZhbCkge1xuICAgIGlmICh2YWwgPCAwKSByZXR1cm4gLU1hdGguZmxvb3IoTWF0aC5hYnModmFsKSk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodmFsKTtcbiAgfVxuICBjb25zdCBub3JtYWxpemVkVHJhbnNsYXRlID0gbm9ybWFsaXplKHRyYW5zbGF0ZSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWRTbmFwR3JpZCA9IHNuYXBHcmlkLm1hcCh2YWwgPT4gbm9ybWFsaXplKHZhbCkpO1xuICBjb25zdCBub3JtYWxpemVkU2xpZGVzR3JpZCA9IHNsaWRlc0dyaWQubWFwKHZhbCA9PiBub3JtYWxpemUodmFsKSk7XG5cbiAgY29uc3QgY3VycmVudFNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKV07XG4gIGNvbnN0IHByZXZTbmFwID0gc25hcEdyaWRbbm9ybWFsaXplZFNuYXBHcmlkLmluZGV4T2Yobm9ybWFsaXplZFRyYW5zbGF0ZSkgLSAxXTtcbiAgbGV0IHByZXZJbmRleDtcbiAgaWYgKHR5cGVvZiBwcmV2U25hcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBwcmV2SW5kZXggPSBzbGlkZXNHcmlkLmluZGV4T2YocHJldlNuYXApO1xuICAgIGlmIChwcmV2SW5kZXggPCAwKSBwcmV2SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggLSAxO1xuICB9XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhwcmV2SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZVJlc2V0IChzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCBpbnRlcm5hbCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVUb0Nsb3Nlc3QgKHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgY29uc3Qgc25hcEluZGV4ID0gTWF0aC5mbG9vcihpbmRleCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuXG4gIGlmIChzbmFwSW5kZXggPCBzd2lwZXIuc25hcEdyaWQubGVuZ3RoIC0gMSkge1xuICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG5cbiAgICBjb25zdCBjdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuICAgIGNvbnN0IG5leHRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCArIDFdO1xuXG4gICAgaWYgKCh0cmFuc2xhdGUgLSBjdXJyZW50U25hcCkgPiAobmV4dFNuYXAgLSBjdXJyZW50U25hcCkgLyAyKSB7XG4gICAgICBpbmRleCA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbmZ1bmN0aW9uIHNsaWRlVG9DbGlja2VkU2xpZGUgKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7IHBhcmFtcywgJHdyYXBwZXJFbCB9ID0gc3dpcGVyO1xuXG4gIGNvbnN0IHNsaWRlc1BlclZpZXcgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgbGV0IHNsaWRlVG9JbmRleCA9IHN3aXBlci5jbGlja2VkSW5kZXg7XG4gIGxldCByZWFsSW5kZXg7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSByZXR1cm47XG4gICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoJChzd2lwZXIuY2xpY2tlZFNsaWRlKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgaWYgKFxuICAgICAgICAoc2xpZGVUb0luZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcyAtIChzbGlkZXNQZXJWaWV3IC8gMikpXG4gICAgICAgIHx8IChzbGlkZVRvSW5kZXggPiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzKSArIChzbGlkZXNQZXJWaWV3IC8gMikpXG4gICAgICApIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgc2xpZGVUb0luZGV4ID0gJHdyYXBwZXJFbFxuICAgICAgICAgIC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdOm5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pYClcbiAgICAgICAgICAuZXEoMClcbiAgICAgICAgICAuaW5kZXgoKTtcblxuICAgICAgICBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzbGlkZXNQZXJWaWV3KSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgc2xpZGVUb0luZGV4ID0gJHdyYXBwZXJFbFxuICAgICAgICAuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXTpub3QoLiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9KWApXG4gICAgICAgIC5lcSgwKVxuICAgICAgICAuaW5kZXgoKTtcblxuICAgICAgVXRpbHMubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gIH1cbn1cblxudmFyIHNsaWRlID0ge1xuICBzbGlkZVRvLFxuICBzbGlkZVRvTG9vcCxcbiAgc2xpZGVOZXh0LFxuICBzbGlkZVByZXYsXG4gIHNsaWRlUmVzZXQsXG4gIHNsaWRlVG9DbG9zZXN0LFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlLFxufTtcblxuZnVuY3Rpb24gbG9vcENyZWF0ZSAoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgcGFyYW1zLCAkd3JhcHBlckVsIH0gPSBzd2lwZXI7XG4gIC8vIFJlbW92ZSBkdXBsaWNhdGVkIHNsaWRlc1xuICAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc31gKS5yZW1vdmUoKTtcblxuICBsZXQgc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YCk7XG5cbiAgaWYgKHBhcmFtcy5sb29wRmlsbEdyb3VwV2l0aEJsYW5rKSB7XG4gICAgY29uc3QgYmxhbmtTbGlkZXNOdW0gPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgLSAoc2xpZGVzLmxlbmd0aCAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgaWYgKGJsYW5rU2xpZGVzTnVtICE9PSBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxhbmtTbGlkZXNOdW07IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBibGFua05vZGUgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5hZGRDbGFzcyhgJHtwYXJhbXMuc2xpZGVDbGFzc30gJHtwYXJhbXMuc2xpZGVCbGFua0NsYXNzfWApO1xuICAgICAgICAkd3JhcHBlckVsLmFwcGVuZChibGFua05vZGUpO1xuICAgICAgfVxuICAgICAgc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgIXBhcmFtcy5sb29wZWRTbGlkZXMpIHBhcmFtcy5sb29wZWRTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuXG4gIHN3aXBlci5sb29wZWRTbGlkZXMgPSBwYXJzZUludChwYXJhbXMubG9vcGVkU2xpZGVzIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCk7XG4gIHN3aXBlci5sb29wZWRTbGlkZXMgKz0gcGFyYW1zLmxvb3BBZGRpdGlvbmFsU2xpZGVzO1xuICBpZiAoc3dpcGVyLmxvb3BlZFNsaWRlcyA+IHNsaWRlcy5sZW5ndGgpIHtcbiAgICBzd2lwZXIubG9vcGVkU2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcbiAgfVxuXG4gIGNvbnN0IHByZXBlbmRTbGlkZXMgPSBbXTtcbiAgY29uc3QgYXBwZW5kU2xpZGVzID0gW107XG4gIHNsaWRlcy5lYWNoKChpbmRleCwgZWwpID0+IHtcbiAgICBjb25zdCBzbGlkZSA9ICQoZWwpO1xuICAgIGlmIChpbmRleCA8IHN3aXBlci5sb29wZWRTbGlkZXMpIGFwcGVuZFNsaWRlcy5wdXNoKGVsKTtcbiAgICBpZiAoaW5kZXggPCBzbGlkZXMubGVuZ3RoICYmIGluZGV4ID49IHNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzKSBwcmVwZW5kU2xpZGVzLnB1c2goZWwpO1xuICAgIHNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICB9KTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcHBlbmRTbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAkd3JhcHBlckVsLmFwcGVuZCgkKGFwcGVuZFNsaWRlc1tpXS5jbG9uZU5vZGUodHJ1ZSkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSk7XG4gIH1cbiAgZm9yIChsZXQgaSA9IHByZXBlbmRTbGlkZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAkd3JhcHBlckVsLnByZXBlbmQoJChwcmVwZW5kU2xpZGVzW2ldLmNsb25lTm9kZSh0cnVlKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsb29wRml4ICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcywgYWN0aXZlSW5kZXgsIHNsaWRlcywgbG9vcGVkU2xpZGVzLCBhbGxvd1NsaWRlUHJldiwgYWxsb3dTbGlkZU5leHQsIHNuYXBHcmlkLCBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IG5ld0luZGV4O1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuXG4gIGNvbnN0IHNuYXBUcmFuc2xhdGUgPSAtc25hcEdyaWRbYWN0aXZlSW5kZXhdO1xuICBjb25zdCBkaWZmID0gc25hcFRyYW5zbGF0ZSAtIHN3aXBlci5nZXRUcmFuc2xhdGUoKTtcblxuXG4gIC8vIEZpeCBGb3IgTmVnYXRpdmUgT3ZlcnNsaWRpbmdcbiAgaWYgKGFjdGl2ZUluZGV4IDwgbG9vcGVkU2xpZGVzKSB7XG4gICAgbmV3SW5kZXggPSAoc2xpZGVzLmxlbmd0aCAtIChsb29wZWRTbGlkZXMgKiAzKSkgKyBhY3RpdmVJbmRleDtcbiAgICBuZXdJbmRleCArPSBsb29wZWRTbGlkZXM7XG4gICAgY29uc3Qgc2xpZGVDaGFuZ2VkID0gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICBpZiAoc2xpZGVDaGFuZ2VkICYmIGRpZmYgIT09IDApIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoKHJ0bCA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSkgLSBkaWZmKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgYWN0aXZlSW5kZXggPj0gbG9vcGVkU2xpZGVzICogMikgfHwgKGFjdGl2ZUluZGV4ID49IHNsaWRlcy5sZW5ndGggLSBsb29wZWRTbGlkZXMpKSB7XG4gICAgLy8gRml4IEZvciBQb3NpdGl2ZSBPdmVyc2xpZGluZ1xuICAgIG5ld0luZGV4ID0gLXNsaWRlcy5sZW5ndGggKyBhY3RpdmVJbmRleCArIGxvb3BlZFNsaWRlcztcbiAgICBuZXdJbmRleCArPSBsb29wZWRTbGlkZXM7XG4gICAgY29uc3Qgc2xpZGVDaGFuZ2VkID0gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICBpZiAoc2xpZGVDaGFuZ2VkICYmIGRpZmYgIT09IDApIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoKHJ0bCA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSkgLSBkaWZmKTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xufVxuXG5mdW5jdGlvbiBsb29wRGVzdHJveSAoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgJHdyYXBwZXJFbCwgcGFyYW1zLCBzbGlkZXMgfSA9IHN3aXBlcjtcbiAgJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9LC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUJsYW5rQ2xhc3N9YCkucmVtb3ZlKCk7XG4gIHNsaWRlcy5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xufVxuXG52YXIgbG9vcCA9IHtcbiAgbG9vcENyZWF0ZSxcbiAgbG9vcEZpeCxcbiAgbG9vcERlc3Ryb3ksXG59O1xuXG5mdW5jdGlvbiBzZXRHcmFiQ3Vyc29yIChtb3ZpbmcpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKFN1cHBvcnQudG91Y2ggfHwgIXN3aXBlci5wYXJhbXMuc2ltdWxhdGVUb3VjaCB8fCAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCkpIHJldHVybjtcbiAgY29uc3QgZWwgPSBzd2lwZXIuZWw7XG4gIGVsLnN0eWxlLmN1cnNvciA9ICdtb3ZlJztcbiAgZWwuc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJy13ZWJraXQtZ3JhYmJpbmcnIDogJy13ZWJraXQtZ3JhYic7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICctbW96LWdyYWJiaW4nIDogJy1tb3otZ3JhYic7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICdncmFiYmluZycgOiAnZ3JhYic7XG59XG5cbmZ1bmN0aW9uIHVuc2V0R3JhYkN1cnNvciAoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChTdXBwb3J0LnRvdWNoIHx8IChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkKSkgcmV0dXJuO1xuICBzd2lwZXIuZWwuc3R5bGUuY3Vyc29yID0gJyc7XG59XG5cbnZhciBncmFiQ3Vyc29yID0ge1xuICBzZXRHcmFiQ3Vyc29yLFxuICB1bnNldEdyYWJDdXJzb3IsXG59O1xuXG5mdW5jdGlvbiBhcHBlbmRTbGlkZSAoc2xpZGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgJHdyYXBwZXJFbCwgcGFyYW1zIH0gPSBzd2lwZXI7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICB9XG4gIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNsaWRlc1tpXSkgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzW2ldKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzKTtcbiAgfVxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG4gIGlmICghKHBhcmFtcy5vYnNlcnZlciAmJiBTdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVwZW5kU2xpZGUgKHNsaWRlcykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7IHBhcmFtcywgJHdyYXBwZXJFbCwgYWN0aXZlSW5kZXggfSA9IHN3aXBlcjtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgfVxuICBsZXQgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIDE7XG4gIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNsaWRlc1tpXSkgJHdyYXBwZXJFbC5wcmVwZW5kKHNsaWRlc1tpXSk7XG4gICAgfVxuICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyBzbGlkZXMubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgICR3cmFwcGVyRWwucHJlcGVuZChzbGlkZXMpO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cbiAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIFN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGFkZFNsaWRlIChpbmRleCwgc2xpZGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgJHdyYXBwZXJFbCwgcGFyYW1zLCBhY3RpdmVJbmRleCB9ID0gc3dpcGVyO1xuICBsZXQgYWN0aXZlSW5kZXhCdWZmZXIgPSBhY3RpdmVJbmRleDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgYWN0aXZlSW5kZXhCdWZmZXIgLT0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICBzd2lwZXIuc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YCk7XG4gIH1cbiAgY29uc3QgYmFzZUxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICBpZiAoaW5kZXggPD0gMCkge1xuICAgIHN3aXBlci5wcmVwZW5kU2xpZGUoc2xpZGVzKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGluZGV4ID49IGJhc2VMZW5ndGgpIHtcbiAgICBzd2lwZXIuYXBwZW5kU2xpZGUoc2xpZGVzKTtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXIgPiBpbmRleCA/IGFjdGl2ZUluZGV4QnVmZmVyICsgMSA6IGFjdGl2ZUluZGV4QnVmZmVyO1xuXG4gIGNvbnN0IHNsaWRlc0J1ZmZlciA9IFtdO1xuICBmb3IgKGxldCBpID0gYmFzZUxlbmd0aCAtIDE7IGkgPj0gaW5kZXg7IGkgLT0gMSkge1xuICAgIGNvbnN0IGN1cnJlbnRTbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgY3VycmVudFNsaWRlLnJlbW92ZSgpO1xuICAgIHNsaWRlc0J1ZmZlci51bnNoaWZ0KGN1cnJlbnRTbGlkZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzbGlkZXNbaV0pICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc1tpXSk7XG4gICAgfVxuICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXIgPiBpbmRleCA/IGFjdGl2ZUluZGV4QnVmZmVyICsgc2xpZGVzLmxlbmd0aCA6IGFjdGl2ZUluZGV4QnVmZmVyO1xuICB9IGVsc2Uge1xuICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlcyk7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0J1ZmZlci5sZW5ndGg7IGkgKz0gMSkge1xuICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc0J1ZmZlcltpXSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG4gIGlmICghKHBhcmFtcy5vYnNlcnZlciAmJiBTdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVNsaWRlIChzbGlkZXNJbmRleGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgcGFyYW1zLCAkd3JhcHBlckVsLCBhY3RpdmVJbmRleCB9ID0gc3dpcGVyO1xuXG4gIGxldCBhY3RpdmVJbmRleEJ1ZmZlciA9IGFjdGl2ZUluZGV4O1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBhY3RpdmVJbmRleEJ1ZmZlciAtPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIHN3aXBlci5zbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKTtcbiAgfVxuICBsZXQgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgbGV0IGluZGV4VG9SZW1vdmU7XG5cbiAgaWYgKHR5cGVvZiBzbGlkZXNJbmRleGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXNJbmRleGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNJbmRleGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpbmRleFRvUmVtb3ZlID0gc2xpZGVzSW5kZXhlc1tpXTtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdKSBzd2lwZXIuc2xpZGVzLmVxKGluZGV4VG9SZW1vdmUpLnJlbW92ZSgpO1xuICAgICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgbmV3QWN0aXZlSW5kZXggLT0gMTtcbiAgICB9XG4gICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gIH0gZWxzZSB7XG4gICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXM7XG4gICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHN3aXBlci5zbGlkZXMuZXEoaW5kZXhUb1JlbW92ZSkucmVtb3ZlKCk7XG4gICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgbmV3QWN0aXZlSW5kZXggLT0gMTtcbiAgICBuZXdBY3RpdmVJbmRleCA9IE1hdGgubWF4KG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgU3VwcG9ydC5vYnNlcnZlcikpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXggKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVBbGxTbGlkZXMgKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gIGNvbnN0IHNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICB9XG4gIHN3aXBlci5yZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKTtcbn1cblxudmFyIG1hbmlwdWxhdGlvbiA9IHtcbiAgYXBwZW5kU2xpZGUsXG4gIHByZXBlbmRTbGlkZSxcbiAgYWRkU2xpZGUsXG4gIHJlbW92ZVNsaWRlLFxuICByZW1vdmVBbGxTbGlkZXMsXG59O1xuXG5jb25zdCBEZXZpY2UgPSAoZnVuY3Rpb24gRGV2aWNlKCkge1xuICBjb25zdCB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGNvbnN0IGRldmljZSA9IHtcbiAgICBpb3M6IGZhbHNlLFxuICAgIGFuZHJvaWQ6IGZhbHNlLFxuICAgIGFuZHJvaWRDaHJvbWU6IGZhbHNlLFxuICAgIGRlc2t0b3A6IGZhbHNlLFxuICAgIHdpbmRvd3M6IGZhbHNlLFxuICAgIGlwaG9uZTogZmFsc2UsXG4gICAgaXBvZDogZmFsc2UsXG4gICAgaXBhZDogZmFsc2UsXG4gICAgY29yZG92YTogd2luZG93LmNvcmRvdmEgfHwgd2luZG93LnBob25lZ2FwLFxuICAgIHBob25lZ2FwOiB3aW5kb3cuY29yZG92YSB8fCB3aW5kb3cucGhvbmVnYXAsXG4gIH07XG5cbiAgY29uc3Qgd2luZG93cyA9IHVhLm1hdGNoKC8oV2luZG93cyBQaG9uZSk7P1tcXHNcXC9dKyhbXFxkLl0rKT8vKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBjb25zdCBhbmRyb2lkID0gdWEubWF0Y2goLyhBbmRyb2lkKTs/W1xcc1xcL10rKFtcXGQuXSspPy8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGNvbnN0IGlwYWQgPSB1YS5tYXRjaCgvKGlQYWQpLipPU1xccyhbXFxkX10rKS8pO1xuICBjb25zdCBpcG9kID0gdWEubWF0Y2goLyhpUG9kKSguKk9TXFxzKFtcXGRfXSspKT8vKTtcbiAgY29uc3QgaXBob25lID0gIWlwYWQgJiYgdWEubWF0Y2goLyhpUGhvbmVcXHNPU3xpT1MpXFxzKFtcXGRfXSspLyk7XG5cblxuICAvLyBXaW5kb3dzXG4gIGlmICh3aW5kb3dzKSB7XG4gICAgZGV2aWNlLm9zID0gJ3dpbmRvd3MnO1xuICAgIGRldmljZS5vc1ZlcnNpb24gPSB3aW5kb3dzWzJdO1xuICAgIGRldmljZS53aW5kb3dzID0gdHJ1ZTtcbiAgfVxuICAvLyBBbmRyb2lkXG4gIGlmIChhbmRyb2lkICYmICF3aW5kb3dzKSB7XG4gICAgZGV2aWNlLm9zID0gJ2FuZHJvaWQnO1xuICAgIGRldmljZS5vc1ZlcnNpb24gPSBhbmRyb2lkWzJdO1xuICAgIGRldmljZS5hbmRyb2lkID0gdHJ1ZTtcbiAgICBkZXZpY2UuYW5kcm9pZENocm9tZSA9IHVhLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignY2hyb21lJykgPj0gMDtcbiAgfVxuICBpZiAoaXBhZCB8fCBpcGhvbmUgfHwgaXBvZCkge1xuICAgIGRldmljZS5vcyA9ICdpb3MnO1xuICAgIGRldmljZS5pb3MgPSB0cnVlO1xuICB9XG4gIC8vIGlPU1xuICBpZiAoaXBob25lICYmICFpcG9kKSB7XG4gICAgZGV2aWNlLm9zVmVyc2lvbiA9IGlwaG9uZVsyXS5yZXBsYWNlKC9fL2csICcuJyk7XG4gICAgZGV2aWNlLmlwaG9uZSA9IHRydWU7XG4gIH1cbiAgaWYgKGlwYWQpIHtcbiAgICBkZXZpY2Uub3NWZXJzaW9uID0gaXBhZFsyXS5yZXBsYWNlKC9fL2csICcuJyk7XG4gICAgZGV2aWNlLmlwYWQgPSB0cnVlO1xuICB9XG4gIGlmIChpcG9kKSB7XG4gICAgZGV2aWNlLm9zVmVyc2lvbiA9IGlwb2RbM10gPyBpcG9kWzNdLnJlcGxhY2UoL18vZywgJy4nKSA6IG51bGw7XG4gICAgZGV2aWNlLmlwaG9uZSA9IHRydWU7XG4gIH1cbiAgLy8gaU9TIDgrIGNoYW5nZWQgVUFcbiAgaWYgKGRldmljZS5pb3MgJiYgZGV2aWNlLm9zVmVyc2lvbiAmJiB1YS5pbmRleE9mKCdWZXJzaW9uLycpID49IDApIHtcbiAgICBpZiAoZGV2aWNlLm9zVmVyc2lvbi5zcGxpdCgnLicpWzBdID09PSAnMTAnKSB7XG4gICAgICBkZXZpY2Uub3NWZXJzaW9uID0gdWEudG9Mb3dlckNhc2UoKS5zcGxpdCgndmVyc2lvbi8nKVsxXS5zcGxpdCgnICcpWzBdO1xuICAgIH1cbiAgfVxuXG4gIC8vIERlc2t0b3BcbiAgZGV2aWNlLmRlc2t0b3AgPSAhKGRldmljZS5vcyB8fCBkZXZpY2UuYW5kcm9pZCB8fCBkZXZpY2Uud2ViVmlldyk7XG5cbiAgLy8gV2Vidmlld1xuICBkZXZpY2Uud2ViVmlldyA9IChpcGhvbmUgfHwgaXBhZCB8fCBpcG9kKSAmJiB1YS5tYXRjaCgvLipBcHBsZVdlYktpdCg/IS4qU2FmYXJpKS9pKTtcblxuICAvLyBNaW5pbWFsIFVJXG4gIGlmIChkZXZpY2Uub3MgJiYgZGV2aWNlLm9zID09PSAnaW9zJykge1xuICAgIGNvbnN0IG9zVmVyc2lvbkFyciA9IGRldmljZS5vc1ZlcnNpb24uc3BsaXQoJy4nKTtcbiAgICBjb25zdCBtZXRhVmlld3BvcnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJ2aWV3cG9ydFwiXScpO1xuICAgIGRldmljZS5taW5pbWFsVWkgPSAhZGV2aWNlLndlYlZpZXdcbiAgICAgICYmIChpcG9kIHx8IGlwaG9uZSlcbiAgICAgICYmIChvc1ZlcnNpb25BcnJbMF0gKiAxID09PSA3ID8gb3NWZXJzaW9uQXJyWzFdICogMSA+PSAxIDogb3NWZXJzaW9uQXJyWzBdICogMSA+IDcpXG4gICAgICAmJiBtZXRhVmlld3BvcnQgJiYgbWV0YVZpZXdwb3J0LmdldEF0dHJpYnV0ZSgnY29udGVudCcpLmluZGV4T2YoJ21pbmltYWwtdWknKSA+PSAwO1xuICB9XG5cbiAgLy8gUGl4ZWwgUmF0aW9cbiAgZGV2aWNlLnBpeGVsUmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuXG4gIC8vIEV4cG9ydCBvYmplY3RcbiAgcmV0dXJuIGRldmljZTtcbn0oKSk7XG5cbmZ1bmN0aW9uIG9uVG91Y2hTdGFydCAoZXZlbnQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGNvbnN0IHsgcGFyYW1zLCB0b3VjaGVzIH0gPSBzd2lwZXI7XG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgZGF0YS5pc1RvdWNoRXZlbnQgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JztcbiAgaWYgKCFkYXRhLmlzVG91Y2hFdmVudCAmJiAnd2hpY2gnIGluIGUgJiYgZS53aGljaCA9PT0gMykgcmV0dXJuO1xuICBpZiAoIWRhdGEuaXNUb3VjaEV2ZW50ICYmICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gPiAwKSByZXR1cm47XG4gIGlmIChkYXRhLmlzVG91Y2hlZCAmJiBkYXRhLmlzTW92ZWQpIHJldHVybjtcbiAgaWYgKHBhcmFtcy5ub1N3aXBpbmcgJiYgJChlLnRhcmdldCkuY2xvc2VzdChwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgPyBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgOiBgLiR7cGFyYW1zLm5vU3dpcGluZ0NsYXNzfWApWzBdKSB7XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLnN3aXBlSGFuZGxlcikge1xuICAgIGlmICghJChlKS5jbG9zZXN0KHBhcmFtcy5zd2lwZUhhbmRsZXIpWzBdKSByZXR1cm47XG4gIH1cblxuICB0b3VjaGVzLmN1cnJlbnRYID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICBjb25zdCBzdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICBjb25zdCBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuXG4gIC8vIERvIE5PVCBzdGFydCBpZiBpT1MgZWRnZSBzd2lwZSBpcyBkZXRlY3RlZC4gT3RoZXJ3aXNlIGlPUyBhcHAgKFVJV2ViVmlldykgY2Fubm90IHN3aXBlLXRvLWdvLWJhY2sgYW55bW9yZVxuXG4gIGNvbnN0IGVkZ2VTd2lwZURldGVjdGlvbiA9IHBhcmFtcy5lZGdlU3dpcGVEZXRlY3Rpb24gfHwgcGFyYW1zLmlPU0VkZ2VTd2lwZURldGVjdGlvbjtcbiAgY29uc3QgZWRnZVN3aXBlVGhyZXNob2xkID0gcGFyYW1zLmVkZ2VTd2lwZVRocmVzaG9sZCB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlVGhyZXNob2xkO1xuICBpZiAoXG4gICAgZWRnZVN3aXBlRGV0ZWN0aW9uXG4gICAgJiYgKChzdGFydFggPD0gZWRnZVN3aXBlVGhyZXNob2xkKVxuICAgIHx8IChzdGFydFggPj0gd2luZG93LnNjcmVlbi53aWR0aCAtIGVkZ2VTd2lwZVRocmVzaG9sZCkpXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIFV0aWxzLmV4dGVuZChkYXRhLCB7XG4gICAgaXNUb3VjaGVkOiB0cnVlLFxuICAgIGlzTW92ZWQ6IGZhbHNlLFxuICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHRydWUsXG4gICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkLFxuICB9KTtcblxuICB0b3VjaGVzLnN0YXJ0WCA9IHN0YXJ0WDtcbiAgdG91Y2hlcy5zdGFydFkgPSBzdGFydFk7XG4gIGRhdGEudG91Y2hTdGFydFRpbWUgPSBVdGlscy5ub3coKTtcbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSB1bmRlZmluZWQ7XG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSBmYWxzZTtcbiAgaWYgKGUudHlwZSAhPT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgbGV0IHByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICBpZiAoJChlLnRhcmdldCkuaXMoZGF0YS5mb3JtRWxlbWVudHMpKSBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuICAgIGlmIChcbiAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICAgICYmICQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuaXMoZGF0YS5mb3JtRWxlbWVudHMpXG4gICAgICAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlLnRhcmdldFxuICAgICkge1xuICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2hvdWxkUHJldmVudERlZmF1bHQgPSBwcmV2ZW50RGVmYXVsdCAmJiBzd2lwZXIuYWxsb3dUb3VjaE1vdmUgJiYgcGFyYW1zLnRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDtcbiAgICBpZiAocGFyYW1zLnRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IHx8IHNob3VsZFByZXZlbnREZWZhdWx0KSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG4gIHN3aXBlci5lbWl0KCd0b3VjaFN0YXJ0JywgZSk7XG59XG5cbmZ1bmN0aW9uIG9uVG91Y2hNb3ZlIChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgY29uc3QgeyBwYXJhbXMsIHRvdWNoZXMsIHJ0bFRyYW5zbGF0ZTogcnRsIH0gPSBzd2lwZXI7XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5zdGFydE1vdmluZyAmJiBkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChkYXRhLmlzVG91Y2hFdmVudCAmJiBlLnR5cGUgPT09ICdtb3VzZW1vdmUnKSByZXR1cm47XG4gIGNvbnN0IHBhZ2VYID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gIGNvbnN0IHBhZ2VZID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gIGlmIChlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyKSB7XG4gICAgdG91Y2hlcy5zdGFydFggPSBwYWdlWDtcbiAgICB0b3VjaGVzLnN0YXJ0WSA9IHBhZ2VZO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXN3aXBlci5hbGxvd1RvdWNoTW92ZSkge1xuICAgIC8vIGlzTW92ZWQgPSB0cnVlO1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgaWYgKGRhdGEuaXNUb3VjaGVkKSB7XG4gICAgICBVdGlscy5leHRlbmQodG91Y2hlcywge1xuICAgICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgICBzdGFydFk6IHBhZ2VZLFxuICAgICAgICBjdXJyZW50WDogcGFnZVgsXG4gICAgICAgIGN1cnJlbnRZOiBwYWdlWSxcbiAgICAgIH0pO1xuICAgICAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IFV0aWxzLm5vdygpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzICYmICFwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICAvLyBWZXJ0aWNhbFxuICAgICAgaWYgKFxuICAgICAgICAocGFnZVkgPCB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSlcbiAgICAgICAgfHwgKHBhZ2VZID4gdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpXG4gICAgICApIHtcbiAgICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgKHBhZ2VYIDwgdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpXG4gICAgICB8fCAocGFnZVggPiB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSlcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgJChlLnRhcmdldCkuaXMoZGF0YS5mb3JtRWxlbWVudHMpKSB7XG4gICAgICBkYXRhLmlzTW92ZWQgPSB0cnVlO1xuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmUnLCBlKTtcbiAgfVxuICBpZiAoZS50YXJnZXRUb3VjaGVzICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSByZXR1cm47XG5cbiAgdG91Y2hlcy5jdXJyZW50WCA9IHBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gcGFnZVk7XG5cbiAgY29uc3QgZGlmZlggPSB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFg7XG4gIGNvbnN0IGRpZmZZID0gdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICBpZiAoc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQgJiYgTWF0aC5zcXJ0KChkaWZmWCAqKiAyKSArIChkaWZmWSAqKiAyKSkgPCBzd2lwZXIucGFyYW1zLnRocmVzaG9sZCkgcmV0dXJuO1xuXG4gIGlmICh0eXBlb2YgZGF0YS5pc1Njcm9sbGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsZXQgdG91Y2hBbmdsZTtcbiAgICBpZiAoKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRZID09PSB0b3VjaGVzLnN0YXJ0WSkgfHwgKHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgdG91Y2hlcy5jdXJyZW50WCA9PT0gdG91Y2hlcy5zdGFydFgpKSB7XG4gICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgaWYgKChkaWZmWCAqIGRpZmZYKSArIChkaWZmWSAqIGRpZmZZKSA+PSAyNSkge1xuICAgICAgICB0b3VjaEFuZ2xlID0gKE1hdGguYXRhbjIoTWF0aC5hYnMoZGlmZlkpLCBNYXRoLmFicyhkaWZmWCkpICogMTgwKSAvIE1hdGguUEk7XG4gICAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGUgOiAoOTAgLSB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpO1xuICB9XG4gIGlmICh0eXBlb2YgZGF0YS5zdGFydE1vdmluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodG91Y2hlcy5jdXJyZW50WCAhPT0gdG91Y2hlcy5zdGFydFggfHwgdG91Y2hlcy5jdXJyZW50WSAhPT0gdG91Y2hlcy5zdGFydFkpIHtcbiAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghZGF0YS5zdGFydE1vdmluZykge1xuICAgIHJldHVybjtcbiAgfVxuICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIGlmIChwYXJhbXMudG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uICYmICFwYXJhbXMubmVzdGVkKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIGlmICghZGF0YS5pc01vdmVkKSB7XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgIH1cbiAgICBkYXRhLnN0YXJ0VHJhbnNsYXRlID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpO1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC50cmlnZ2VyKCd3ZWJraXRUcmFuc2l0aW9uRW5kIHRyYW5zaXRpb25lbmQnKTtcbiAgICB9XG4gICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7XG4gICAgLy8gR3JhYiBDdXJzb3JcbiAgICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlckZpcnN0TW92ZScsIGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzbGlkZXJNb3ZlJywgZSk7XG4gIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG5cbiAgbGV0IGRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBkaWZmWCA6IGRpZmZZO1xuICB0b3VjaGVzLmRpZmYgPSBkaWZmO1xuXG4gIGRpZmYgKj0gcGFyYW1zLnRvdWNoUmF0aW87XG4gIGlmIChydGwpIGRpZmYgPSAtZGlmZjtcblxuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSBkaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGlmZiArIGRhdGEuc3RhcnRUcmFuc2xhdGU7XG5cbiAgbGV0IGRpc2FibGVQYXJlbnRTd2lwZXIgPSB0cnVlO1xuICBsZXQgcmVzaXN0YW5jZVJhdGlvID0gcGFyYW1zLnJlc2lzdGFuY2VSYXRpbztcbiAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgcmVzaXN0YW5jZVJhdGlvID0gMDtcbiAgfVxuICBpZiAoKGRpZmYgPiAwICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSAoc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gMSkgKyAoKC1zd2lwZXIubWluVHJhbnNsYXRlKCkgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlICsgZGlmZikgKiogcmVzaXN0YW5jZVJhdGlvKTtcbiAgfSBlbHNlIGlmIChkaWZmIDwgMCAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpICsgMSkgLSAoKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIGRhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW8pO1xuICB9XG5cbiAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIpIHtcbiAgICBlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cblxuXG4gIC8vIFRocmVzaG9sZFxuICBpZiAocGFyYW1zLnRocmVzaG9sZCA+IDApIHtcbiAgICBpZiAoTWF0aC5hYnMoZGlmZikgPiBwYXJhbXMudGhyZXNob2xkIHx8IGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICBpZiAoIWRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICAgIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlID0gdHJ1ZTtcbiAgICAgICAgdG91Y2hlcy5zdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WSA9IHRvdWNoZXMuY3VycmVudFk7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICAgIHRvdWNoZXMuZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WCA6IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmICghcGFyYW1zLmZvbGxvd0ZpbmdlcikgcmV0dXJuO1xuXG4gIC8vIFVwZGF0ZSBhY3RpdmUgaW5kZXggaW4gZnJlZSBtb2RlXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgfHwgcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSkge1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIH1cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgIC8vIFZlbG9jaXR5XG4gICAgaWYgKGRhdGEudmVsb2NpdGllcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGRhdGEudmVsb2NpdGllcy5wdXNoKHtcbiAgICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3N0YXJ0WCcgOiAnc3RhcnRZJ10sXG4gICAgICAgIHRpbWU6IGRhdGEudG91Y2hTdGFydFRpbWUsXG4gICAgICB9KTtcbiAgICB9XG4gICAgZGF0YS52ZWxvY2l0aWVzLnB1c2goe1xuICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2N1cnJlbnRYJyA6ICdjdXJyZW50WSddLFxuICAgICAgdGltZTogVXRpbHMubm93KCksXG4gICAgfSk7XG4gIH1cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyhkYXRhLmN1cnJlbnRUcmFuc2xhdGUpO1xuICAvLyBVcGRhdGUgdHJhbnNsYXRlXG4gIHN3aXBlci5zZXRUcmFuc2xhdGUoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbn1cblxuZnVuY3Rpb24gb25Ub3VjaEVuZCAoZXZlbnQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG5cbiAgY29uc3Qge1xuICAgIHBhcmFtcywgdG91Y2hlcywgcnRsVHJhbnNsYXRlOiBydGwsICR3cmFwcGVyRWwsIHNsaWRlc0dyaWQsIHNuYXBHcmlkLFxuICB9ID0gc3dpcGVyO1xuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoRW5kJywgZSk7XG4gIH1cbiAgZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzID0gZmFsc2U7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5pc01vdmVkICYmIHBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gICAgfVxuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gUmV0dXJuIEdyYWIgQ3Vyc29yXG4gIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiBkYXRhLmlzTW92ZWQgJiYgZGF0YS5pc1RvdWNoZWQgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICB9XG5cbiAgLy8gVGltZSBkaWZmXG4gIGNvbnN0IHRvdWNoRW5kVGltZSA9IFV0aWxzLm5vdygpO1xuICBjb25zdCB0aW1lRGlmZiA9IHRvdWNoRW5kVGltZSAtIGRhdGEudG91Y2hTdGFydFRpbWU7XG5cbiAgLy8gVGFwLCBkb3VibGVUYXAsIENsaWNrXG4gIGlmIChzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIHN3aXBlci51cGRhdGVDbGlja2VkU2xpZGUoZSk7XG4gICAgc3dpcGVyLmVtaXQoJ3RhcCcsIGUpO1xuICAgIGlmICh0aW1lRGlmZiA8IDMwMCAmJiAodG91Y2hFbmRUaW1lIC0gZGF0YS5sYXN0Q2xpY2tUaW1lKSA+IDMwMCkge1xuICAgICAgaWYgKGRhdGEuY2xpY2tUaW1lb3V0KSBjbGVhclRpbWVvdXQoZGF0YS5jbGlja1RpbWVvdXQpO1xuICAgICAgZGF0YS5jbGlja1RpbWVvdXQgPSBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ2NsaWNrJywgZSk7XG4gICAgICB9LCAzMDApO1xuICAgIH1cbiAgICBpZiAodGltZURpZmYgPCAzMDAgJiYgKHRvdWNoRW5kVGltZSAtIGRhdGEubGFzdENsaWNrVGltZSkgPCAzMDApIHtcbiAgICAgIGlmIChkYXRhLmNsaWNrVGltZW91dCkgY2xlYXJUaW1lb3V0KGRhdGEuY2xpY2tUaW1lb3V0KTtcbiAgICAgIHN3aXBlci5lbWl0KCdkb3VibGVUYXAnLCBlKTtcbiAgICB9XG4gIH1cblxuICBkYXRhLmxhc3RDbGlja1RpbWUgPSBVdGlscy5ub3coKTtcbiAgVXRpbHMubmV4dFRpY2soKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLmRlc3Ryb3llZCkgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICB9KTtcblxuICBpZiAoIWRhdGEuaXNUb3VjaGVkIHx8ICFkYXRhLmlzTW92ZWQgfHwgIXN3aXBlci5zd2lwZURpcmVjdGlvbiB8fCB0b3VjaGVzLmRpZmYgPT09IDAgfHwgZGF0YS5jdXJyZW50VHJhbnNsYXRlID09PSBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG5cbiAgbGV0IGN1cnJlbnRQb3M7XG4gIGlmIChwYXJhbXMuZm9sbG93RmluZ2VyKSB7XG4gICAgY3VycmVudFBvcyA9IHJ0bCA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50UG9zID0gLWRhdGEuY3VycmVudFRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUpIHtcbiAgICBpZiAoY3VycmVudFBvcyA8IC1zd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjdXJyZW50UG9zID4gLXN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXMubGVuZ3RoIDwgc25hcEdyaWQubGVuZ3RoKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNuYXBHcmlkLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW0pIHtcbiAgICAgIGlmIChkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID4gMSkge1xuICAgICAgICBjb25zdCBsYXN0TW92ZUV2ZW50ID0gZGF0YS52ZWxvY2l0aWVzLnBvcCgpO1xuICAgICAgICBjb25zdCB2ZWxvY2l0eUV2ZW50ID0gZGF0YS52ZWxvY2l0aWVzLnBvcCgpO1xuXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gbGFzdE1vdmVFdmVudC5wb3NpdGlvbiAtIHZlbG9jaXR5RXZlbnQucG9zaXRpb247XG4gICAgICAgIGNvbnN0IHRpbWUgPSBsYXN0TW92ZUV2ZW50LnRpbWUgLSB2ZWxvY2l0eUV2ZW50LnRpbWU7XG4gICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IGRpc3RhbmNlIC8gdGltZTtcbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5IC89IDI7XG4gICAgICAgIGlmIChNYXRoLmFicyhzd2lwZXIudmVsb2NpdHkpIDwgcGFyYW1zLmZyZWVNb2RlTWluaW11bVZlbG9jaXR5KSB7XG4gICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzIGltcGxpZXMgdGhhdCB0aGUgdXNlciBzdG9wcGVkIG1vdmluZyBhIGZpbmdlciB0aGVuIHJlbGVhc2VkLlxuICAgICAgICAvLyBUaGVyZSB3b3VsZCBiZSBubyBldmVudHMgd2l0aCBkaXN0YW5jZSB6ZXJvLCBzbyB0aGUgbGFzdCBldmVudCBpcyBzdGFsZS5cbiAgICAgICAgaWYgKHRpbWUgPiAxNTAgfHwgKFV0aWxzLm5vdygpIC0gbGFzdE1vdmVFdmVudC50aW1lKSA+IDMwMCkge1xuICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICB9XG4gICAgICBzd2lwZXIudmVsb2NpdHkgKj0gcGFyYW1zLmZyZWVNb2RlTW9tZW50dW1WZWxvY2l0eVJhdGlvO1xuXG4gICAgICBkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID0gMDtcbiAgICAgIGxldCBtb21lbnR1bUR1cmF0aW9uID0gMTAwMCAqIHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtUmF0aW87XG4gICAgICBjb25zdCBtb21lbnR1bURpc3RhbmNlID0gc3dpcGVyLnZlbG9jaXR5ICogbW9tZW50dW1EdXJhdGlvbjtcblxuICAgICAgbGV0IG5ld1Bvc2l0aW9uID0gc3dpcGVyLnRyYW5zbGF0ZSArIG1vbWVudHVtRGlzdGFuY2U7XG4gICAgICBpZiAocnRsKSBuZXdQb3NpdGlvbiA9IC1uZXdQb3NpdGlvbjtcblxuICAgICAgbGV0IGRvQm91bmNlID0gZmFsc2U7XG4gICAgICBsZXQgYWZ0ZXJCb3VuY2VQb3NpdGlvbjtcbiAgICAgIGNvbnN0IGJvdW5jZUFtb3VudCA9IE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgKiAyMCAqIHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW87XG4gICAgICBsZXQgbmVlZHNMb29wRml4O1xuICAgICAgaWYgKG5ld1Bvc2l0aW9uIDwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgIGlmIChuZXdQb3NpdGlvbiArIHN3aXBlci5tYXhUcmFuc2xhdGUoKSA8IC1ib3VuY2VBbW91bnQpIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gYm91bmNlQW1vdW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZnRlckJvdW5jZVBvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICAgIGRvQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMubG9vcCAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXMpIG5lZWRzTG9vcEZpeCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKG5ld1Bvc2l0aW9uID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgIGlmIChuZXdQb3NpdGlvbiAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSA+IGJvdW5jZUFtb3VudCkge1xuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgKyBib3VuY2VBbW91bnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFmdGVyQm91bmNlUG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5sb29wICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykgbmVlZHNMb29wRml4ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgIGxldCBuZXh0U2xpZGU7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc25hcEdyaWQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICBpZiAoc25hcEdyaWRbal0gPiAtbmV3UG9zaXRpb24pIHtcbiAgICAgICAgICAgIG5leHRTbGlkZSA9IGo7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoTWF0aC5hYnMoc25hcEdyaWRbbmV4dFNsaWRlXSAtIG5ld1Bvc2l0aW9uKSA8IE1hdGguYWJzKHNuYXBHcmlkW25leHRTbGlkZSAtIDFdIC0gbmV3UG9zaXRpb24pIHx8IHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzbmFwR3JpZFtuZXh0U2xpZGVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc25hcEdyaWRbbmV4dFNsaWRlIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgbmV3UG9zaXRpb24gPSAtbmV3UG9zaXRpb247XG4gICAgICB9XG4gICAgICBpZiAobmVlZHNMb29wRml4KSB7XG4gICAgICAgIHN3aXBlci5vbmNlKCd0cmFuc2l0aW9uRW5kJywgKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gRml4IGR1cmF0aW9uXG4gICAgICBpZiAoc3dpcGVyLnZlbG9jaXR5ICE9PSAwKSB7XG4gICAgICAgIGlmIChydGwpIHtcbiAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKC1uZXdQb3NpdGlvbiAtIHN3aXBlci50cmFuc2xhdGUpIC8gc3dpcGVyLnZlbG9jaXR5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLnRyYW5zbGF0ZSkgLyBzd2lwZXIudmVsb2NpdHkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UgJiYgZG9Cb3VuY2UpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGFmdGVyQm91bmNlUG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhZGF0YS5hbGxvd01vbWVudHVtQm91bmNlKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ21vbWVudHVtQm91bmNlJyk7XG5cbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihwYXJhbXMuc3BlZWQpO1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoYWZ0ZXJCb3VuY2VQb3NpdGlvbik7XG4gICAgICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChzd2lwZXIudmVsb2NpdHkpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24obW9tZW50dW1EdXJhdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3UG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHRydWUsIHN3aXBlci5zd2lwZURpcmVjdGlvbik7XG4gICAgICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3UG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghcGFyYW1zLmZyZWVNb2RlTW9tZW50dW0gfHwgdGltZURpZmYgPj0gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZpbmQgY3VycmVudCBzbGlkZVxuICBsZXQgc3RvcEluZGV4ID0gMDtcbiAgbGV0IGdyb3VwU2l6ZSA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbMF07XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gcGFyYW1zLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXBdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSAmJiBjdXJyZW50UG9zIDwgc2xpZGVzR3JpZFtpICsgcGFyYW1zLnNsaWRlc1Blckdyb3VwXSkge1xuICAgICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW2kgKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXBdIC0gc2xpZGVzR3JpZFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAxXSAtIHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAyXTtcbiAgICB9XG4gIH1cblxuICAvLyBGaW5kIGN1cnJlbnQgc2xpZGUgc2l6ZVxuICBjb25zdCByYXRpbyA9IChjdXJyZW50UG9zIC0gc2xpZGVzR3JpZFtzdG9wSW5kZXhdKSAvIGdyb3VwU2l6ZTtcblxuICBpZiAodGltZURpZmYgPiBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgLy8gTG9uZyB0b3VjaGVzXG4gICAgaWYgKCFwYXJhbXMubG9uZ1N3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICBpZiAocmF0aW8gPj0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgIGVsc2Ugc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICBpZiAocmF0aW8gPiAoMSAtIHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pKSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgZWxzZSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBTaG9ydCBzd2lwZXNcbiAgICBpZiAoIXBhcmFtcy5zaG9ydFN3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uUmVzaXplICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBjb25zdCB7IHBhcmFtcywgZWwgfSA9IHN3aXBlcjtcblxuICBpZiAoZWwgJiYgZWwub2Zmc2V0V2lkdGggPT09IDApIHJldHVybjtcblxuICAvLyBCcmVha3BvaW50c1xuICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgfVxuXG4gIC8vIFNhdmUgbG9ja3NcbiAgY29uc3QgeyBhbGxvd1NsaWRlTmV4dCwgYWxsb3dTbGlkZVByZXYsIHNuYXBHcmlkIH0gPSBzd2lwZXI7XG5cbiAgLy8gRGlzYWJsZSBsb2NrcyBvbiByZXNpemVcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcblxuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG5cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgIGNvbnN0IG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKE1hdGgubWF4KHN3aXBlci50cmFuc2xhdGUsIHN3aXBlci5tYXhUcmFuc2xhdGUoKSksIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG5cbiAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgaWYgKChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIC8vIFJldHVybiBsb2NrcyBhZnRlciByZXNpemVcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuXG4gIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25DbGljayAoZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJldmVudENsaWNrcykgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiAmJiBzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXR0YWNoRXZlbnRzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLCB0b3VjaEV2ZW50cywgZWwsIHdyYXBwZXJFbCxcbiAgfSA9IHN3aXBlcjtcblxuICB7XG4gICAgc3dpcGVyLm9uVG91Y2hTdGFydCA9IG9uVG91Y2hTdGFydC5iaW5kKHN3aXBlcik7XG4gICAgc3dpcGVyLm9uVG91Y2hNb3ZlID0gb25Ub3VjaE1vdmUuYmluZChzd2lwZXIpO1xuICAgIHN3aXBlci5vblRvdWNoRW5kID0gb25Ub3VjaEVuZC5iaW5kKHN3aXBlcik7XG4gIH1cblxuICBzd2lwZXIub25DbGljayA9IG9uQ2xpY2suYmluZChzd2lwZXIpO1xuXG4gIGNvbnN0IHRhcmdldCA9IHBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyBlbCA6IHdyYXBwZXJFbDtcbiAgY29uc3QgY2FwdHVyZSA9ICEhcGFyYW1zLm5lc3RlZDtcblxuICAvLyBUb3VjaCBFdmVudHNcbiAge1xuICAgIGlmICghU3VwcG9ydC50b3VjaCAmJiAoU3VwcG9ydC5wb2ludGVyRXZlbnRzIHx8IFN1cHBvcnQucHJlZml4ZWRQb2ludGVyRXZlbnRzKSkge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoU3VwcG9ydC50b3VjaCkge1xuICAgICAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPSB0b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIFN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIFN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyID8geyBwYXNzaXZlOiBmYWxzZSwgY2FwdHVyZSB9IDogY2FwdHVyZSk7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICBpZiAoKHBhcmFtcy5zaW11bGF0ZVRvdWNoICYmICFEZXZpY2UuaW9zICYmICFEZXZpY2UuYW5kcm9pZCkgfHwgKHBhcmFtcy5zaW11bGF0ZVRvdWNoICYmICFTdXBwb3J0LnRvdWNoICYmIERldmljZS5pb3MpKSB7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuICAgIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVzaXplIGhhbmRsZXJcbiAgc3dpcGVyLm9uKChEZXZpY2UuaW9zIHx8IERldmljZS5hbmRyb2lkID8gJ3Jlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZSBvYnNlcnZlclVwZGF0ZScgOiAncmVzaXplIG9ic2VydmVyVXBkYXRlJyksIG9uUmVzaXplLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gZGV0YWNoRXZlbnRzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsIHRvdWNoRXZlbnRzLCBlbCwgd3JhcHBlckVsLFxuICB9ID0gc3dpcGVyO1xuXG4gIGNvbnN0IHRhcmdldCA9IHBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyBlbCA6IHdyYXBwZXJFbDtcbiAgY29uc3QgY2FwdHVyZSA9ICEhcGFyYW1zLm5lc3RlZDtcblxuICAvLyBUb3VjaCBFdmVudHNcbiAge1xuICAgIGlmICghU3VwcG9ydC50b3VjaCAmJiAoU3VwcG9ydC5wb2ludGVyRXZlbnRzIHx8IFN1cHBvcnQucHJlZml4ZWRQb2ludGVyRXZlbnRzKSkge1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoU3VwcG9ydC50b3VjaCkge1xuICAgICAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPSB0b3VjaEV2ZW50cy5zdGFydCA9PT0gJ29uVG91Y2hTdGFydCcgJiYgU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICBpZiAoKHBhcmFtcy5zaW11bGF0ZVRvdWNoICYmICFEZXZpY2UuaW9zICYmICFEZXZpY2UuYW5kcm9pZCkgfHwgKHBhcmFtcy5zaW11bGF0ZVRvdWNoICYmICFTdXBwb3J0LnRvdWNoICYmIERldmljZS5pb3MpKSB7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuICAgIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVzaXplIGhhbmRsZXJcbiAgc3dpcGVyLm9mZigoRGV2aWNlLmlvcyB8fCBEZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScpLCBvblJlc2l6ZSk7XG59XG5cbnZhciBldmVudHMgPSB7XG4gIGF0dGFjaEV2ZW50cyxcbiAgZGV0YWNoRXZlbnRzLFxufTtcblxuZnVuY3Rpb24gc2V0QnJlYWtwb2ludCAoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBhY3RpdmVJbmRleCwgaW5pdGlhbGl6ZWQsIGxvb3BlZFNsaWRlcyA9IDAsIHBhcmFtcyxcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgYnJlYWtwb2ludHMgPSBwYXJhbXMuYnJlYWtwb2ludHM7XG4gIGlmICghYnJlYWtwb2ludHMgfHwgKGJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5sZW5ndGggPT09IDApKSByZXR1cm47XG5cbiAgLy8gU2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aCBhbmQgdXBkYXRlIHBhcmFtZXRlcnNcbiAgY29uc3QgYnJlYWtwb2ludCA9IHN3aXBlci5nZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzKTtcblxuICBpZiAoYnJlYWtwb2ludCAmJiBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgIT09IGJyZWFrcG9pbnQpIHtcbiAgICBjb25zdCBicmVha3BvaW50T25seVBhcmFtcyA9IGJyZWFrcG9pbnQgaW4gYnJlYWtwb2ludHMgPyBicmVha3BvaW50c1ticmVha3BvaW50XSA6IHVuZGVmaW5lZDtcbiAgICBpZiAoYnJlYWtwb2ludE9ubHlQYXJhbXMpIHtcbiAgICAgIFsnc2xpZGVzUGVyVmlldycsICdzcGFjZUJldHdlZW4nLCAnc2xpZGVzUGVyR3JvdXAnXS5mb3JFYWNoKChwYXJhbSkgPT4ge1xuICAgICAgICBjb25zdCBwYXJhbVZhbHVlID0gYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dO1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtVmFsdWUgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgICAgIGlmIChwYXJhbSA9PT0gJ3NsaWRlc1BlclZpZXcnICYmIChwYXJhbVZhbHVlID09PSAnQVVUTycgfHwgcGFyYW1WYWx1ZSA9PT0gJ2F1dG8nKSkge1xuICAgICAgICAgIGJyZWFrcG9pbnRPbmx5UGFyYW1zW3BhcmFtXSA9ICdhdXRvJztcbiAgICAgICAgfSBlbHNlIGlmIChwYXJhbSA9PT0gJ3NsaWRlc1BlclZpZXcnKSB7XG4gICAgICAgICAgYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dID0gcGFyc2VGbG9hdChwYXJhbVZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV0gPSBwYXJzZUludChwYXJhbVZhbHVlLCAxMCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGJyZWFrcG9pbnRQYXJhbXMgPSBicmVha3BvaW50T25seVBhcmFtcyB8fCBzd2lwZXIub3JpZ2luYWxQYXJhbXM7XG4gICAgY29uc3QgZGlyZWN0aW9uQ2hhbmdlZCA9IGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICYmIGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICE9PSBwYXJhbXMuZGlyZWN0aW9uO1xuICAgIGNvbnN0IG5lZWRzUmVMb29wID0gcGFyYW1zLmxvb3AgJiYgKGJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gcGFyYW1zLnNsaWRlc1BlclZpZXcgfHwgZGlyZWN0aW9uQ2hhbmdlZCk7XG5cbiAgICBpZiAoZGlyZWN0aW9uQ2hhbmdlZCAmJiBpbml0aWFsaXplZCkge1xuICAgICAgc3dpcGVyLmNoYW5nZURpcmVjdGlvbigpO1xuICAgIH1cblxuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIucGFyYW1zLCBicmVha3BvaW50UGFyYW1zKTtcblxuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldixcbiAgICB9KTtcblxuICAgIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XG5cbiAgICBpZiAobmVlZHNSZUxvb3AgJiYgaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICAgIHN3aXBlci5zbGlkZVRvKChhY3RpdmVJbmRleCAtIGxvb3BlZFNsaWRlcykgKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2JyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRCcmVha3BvaW50IChicmVha3BvaW50cykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAvLyBHZXQgYnJlYWtwb2ludCBmb3Igd2luZG93IHdpZHRoXG4gIGlmICghYnJlYWtwb2ludHMpIHJldHVybiB1bmRlZmluZWQ7XG4gIGxldCBicmVha3BvaW50ID0gZmFsc2U7XG4gIGNvbnN0IHBvaW50cyA9IFtdO1xuICBPYmplY3Qua2V5cyhicmVha3BvaW50cykuZm9yRWFjaCgocG9pbnQpID0+IHtcbiAgICBwb2ludHMucHVzaChwb2ludCk7XG4gIH0pO1xuICBwb2ludHMuc29ydCgoYSwgYikgPT4gcGFyc2VJbnQoYSwgMTApIC0gcGFyc2VJbnQoYiwgMTApKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5icmVha3BvaW50c0ludmVyc2UpIHtcbiAgICAgIGlmIChwb2ludCA8PSB3aW5kb3cuaW5uZXJXaWR0aCkge1xuICAgICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwb2ludCA+PSB3aW5kb3cuaW5uZXJXaWR0aCAmJiAhYnJlYWtwb2ludCkge1xuICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gYnJlYWtwb2ludCB8fCAnbWF4Jztcbn1cblxudmFyIGJyZWFrcG9pbnRzID0geyBzZXRCcmVha3BvaW50LCBnZXRCcmVha3BvaW50IH07XG5cbmZ1bmN0aW9uIGFkZENsYXNzZXMgKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lcywgcGFyYW1zLCBydGwsICRlbCxcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qgc3VmZml4ZXMgPSBbXTtcblxuICBzdWZmaXhlcy5wdXNoKCdpbml0aWFsaXplZCcpO1xuICBzdWZmaXhlcy5wdXNoKHBhcmFtcy5kaXJlY3Rpb24pO1xuXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdmcmVlLW1vZGUnKTtcbiAgfVxuICBpZiAoIVN1cHBvcnQuZmxleGJveCkge1xuICAgIHN1ZmZpeGVzLnB1c2goJ25vLWZsZXhib3gnKTtcbiAgfVxuICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdhdXRvaGVpZ2h0Jyk7XG4gIH1cbiAgaWYgKHJ0bCkge1xuICAgIHN1ZmZpeGVzLnB1c2goJ3J0bCcpO1xuICB9XG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMSkge1xuICAgIHN1ZmZpeGVzLnB1c2goJ211bHRpcm93Jyk7XG4gIH1cbiAgaWYgKERldmljZS5hbmRyb2lkKSB7XG4gICAgc3VmZml4ZXMucHVzaCgnYW5kcm9pZCcpO1xuICB9XG4gIGlmIChEZXZpY2UuaW9zKSB7XG4gICAgc3VmZml4ZXMucHVzaCgnaW9zJyk7XG4gIH1cbiAgLy8gV1A4IFRvdWNoIEV2ZW50cyBGaXhcbiAgaWYgKChCcm93c2VyLmlzSUUgfHwgQnJvd3Nlci5pc0VkZ2UpICYmIChTdXBwb3J0LnBvaW50ZXJFdmVudHMgfHwgU3VwcG9ydC5wcmVmaXhlZFBvaW50ZXJFdmVudHMpKSB7XG4gICAgc3VmZml4ZXMucHVzaChgd3A4LSR7cGFyYW1zLmRpcmVjdGlvbn1gKTtcbiAgfVxuXG4gIHN1ZmZpeGVzLmZvckVhY2goKHN1ZmZpeCkgPT4ge1xuICAgIGNsYXNzTmFtZXMucHVzaChwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIHN1ZmZpeCk7XG4gIH0pO1xuXG4gICRlbC5hZGRDbGFzcyhjbGFzc05hbWVzLmpvaW4oJyAnKSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMgKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7ICRlbCwgY2xhc3NOYW1lcyB9ID0gc3dpcGVyO1xuXG4gICRlbC5yZW1vdmVDbGFzcyhjbGFzc05hbWVzLmpvaW4oJyAnKSk7XG59XG5cbnZhciBjbGFzc2VzID0geyBhZGRDbGFzc2VzLCByZW1vdmVDbGFzc2VzIH07XG5cbmZ1bmN0aW9uIGxvYWRJbWFnZSAoaW1hZ2VFbCwgc3JjLCBzcmNzZXQsIHNpemVzLCBjaGVja0ZvckNvbXBsZXRlLCBjYWxsYmFjaykge1xuICBsZXQgaW1hZ2U7XG4gIGZ1bmN0aW9uIG9uUmVhZHkoKSB7XG4gICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICB9XG4gIGlmICghaW1hZ2VFbC5jb21wbGV0ZSB8fCAhY2hlY2tGb3JDb21wbGV0ZSkge1xuICAgIGlmIChzcmMpIHtcbiAgICAgIGltYWdlID0gbmV3IHdpbmRvdy5JbWFnZSgpO1xuICAgICAgaW1hZ2Uub25sb2FkID0gb25SZWFkeTtcbiAgICAgIGltYWdlLm9uZXJyb3IgPSBvblJlYWR5O1xuICAgICAgaWYgKHNpemVzKSB7XG4gICAgICAgIGltYWdlLnNpemVzID0gc2l6ZXM7XG4gICAgICB9XG4gICAgICBpZiAoc3Jjc2V0KSB7XG4gICAgICAgIGltYWdlLnNyY3NldCA9IHNyY3NldDtcbiAgICAgIH1cbiAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgaW1hZ2Uuc3JjID0gc3JjO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvblJlYWR5KCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGltYWdlIGFscmVhZHkgbG9hZGVkLi4uXG4gICAgb25SZWFkeSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByZWxvYWRJbWFnZXMgKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBzd2lwZXIuaW1hZ2VzVG9Mb2FkID0gc3dpcGVyLiRlbC5maW5kKCdpbWcnKTtcbiAgZnVuY3Rpb24gb25SZWFkeSgpIHtcbiAgICBpZiAodHlwZW9mIHN3aXBlciA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyID09PSBudWxsIHx8ICFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuaW1hZ2VzTG9hZGVkICE9PSB1bmRlZmluZWQpIHN3aXBlci5pbWFnZXNMb2FkZWQgKz0gMTtcbiAgICBpZiAoc3dpcGVyLmltYWdlc0xvYWRlZCA9PT0gc3dpcGVyLmltYWdlc1RvTG9hZC5sZW5ndGgpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVwZGF0ZU9uSW1hZ2VzUmVhZHkpIHN3aXBlci51cGRhdGUoKTtcbiAgICAgIHN3aXBlci5lbWl0KCdpbWFnZXNSZWFkeScpO1xuICAgIH1cbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlci5pbWFnZXNUb0xvYWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBpbWFnZUVsID0gc3dpcGVyLmltYWdlc1RvTG9hZFtpXTtcbiAgICBzd2lwZXIubG9hZEltYWdlKFxuICAgICAgaW1hZ2VFbCxcbiAgICAgIGltYWdlRWwuY3VycmVudFNyYyB8fCBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnc3JjJyksXG4gICAgICBpbWFnZUVsLnNyY3NldCB8fCBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnc3Jjc2V0JyksXG4gICAgICBpbWFnZUVsLnNpemVzIHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzaXplcycpLFxuICAgICAgdHJ1ZSxcbiAgICAgIG9uUmVhZHlcbiAgICApO1xuICB9XG59XG5cbnZhciBpbWFnZXMgPSB7XG4gIGxvYWRJbWFnZSxcbiAgcHJlbG9hZEltYWdlcyxcbn07XG5cbmZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3coKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHdhc0xvY2tlZCA9IHN3aXBlci5pc0xvY2tlZDtcblxuICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoID09PSAxO1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSAhc3dpcGVyLmlzTG9ja2VkO1xuXG4gIC8vIGV2ZW50c1xuICBpZiAod2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHN3aXBlci5lbWl0KHN3aXBlci5pc0xvY2tlZCA/ICdsb2NrJyA6ICd1bmxvY2snKTtcblxuICBpZiAod2FzTG9ja2VkICYmIHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSB7XG4gICAgc3dpcGVyLmlzRW5kID0gZmFsc2U7XG4gICAgc3dpcGVyLm5hdmlnYXRpb24udXBkYXRlKCk7XG4gIH1cbn1cblxudmFyIGNoZWNrT3ZlcmZsb3ckMSA9IHsgY2hlY2tPdmVyZmxvdyB9O1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGluaXQ6IHRydWUsXG4gIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICB0b3VjaEV2ZW50c1RhcmdldDogJ2NvbnRhaW5lcicsXG4gIGluaXRpYWxTbGlkZTogMCxcbiAgc3BlZWQ6IDMwMCxcbiAgLy9cbiAgcHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uOiBmYWxzZSxcblxuICAvLyBUbyBzdXBwb3J0IGlPUydzIHN3aXBlLXRvLWdvLWJhY2sgZ2VzdHVyZSAod2hlbiBiZWluZyB1c2VkIGluLWFwcCwgd2l0aCBVSVdlYlZpZXcpLlxuICBlZGdlU3dpcGVEZXRlY3Rpb246IGZhbHNlLFxuICBlZGdlU3dpcGVUaHJlc2hvbGQ6IDIwLFxuXG4gIC8vIEZyZWUgbW9kZVxuICBmcmVlTW9kZTogZmFsc2UsXG4gIGZyZWVNb2RlTW9tZW50dW06IHRydWUsXG4gIGZyZWVNb2RlTW9tZW50dW1SYXRpbzogMSxcbiAgZnJlZU1vZGVNb21lbnR1bUJvdW5jZTogdHJ1ZSxcbiAgZnJlZU1vZGVNb21lbnR1bUJvdW5jZVJhdGlvOiAxLFxuICBmcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbzogMSxcbiAgZnJlZU1vZGVTdGlja3k6IGZhbHNlLFxuICBmcmVlTW9kZU1pbmltdW1WZWxvY2l0eTogMC4wMixcblxuICAvLyBBdXRvaGVpZ2h0XG4gIGF1dG9IZWlnaHQ6IGZhbHNlLFxuXG4gIC8vIFNldCB3cmFwcGVyIHdpZHRoXG4gIHNldFdyYXBwZXJTaXplOiBmYWxzZSxcblxuICAvLyBWaXJ0dWFsIFRyYW5zbGF0ZVxuICB2aXJ0dWFsVHJhbnNsYXRlOiBmYWxzZSxcblxuICAvLyBFZmZlY3RzXG4gIGVmZmVjdDogJ3NsaWRlJywgLy8gJ3NsaWRlJyBvciAnZmFkZScgb3IgJ2N1YmUnIG9yICdjb3ZlcmZsb3cnIG9yICdmbGlwJ1xuXG4gIC8vIEJyZWFrcG9pbnRzXG4gIGJyZWFrcG9pbnRzOiB1bmRlZmluZWQsXG4gIGJyZWFrcG9pbnRzSW52ZXJzZTogZmFsc2UsXG5cbiAgLy8gU2xpZGVzIGdyaWRcbiAgc3BhY2VCZXR3ZWVuOiAwLFxuICBzbGlkZXNQZXJWaWV3OiAxLFxuICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gIHNsaWRlc1BlckNvbHVtbkZpbGw6ICdjb2x1bW4nLFxuICBzbGlkZXNQZXJHcm91cDogMSxcbiAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICBzbGlkZXNPZmZzZXRCZWZvcmU6IDAsIC8vIGluIHB4XG4gIHNsaWRlc09mZnNldEFmdGVyOiAwLCAvLyBpbiBweFxuICBub3JtYWxpemVTbGlkZUluZGV4OiB0cnVlLFxuICBjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXM6IGZhbHNlLFxuXG4gIC8vIERpc2FibGUgc3dpcGVyIGFuZCBoaWRlIG5hdmlnYXRpb24gd2hlbiBjb250YWluZXIgbm90IG92ZXJmbG93XG4gIHdhdGNoT3ZlcmZsb3c6IGZhbHNlLFxuXG4gIC8vIFJvdW5kIGxlbmd0aFxuICByb3VuZExlbmd0aHM6IGZhbHNlLFxuXG4gIC8vIFRvdWNoZXNcbiAgdG91Y2hSYXRpbzogMSxcbiAgdG91Y2hBbmdsZTogNDUsXG4gIHNpbXVsYXRlVG91Y2g6IHRydWUsXG4gIHNob3J0U3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzUmF0aW86IDAuNSxcbiAgbG9uZ1N3aXBlc01zOiAzMDAsXG4gIGZvbGxvd0ZpbmdlcjogdHJ1ZSxcbiAgYWxsb3dUb3VjaE1vdmU6IHRydWUsXG4gIHRocmVzaG9sZDogMCxcbiAgdG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uOiB0cnVlLFxuICB0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ6IHRydWUsXG4gIHRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0OiBmYWxzZSxcbiAgdG91Y2hSZWxlYXNlT25FZGdlczogZmFsc2UsXG5cbiAgLy8gVW5pcXVlIE5hdmlnYXRpb24gRWxlbWVudHNcbiAgdW5pcXVlTmF2RWxlbWVudHM6IHRydWUsXG5cbiAgLy8gUmVzaXN0YW5jZVxuICByZXNpc3RhbmNlOiB0cnVlLFxuICByZXNpc3RhbmNlUmF0aW86IDAuODUsXG5cbiAgLy8gUHJvZ3Jlc3NcbiAgd2F0Y2hTbGlkZXNQcm9ncmVzczogZmFsc2UsXG4gIHdhdGNoU2xpZGVzVmlzaWJpbGl0eTogZmFsc2UsXG5cbiAgLy8gQ3Vyc29yXG4gIGdyYWJDdXJzb3I6IGZhbHNlLFxuXG4gIC8vIENsaWNrc1xuICBwcmV2ZW50Q2xpY2tzOiB0cnVlLFxuICBwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb246IHRydWUsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuXG4gIC8vIEltYWdlc1xuICBwcmVsb2FkSW1hZ2VzOiB0cnVlLFxuICB1cGRhdGVPbkltYWdlc1JlYWR5OiB0cnVlLFxuXG4gIC8vIGxvb3BcbiAgbG9vcDogZmFsc2UsXG4gIGxvb3BBZGRpdGlvbmFsU2xpZGVzOiAwLFxuICBsb29wZWRTbGlkZXM6IG51bGwsXG4gIGxvb3BGaWxsR3JvdXBXaXRoQmxhbms6IGZhbHNlLFxuXG4gIC8vIFN3aXBpbmcvbm8gc3dpcGluZ1xuICBhbGxvd1NsaWRlUHJldjogdHJ1ZSxcbiAgYWxsb3dTbGlkZU5leHQ6IHRydWUsXG4gIHN3aXBlSGFuZGxlcjogbnVsbCwgLy8gJy5zd2lwZS1oYW5kbGVyJyxcbiAgbm9Td2lwaW5nOiB0cnVlLFxuICBub1N3aXBpbmdDbGFzczogJ3N3aXBlci1uby1zd2lwaW5nJyxcbiAgbm9Td2lwaW5nU2VsZWN0b3I6IG51bGwsXG5cbiAgLy8gUGFzc2l2ZSBMaXN0ZW5lcnNcbiAgcGFzc2l2ZUxpc3RlbmVyczogdHJ1ZSxcblxuICAvLyBOU1xuICBjb250YWluZXJNb2RpZmllckNsYXNzOiAnc3dpcGVyLWNvbnRhaW5lci0nLCAvLyBORVdcbiAgc2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZScsXG4gIHNsaWRlQmxhbmtDbGFzczogJ3N3aXBlci1zbGlkZS1pbnZpc2libGUtYmxhbmsnLFxuICBzbGlkZUFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWFjdGl2ZScsXG4gIHNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLWFjdGl2ZScsXG4gIHNsaWRlVmlzaWJsZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXZpc2libGUnLFxuICBzbGlkZUR1cGxpY2F0ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZScsXG4gIHNsaWRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLW5leHQnLFxuICBzbGlkZUR1cGxpY2F0ZU5leHRDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtbmV4dCcsXG4gIHNsaWRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLXByZXYnLFxuICBzbGlkZUR1cGxpY2F0ZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtcHJldicsXG4gIHdyYXBwZXJDbGFzczogJ3N3aXBlci13cmFwcGVyJyxcblxuICAvLyBDYWxsYmFja3NcbiAgcnVuQ2FsbGJhY2tzT25Jbml0OiB0cnVlLFxufTtcblxuLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBcIm9mZlwiICovXG5cbmNvbnN0IHByb3RvdHlwZXMgPSB7XG4gIHVwZGF0ZSxcbiAgdHJhbnNsYXRlLFxuICB0cmFuc2l0aW9uLFxuICBzbGlkZSxcbiAgbG9vcCxcbiAgZ3JhYkN1cnNvcixcbiAgbWFuaXB1bGF0aW9uLFxuICBldmVudHMsXG4gIGJyZWFrcG9pbnRzLFxuICBjaGVja092ZXJmbG93OiBjaGVja092ZXJmbG93JDEsXG4gIGNsYXNzZXMsXG4gIGltYWdlcyxcbn07XG5cbmNvbnN0IGV4dGVuZGVkRGVmYXVsdHMgPSB7fTtcblxuY2xhc3MgU3dpcGVyIGV4dGVuZHMgU3dpcGVyQ2xhc3Mge1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgbGV0IGVsO1xuICAgIGxldCBwYXJhbXM7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIGFyZ3NbMF0uY29uc3RydWN0b3IgJiYgYXJnc1swXS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICBwYXJhbXMgPSBhcmdzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBbZWwsIHBhcmFtc10gPSBhcmdzO1xuICAgIH1cbiAgICBpZiAoIXBhcmFtcykgcGFyYW1zID0ge307XG5cbiAgICBwYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIHBhcmFtcyk7XG4gICAgaWYgKGVsICYmICFwYXJhbXMuZWwpIHBhcmFtcy5lbCA9IGVsO1xuXG4gICAgc3VwZXIocGFyYW1zKTtcblxuICAgIE9iamVjdC5rZXlzKHByb3RvdHlwZXMpLmZvckVhY2goKHByb3RvdHlwZUdyb3VwKSA9PiB7XG4gICAgICBPYmplY3Qua2V5cyhwcm90b3R5cGVzW3Byb3RvdHlwZUdyb3VwXSkuZm9yRWFjaCgocHJvdG9NZXRob2QpID0+IHtcbiAgICAgICAgaWYgKCFTd2lwZXIucHJvdG90eXBlW3Byb3RvTWV0aG9kXSkge1xuICAgICAgICAgIFN3aXBlci5wcm90b3R5cGVbcHJvdG9NZXRob2RdID0gcHJvdG90eXBlc1twcm90b3R5cGVHcm91cF1bcHJvdG9NZXRob2RdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIFN3aXBlciBJbnN0YW5jZVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIubW9kdWxlcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHN3aXBlci5tb2R1bGVzID0ge307XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKHN3aXBlci5tb2R1bGVzKS5mb3JFYWNoKChtb2R1bGVOYW1lKSA9PiB7XG4gICAgICBjb25zdCBtb2R1bGUgPSBzd2lwZXIubW9kdWxlc1ttb2R1bGVOYW1lXTtcbiAgICAgIGlmIChtb2R1bGUucGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IG1vZHVsZVBhcmFtTmFtZSA9IE9iamVjdC5rZXlzKG1vZHVsZS5wYXJhbXMpWzBdO1xuICAgICAgICBjb25zdCBtb2R1bGVQYXJhbXMgPSBtb2R1bGUucGFyYW1zW21vZHVsZVBhcmFtTmFtZV07XG4gICAgICAgIGlmICh0eXBlb2YgbW9kdWxlUGFyYW1zICE9PSAnb2JqZWN0JyB8fCBtb2R1bGVQYXJhbXMgPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgaWYgKCEobW9kdWxlUGFyYW1OYW1lIGluIHBhcmFtcyAmJiAnZW5hYmxlZCcgaW4gbW9kdWxlUGFyYW1zKSkgcmV0dXJuO1xuICAgICAgICBpZiAocGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09IHRydWUpIHtcbiAgICAgICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHsgZW5hYmxlZDogdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09ICdvYmplY3QnXG4gICAgICAgICAgJiYgISgnZW5hYmxlZCcgaW4gcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pXG4gICAgICAgICkge1xuICAgICAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0geyBlbmFibGVkOiBmYWxzZSB9O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggbW9kdWxlcyBwYXJhbXNcbiAgICBjb25zdCBzd2lwZXJQYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIGRlZmF1bHRzKTtcbiAgICBzd2lwZXIudXNlTW9kdWxlc1BhcmFtcyhzd2lwZXJQYXJhbXMpO1xuXG4gICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggcGFzc2VkIHBhcmFtc1xuICAgIHN3aXBlci5wYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIHN3aXBlclBhcmFtcywgZXh0ZW5kZWREZWZhdWx0cywgcGFyYW1zKTtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIHN3aXBlci5wYXJhbXMpO1xuICAgIHN3aXBlci5wYXNzZWRQYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIHBhcmFtcyk7XG5cbiAgICAvLyBTYXZlIERvbSBsaWJcbiAgICBzd2lwZXIuJCA9ICQ7XG5cbiAgICAvLyBGaW5kIGVsXG4gICAgY29uc3QgJGVsID0gJChzd2lwZXIucGFyYW1zLmVsKTtcbiAgICBlbCA9ICRlbFswXTtcblxuICAgIGlmICghZWwpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKCRlbC5sZW5ndGggPiAxKSB7XG4gICAgICBjb25zdCBzd2lwZXJzID0gW107XG4gICAgICAkZWwuZWFjaCgoaW5kZXgsIGNvbnRhaW5lckVsKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1BhcmFtcyA9IFV0aWxzLmV4dGVuZCh7fSwgcGFyYW1zLCB7IGVsOiBjb250YWluZXJFbCB9KTtcbiAgICAgICAgc3dpcGVycy5wdXNoKG5ldyBTd2lwZXIobmV3UGFyYW1zKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzd2lwZXJzO1xuICAgIH1cblxuICAgIGVsLnN3aXBlciA9IHN3aXBlcjtcbiAgICAkZWwuZGF0YSgnc3dpcGVyJywgc3dpcGVyKTtcblxuICAgIC8vIEZpbmQgV3JhcHBlclxuICAgIGNvbnN0ICR3cmFwcGVyRWwgPSAkZWwuY2hpbGRyZW4oYC4ke3N3aXBlci5wYXJhbXMud3JhcHBlckNsYXNzfWApO1xuXG4gICAgLy8gRXh0ZW5kIFN3aXBlclxuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICRlbCxcbiAgICAgIGVsLFxuICAgICAgJHdyYXBwZXJFbCxcbiAgICAgIHdyYXBwZXJFbDogJHdyYXBwZXJFbFswXSxcblxuICAgICAgLy8gQ2xhc3Nlc1xuICAgICAgY2xhc3NOYW1lczogW10sXG5cbiAgICAgIC8vIFNsaWRlc1xuICAgICAgc2xpZGVzOiAkKCksXG4gICAgICBzbGlkZXNHcmlkOiBbXSxcbiAgICAgIHNuYXBHcmlkOiBbXSxcbiAgICAgIHNsaWRlc1NpemVzR3JpZDogW10sXG5cbiAgICAgIC8vIGlzRGlyZWN0aW9uXG4gICAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgfSxcbiAgICAgIGlzVmVydGljYWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJztcbiAgICAgIH0sXG4gICAgICAvLyBSVExcbiAgICAgIHJ0bDogKGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCAkZWwuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcpLFxuICAgICAgcnRsVHJhbnNsYXRlOiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIChlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgJGVsLmNzcygnZGlyZWN0aW9uJykgPT09ICdydGwnKSxcbiAgICAgIHdyb25nUlRMOiAkd3JhcHBlckVsLmNzcygnZGlzcGxheScpID09PSAnLXdlYmtpdC1ib3gnLFxuXG4gICAgICAvLyBJbmRleGVzXG4gICAgICBhY3RpdmVJbmRleDogMCxcbiAgICAgIHJlYWxJbmRleDogMCxcblxuICAgICAgLy9cbiAgICAgIGlzQmVnaW5uaW5nOiB0cnVlLFxuICAgICAgaXNFbmQ6IGZhbHNlLFxuXG4gICAgICAvLyBQcm9wc1xuICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcblxuICAgICAgLy8gTG9ja3NcbiAgICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgICAgYWxsb3dTbGlkZVByZXY6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZVByZXYsXG5cbiAgICAgIC8vIFRvdWNoIEV2ZW50c1xuICAgICAgdG91Y2hFdmVudHM6IChmdW5jdGlvbiB0b3VjaEV2ZW50cygpIHtcbiAgICAgICAgY29uc3QgdG91Y2ggPSBbJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJ107XG4gICAgICAgIGxldCBkZXNrdG9wID0gWydtb3VzZWRvd24nLCAnbW91c2Vtb3ZlJywgJ21vdXNldXAnXTtcbiAgICAgICAgaWYgKFN1cHBvcnQucG9pbnRlckV2ZW50cykge1xuICAgICAgICAgIGRlc2t0b3AgPSBbJ3BvaW50ZXJkb3duJywgJ3BvaW50ZXJtb3ZlJywgJ3BvaW50ZXJ1cCddO1xuICAgICAgICB9IGVsc2UgaWYgKFN1cHBvcnQucHJlZml4ZWRQb2ludGVyRXZlbnRzKSB7XG4gICAgICAgICAgZGVza3RvcCA9IFsnTVNQb2ludGVyRG93bicsICdNU1BvaW50ZXJNb3ZlJywgJ01TUG9pbnRlclVwJ107XG4gICAgICAgIH1cbiAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2ggPSB7XG4gICAgICAgICAgc3RhcnQ6IHRvdWNoWzBdLFxuICAgICAgICAgIG1vdmU6IHRvdWNoWzFdLFxuICAgICAgICAgIGVuZDogdG91Y2hbMl0sXG4gICAgICAgIH07XG4gICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3AgPSB7XG4gICAgICAgICAgc3RhcnQ6IGRlc2t0b3BbMF0sXG4gICAgICAgICAgbW92ZTogZGVza3RvcFsxXSxcbiAgICAgICAgICBlbmQ6IGRlc2t0b3BbMl0sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBTdXBwb3J0LnRvdWNoIHx8ICFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggPyBzd2lwZXIudG91Y2hFdmVudHNUb3VjaCA6IHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3A7XG4gICAgICB9KCkpLFxuICAgICAgdG91Y2hFdmVudHNEYXRhOiB7XG4gICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHVuZGVmaW5lZCxcbiAgICAgICAgdG91Y2hTdGFydFRpbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgY3VycmVudFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBhbGxvd1RocmVzaG9sZE1vdmU6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gRm9ybSBlbGVtZW50cyB0byBtYXRjaFxuICAgICAgICBmb3JtRWxlbWVudHM6ICdpbnB1dCwgc2VsZWN0LCBvcHRpb24sIHRleHRhcmVhLCBidXR0b24sIHZpZGVvJyxcbiAgICAgICAgLy8gTGFzdCBjbGljayB0aW1lXG4gICAgICAgIGxhc3RDbGlja1RpbWU6IFV0aWxzLm5vdygpLFxuICAgICAgICBjbGlja1RpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gVmVsb2NpdGllc1xuICAgICAgICB2ZWxvY2l0aWVzOiBbXSxcbiAgICAgICAgYWxsb3dNb21lbnR1bUJvdW5jZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1RvdWNoRXZlbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZCxcbiAgICAgIH0sXG5cbiAgICAgIC8vIENsaWNrc1xuICAgICAgYWxsb3dDbGljazogdHJ1ZSxcblxuICAgICAgLy8gVG91Y2hlc1xuICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG5cbiAgICAgIHRvdWNoZXM6IHtcbiAgICAgICAgc3RhcnRYOiAwLFxuICAgICAgICBzdGFydFk6IDAsXG4gICAgICAgIGN1cnJlbnRYOiAwLFxuICAgICAgICBjdXJyZW50WTogMCxcbiAgICAgICAgZGlmZjogMCxcbiAgICAgIH0sXG5cbiAgICAgIC8vIEltYWdlc1xuICAgICAgaW1hZ2VzVG9Mb2FkOiBbXSxcbiAgICAgIGltYWdlc0xvYWRlZDogMCxcblxuICAgIH0pO1xuXG4gICAgLy8gSW5zdGFsbCBNb2R1bGVzXG4gICAgc3dpcGVyLnVzZU1vZHVsZXMoKTtcblxuICAgIC8vIEluaXRcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5pbml0KSB7XG4gICAgICBzd2lwZXIuaW5pdCgpO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBhcHAgaW5zdGFuY2VcbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG5cbiAgc2xpZGVzUGVyVmlld0R5bmFtaWMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsIHNsaWRlcywgc2xpZGVzR3JpZCwgc2l6ZTogc3dpcGVyU2l6ZSwgYWN0aXZlSW5kZXgsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBsZXQgc3B2ID0gMTtcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBsZXQgc2xpZGVTaXplID0gc2xpZGVzW2FjdGl2ZUluZGV4XS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICBsZXQgYnJlYWtMb29wO1xuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzR3JpZFtpXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZSkge1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzcHY7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgY29uc3QgeyBzbmFwR3JpZCwgcGFyYW1zIH0gPSBzd2lwZXI7XG4gICAgLy8gQnJlYWtwb2ludHNcbiAgICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgIH1cbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgY29uc3QgdHJhbnNsYXRlVmFsdWUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSAqIC0xIDogc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGNvbnN0IG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKE1hdGgubWF4KHRyYW5zbGF0ZVZhbHVlLCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpLCBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cbiAgICBsZXQgdHJhbnNsYXRlZDtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGlmICghdHJhbnNsYXRlZCkge1xuICAgICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCd1cGRhdGUnKTtcbiAgfVxuXG4gIGNoYW5nZURpcmVjdGlvbihuZXdEaXJlY3Rpb24sIG5lZWRVcGRhdGUgPSB0cnVlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBjdXJyZW50RGlyZWN0aW9uID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb247XG4gICAgaWYgKCFuZXdEaXJlY3Rpb24pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgbmV3RGlyZWN0aW9uID0gY3VycmVudERpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICB9XG4gICAgaWYgKChuZXdEaXJlY3Rpb24gPT09IGN1cnJlbnREaXJlY3Rpb24pIHx8IChuZXdEaXJlY3Rpb24gIT09ICdob3Jpem9udGFsJyAmJiBuZXdEaXJlY3Rpb24gIT09ICd2ZXJ0aWNhbCcpKSB7XG4gICAgICByZXR1cm4gc3dpcGVyO1xuICAgIH1cblxuICAgIGlmIChjdXJyZW50RGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICBzd2lwZXIuJGVsXG4gICAgICAgIC5yZW1vdmVDbGFzcyhgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9dmVydGljYWwgd3A4LXZlcnRpY2FsYClcbiAgICAgICAgLmFkZENsYXNzKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke25ld0RpcmVjdGlvbn1gKTtcblxuICAgICAgaWYgKChCcm93c2VyLmlzSUUgfHwgQnJvd3Nlci5pc0VkZ2UpICYmIChTdXBwb3J0LnBvaW50ZXJFdmVudHMgfHwgU3VwcG9ydC5wcmVmaXhlZFBvaW50ZXJFdmVudHMpKSB7XG4gICAgICAgIHN3aXBlci4kZWwuYWRkQ2xhc3MoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfXdwOC0ke25ld0RpcmVjdGlvbn1gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGN1cnJlbnREaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgc3dpcGVyLiRlbFxuICAgICAgICAucmVtb3ZlQ2xhc3MoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWhvcml6b250YWwgd3A4LWhvcml6b250YWxgKVxuICAgICAgICAuYWRkQ2xhc3MoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7bmV3RGlyZWN0aW9ufWApO1xuXG4gICAgICBpZiAoKEJyb3dzZXIuaXNJRSB8fCBCcm93c2VyLmlzRWRnZSkgJiYgKFN1cHBvcnQucG9pbnRlckV2ZW50cyB8fCBTdXBwb3J0LnByZWZpeGVkUG9pbnRlckV2ZW50cykpIHtcbiAgICAgICAgc3dpcGVyLiRlbC5hZGRDbGFzcyhgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9d3A4LSR7bmV3RGlyZWN0aW9ufWApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID0gbmV3RGlyZWN0aW9uO1xuXG4gICAgc3dpcGVyLnNsaWRlcy5lYWNoKChzbGlkZUluZGV4LCBzbGlkZUVsKSA9PiB7XG4gICAgICBpZiAobmV3RGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgIHNsaWRlRWwuc3R5bGUud2lkdGggPSAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlRWwuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzd2lwZXIuZW1pdCgnY2hhbmdlRGlyZWN0aW9uJyk7XG4gICAgaWYgKG5lZWRVcGRhdGUpIHN3aXBlci51cGRhdGUoKTtcblxuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cblxuICBpbml0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuXG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZUluaXQnKTtcblxuICAgIC8vIFNldCBicmVha3BvaW50XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfVxuXG4gICAgLy8gQWRkIENsYXNzZXNcbiAgICBzd2lwZXIuYWRkQ2xhc3NlcygpO1xuXG4gICAgLy8gQ3JlYXRlIGxvb3BcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBzaXplXG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcblxuICAgIC8vIFVwZGF0ZSBzbGlkZXNcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cblxuICAgIC8vIFNldCBHcmFiIEN1cnNvclxuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJlbG9hZEltYWdlcykge1xuICAgICAgc3dpcGVyLnByZWxvYWRJbWFnZXMoKTtcbiAgICB9XG5cbiAgICAvLyBTbGlkZSBUbyBJbml0aWFsIFNsaWRlXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG4gICAgfVxuXG4gICAgLy8gQXR0YWNoIGV2ZW50c1xuICAgIHN3aXBlci5hdHRhY2hFdmVudHMoKTtcblxuICAgIC8vIEluaXQgRmxhZ1xuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAvLyBFbWl0XG4gICAgc3dpcGVyLmVtaXQoJ2luaXQnKTtcbiAgfVxuXG4gIGRlc3Ryb3koZGVsZXRlSW5zdGFuY2UgPSB0cnVlLCBjbGVhblN0eWxlcyA9IHRydWUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmFtcywgJGVsLCAkd3JhcHBlckVsLCBzbGlkZXMsXG4gICAgfSA9IHN3aXBlcjtcblxuICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyLmRlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZURlc3Ryb3knKTtcblxuICAgIC8vIEluaXQgRmxhZ1xuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgLy8gRGV0YWNoIGV2ZW50c1xuICAgIHN3aXBlci5kZXRhY2hFdmVudHMoKTtcblxuICAgIC8vIERlc3Ryb3kgbG9vcFxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgfVxuXG4gICAgLy8gQ2xlYW51cCBzdHlsZXNcbiAgICBpZiAoY2xlYW5TdHlsZXMpIHtcbiAgICAgIHN3aXBlci5yZW1vdmVDbGFzc2VzKCk7XG4gICAgICAkZWwucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICR3cmFwcGVyRWwucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgIGlmIChzbGlkZXMgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBzbGlkZXNcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoW1xuICAgICAgICAgICAgcGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzLFxuICAgICAgICAgICAgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MsXG4gICAgICAgICAgICBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsXG4gICAgICAgICAgICBwYXJhbXMuc2xpZGVQcmV2Q2xhc3MsXG4gICAgICAgICAgXS5qb2luKCcgJykpXG4gICAgICAgICAgLnJlbW92ZUF0dHIoJ3N0eWxlJylcbiAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKVxuICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1jb2x1bW4nKVxuICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1yb3cnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnZGVzdHJveScpO1xuXG4gICAgLy8gRGV0YWNoIGVtaXR0ZXIgZXZlbnRzXG4gICAgT2JqZWN0LmtleXMoc3dpcGVyLmV2ZW50c0xpc3RlbmVycykuZm9yRWFjaCgoZXZlbnROYW1lKSA9PiB7XG4gICAgICBzd2lwZXIub2ZmKGV2ZW50TmFtZSk7XG4gICAgfSk7XG5cbiAgICBpZiAoZGVsZXRlSW5zdGFuY2UgIT09IGZhbHNlKSB7XG4gICAgICBzd2lwZXIuJGVsWzBdLnN3aXBlciA9IG51bGw7XG4gICAgICBzd2lwZXIuJGVsLmRhdGEoJ3N3aXBlcicsIG51bGwpO1xuICAgICAgVXRpbHMuZGVsZXRlUHJvcHMoc3dpcGVyKTtcbiAgICB9XG4gICAgc3dpcGVyLmRlc3Ryb3llZCA9IHRydWU7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBleHRlbmREZWZhdWx0cyhuZXdEZWZhdWx0cykge1xuICAgIFV0aWxzLmV4dGVuZChleHRlbmRlZERlZmF1bHRzLCBuZXdEZWZhdWx0cyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGV4dGVuZGVkRGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIGV4dGVuZGVkRGVmYXVsdHM7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGRlZmF1bHRzKCkge1xuICAgIHJldHVybiBkZWZhdWx0cztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFN3aXBlckNsYXNzO1xuICB9XG5cbiAgc3RhdGljIGdldCAkKCkge1xuICAgIHJldHVybiAkO1xuICB9XG59XG5cbnZhciBEZXZpY2UkMSA9IHtcbiAgbmFtZTogJ2RldmljZScsXG4gIHByb3RvOiB7XG4gICAgZGV2aWNlOiBEZXZpY2UsXG4gIH0sXG4gIHN0YXRpYzoge1xuICAgIGRldmljZTogRGV2aWNlLFxuICB9LFxufTtcblxudmFyIFN1cHBvcnQkMSA9IHtcbiAgbmFtZTogJ3N1cHBvcnQnLFxuICBwcm90bzoge1xuICAgIHN1cHBvcnQ6IFN1cHBvcnQsXG4gIH0sXG4gIHN0YXRpYzoge1xuICAgIHN1cHBvcnQ6IFN1cHBvcnQsXG4gIH0sXG59O1xuXG52YXIgQnJvd3NlciQxID0ge1xuICBuYW1lOiAnYnJvd3NlcicsXG4gIHByb3RvOiB7XG4gICAgYnJvd3NlcjogQnJvd3NlcixcbiAgfSxcbiAgc3RhdGljOiB7XG4gICAgYnJvd3NlcjogQnJvd3NlcixcbiAgfSxcbn07XG5cbnZhciBSZXNpemUgPSB7XG4gIG5hbWU6ICdyZXNpemUnLFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICByZXNpemU6IHtcbiAgICAgICAgcmVzaXplSGFuZGxlcigpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlUmVzaXplJyk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3Jlc2l6ZScpO1xuICAgICAgICB9LFxuICAgICAgICBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIoKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ29yaWVudGF0aW9uY2hhbmdlJyk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgLy8gRW1pdCByZXNpemVcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzd2lwZXIucmVzaXplLnJlc2l6ZUhhbmRsZXIpO1xuXG4gICAgICAvLyBFbWl0IG9yaWVudGF0aW9uY2hhbmdlXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBzd2lwZXIucmVzaXplLm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gICAgfSxcbiAgICBkZXN0cm95KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzd2lwZXIucmVzaXplLnJlc2l6ZUhhbmRsZXIpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgc3dpcGVyLnJlc2l6ZS5vcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBPYnNlcnZlciA9IHtcbiAgZnVuYzogd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIsXG4gIGF0dGFjaCh0YXJnZXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgICBjb25zdCBPYnNlcnZlckZ1bmMgPSBPYnNlcnZlci5mdW5jO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE9ic2VydmVyRnVuYygobXV0YXRpb25zKSA9PiB7XG4gICAgICAvLyBUaGUgb2JzZXJ2ZXJVcGRhdGUgZXZlbnQgc2hvdWxkIG9ubHkgYmUgdHJpZ2dlcmVkXG4gICAgICAvLyBvbmNlIGRlc3BpdGUgdGhlIG51bWJlciBvZiBtdXRhdGlvbnMuICBBZGRpdGlvbmFsXG4gICAgICAvLyB0cmlnZ2VycyBhcmUgcmVkdW5kYW50IGFuZCBhcmUgdmVyeSBjb3N0bHlcbiAgICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9ic2VydmVyVXBkYXRlID0gZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICB9O1xuXG4gICAgICBpZiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9ic2VydmVyVXBkYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KG9ic2VydmVyVXBkYXRlLCAwKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0LCB7XG4gICAgICBhdHRyaWJ1dGVzOiB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmF0dHJpYnV0ZXMsXG4gICAgICBjaGlsZExpc3Q6IHR5cGVvZiBvcHRpb25zLmNoaWxkTGlzdCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGlsZExpc3QsXG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0eXBlb2Ygb3B0aW9ucy5jaGFyYWN0ZXJEYXRhID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoYXJhY3RlckRhdGEsXG4gICAgfSk7XG5cbiAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICB9LFxuICBpbml0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFTdXBwb3J0Lm9ic2VydmVyIHx8ICFzd2lwZXIucGFyYW1zLm9ic2VydmVyKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5wYXJhbXMub2JzZXJ2ZVBhcmVudHMpIHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lclBhcmVudHMgPSBzd2lwZXIuJGVsLnBhcmVudHMoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGFpbmVyUGFyZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzd2lwZXIub2JzZXJ2ZXIuYXR0YWNoKGNvbnRhaW5lclBhcmVudHNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBPYnNlcnZlIGNvbnRhaW5lclxuICAgIHN3aXBlci5vYnNlcnZlci5hdHRhY2goc3dpcGVyLiRlbFswXSwgeyBjaGlsZExpc3Q6IHN3aXBlci5wYXJhbXMub2JzZXJ2ZVNsaWRlQ2hpbGRyZW4gfSk7XG5cbiAgICAvLyBPYnNlcnZlIHdyYXBwZXJcbiAgICBzd2lwZXIub2JzZXJ2ZXIuYXR0YWNoKHN3aXBlci4kd3JhcHBlckVsWzBdLCB7IGF0dHJpYnV0ZXM6IGZhbHNlIH0pO1xuICB9LFxuICBkZXN0cm95KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLm9ic2VydmVyLm9ic2VydmVycy5mb3JFYWNoKChvYnNlcnZlcikgPT4ge1xuICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH0pO1xuICAgIHN3aXBlci5vYnNlcnZlci5vYnNlcnZlcnMgPSBbXTtcbiAgfSxcbn07XG5cbnZhciBPYnNlcnZlciQxID0ge1xuICBuYW1lOiAnb2JzZXJ2ZXInLFxuICBwYXJhbXM6IHtcbiAgICBvYnNlcnZlcjogZmFsc2UsXG4gICAgb2JzZXJ2ZVBhcmVudHM6IGZhbHNlLFxuICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgb2JzZXJ2ZXI6IHtcbiAgICAgICAgaW5pdDogT2JzZXJ2ZXIuaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgIGF0dGFjaDogT2JzZXJ2ZXIuYXR0YWNoLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZGVzdHJveTogT2JzZXJ2ZXIuZGVzdHJveS5iaW5kKHN3aXBlciksXG4gICAgICAgIG9ic2VydmVyczogW10sXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLm9ic2VydmVyLmluaXQoKTtcbiAgICB9LFxuICAgIGRlc3Ryb3koKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLm9ic2VydmVyLmRlc3Ryb3koKTtcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgVmlydHVhbCA9IHtcbiAgdXBkYXRlKGZvcmNlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHNsaWRlc1BlclZpZXcsIHNsaWRlc1Blckdyb3VwLCBjZW50ZXJlZFNsaWRlcyB9ID0gc3dpcGVyLnBhcmFtcztcbiAgICBjb25zdCB7IGFkZFNsaWRlc0JlZm9yZSwgYWRkU2xpZGVzQWZ0ZXIgfSA9IHN3aXBlci5wYXJhbXMudmlydHVhbDtcbiAgICBjb25zdCB7XG4gICAgICBmcm9tOiBwcmV2aW91c0Zyb20sXG4gICAgICB0bzogcHJldmlvdXNUbyxcbiAgICAgIHNsaWRlcyxcbiAgICAgIHNsaWRlc0dyaWQ6IHByZXZpb3VzU2xpZGVzR3JpZCxcbiAgICAgIHJlbmRlclNsaWRlLFxuICAgICAgb2Zmc2V0OiBwcmV2aW91c09mZnNldCxcbiAgICB9ID0gc3dpcGVyLnZpcnR1YWw7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgY29uc3QgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcblxuICAgIGxldCBvZmZzZXRQcm9wO1xuICAgIGlmIChzd2lwZXIucnRsVHJhbnNsYXRlKSBvZmZzZXRQcm9wID0gJ3JpZ2h0JztcbiAgICBlbHNlIG9mZnNldFByb3AgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJztcblxuICAgIGxldCBzbGlkZXNBZnRlcjtcbiAgICBsZXQgc2xpZGVzQmVmb3JlO1xuICAgIGlmIChjZW50ZXJlZFNsaWRlcykge1xuICAgICAgc2xpZGVzQWZ0ZXIgPSBNYXRoLmZsb29yKHNsaWRlc1BlclZpZXcgLyAyKSArIHNsaWRlc1Blckdyb3VwICsgYWRkU2xpZGVzQmVmb3JlO1xuICAgICAgc2xpZGVzQmVmb3JlID0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0FmdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZXNBZnRlciA9IHNsaWRlc1BlclZpZXcgKyAoc2xpZGVzUGVyR3JvdXAgLSAxKSArIGFkZFNsaWRlc0JlZm9yZTtcbiAgICAgIHNsaWRlc0JlZm9yZSA9IHNsaWRlc1Blckdyb3VwICsgYWRkU2xpZGVzQWZ0ZXI7XG4gICAgfVxuICAgIGNvbnN0IGZyb20gPSBNYXRoLm1heCgoYWN0aXZlSW5kZXggfHwgMCkgLSBzbGlkZXNCZWZvcmUsIDApO1xuICAgIGNvbnN0IHRvID0gTWF0aC5taW4oKGFjdGl2ZUluZGV4IHx8IDApICsgc2xpZGVzQWZ0ZXIsIHNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICBjb25zdCBvZmZzZXQgPSAoc3dpcGVyLnNsaWRlc0dyaWRbZnJvbV0gfHwgMCkgLSAoc3dpcGVyLnNsaWRlc0dyaWRbMF0gfHwgMCk7XG5cbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLnZpcnR1YWwsIHtcbiAgICAgIGZyb20sXG4gICAgICB0byxcbiAgICAgIG9mZnNldCxcbiAgICAgIHNsaWRlc0dyaWQ6IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gb25SZW5kZXJlZCgpIHtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIGlmIChzd2lwZXIubGF6eSAmJiBzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZpb3VzRnJvbSA9PT0gZnJvbSAmJiBwcmV2aW91c1RvID09PSB0byAmJiAhZm9yY2UpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzR3JpZCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkICYmIG9mZnNldCAhPT0gcHJldmlvdXNPZmZzZXQpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlcy5jc3Mob2Zmc2V0UHJvcCwgYCR7b2Zmc2V0fXB4YCk7XG4gICAgICB9XG4gICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbCkge1xuICAgICAgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsLmNhbGwoc3dpcGVyLCB7XG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgZnJvbSxcbiAgICAgICAgdG8sXG4gICAgICAgIHNsaWRlczogKGZ1bmN0aW9uIGdldFNsaWRlcygpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZXNUb1JlbmRlciA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IGkgPSBmcm9tOyBpIDw9IHRvOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHNsaWRlc1RvUmVuZGVyLnB1c2goc2xpZGVzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHNsaWRlc1RvUmVuZGVyO1xuICAgICAgICB9KCkpLFxuICAgICAgfSk7XG4gICAgICBvblJlbmRlcmVkKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHByZXBlbmRJbmRleGVzID0gW107XG4gICAgY29uc3QgYXBwZW5kSW5kZXhlcyA9IFtdO1xuICAgIGlmIChmb3JjZSkge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuZmluZChgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWApLnJlbW92ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gcHJldmlvdXNGcm9tOyBpIDw9IHByZXZpb3VzVG87IGkgKz0gMSkge1xuICAgICAgICBpZiAoaSA8IGZyb20gfHwgaSA+IHRvKSB7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuZmluZChgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7aX1cIl1gKS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGkgPj0gZnJvbSAmJiBpIDw9IHRvKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJldmlvdXNUbyA9PT0gJ3VuZGVmaW5lZCcgfHwgZm9yY2UpIHtcbiAgICAgICAgICBhcHBlbmRJbmRleGVzLnB1c2goaSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGkgPiBwcmV2aW91c1RvKSBhcHBlbmRJbmRleGVzLnB1c2goaSk7XG4gICAgICAgICAgaWYgKGkgPCBwcmV2aW91c0Zyb20pIHByZXBlbmRJbmRleGVzLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgYXBwZW5kSW5kZXhlcy5mb3JFYWNoKChpbmRleCkgPT4ge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuYXBwZW5kKHJlbmRlclNsaWRlKHNsaWRlc1tpbmRleF0sIGluZGV4KSk7XG4gICAgfSk7XG4gICAgcHJlcGVuZEluZGV4ZXMuc29ydCgoYSwgYikgPT4gYiAtIGEpLmZvckVhY2goKGluZGV4KSA9PiB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5wcmVwZW5kKHJlbmRlclNsaWRlKHNsaWRlc1tpbmRleF0sIGluZGV4KSk7XG4gICAgfSk7XG4gICAgc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oJy5zd2lwZXItc2xpZGUnKS5jc3Mob2Zmc2V0UHJvcCwgYCR7b2Zmc2V0fXB4YCk7XG4gICAgb25SZW5kZXJlZCgpO1xuICB9LFxuICByZW5kZXJTbGlkZShzbGlkZSwgaW5kZXgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMudmlydHVhbDtcbiAgICBpZiAocGFyYW1zLmNhY2hlICYmIHN3aXBlci52aXJ0dWFsLmNhY2hlW2luZGV4XSkge1xuICAgICAgcmV0dXJuIHN3aXBlci52aXJ0dWFsLmNhY2hlW2luZGV4XTtcbiAgICB9XG4gICAgY29uc3QgJHNsaWRlRWwgPSBwYXJhbXMucmVuZGVyU2xpZGVcbiAgICAgID8gJChwYXJhbXMucmVuZGVyU2xpZGUuY2FsbChzd2lwZXIsIHNsaWRlLCBpbmRleCkpXG4gICAgICA6ICQoYDxkaXYgY2xhc3M9XCIke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31cIiBkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7aW5kZXh9XCI+JHtzbGlkZX08L2Rpdj5gKTtcbiAgICBpZiAoISRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykpICRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICAgIGlmIChwYXJhbXMuY2FjaGUpIHN3aXBlci52aXJ0dWFsLmNhY2hlW2luZGV4XSA9ICRzbGlkZUVsO1xuICAgIHJldHVybiAkc2xpZGVFbDtcbiAgfSxcbiAgYXBwZW5kU2xpZGUoc2xpZGVzKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldKSBzd2lwZXIudmlydHVhbC5zbGlkZXMucHVzaChzbGlkZXNbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMucHVzaChzbGlkZXMpO1xuICAgIH1cbiAgICBzd2lwZXIudmlydHVhbC51cGRhdGUodHJ1ZSk7XG4gIH0sXG4gIHByZXBlbmRTbGlkZShzbGlkZXMpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIGxldCBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgMTtcbiAgICBsZXQgbnVtYmVyT2ZOZXdTbGlkZXMgPSAxO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xpZGVzKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSkgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnVuc2hpZnQoc2xpZGVzW2ldKTtcbiAgICAgIH1cbiAgICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyBzbGlkZXMubGVuZ3RoO1xuICAgICAgbnVtYmVyT2ZOZXdTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMudW5zaGlmdChzbGlkZXMpO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICBjb25zdCBjYWNoZSA9IHN3aXBlci52aXJ0dWFsLmNhY2hlO1xuICAgICAgY29uc3QgbmV3Q2FjaGUgPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKGNhY2hlKS5mb3JFYWNoKChjYWNoZWRJbmRleCkgPT4ge1xuICAgICAgICBuZXdDYWNoZVtwYXJzZUludChjYWNoZWRJbmRleCwgMTApICsgbnVtYmVyT2ZOZXdTbGlkZXNdID0gY2FjaGVbY2FjaGVkSW5kZXhdO1xuICAgICAgfSk7XG4gICAgICBzd2lwZXIudmlydHVhbC5jYWNoZSA9IG5ld0NhY2hlO1xuICAgIH1cbiAgICBzd2lwZXIudmlydHVhbC51cGRhdGUodHJ1ZSk7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDApO1xuICB9LFxuICByZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHNsaWRlc0luZGV4ZXMgPT09ICd1bmRlZmluZWQnIHx8IHNsaWRlc0luZGV4ZXMgPT09IG51bGwpIHJldHVybjtcbiAgICBsZXQgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xpZGVzSW5kZXhlcykpIHtcbiAgICAgIGZvciAobGV0IGkgPSBzbGlkZXNJbmRleGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5zcGxpY2Uoc2xpZGVzSW5kZXhlc1tpXSwgMSk7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLnZpcnR1YWwuY2FjaGVbc2xpZGVzSW5kZXhlc1tpXV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNsaWRlc0luZGV4ZXNbaV0gPCBhY3RpdmVJbmRleCkgYWN0aXZlSW5kZXggLT0gMTtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCwgMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5zcGxpY2Uoc2xpZGVzSW5kZXhlcywgMSk7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIudmlydHVhbC5jYWNoZVtzbGlkZXNJbmRleGVzXTtcbiAgICAgIH1cbiAgICAgIGlmIChzbGlkZXNJbmRleGVzIDwgYWN0aXZlSW5kZXgpIGFjdGl2ZUluZGV4IC09IDE7XG4gICAgICBhY3RpdmVJbmRleCA9IE1hdGgubWF4KGFjdGl2ZUluZGV4LCAwKTtcbiAgICB9XG4gICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4LCAwKTtcbiAgfSxcbiAgcmVtb3ZlQWxsU2xpZGVzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzID0gW107XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGUgPSB7fTtcbiAgICB9XG4gICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICAgIHN3aXBlci5zbGlkZVRvKDAsIDApO1xuICB9LFxufTtcblxudmFyIFZpcnR1YWwkMSA9IHtcbiAgbmFtZTogJ3ZpcnR1YWwnLFxuICBwYXJhbXM6IHtcbiAgICB2aXJ0dWFsOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHNsaWRlczogW10sXG4gICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgIHJlbmRlclNsaWRlOiBudWxsLFxuICAgICAgcmVuZGVyRXh0ZXJuYWw6IG51bGwsXG4gICAgICBhZGRTbGlkZXNCZWZvcmU6IDAsXG4gICAgICBhZGRTbGlkZXNBZnRlcjogMCxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICB2aXJ0dWFsOiB7XG4gICAgICAgIHVwZGF0ZTogVmlydHVhbC51cGRhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICBhcHBlbmRTbGlkZTogVmlydHVhbC5hcHBlbmRTbGlkZS5iaW5kKHN3aXBlciksXG4gICAgICAgIHByZXBlbmRTbGlkZTogVmlydHVhbC5wcmVwZW5kU2xpZGUuYmluZChzd2lwZXIpLFxuICAgICAgICByZW1vdmVTbGlkZTogVmlydHVhbC5yZW1vdmVTbGlkZS5iaW5kKHN3aXBlciksXG4gICAgICAgIHJlbW92ZUFsbFNsaWRlczogVmlydHVhbC5yZW1vdmVBbGxTbGlkZXMuYmluZChzd2lwZXIpLFxuICAgICAgICByZW5kZXJTbGlkZTogVmlydHVhbC5yZW5kZXJTbGlkZS5iaW5kKHN3aXBlciksXG4gICAgICAgIHNsaWRlczogc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnNsaWRlcyxcbiAgICAgICAgY2FjaGU6IHt9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfXZpcnR1YWxgKTtcbiAgICAgIGNvbnN0IG92ZXJ3cml0ZVBhcmFtcyA9IHtcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgIH07XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLnBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIub3JpZ2luYWxQYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG5cbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUpIHtcbiAgICAgICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKCk7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IEtleWJvYXJkID0ge1xuICBoYW5kbGUoZXZlbnQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgcnRsVHJhbnNsYXRlOiBydGwgfSA9IHN3aXBlcjtcbiAgICBsZXQgZSA9IGV2ZW50O1xuICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7IC8vIGpxdWVyeSBmaXhcbiAgICBjb25zdCBrYyA9IGUua2V5Q29kZSB8fCBlLmNoYXJDb2RlO1xuICAgIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiAoKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBrYyA9PT0gMzkpIHx8IChzd2lwZXIuaXNWZXJ0aWNhbCgpICYmIGtjID09PSA0MCkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmICgoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIGtjID09PSAzNykgfHwgKHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYga2MgPT09IDM4KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGUuc2hpZnRLZXkgfHwgZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZSAmJiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJykpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmtleWJvYXJkLm9ubHlJblZpZXdwb3J0ICYmIChrYyA9PT0gMzcgfHwga2MgPT09IDM5IHx8IGtjID09PSAzOCB8fCBrYyA9PT0gNDApKSB7XG4gICAgICBsZXQgaW5WaWV3ID0gZmFsc2U7XG4gICAgICAvLyBDaGVjayB0aGF0IHN3aXBlciBzaG91bGQgYmUgaW5zaWRlIG9mIHZpc2libGUgYXJlYSBvZiB3aW5kb3dcbiAgICAgIGlmIChzd2lwZXIuJGVsLnBhcmVudHMoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gKS5sZW5ndGggPiAwICYmIHN3aXBlci4kZWwucGFyZW50cyhgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzfWApLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgY29uc3Qgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIGNvbnN0IHdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgIGNvbnN0IHN3aXBlck9mZnNldCA9IHN3aXBlci4kZWwub2Zmc2V0KCk7XG4gICAgICBpZiAocnRsKSBzd2lwZXJPZmZzZXQubGVmdCAtPSBzd2lwZXIuJGVsWzBdLnNjcm9sbExlZnQ7XG4gICAgICBjb25zdCBzd2lwZXJDb29yZCA9IFtcbiAgICAgICAgW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wXSxcbiAgICAgICAgW3N3aXBlck9mZnNldC5sZWZ0ICsgc3dpcGVyLndpZHRoLCBzd2lwZXJPZmZzZXQudG9wXSxcbiAgICAgICAgW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVyLmhlaWdodF0sXG4gICAgICAgIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlci53aWR0aCwgc3dpcGVyT2Zmc2V0LnRvcCArIHN3aXBlci5oZWlnaHRdLFxuICAgICAgXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyQ29vcmQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgcG9pbnQgPSBzd2lwZXJDb29yZFtpXTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHBvaW50WzBdID49IDAgJiYgcG9pbnRbMF0gPD0gd2luZG93V2lkdGhcbiAgICAgICAgICAmJiBwb2ludFsxXSA+PSAwICYmIHBvaW50WzFdIDw9IHdpbmRvd0hlaWdodFxuICAgICAgICApIHtcbiAgICAgICAgICBpblZpZXcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWluVmlldykgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgaWYgKGtjID09PSAzNyB8fCBrYyA9PT0gMzkpIHtcbiAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoKGtjID09PSAzOSAmJiAhcnRsKSB8fCAoa2MgPT09IDM3ICYmIHJ0bCkpIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgIGlmICgoa2MgPT09IDM3ICYmICFydGwpIHx8IChrYyA9PT0gMzkgJiYgcnRsKSkgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoa2MgPT09IDM4IHx8IGtjID09PSA0MCkge1xuICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChrYyA9PT0gNDApIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgIGlmIChrYyA9PT0gMzgpIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2tleVByZXNzJywga2MpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sXG4gIGVuYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCkgcmV0dXJuO1xuICAgICQoZG9jdW1lbnQpLm9uKCdrZXlkb3duJywgc3dpcGVyLmtleWJvYXJkLmhhbmRsZSk7XG4gICAgc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQgPSB0cnVlO1xuICB9LFxuICBkaXNhYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCkgcmV0dXJuO1xuICAgICQoZG9jdW1lbnQpLm9mZigna2V5ZG93bicsIHN3aXBlci5rZXlib2FyZC5oYW5kbGUpO1xuICAgIHN3aXBlci5rZXlib2FyZC5lbmFibGVkID0gZmFsc2U7XG4gIH0sXG59O1xuXG52YXIgS2V5Ym9hcmQkMSA9IHtcbiAgbmFtZTogJ2tleWJvYXJkJyxcbiAgcGFyYW1zOiB7XG4gICAga2V5Ym9hcmQ6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgb25seUluVmlld3BvcnQ6IHRydWUsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAga2V5Ym9hcmQ6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIGVuYWJsZTogS2V5Ym9hcmQuZW5hYmxlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZGlzYWJsZTogS2V5Ym9hcmQuZGlzYWJsZS5iaW5kKHN3aXBlciksXG4gICAgICAgIGhhbmRsZTogS2V5Ym9hcmQuaGFuZGxlLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5rZXlib2FyZC5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5rZXlib2FyZC5lbmFibGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3koKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5rZXlib2FyZC5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5rZXlib2FyZC5kaXNhYmxlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGlzRXZlbnRTdXBwb3J0ZWQoKSB7XG4gIGNvbnN0IGV2ZW50TmFtZSA9ICdvbndoZWVsJztcbiAgbGV0IGlzU3VwcG9ydGVkID0gZXZlbnROYW1lIGluIGRvY3VtZW50O1xuXG4gIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIGlmICghaXNTdXBwb3J0ZWRcbiAgICAmJiBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuICAgICYmIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmVcbiAgICAvLyBhbHdheXMgcmV0dXJucyB0cnVlIGluIG5ld2VyIGJyb3dzZXJzIGFzIHBlciB0aGUgc3RhbmRhcmQuXG4gICAgLy8gQHNlZSBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWRvbWltcGxlbWVudGF0aW9uLWhhc2ZlYXR1cmVcbiAgICAmJiBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCcnLCAnJykgIT09IHRydWVcbiAgKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3VwcG9ydGVkO1xufVxuY29uc3QgTW91c2V3aGVlbCA9IHtcbiAgbGFzdFNjcm9sbFRpbWU6IFV0aWxzLm5vdygpLFxuICBldmVudDogKGZ1bmN0aW9uIGdldEV2ZW50KCkge1xuICAgIGlmICh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdmaXJlZm94JykgPiAtMSkgcmV0dXJuICdET01Nb3VzZVNjcm9sbCc7XG4gICAgcmV0dXJuIGlzRXZlbnRTdXBwb3J0ZWQoKSA/ICd3aGVlbCcgOiAnbW91c2V3aGVlbCc7XG4gIH0oKSksXG4gIG5vcm1hbGl6ZShlKSB7XG4gICAgLy8gUmVhc29uYWJsZSBkZWZhdWx0c1xuICAgIGNvbnN0IFBJWEVMX1NURVAgPSAxMDtcbiAgICBjb25zdCBMSU5FX0hFSUdIVCA9IDQwO1xuICAgIGNvbnN0IFBBR0VfSEVJR0hUID0gODAwO1xuXG4gICAgbGV0IHNYID0gMDtcbiAgICBsZXQgc1kgPSAwOyAvLyBzcGluWCwgc3BpbllcbiAgICBsZXQgcFggPSAwO1xuICAgIGxldCBwWSA9IDA7IC8vIHBpeGVsWCwgcGl4ZWxZXG5cbiAgICAvLyBMZWdhY3lcbiAgICBpZiAoJ2RldGFpbCcgaW4gZSkge1xuICAgICAgc1kgPSBlLmRldGFpbDtcbiAgICB9XG4gICAgaWYgKCd3aGVlbERlbHRhJyBpbiBlKSB7XG4gICAgICBzWSA9IC1lLndoZWVsRGVsdGEgLyAxMjA7XG4gICAgfVxuICAgIGlmICgnd2hlZWxEZWx0YVknIGluIGUpIHtcbiAgICAgIHNZID0gLWUud2hlZWxEZWx0YVkgLyAxMjA7XG4gICAgfVxuICAgIGlmICgnd2hlZWxEZWx0YVgnIGluIGUpIHtcbiAgICAgIHNYID0gLWUud2hlZWxEZWx0YVggLyAxMjA7XG4gICAgfVxuXG4gICAgLy8gc2lkZSBzY3JvbGxpbmcgb24gRkYgd2l0aCBET01Nb3VzZVNjcm9sbFxuICAgIGlmICgnYXhpcycgaW4gZSAmJiBlLmF4aXMgPT09IGUuSE9SSVpPTlRBTF9BWElTKSB7XG4gICAgICBzWCA9IHNZO1xuICAgICAgc1kgPSAwO1xuICAgIH1cblxuICAgIHBYID0gc1ggKiBQSVhFTF9TVEVQO1xuICAgIHBZID0gc1kgKiBQSVhFTF9TVEVQO1xuXG4gICAgaWYgKCdkZWx0YVknIGluIGUpIHtcbiAgICAgIHBZID0gZS5kZWx0YVk7XG4gICAgfVxuICAgIGlmICgnZGVsdGFYJyBpbiBlKSB7XG4gICAgICBwWCA9IGUuZGVsdGFYO1xuICAgIH1cblxuICAgIGlmICgocFggfHwgcFkpICYmIGUuZGVsdGFNb2RlKSB7XG4gICAgICBpZiAoZS5kZWx0YU1vZGUgPT09IDEpIHsgLy8gZGVsdGEgaW4gTElORSB1bml0c1xuICAgICAgICBwWCAqPSBMSU5FX0hFSUdIVDtcbiAgICAgICAgcFkgKj0gTElORV9IRUlHSFQ7XG4gICAgICB9IGVsc2UgeyAvLyBkZWx0YSBpbiBQQUdFIHVuaXRzXG4gICAgICAgIHBYICo9IFBBR0VfSEVJR0hUO1xuICAgICAgICBwWSAqPSBQQUdFX0hFSUdIVDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGYWxsLWJhY2sgaWYgc3BpbiBjYW5ub3QgYmUgZGV0ZXJtaW5lZFxuICAgIGlmIChwWCAmJiAhc1gpIHtcbiAgICAgIHNYID0gKHBYIDwgMSkgPyAtMSA6IDE7XG4gICAgfVxuICAgIGlmIChwWSAmJiAhc1kpIHtcbiAgICAgIHNZID0gKHBZIDwgMSkgPyAtMSA6IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNwaW5YOiBzWCxcbiAgICAgIHNwaW5ZOiBzWSxcbiAgICAgIHBpeGVsWDogcFgsXG4gICAgICBwaXhlbFk6IHBZLFxuICAgIH07XG4gIH0sXG4gIGhhbmRsZU1vdXNlRW50ZXIoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIubW91c2VFbnRlcmVkID0gdHJ1ZTtcbiAgfSxcbiAgaGFuZGxlTW91c2VMZWF2ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5tb3VzZUVudGVyZWQgPSBmYWxzZTtcbiAgfSxcbiAgaGFuZGxlKGV2ZW50KSB7XG4gICAgbGV0IGUgPSBldmVudDtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubW91c2V3aGVlbDtcblxuICAgIGlmICghc3dpcGVyLm1vdXNlRW50ZXJlZCAmJiAhcGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSByZXR1cm4gdHJ1ZTtcblxuICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7IC8vIGpxdWVyeSBmaXhcbiAgICBsZXQgZGVsdGEgPSAwO1xuICAgIGNvbnN0IHJ0bEZhY3RvciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7XG5cbiAgICBjb25zdCBkYXRhID0gTW91c2V3aGVlbC5ub3JtYWxpemUoZSk7XG5cbiAgICBpZiAocGFyYW1zLmZvcmNlVG9BeGlzKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhkYXRhLnBpeGVsWCkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWSkpIGRlbHRhID0gZGF0YS5waXhlbFggKiBydGxGYWN0b3I7XG4gICAgICAgIGVsc2UgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGRhdGEucGl4ZWxZKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxYKSkgZGVsdGEgPSBkYXRhLnBpeGVsWTtcbiAgICAgIGVsc2UgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbHRhID0gTWF0aC5hYnMoZGF0YS5waXhlbFgpID4gTWF0aC5hYnMoZGF0YS5waXhlbFkpID8gLWRhdGEucGl4ZWxYICogcnRsRmFjdG9yIDogLWRhdGEucGl4ZWxZO1xuICAgIH1cblxuICAgIGlmIChkZWx0YSA9PT0gMCkgcmV0dXJuIHRydWU7XG5cbiAgICBpZiAocGFyYW1zLmludmVydCkgZGVsdGEgPSAtZGVsdGE7XG5cbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAgIGlmIChVdGlscy5ub3coKSAtIHN3aXBlci5tb3VzZXdoZWVsLmxhc3RTY3JvbGxUaW1lID4gNjApIHtcbiAgICAgICAgaWYgKGRlbHRhIDwgMCkge1xuICAgICAgICAgIGlmICgoIXN3aXBlci5pc0VuZCB8fCBzd2lwZXIucGFyYW1zLmxvb3ApICYmICFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgnc2Nyb2xsJywgZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMucmVsZWFzZU9uRWRnZXMpIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKCghc3dpcGVyLmlzQmVnaW5uaW5nIHx8IHN3aXBlci5wYXJhbXMubG9vcCkgJiYgIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3Njcm9sbCcsIGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHBhcmFtcy5yZWxlYXNlT25FZGdlcykgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBzd2lwZXIubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA9IChuZXcgd2luZG93LkRhdGUoKSkuZ2V0VGltZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGcmVlbW9kZSBvciBzY3JvbGxDb250YWluZXI6XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICB9XG4gICAgICBsZXQgcG9zaXRpb24gPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCkgKyAoZGVsdGEgKiBwYXJhbXMuc2Vuc2l0aXZpdHkpO1xuICAgICAgY29uc3Qgd2FzQmVnaW5uaW5nID0gc3dpcGVyLmlzQmVnaW5uaW5nO1xuICAgICAgY29uc3Qgd2FzRW5kID0gc3dpcGVyLmlzRW5kO1xuXG4gICAgICBpZiAocG9zaXRpb24gPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSBwb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgIGlmIChwb3NpdGlvbiA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHBvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuXG4gICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUocG9zaXRpb24pO1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG5cbiAgICAgIGlmICgoIXdhc0JlZ2lubmluZyAmJiBzd2lwZXIuaXNCZWdpbm5pbmcpIHx8ICghd2FzRW5kICYmIHN3aXBlci5pc0VuZCkpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5tb3VzZXdoZWVsLnRpbWVvdXQpO1xuICAgICAgICBzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0ID0gVXRpbHMubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgICAgICB9LCAzMDApO1xuICAgICAgfVxuICAgICAgLy8gRW1pdCBldmVudFxuICAgICAgc3dpcGVyLmVtaXQoJ3Njcm9sbCcsIGUpO1xuXG4gICAgICAvLyBTdG9wIGF1dG9wbGF5XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheSAmJiBzd2lwZXIucGFyYW1zLmF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb24pIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAvLyBSZXR1cm4gcGFnZSBzY3JvbGwgb24gZWRnZSBwb3NpdGlvbnNcbiAgICAgIGlmIChwb3NpdGlvbiA9PT0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIHx8IHBvc2l0aW9uID09PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBlbmFibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIU1vdXNld2hlZWwuZXZlbnQpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCkgcmV0dXJuIGZhbHNlO1xuICAgIGxldCB0YXJnZXQgPSBzd2lwZXIuJGVsO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2VkICE9PSAnY29udGFpbmVyJykge1xuICAgICAgdGFyZ2V0ID0gJChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2VkKTtcbiAgICB9XG4gICAgdGFyZ2V0Lm9uKCdtb3VzZWVudGVyJywgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlTW91c2VFbnRlcik7XG4gICAgdGFyZ2V0Lm9uKCdtb3VzZWxlYXZlJywgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlTW91c2VMZWF2ZSk7XG4gICAgdGFyZ2V0Lm9uKE1vdXNld2hlZWwuZXZlbnQsIHN3aXBlci5tb3VzZXdoZWVsLmhhbmRsZSk7XG4gICAgc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCA9IHRydWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGRpc2FibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIU1vdXNld2hlZWwuZXZlbnQpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIXN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHJldHVybiBmYWxzZTtcbiAgICBsZXQgdGFyZ2V0ID0gc3dpcGVyLiRlbDtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdlZCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgIHRhcmdldCA9ICQoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdlZCk7XG4gICAgfVxuICAgIHRhcmdldC5vZmYoTW91c2V3aGVlbC5ldmVudCwgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlKTtcbiAgICBzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG59O1xuXG52YXIgTW91c2V3aGVlbCQxID0ge1xuICBuYW1lOiAnbW91c2V3aGVlbCcsXG4gIHBhcmFtczoge1xuICAgIG1vdXNld2hlZWw6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgcmVsZWFzZU9uRWRnZXM6IGZhbHNlLFxuICAgICAgaW52ZXJ0OiBmYWxzZSxcbiAgICAgIGZvcmNlVG9BeGlzOiBmYWxzZSxcbiAgICAgIHNlbnNpdGl2aXR5OiAxLFxuICAgICAgZXZlbnRzVGFyZ2VkOiAnY29udGFpbmVyJyxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBtb3VzZXdoZWVsOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICBlbmFibGU6IE1vdXNld2hlZWwuZW5hYmxlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZGlzYWJsZTogTW91c2V3aGVlbC5kaXNhYmxlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgaGFuZGxlOiBNb3VzZXdoZWVsLmhhbmRsZS5iaW5kKHN3aXBlciksXG4gICAgICAgIGhhbmRsZU1vdXNlRW50ZXI6IE1vdXNld2hlZWwuaGFuZGxlTW91c2VFbnRlci5iaW5kKHN3aXBlciksXG4gICAgICAgIGhhbmRsZU1vdXNlTGVhdmU6IE1vdXNld2hlZWwuaGFuZGxlTW91c2VMZWF2ZS5iaW5kKHN3aXBlciksXG4gICAgICAgIGxhc3RTY3JvbGxUaW1lOiBVdGlscy5ub3coKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmVuYWJsZWQpIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZSgpO1xuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCkgc3dpcGVyLm1vdXNld2hlZWwuZGlzYWJsZSgpO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBOYXZpZ2F0aW9uID0ge1xuICB1cGRhdGUoKSB7XG4gICAgLy8gVXBkYXRlIE5hdmlnYXRpb24gQnV0dG9uc1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgJG5leHRFbCwgJHByZXZFbCB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG5cbiAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgJHByZXZFbC5hZGRDbGFzcyhwYXJhbXMuZGlzYWJsZWRDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkcHJldkVsLnJlbW92ZUNsYXNzKHBhcmFtcy5kaXNhYmxlZENsYXNzKTtcbiAgICAgIH1cbiAgICAgICRwcmV2RWxbc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICB9XG4gICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgICRuZXh0RWwuYWRkQ2xhc3MocGFyYW1zLmRpc2FibGVkQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJG5leHRFbC5yZW1vdmVDbGFzcyhwYXJhbXMuZGlzYWJsZWRDbGFzcyk7XG4gICAgICB9XG4gICAgICAkbmV4dEVsW3N3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgfVxuICB9LFxuICBvblByZXZDbGljayhlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICB9LFxuICBvbk5leHRDbGljayhlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICB9LFxuICBpbml0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgIGlmICghKHBhcmFtcy5uZXh0RWwgfHwgcGFyYW1zLnByZXZFbCkpIHJldHVybjtcblxuICAgIGxldCAkbmV4dEVsO1xuICAgIGxldCAkcHJldkVsO1xuICAgIGlmIChwYXJhbXMubmV4dEVsKSB7XG4gICAgICAkbmV4dEVsID0gJChwYXJhbXMubmV4dEVsKTtcbiAgICAgIGlmIChcbiAgICAgICAgc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50c1xuICAgICAgICAmJiB0eXBlb2YgcGFyYW1zLm5leHRFbCA9PT0gJ3N0cmluZydcbiAgICAgICAgJiYgJG5leHRFbC5sZW5ndGggPiAxXG4gICAgICAgICYmIHN3aXBlci4kZWwuZmluZChwYXJhbXMubmV4dEVsKS5sZW5ndGggPT09IDFcbiAgICAgICkge1xuICAgICAgICAkbmV4dEVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5uZXh0RWwpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnByZXZFbCkge1xuICAgICAgJHByZXZFbCA9ICQocGFyYW1zLnByZXZFbCk7XG4gICAgICBpZiAoXG4gICAgICAgIHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHNcbiAgICAgICAgJiYgdHlwZW9mIHBhcmFtcy5wcmV2RWwgPT09ICdzdHJpbmcnXG4gICAgICAgICYmICRwcmV2RWwubGVuZ3RoID4gMVxuICAgICAgICAmJiBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLnByZXZFbCkubGVuZ3RoID09PSAxXG4gICAgICApIHtcbiAgICAgICAgJHByZXZFbCA9IHN3aXBlci4kZWwuZmluZChwYXJhbXMucHJldkVsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCA+IDApIHtcbiAgICAgICRuZXh0RWwub24oJ2NsaWNrJywgc3dpcGVyLm5hdmlnYXRpb24ub25OZXh0Q2xpY2spO1xuICAgIH1cbiAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCA+IDApIHtcbiAgICAgICRwcmV2RWwub24oJ2NsaWNrJywgc3dpcGVyLm5hdmlnYXRpb24ub25QcmV2Q2xpY2spO1xuICAgIH1cblxuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgICAgJG5leHRFbCxcbiAgICAgIG5leHRFbDogJG5leHRFbCAmJiAkbmV4dEVsWzBdLFxuICAgICAgJHByZXZFbCxcbiAgICAgIHByZXZFbDogJHByZXZFbCAmJiAkcHJldkVsWzBdLFxuICAgIH0pO1xuICB9LFxuICBkZXN0cm95KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyAkbmV4dEVsLCAkcHJldkVsIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCkge1xuICAgICAgJG5leHRFbC5vZmYoJ2NsaWNrJywgc3dpcGVyLm5hdmlnYXRpb24ub25OZXh0Q2xpY2spO1xuICAgICAgJG5leHRFbC5yZW1vdmVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcyk7XG4gICAgfVxuICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoKSB7XG4gICAgICAkcHJldkVsLm9mZignY2xpY2snLCBzd2lwZXIubmF2aWdhdGlvbi5vblByZXZDbGljayk7XG4gICAgICAkcHJldkVsLnJlbW92ZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzKTtcbiAgICB9XG4gIH0sXG59O1xuXG52YXIgTmF2aWdhdGlvbiQxID0ge1xuICBuYW1lOiAnbmF2aWdhdGlvbicsXG4gIHBhcmFtczoge1xuICAgIG5hdmlnYXRpb246IHtcbiAgICAgIG5leHRFbDogbnVsbCxcbiAgICAgIHByZXZFbDogbnVsbCxcblxuICAgICAgaGlkZU9uQ2xpY2s6IGZhbHNlLFxuICAgICAgZGlzYWJsZWRDbGFzczogJ3N3aXBlci1idXR0b24tZGlzYWJsZWQnLFxuICAgICAgaGlkZGVuQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWhpZGRlbicsXG4gICAgICBsb2NrQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWxvY2snLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIG5hdmlnYXRpb246IHtcbiAgICAgICAgaW5pdDogTmF2aWdhdGlvbi5pbml0LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgdXBkYXRlOiBOYXZpZ2F0aW9uLnVwZGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgIGRlc3Ryb3k6IE5hdmlnYXRpb24uZGVzdHJveS5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uTmV4dENsaWNrOiBOYXZpZ2F0aW9uLm9uTmV4dENsaWNrLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb25QcmV2Q2xpY2s6IE5hdmlnYXRpb24ub25QcmV2Q2xpY2suYmluZChzd2lwZXIpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLmluaXQoKTtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgdG9FZGdlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgZnJvbUVkZ2UoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24udXBkYXRlKCk7XG4gICAgfSxcbiAgICBkZXN0cm95KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIGNsaWNrKGUpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBjb25zdCB7ICRuZXh0RWwsICRwcmV2RWwgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgICAgaWYgKFxuICAgICAgICBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZU9uQ2xpY2tcbiAgICAgICAgJiYgISQoZS50YXJnZXQpLmlzKCRwcmV2RWwpXG4gICAgICAgICYmICEkKGUudGFyZ2V0KS5pcygkbmV4dEVsKVxuICAgICAgKSB7XG4gICAgICAgIGxldCBpc0hpZGRlbjtcbiAgICAgICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICAgICBpc0hpZGRlbiA9ICRuZXh0RWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgfSBlbHNlIGlmICgkcHJldkVsKSB7XG4gICAgICAgICAgaXNIaWRkZW4gPSAkcHJldkVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ25hdmlnYXRpb25TaG93Jywgc3dpcGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnbmF2aWdhdGlvbkhpZGUnLCBzd2lwZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAgICAgJG5leHRFbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkcHJldkVsKSB7XG4gICAgICAgICAgJHByZXZFbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IFBhZ2luYXRpb24gPSB7XG4gIHVwZGF0ZSgpIHtcbiAgICAvLyBSZW5kZXIgfHwgVXBkYXRlIFBhZ2luYXRpb24gYnVsbGV0cy9pdGVtc1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcnRsID0gc3dpcGVyLnJ0bDtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKCFwYXJhbXMuZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi4kZWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIGNvbnN0ICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDtcbiAgICAvLyBDdXJyZW50L1RvdGFsXG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgY29uc3QgdG90YWwgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwoKHNsaWRlc0xlbmd0aCAtIChzd2lwZXIubG9vcGVkU2xpZGVzICogMikpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIGN1cnJlbnQgPSBNYXRoLmNlaWwoKHN3aXBlci5hY3RpdmVJbmRleCAtIHN3aXBlci5sb29wZWRTbGlkZXMpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgICBpZiAoY3VycmVudCA+IHNsaWRlc0xlbmd0aCAtIDEgLSAoc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpKSB7XG4gICAgICAgIGN1cnJlbnQgLT0gKHNsaWRlc0xlbmd0aCAtIChzd2lwZXIubG9vcGVkU2xpZGVzICogMikpO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnQgPiB0b3RhbCAtIDEpIGN1cnJlbnQgLT0gdG90YWw7XG4gICAgICBpZiAoY3VycmVudCA8IDAgJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uVHlwZSAhPT0gJ2J1bGxldHMnKSBjdXJyZW50ID0gdG90YWwgKyBjdXJyZW50O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjdXJyZW50ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudCA9IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwO1xuICAgIH1cbiAgICAvLyBUeXBlc1xuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBidWxsZXRzID0gc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cztcbiAgICAgIGxldCBmaXJzdEluZGV4O1xuICAgICAgbGV0IGxhc3RJbmRleDtcbiAgICAgIGxldCBtaWRJbmRleDtcbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSA9IGJ1bGxldHMuZXEoMClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ291dGVyV2lkdGgnIDogJ291dGVySGVpZ2h0J10odHJ1ZSk7XG4gICAgICAgICRlbC5jc3Moc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnLCBgJHtzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplICogKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgKyA0KX1weGApO1xuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA+IDEgJiYgc3dpcGVyLnByZXZpb3VzSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCArPSAoY3VycmVudCAtIHN3aXBlci5wcmV2aW91c0luZGV4KTtcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID4gKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxKSkge1xuICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDE7XG4gICAgICAgICAgfSBlbHNlIGlmIChzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmaXJzdEluZGV4ID0gY3VycmVudCAtIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleDtcbiAgICAgICAgbGFzdEluZGV4ID0gZmlyc3RJbmRleCArIChNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cykgLSAxKTtcbiAgICAgICAgbWlkSW5kZXggPSAobGFzdEluZGV4ICsgZmlyc3RJbmRleCkgLyAyO1xuICAgICAgfVxuICAgICAgYnVsbGV0cy5yZW1vdmVDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9ICR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1uZXh0ICR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1uZXh0LW5leHQgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LXByZXYgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LXByZXYtcHJldiAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmApO1xuICAgICAgaWYgKCRlbC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGJ1bGxldHMuZWFjaCgoaW5kZXgsIGJ1bGxldCkgPT4ge1xuICAgICAgICAgIGNvbnN0ICRidWxsZXQgPSAkKGJ1bGxldCk7XG4gICAgICAgICAgY29uc3QgYnVsbGV0SW5kZXggPSAkYnVsbGV0LmluZGV4KCk7XG4gICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAkYnVsbGV0LmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA+PSBmaXJzdEluZGV4ICYmIGJ1bGxldEluZGV4IDw9IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAkYnVsbGV0LmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBmaXJzdEluZGV4KSB7XG4gICAgICAgICAgICAgICRidWxsZXRcbiAgICAgICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tcHJldmApXG4gICAgICAgICAgICAgICAgLnByZXYoKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LXByZXYtcHJldmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgJGJ1bGxldFxuICAgICAgICAgICAgICAgIC5uZXh0KClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1uZXh0YClcbiAgICAgICAgICAgICAgICAubmV4dCgpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbmV4dC1uZXh0YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0ICRidWxsZXQgPSBidWxsZXRzLmVxKGN1cnJlbnQpO1xuICAgICAgICAkYnVsbGV0LmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICBjb25zdCAkZmlyc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzLmVxKGZpcnN0SW5kZXgpO1xuICAgICAgICAgIGNvbnN0ICRsYXN0RGlzcGxheWVkQnVsbGV0ID0gYnVsbGV0cy5lcShsYXN0SW5kZXgpO1xuICAgICAgICAgIGZvciAobGV0IGkgPSBmaXJzdEluZGV4OyBpIDw9IGxhc3RJbmRleDsgaSArPSAxKSB7XG4gICAgICAgICAgICBidWxsZXRzLmVxKGkpLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICAkZmlyc3REaXNwbGF5ZWRCdWxsZXRcbiAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgIC5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LXByZXZgKVxuICAgICAgICAgICAgLnByZXYoKVxuICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tcHJldi1wcmV2YCk7XG4gICAgICAgICAgJGxhc3REaXNwbGF5ZWRCdWxsZXRcbiAgICAgICAgICAgIC5uZXh0KClcbiAgICAgICAgICAgIC5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW5leHRgKVxuICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbmV4dC1uZXh0YCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgY29uc3QgZHluYW1pY0J1bGxldHNMZW5ndGggPSBNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpO1xuICAgICAgICBjb25zdCBidWxsZXRzT2Zmc2V0ID0gKCgoc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSAqIGR5bmFtaWNCdWxsZXRzTGVuZ3RoKSAtIChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplKSkgLyAyKSAtIChtaWRJbmRleCAqIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUpO1xuICAgICAgICBjb25zdCBvZmZzZXRQcm9wID0gcnRsID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgYnVsbGV0cy5jc3Moc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gb2Zmc2V0UHJvcCA6ICd0b3AnLCBgJHtidWxsZXRzT2Zmc2V0fXB4YCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgJGVsLmZpbmQoYC4ke3BhcmFtcy5jdXJyZW50Q2xhc3N9YCkudGV4dChwYXJhbXMuZm9ybWF0RnJhY3Rpb25DdXJyZW50KGN1cnJlbnQgKyAxKSk7XG4gICAgICAkZWwuZmluZChgLiR7cGFyYW1zLnRvdGFsQ2xhc3N9YCkudGV4dChwYXJhbXMuZm9ybWF0RnJhY3Rpb25Ub3RhbCh0b3RhbCkpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIGxldCBwcm9ncmVzc2JhckRpcmVjdGlvbjtcbiAgICAgIGlmIChwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdob3Jpem9udGFsJyA6ICd2ZXJ0aWNhbCc7XG4gICAgICB9XG4gICAgICBjb25zdCBzY2FsZSA9IChjdXJyZW50ICsgMSkgLyB0b3RhbDtcbiAgICAgIGxldCBzY2FsZVggPSAxO1xuICAgICAgbGV0IHNjYWxlWSA9IDE7XG4gICAgICBpZiAocHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICBzY2FsZVggPSBzY2FsZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjYWxlWSA9IHNjYWxlO1xuICAgICAgfVxuICAgICAgJGVsLmZpbmQoYC4ke3BhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzc31gKS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoJHtzY2FsZVh9KSBzY2FsZVkoJHtzY2FsZVl9KWApLnRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2N1c3RvbScgJiYgcGFyYW1zLnJlbmRlckN1c3RvbSkge1xuICAgICAgJGVsLmh0bWwocGFyYW1zLnJlbmRlckN1c3RvbShzd2lwZXIsIGN1cnJlbnQgKyAxLCB0b3RhbCkpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzd2lwZXIsICRlbFswXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uVXBkYXRlJywgc3dpcGVyLCAkZWxbMF0pO1xuICAgIH1cbiAgICAkZWxbc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgfSxcbiAgcmVuZGVyKCkge1xuICAgIC8vIFJlbmRlciBDb250YWluZXJcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fCBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG5cbiAgICBjb25zdCAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7XG4gICAgbGV0IHBhZ2luYXRpb25IVE1MID0gJyc7XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycpIHtcbiAgICAgIGNvbnN0IG51bWJlck9mQnVsbGV0cyA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gKHN3aXBlci5sb29wZWRTbGlkZXMgKiAyKSkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mQnVsbGV0czsgaSArPSAxKSB7XG4gICAgICAgIGlmIChwYXJhbXMucmVuZGVyQnVsbGV0KSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gcGFyYW1zLnJlbmRlckJ1bGxldC5jYWxsKHN3aXBlciwgaSwgcGFyYW1zLmJ1bGxldENsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBgPCR7cGFyYW1zLmJ1bGxldEVsZW1lbnR9IGNsYXNzPVwiJHtwYXJhbXMuYnVsbGV0Q2xhc3N9XCI+PC8ke3BhcmFtcy5idWxsZXRFbGVtZW50fT5gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAkZWwuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzID0gJGVsLmZpbmQoYC4ke3BhcmFtcy5idWxsZXRDbGFzc31gKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlckZyYWN0aW9uKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlckZyYWN0aW9uLmNhbGwoc3dpcGVyLCBwYXJhbXMuY3VycmVudENsYXNzLCBwYXJhbXMudG90YWxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLmN1cnJlbnRDbGFzc31cIj48L3NwYW4+YFxuICAgICAgICArICcgLyAnXG4gICAgICAgICsgYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMudG90YWxDbGFzc31cIj48L3NwYW4+YDtcbiAgICAgIH1cbiAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlclByb2dyZXNzYmFyKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlclByb2dyZXNzYmFyLmNhbGwoc3dpcGVyLCBwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzc31cIj48L3NwYW4+YDtcbiAgICAgIH1cbiAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlICE9PSAnY3VzdG9tJykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzd2lwZXIucGFnaW5hdGlvbi4kZWxbMF0pO1xuICAgIH1cbiAgfSxcbiAgaW5pdCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCkgcmV0dXJuO1xuXG4gICAgbGV0ICRlbCA9ICQocGFyYW1zLmVsKTtcbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgaWYgKFxuICAgICAgc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50c1xuICAgICAgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZydcbiAgICAgICYmICRlbC5sZW5ndGggPiAxXG4gICAgICAmJiBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLmVsKS5sZW5ndGggPT09IDFcbiAgICApIHtcbiAgICAgICRlbCA9IHN3aXBlci4kZWwuZmluZChwYXJhbXMuZWwpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMuY2xpY2thYmxlQ2xhc3MpO1xuICAgIH1cblxuICAgICRlbC5hZGRDbGFzcyhwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgJGVsLmFkZENsYXNzKGAke3BhcmFtcy5tb2RpZmllckNsYXNzfSR7cGFyYW1zLnR5cGV9LWR5bmFtaWNgKTtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA8IDEpIHtcbiAgICAgICAgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA9IDE7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJyAmJiBwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgJGVsLmFkZENsYXNzKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAkZWwub24oJ2NsaWNrJywgYC4ke3BhcmFtcy5idWxsZXRDbGFzc31gLCBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBsZXQgaW5kZXggPSAkKHRoaXMpLmluZGV4KCkgKiBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSBpbmRleCArPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLnBhZ2luYXRpb24sIHtcbiAgICAgICRlbCxcbiAgICAgIGVsOiAkZWxbMF0sXG4gICAgfSk7XG4gIH0sXG4gIGRlc3Ryb3koKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKCFwYXJhbXMuZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi4kZWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGNvbnN0ICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDtcblxuICAgICRlbC5yZW1vdmVDbGFzcyhwYXJhbXMuaGlkZGVuQ2xhc3MpO1xuICAgICRlbC5yZW1vdmVDbGFzcyhwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cykgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5yZW1vdmVDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAkZWwub2ZmKCdjbGljaycsIGAuJHtwYXJhbXMuYnVsbGV0Q2xhc3N9YCk7XG4gICAgfVxuICB9LFxufTtcblxudmFyIFBhZ2luYXRpb24kMSA9IHtcbiAgbmFtZTogJ3BhZ2luYXRpb24nLFxuICBwYXJhbXM6IHtcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogbnVsbCxcbiAgICAgIGJ1bGxldEVsZW1lbnQ6ICdzcGFuJyxcbiAgICAgIGNsaWNrYWJsZTogZmFsc2UsXG4gICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICByZW5kZXJCdWxsZXQ6IG51bGwsXG4gICAgICByZW5kZXJQcm9ncmVzc2JhcjogbnVsbCxcbiAgICAgIHJlbmRlckZyYWN0aW9uOiBudWxsLFxuICAgICAgcmVuZGVyQ3VzdG9tOiBudWxsLFxuICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZTogZmFsc2UsXG4gICAgICB0eXBlOiAnYnVsbGV0cycsIC8vICdidWxsZXRzJyBvciAncHJvZ3Jlc3NiYXInIG9yICdmcmFjdGlvbicgb3IgJ2N1c3RvbSdcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiBmYWxzZSxcbiAgICAgIGR5bmFtaWNNYWluQnVsbGV0czogMSxcbiAgICAgIGZvcm1hdEZyYWN0aW9uQ3VycmVudDogbnVtYmVyID0+IG51bWJlcixcbiAgICAgIGZvcm1hdEZyYWN0aW9uVG90YWw6IG51bWJlciA9PiBudW1iZXIsXG4gICAgICBidWxsZXRDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWJ1bGxldCcsXG4gICAgICBidWxsZXRBY3RpdmVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1hY3RpdmUnLFxuICAgICAgbW9kaWZpZXJDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLScsIC8vIE5FV1xuICAgICAgY3VycmVudENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tY3VycmVudCcsXG4gICAgICB0b3RhbENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tdG90YWwnLFxuICAgICAgaGlkZGVuQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1oaWRkZW4nLFxuICAgICAgcHJvZ3Jlc3NiYXJGaWxsQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci1maWxsJyxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLW9wcG9zaXRlJyxcbiAgICAgIGNsaWNrYWJsZUNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tY2xpY2thYmxlJywgLy8gTkVXXG4gICAgICBsb2NrQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1sb2NrJyxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgIGluaXQ6IFBhZ2luYXRpb24uaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgIHJlbmRlcjogUGFnaW5hdGlvbi5yZW5kZXIuYmluZChzd2lwZXIpLFxuICAgICAgICB1cGRhdGU6IFBhZ2luYXRpb24udXBkYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZGVzdHJveTogUGFnaW5hdGlvbi5kZXN0cm95LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZHluYW1pY0J1bGxldEluZGV4OiAwLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmluaXQoKTtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgfSxcbiAgICBhY3RpdmVJbmRleENoYW5nZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3dpcGVyLnNuYXBJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbmFwSW5kZXhDaGFuZ2UoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGlkZXNMZW5ndGhDaGFuZ2UoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbmFwR3JpZExlbmd0aENoYW5nZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIGNsaWNrKGUpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoXG4gICAgICAgIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbFxuICAgICAgICAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZU9uQ2xpY2tcbiAgICAgICAgJiYgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA+IDBcbiAgICAgICAgJiYgISQoZS50YXJnZXQpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcylcbiAgICAgICkge1xuICAgICAgICBjb25zdCBpc0hpZGRlbiA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblNob3cnLCBzd2lwZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uSGlkZScsIHN3aXBlcik7XG4gICAgICAgIH1cbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLnRvZ2dsZUNsYXNzKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IFNjcm9sbGJhciA9IHtcbiAgc2V0VHJhbnNsYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgc2Nyb2xsYmFyLCBydGxUcmFuc2xhdGU6IHJ0bCwgcHJvZ3Jlc3MgfSA9IHN3aXBlcjtcbiAgICBjb25zdCB7XG4gICAgICBkcmFnU2l6ZSwgdHJhY2tTaXplLCAkZHJhZ0VsLCAkZWwsXG4gICAgfSA9IHNjcm9sbGJhcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcblxuICAgIGxldCBuZXdTaXplID0gZHJhZ1NpemU7XG4gICAgbGV0IG5ld1BvcyA9ICh0cmFja1NpemUgLSBkcmFnU2l6ZSkgKiBwcm9ncmVzcztcbiAgICBpZiAocnRsKSB7XG4gICAgICBuZXdQb3MgPSAtbmV3UG9zO1xuICAgICAgaWYgKG5ld1BvcyA+IDApIHtcbiAgICAgICAgbmV3U2l6ZSA9IGRyYWdTaXplIC0gbmV3UG9zO1xuICAgICAgICBuZXdQb3MgPSAwO1xuICAgICAgfSBlbHNlIGlmICgtbmV3UG9zICsgZHJhZ1NpemUgPiB0cmFja1NpemUpIHtcbiAgICAgICAgbmV3U2l6ZSA9IHRyYWNrU2l6ZSArIG5ld1BvcztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5ld1BvcyA8IDApIHtcbiAgICAgIG5ld1NpemUgPSBkcmFnU2l6ZSArIG5ld1BvcztcbiAgICAgIG5ld1BvcyA9IDA7XG4gICAgfSBlbHNlIGlmIChuZXdQb3MgKyBkcmFnU2l6ZSA+IHRyYWNrU2l6ZSkge1xuICAgICAgbmV3U2l6ZSA9IHRyYWNrU2l6ZSAtIG5ld1BvcztcbiAgICB9XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgaWYgKFN1cHBvcnQudHJhbnNmb3JtczNkKSB7XG4gICAgICAgICRkcmFnRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke25ld1Bvc31weCwgMCwgMClgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRkcmFnRWwudHJhbnNmb3JtKGB0cmFuc2xhdGVYKCR7bmV3UG9zfXB4KWApO1xuICAgICAgfVxuICAgICAgJGRyYWdFbFswXS5zdHlsZS53aWR0aCA9IGAke25ld1NpemV9cHhgO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoU3VwcG9ydC50cmFuc2Zvcm1zM2QpIHtcbiAgICAgICAgJGRyYWdFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDBweCwgJHtuZXdQb3N9cHgsIDApYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZHJhZ0VsLnRyYW5zZm9ybShgdHJhbnNsYXRlWSgke25ld1Bvc31weClgKTtcbiAgICAgIH1cbiAgICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gYCR7bmV3U2l6ZX1weGA7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5zY3JvbGxiYXIudGltZW91dCk7XG4gICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICAkZWwudHJhbnNpdGlvbig0MDApO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgc3dpcGVyLnNjcm9sbGJhci4kZHJhZ0VsLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICB9LFxuICB1cGRhdGVTaXplKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgeyBzY3JvbGxiYXIgfSA9IHN3aXBlcjtcbiAgICBjb25zdCB7ICRkcmFnRWwsICRlbCB9ID0gc2Nyb2xsYmFyO1xuXG4gICAgJGRyYWdFbFswXS5zdHlsZS53aWR0aCA9ICcnO1xuICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgY29uc3QgdHJhY2tTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJGVsWzBdLm9mZnNldFdpZHRoIDogJGVsWzBdLm9mZnNldEhlaWdodDtcblxuICAgIGNvbnN0IGRpdmlkZXIgPSBzd2lwZXIuc2l6ZSAvIHN3aXBlci52aXJ0dWFsU2l6ZTtcbiAgICBjb25zdCBtb3ZlRGl2aWRlciA9IGRpdmlkZXIgKiAodHJhY2tTaXplIC8gc3dpcGVyLnNpemUpO1xuICAgIGxldCBkcmFnU2l6ZTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ1NpemUgPT09ICdhdXRvJykge1xuICAgICAgZHJhZ1NpemUgPSB0cmFja1NpemUgKiBkaXZpZGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBkcmFnU2l6ZSA9IHBhcnNlSW50KHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdTaXplLCAxMCk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgJGRyYWdFbFswXS5zdHlsZS53aWR0aCA9IGAke2RyYWdTaXplfXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgJGRyYWdFbFswXS5zdHlsZS5oZWlnaHQgPSBgJHtkcmFnU2l6ZX1weGA7XG4gICAgfVxuXG4gICAgaWYgKGRpdmlkZXIgPj0gMSkge1xuICAgICAgJGVsWzBdLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgICRlbFswXS5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5oaWRlKSB7XG4gICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgfVxuICAgIFV0aWxzLmV4dGVuZChzY3JvbGxiYXIsIHtcbiAgICAgIHRyYWNrU2l6ZSxcbiAgICAgIGRpdmlkZXIsXG4gICAgICBtb3ZlRGl2aWRlcixcbiAgICAgIGRyYWdTaXplLFxuICAgIH0pO1xuICAgIHNjcm9sbGJhci4kZWxbc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5sb2NrQ2xhc3MpO1xuICB9LFxuICBzZXREcmFnUG9zaXRpb24oZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyBzY3JvbGxiYXIsIHJ0bFRyYW5zbGF0ZTogcnRsIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgeyAkZWwsIGRyYWdTaXplLCB0cmFja1NpemUgfSA9IHNjcm9sbGJhcjtcblxuICAgIGxldCBwb2ludGVyUG9zaXRpb247XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgcG9pbnRlclBvc2l0aW9uID0gKChlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnKSA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVggfHwgZS5jbGllbnRYKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnRlclBvc2l0aW9uID0gKChlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnKSA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVkgfHwgZS5jbGllbnRZKTtcbiAgICB9XG4gICAgbGV0IHBvc2l0aW9uUmF0aW87XG4gICAgcG9zaXRpb25SYXRpbyA9ICgocG9pbnRlclBvc2l0aW9uKSAtICRlbC5vZmZzZXQoKVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJ10gLSAoZHJhZ1NpemUgLyAyKSkgLyAodHJhY2tTaXplIC0gZHJhZ1NpemUpO1xuICAgIHBvc2l0aW9uUmF0aW8gPSBNYXRoLm1heChNYXRoLm1pbihwb3NpdGlvblJhdGlvLCAxKSwgMCk7XG4gICAgaWYgKHJ0bCkge1xuICAgICAgcG9zaXRpb25SYXRpbyA9IDEgLSBwb3NpdGlvblJhdGlvO1xuICAgIH1cblxuICAgIGNvbnN0IHBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgKChzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpICogcG9zaXRpb25SYXRpbyk7XG5cbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MocG9zaXRpb24pO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUocG9zaXRpb24pO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIH0sXG4gIG9uRHJhZ1N0YXJ0KGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIGNvbnN0IHsgc2Nyb2xsYmFyLCAkd3JhcHBlckVsIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgeyAkZWwsICRkcmFnRWwgfSA9IHNjcm9sbGJhcjtcbiAgICBzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCA9IHRydWU7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAkd3JhcHBlckVsLnRyYW5zaXRpb24oMTAwKTtcbiAgICAkZHJhZ0VsLnRyYW5zaXRpb24oMTAwKTtcbiAgICBzY3JvbGxiYXIuc2V0RHJhZ1Bvc2l0aW9uKGUpO1xuXG4gICAgY2xlYXJUaW1lb3V0KHN3aXBlci5zY3JvbGxiYXIuZHJhZ1RpbWVvdXQpO1xuXG4gICAgJGVsLnRyYW5zaXRpb24oMCk7XG4gICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICAkZWwuY3NzKCdvcGFjaXR5JywgMSk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzY3JvbGxiYXJEcmFnU3RhcnQnLCBlKTtcbiAgfSxcbiAgb25EcmFnTW92ZShlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHNjcm9sbGJhciwgJHdyYXBwZXJFbCB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHsgJGVsLCAkZHJhZ0VsIH0gPSBzY3JvbGxiYXI7XG5cbiAgICBpZiAoIXN3aXBlci5zY3JvbGxiYXIuaXNUb3VjaGVkKSByZXR1cm47XG4gICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICBzY3JvbGxiYXIuc2V0RHJhZ1Bvc2l0aW9uKGUpO1xuICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbigwKTtcbiAgICAkZWwudHJhbnNpdGlvbigwKTtcbiAgICAkZHJhZ0VsLnRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLmVtaXQoJ3Njcm9sbGJhckRyYWdNb3ZlJywgZSk7XG4gIH0sXG4gIG9uRHJhZ0VuZChlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIGNvbnN0IHsgc2Nyb2xsYmFyIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgeyAkZWwgfSA9IHNjcm9sbGJhcjtcblxuICAgIGlmICghc3dpcGVyLnNjcm9sbGJhci5pc1RvdWNoZWQpIHJldHVybjtcbiAgICBzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5zY3JvbGxiYXIuZHJhZ1RpbWVvdXQpO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5kcmFnVGltZW91dCA9IFV0aWxzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgJGVsLmNzcygnb3BhY2l0eScsIDApO1xuICAgICAgICAkZWwudHJhbnNpdGlvbig0MDApO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzY3JvbGxiYXJEcmFnRW5kJywgZSk7XG4gICAgaWYgKHBhcmFtcy5zbmFwT25SZWxlYXNlKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICB9XG4gIH0sXG4gIGVuYWJsZURyYWdnYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB7XG4gICAgICBzY3JvbGxiYXIsIHRvdWNoRXZlbnRzVG91Y2gsIHRvdWNoRXZlbnRzRGVza3RvcCwgcGFyYW1zLFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICBjb25zdCB0YXJnZXQgPSAkZWxbMF07XG4gICAgY29uc3QgYWN0aXZlTGlzdGVuZXIgPSBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPSBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfSA6IGZhbHNlO1xuICAgIGlmICghU3VwcG9ydC50b3VjaCkge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5tb3ZlLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ01vdmUsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLmVuZCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzVG91Y2guc3RhcnQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnU3RhcnQsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzVG91Y2gubW92ZSwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLmVuZCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfVxuICB9LFxuICBkaXNhYmxlRHJhZ2dhYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIHNjcm9sbGJhciwgdG91Y2hFdmVudHNUb3VjaCwgdG91Y2hFdmVudHNEZXNrdG9wLCBwYXJhbXMsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCAkZWwgPSBzY3JvbGxiYXIuJGVsO1xuICAgIGNvbnN0IHRhcmdldCA9ICRlbFswXTtcbiAgICBjb25zdCBhY3RpdmVMaXN0ZW5lciA9IFN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiBmYWxzZSwgY2FwdHVyZTogZmFsc2UgfSA6IGZhbHNlO1xuICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IFN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG4gICAgaWYgKCFTdXBwb3J0LnRvdWNoKSB7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c0Rlc2t0b3Auc3RhcnQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnU3RhcnQsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c0Rlc2t0b3AuZW5kLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ0VuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5zdGFydCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5tb3ZlLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ01vdmUsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzVG91Y2guZW5kLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ0VuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9XG4gIH0sXG4gIGluaXQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgY29uc3QgeyBzY3JvbGxiYXIsICRlbDogJHN3aXBlckVsIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG5cbiAgICBsZXQgJGVsID0gJChwYXJhbXMuZWwpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmICRlbC5sZW5ndGggPiAxICYmICRzd2lwZXJFbC5maW5kKHBhcmFtcy5lbCkubGVuZ3RoID09PSAxKSB7XG4gICAgICAkZWwgPSAkc3dpcGVyRWwuZmluZChwYXJhbXMuZWwpO1xuICAgIH1cblxuICAgIGxldCAkZHJhZ0VsID0gJGVsLmZpbmQoYC4ke3N3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdDbGFzc31gKTtcbiAgICBpZiAoJGRyYWdFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICRkcmFnRWwgPSAkKGA8ZGl2IGNsYXNzPVwiJHtzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnQ2xhc3N9XCI+PC9kaXY+YCk7XG4gICAgICAkZWwuYXBwZW5kKCRkcmFnRWwpO1xuICAgIH1cblxuICAgIFV0aWxzLmV4dGVuZChzY3JvbGxiYXIsIHtcbiAgICAgICRlbCxcbiAgICAgIGVsOiAkZWxbMF0sXG4gICAgICAkZHJhZ0VsLFxuICAgICAgZHJhZ0VsOiAkZHJhZ0VsWzBdLFxuICAgIH0pO1xuXG4gICAgaWYgKHBhcmFtcy5kcmFnZ2FibGUpIHtcbiAgICAgIHNjcm9sbGJhci5lbmFibGVEcmFnZ2FibGUoKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3koKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIuc2Nyb2xsYmFyLmRpc2FibGVEcmFnZ2FibGUoKTtcbiAgfSxcbn07XG5cbnZhciBTY3JvbGxiYXIkMSA9IHtcbiAgbmFtZTogJ3Njcm9sbGJhcicsXG4gIHBhcmFtczoge1xuICAgIHNjcm9sbGJhcjoge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBkcmFnU2l6ZTogJ2F1dG8nLFxuICAgICAgaGlkZTogZmFsc2UsXG4gICAgICBkcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgc25hcE9uUmVsZWFzZTogdHJ1ZSxcbiAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItbG9jaycsXG4gICAgICBkcmFnQ2xhc3M6ICdzd2lwZXItc2Nyb2xsYmFyLWRyYWcnLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIHNjcm9sbGJhcjoge1xuICAgICAgICBpbml0OiBTY3JvbGxiYXIuaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgIGRlc3Ryb3k6IFNjcm9sbGJhci5kZXN0cm95LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgdXBkYXRlU2l6ZTogU2Nyb2xsYmFyLnVwZGF0ZVNpemUuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IFNjcm9sbGJhci5zZXRUcmFuc2xhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRUcmFuc2l0aW9uOiBTY3JvbGxiYXIuc2V0VHJhbnNpdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICAgIGVuYWJsZURyYWdnYWJsZTogU2Nyb2xsYmFyLmVuYWJsZURyYWdnYWJsZS5iaW5kKHN3aXBlciksXG4gICAgICAgIGRpc2FibGVEcmFnZ2FibGU6IFNjcm9sbGJhci5kaXNhYmxlRHJhZ2dhYmxlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2V0RHJhZ1Bvc2l0aW9uOiBTY3JvbGxiYXIuc2V0RHJhZ1Bvc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb25EcmFnU3RhcnQ6IFNjcm9sbGJhci5vbkRyYWdTdGFydC5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uRHJhZ01vdmU6IFNjcm9sbGJhci5vbkRyYWdNb3ZlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb25EcmFnRW5kOiBTY3JvbGxiYXIub25EcmFnRW5kLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgaXNUb3VjaGVkOiBmYWxzZSxcbiAgICAgICAgdGltZW91dDogbnVsbCxcbiAgICAgICAgZHJhZ1RpbWVvdXQ6IG51bGwsXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5pbml0KCk7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICB1cGRhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci51cGRhdGVTaXplKCk7XG4gICAgfSxcbiAgICByZXNpemUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci51cGRhdGVTaXplKCk7XG4gICAgfSxcbiAgICBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgICBkZXN0cm95KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuZGVzdHJveSgpO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBQYXJhbGxheCA9IHtcbiAgc2V0VHJhbnNmb3JtKGVsLCBwcm9ncmVzcykge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyBydGwgfSA9IHN3aXBlcjtcblxuICAgIGNvbnN0ICRlbCA9ICQoZWwpO1xuICAgIGNvbnN0IHJ0bEZhY3RvciA9IHJ0bCA/IC0xIDogMTtcblxuICAgIGNvbnN0IHAgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgnKSB8fCAnMCc7XG4gICAgbGV0IHggPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgteCcpO1xuICAgIGxldCB5ID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXknKTtcbiAgICBjb25zdCBzY2FsZSA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZScpO1xuICAgIGNvbnN0IG9wYWNpdHkgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eScpO1xuXG4gICAgaWYgKHggfHwgeSkge1xuICAgICAgeCA9IHggfHwgJzAnO1xuICAgICAgeSA9IHkgfHwgJzAnO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB4ID0gcDtcbiAgICAgIHkgPSAnMCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgPSBwO1xuICAgICAgeCA9ICcwJztcbiAgICB9XG5cbiAgICBpZiAoKHgpLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgICB4ID0gYCR7cGFyc2VJbnQoeCwgMTApICogcHJvZ3Jlc3MgKiBydGxGYWN0b3J9JWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSBgJHt4ICogcHJvZ3Jlc3MgKiBydGxGYWN0b3J9cHhgO1xuICAgIH1cbiAgICBpZiAoKHkpLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgICB5ID0gYCR7cGFyc2VJbnQoeSwgMTApICogcHJvZ3Jlc3N9JWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgPSBgJHt5ICogcHJvZ3Jlc3N9cHhgO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3BhY2l0eSAhPT0gJ3VuZGVmaW5lZCcgJiYgb3BhY2l0eSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgY3VycmVudE9wYWNpdHkgPSBvcGFjaXR5IC0gKChvcGFjaXR5IC0gMSkgKiAoMSAtIE1hdGguYWJzKHByb2dyZXNzKSkpO1xuICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSBjdXJyZW50T3BhY2l0eTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzY2FsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgc2NhbGUgPT09IG51bGwpIHtcbiAgICAgICRlbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7eH0sICR7eX0sIDBweClgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY3VycmVudFNjYWxlID0gc2NhbGUgLSAoKHNjYWxlIC0gMSkgKiAoMSAtIE1hdGguYWJzKHByb2dyZXNzKSkpO1xuICAgICAgJGVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt4fSwgJHt5fSwgMHB4KSBzY2FsZSgke2N1cnJlbnRTY2FsZX0pYCk7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICAkZWwsIHNsaWRlcywgcHJvZ3Jlc3MsIHNuYXBHcmlkLFxuICAgIH0gPSBzd2lwZXI7XG4gICAgJGVsLmNoaWxkcmVuKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XScpXG4gICAgICAuZWFjaCgoaW5kZXgsIGVsKSA9PiB7XG4gICAgICAgIHN3aXBlci5wYXJhbGxheC5zZXRUcmFuc2Zvcm0oZWwsIHByb2dyZXNzKTtcbiAgICAgIH0pO1xuICAgIHNsaWRlcy5lYWNoKChzbGlkZUluZGV4LCBzbGlkZUVsKSA9PiB7XG4gICAgICBsZXQgc2xpZGVQcm9ncmVzcyA9IHNsaWRlRWwucHJvZ3Jlc3M7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycpIHtcbiAgICAgICAgc2xpZGVQcm9ncmVzcyArPSBNYXRoLmNlaWwoc2xpZGVJbmRleCAvIDIpIC0gKHByb2dyZXNzICogKHNuYXBHcmlkLmxlbmd0aCAtIDEpKTtcbiAgICAgIH1cbiAgICAgIHNsaWRlUHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChzbGlkZVByb2dyZXNzLCAtMSksIDEpO1xuICAgICAgJChzbGlkZUVsKS5maW5kKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XScpXG4gICAgICAgIC5lYWNoKChpbmRleCwgZWwpID0+IHtcbiAgICAgICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNmb3JtKGVsLCBzbGlkZVByb2dyZXNzKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG4gIHNldFRyYW5zaXRpb24oZHVyYXRpb24gPSB0aGlzLnBhcmFtcy5zcGVlZCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyAkZWwgfSA9IHN3aXBlcjtcbiAgICAkZWwuZmluZCgnW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0nKVxuICAgICAgLmVhY2goKGluZGV4LCBwYXJhbGxheEVsKSA9PiB7XG4gICAgICAgIGNvbnN0ICRwYXJhbGxheEVsID0gJChwYXJhbGxheEVsKTtcbiAgICAgICAgbGV0IHBhcmFsbGF4RHVyYXRpb24gPSBwYXJzZUludCgkcGFyYWxsYXhFbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1kdXJhdGlvbicpLCAxMCkgfHwgZHVyYXRpb247XG4gICAgICAgIGlmIChkdXJhdGlvbiA9PT0gMCkgcGFyYWxsYXhEdXJhdGlvbiA9IDA7XG4gICAgICAgICRwYXJhbGxheEVsLnRyYW5zaXRpb24ocGFyYWxsYXhEdXJhdGlvbik7XG4gICAgICB9KTtcbiAgfSxcbn07XG5cbnZhciBQYXJhbGxheCQxID0ge1xuICBuYW1lOiAncGFyYWxsYXgnLFxuICBwYXJhbXM6IHtcbiAgICBwYXJhbGxheDoge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgcGFyYWxsYXg6IHtcbiAgICAgICAgc2V0VHJhbnNmb3JtOiBQYXJhbGxheC5zZXRUcmFuc2Zvcm0uYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IFBhcmFsbGF4LnNldFRyYW5zbGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgIHNldFRyYW5zaXRpb246IFBhcmFsbGF4LnNldFRyYW5zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYXJhbGxheC5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICAgIH0sXG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYXJhbGxheC5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5wYXJhbGxheC5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgWm9vbSA9IHtcbiAgLy8gQ2FsYyBTY2FsZSBGcm9tIE11bHRpLXRvdWNoZXNcbiAgZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKSB7XG4gICAgaWYgKGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPCAyKSByZXR1cm4gMTtcbiAgICBjb25zdCB4MSA9IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWDtcbiAgICBjb25zdCB5MSA9IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWTtcbiAgICBjb25zdCB4MiA9IGUudGFyZ2V0VG91Y2hlc1sxXS5wYWdlWDtcbiAgICBjb25zdCB5MiA9IGUudGFyZ2V0VG91Y2hlc1sxXS5wYWdlWTtcbiAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCgoKHgyIC0geDEpICoqIDIpICsgKCh5MiAtIHkxKSAqKiAyKSk7XG4gICAgcmV0dXJuIGRpc3RhbmNlO1xuICB9LFxuICAvLyBFdmVudHNcbiAgb25HZXN0dXJlU3RhcnQoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCB7IGdlc3R1cmUgfSA9IHpvb207XG4gICAgem9vbS5mYWtlR2VzdHVyZVRvdWNoZWQgPSBmYWxzZTtcbiAgICB6b29tLmZha2VHZXN0dXJlTW92ZWQgPSBmYWxzZTtcbiAgICBpZiAoIVN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaHN0YXJ0JyB8fCAoZS50eXBlID09PSAndG91Y2hzdGFydCcgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA8IDIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHpvb20uZmFrZUdlc3R1cmVUb3VjaGVkID0gdHJ1ZTtcbiAgICAgIGdlc3R1cmUuc2NhbGVTdGFydCA9IFpvb20uZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKTtcbiAgICB9XG4gICAgaWYgKCFnZXN0dXJlLiRzbGlkZUVsIHx8ICFnZXN0dXJlLiRzbGlkZUVsLmxlbmd0aCkge1xuICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5zd2lwZXItc2xpZGUnKTtcbiAgICAgIGlmIChnZXN0dXJlLiRzbGlkZUVsLmxlbmd0aCA9PT0gMCkgZ2VzdHVyZS4kc2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSBnZXN0dXJlLiRzbGlkZUVsLmZpbmQoJ2ltZywgc3ZnLCBjYW52YXMnKTtcbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gZ2VzdHVyZS4kaW1hZ2VFbC5wYXJlbnQoYC4ke3BhcmFtcy5jb250YWluZXJDbGFzc31gKTtcbiAgICAgIGdlc3R1cmUubWF4UmF0aW8gPSBnZXN0dXJlLiRpbWFnZVdyYXBFbC5hdHRyKCdkYXRhLXN3aXBlci16b29tJykgfHwgcGFyYW1zLm1heFJhdGlvO1xuICAgICAgaWYgKGdlc3R1cmUuJGltYWdlV3JhcEVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBnZXN0dXJlLiRpbWFnZUVsID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIuem9vbS5pc1NjYWxpbmcgPSB0cnVlO1xuICB9LFxuICBvbkdlc3R1cmVDaGFuZ2UoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCB7IGdlc3R1cmUgfSA9IHpvb207XG4gICAgaWYgKCFTdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICBpZiAoZS50eXBlICE9PSAndG91Y2htb3ZlJyB8fCAoZS50eXBlID09PSAndG91Y2htb3ZlJyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgem9vbS5mYWtlR2VzdHVyZU1vdmVkID0gdHJ1ZTtcbiAgICAgIGdlc3R1cmUuc2NhbGVNb3ZlID0gWm9vbS5nZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGUpO1xuICAgIH1cbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBpZiAoU3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgem9vbS5zY2FsZSA9IGUuc2NhbGUgKiB6b29tLmN1cnJlbnRTY2FsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgem9vbS5zY2FsZSA9IChnZXN0dXJlLnNjYWxlTW92ZSAvIGdlc3R1cmUuc2NhbGVTdGFydCkgKiB6b29tLmN1cnJlbnRTY2FsZTtcbiAgICB9XG4gICAgaWYgKHpvb20uc2NhbGUgPiBnZXN0dXJlLm1heFJhdGlvKSB7XG4gICAgICB6b29tLnNjYWxlID0gKGdlc3R1cmUubWF4UmF0aW8gLSAxKSArICgoKHpvb20uc2NhbGUgLSBnZXN0dXJlLm1heFJhdGlvKSArIDEpICoqIDAuNSk7XG4gICAgfVxuICAgIGlmICh6b29tLnNjYWxlIDwgcGFyYW1zLm1pblJhdGlvKSB7XG4gICAgICB6b29tLnNjYWxlID0gKHBhcmFtcy5taW5SYXRpbyArIDEpIC0gKCgocGFyYW1zLm1pblJhdGlvIC0gem9vbS5zY2FsZSkgKyAxKSAqKiAwLjUpO1xuICAgIH1cbiAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKCR7em9vbS5zY2FsZX0pYCk7XG4gIH0sXG4gIG9uR2VzdHVyZUVuZChlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSB9ID0gem9vbTtcbiAgICBpZiAoIVN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIGlmICghem9vbS5mYWtlR2VzdHVyZVRvdWNoZWQgfHwgIXpvb20uZmFrZUdlc3R1cmVNb3ZlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZS50eXBlICE9PSAndG91Y2hlbmQnIHx8IChlLnR5cGUgPT09ICd0b3VjaGVuZCcgJiYgZS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPCAyICYmICFEZXZpY2UuYW5kcm9pZCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgem9vbS5mYWtlR2VzdHVyZVRvdWNoZWQgPSBmYWxzZTtcbiAgICAgIHpvb20uZmFrZUdlc3R1cmVNb3ZlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB6b29tLnNjYWxlID0gTWF0aC5tYXgoTWF0aC5taW4oem9vbS5zY2FsZSwgZ2VzdHVyZS5tYXhSYXRpbyksIHBhcmFtcy5taW5SYXRpbyk7XG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKCR7em9vbS5zY2FsZX0pYCk7XG4gICAgem9vbS5jdXJyZW50U2NhbGUgPSB6b29tLnNjYWxlO1xuICAgIHpvb20uaXNTY2FsaW5nID0gZmFsc2U7XG4gICAgaWYgKHpvb20uc2NhbGUgPT09IDEpIGdlc3R1cmUuJHNsaWRlRWwgPSB1bmRlZmluZWQ7XG4gIH0sXG4gIG9uVG91Y2hTdGFydChlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgeyBnZXN0dXJlLCBpbWFnZSB9ID0gem9vbTtcbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBpZiAoaW1hZ2UuaXNUb3VjaGVkKSByZXR1cm47XG4gICAgaWYgKERldmljZS5hbmRyb2lkKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaW1hZ2UuaXNUb3VjaGVkID0gdHJ1ZTtcbiAgICBpbWFnZS50b3VjaGVzU3RhcnQueCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICBpbWFnZS50b3VjaGVzU3RhcnQueSA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgfSxcbiAgb25Ub3VjaE1vdmUoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSwgaW1hZ2UsIHZlbG9jaXR5IH0gPSB6b29tO1xuICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgaWYgKCFpbWFnZS5pc1RvdWNoZWQgfHwgIWdlc3R1cmUuJHNsaWRlRWwpIHJldHVybjtcblxuICAgIGlmICghaW1hZ2UuaXNNb3ZlZCkge1xuICAgICAgaW1hZ2Uud2lkdGggPSBnZXN0dXJlLiRpbWFnZUVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgaW1hZ2UuaGVpZ2h0ID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBpbWFnZS5zdGFydFggPSBVdGlscy5nZXRUcmFuc2xhdGUoZ2VzdHVyZS4kaW1hZ2VXcmFwRWxbMF0sICd4JykgfHwgMDtcbiAgICAgIGltYWdlLnN0YXJ0WSA9IFV0aWxzLmdldFRyYW5zbGF0ZShnZXN0dXJlLiRpbWFnZVdyYXBFbFswXSwgJ3knKSB8fCAwO1xuICAgICAgZ2VzdHVyZS5zbGlkZVdpZHRoID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIGdlc3R1cmUuc2xpZGVIZWlnaHQgPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24oMCk7XG4gICAgICBpZiAoc3dpcGVyLnJ0bCkge1xuICAgICAgICBpbWFnZS5zdGFydFggPSAtaW1hZ2Uuc3RhcnRYO1xuICAgICAgICBpbWFnZS5zdGFydFkgPSAtaW1hZ2Uuc3RhcnRZO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBEZWZpbmUgaWYgd2UgbmVlZCBpbWFnZSBkcmFnXG4gICAgY29uc3Qgc2NhbGVkV2lkdGggPSBpbWFnZS53aWR0aCAqIHpvb20uc2NhbGU7XG4gICAgY29uc3Qgc2NhbGVkSGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0ICogem9vbS5zY2FsZTtcblxuICAgIGlmIChzY2FsZWRXaWR0aCA8IGdlc3R1cmUuc2xpZGVXaWR0aCAmJiBzY2FsZWRIZWlnaHQgPCBnZXN0dXJlLnNsaWRlSGVpZ2h0KSByZXR1cm47XG5cbiAgICBpbWFnZS5taW5YID0gTWF0aC5taW4oKChnZXN0dXJlLnNsaWRlV2lkdGggLyAyKSAtIChzY2FsZWRXaWR0aCAvIDIpKSwgMCk7XG4gICAgaW1hZ2UubWF4WCA9IC1pbWFnZS5taW5YO1xuICAgIGltYWdlLm1pblkgPSBNYXRoLm1pbigoKGdlc3R1cmUuc2xpZGVIZWlnaHQgLyAyKSAtIChzY2FsZWRIZWlnaHQgLyAyKSksIDApO1xuICAgIGltYWdlLm1heFkgPSAtaW1hZ2UubWluWTtcblxuICAgIGltYWdlLnRvdWNoZXNDdXJyZW50LnggPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICBpbWFnZS50b3VjaGVzQ3VycmVudC55ID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG5cbiAgICBpZiAoIWltYWdlLmlzTW92ZWQgJiYgIXpvb20uaXNTY2FsaW5nKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHN3aXBlci5pc0hvcml6b250YWwoKVxuICAgICAgICAmJiAoXG4gICAgICAgICAgKE1hdGguZmxvb3IoaW1hZ2UubWluWCkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRYKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC54IDwgaW1hZ2UudG91Y2hlc1N0YXJ0LngpXG4gICAgICAgICAgfHwgKE1hdGguZmxvb3IoaW1hZ2UubWF4WCkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRYKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC54ID4gaW1hZ2UudG91Y2hlc1N0YXJ0LngpXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBpZiAoXG4gICAgICAgICFzd2lwZXIuaXNIb3Jpem9udGFsKClcbiAgICAgICAgJiYgKFxuICAgICAgICAgIChNYXRoLmZsb29yKGltYWdlLm1pblkpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WSkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA8IGltYWdlLnRvdWNoZXNTdGFydC55KVxuICAgICAgICAgIHx8IChNYXRoLmZsb29yKGltYWdlLm1heFkpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WSkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA+IGltYWdlLnRvdWNoZXNTdGFydC55KVxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBpbWFnZS5pc01vdmVkID0gdHJ1ZTtcbiAgICBpbWFnZS5jdXJyZW50WCA9IChpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LngpICsgaW1hZ2Uuc3RhcnRYO1xuICAgIGltYWdlLmN1cnJlbnRZID0gKGltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSBpbWFnZS50b3VjaGVzU3RhcnQueSkgKyBpbWFnZS5zdGFydFk7XG5cbiAgICBpZiAoaW1hZ2UuY3VycmVudFggPCBpbWFnZS5taW5YKSB7XG4gICAgICBpbWFnZS5jdXJyZW50WCA9IChpbWFnZS5taW5YICsgMSkgLSAoKChpbWFnZS5taW5YIC0gaW1hZ2UuY3VycmVudFgpICsgMSkgKiogMC44KTtcbiAgICB9XG4gICAgaWYgKGltYWdlLmN1cnJlbnRYID4gaW1hZ2UubWF4WCkge1xuICAgICAgaW1hZ2UuY3VycmVudFggPSAoaW1hZ2UubWF4WCAtIDEpICsgKCgoaW1hZ2UuY3VycmVudFggLSBpbWFnZS5tYXhYKSArIDEpICoqIDAuOCk7XG4gICAgfVxuXG4gICAgaWYgKGltYWdlLmN1cnJlbnRZIDwgaW1hZ2UubWluWSkge1xuICAgICAgaW1hZ2UuY3VycmVudFkgPSAoaW1hZ2UubWluWSArIDEpIC0gKCgoaW1hZ2UubWluWSAtIGltYWdlLmN1cnJlbnRZKSArIDEpICoqIDAuOCk7XG4gICAgfVxuICAgIGlmIChpbWFnZS5jdXJyZW50WSA+IGltYWdlLm1heFkpIHtcbiAgICAgIGltYWdlLmN1cnJlbnRZID0gKGltYWdlLm1heFkgLSAxKSArICgoKGltYWdlLmN1cnJlbnRZIC0gaW1hZ2UubWF4WSkgKyAxKSAqKiAwLjgpO1xuICAgIH1cblxuICAgIC8vIFZlbG9jaXR5XG4gICAgaWYgKCF2ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueDtcbiAgICBpZiAoIXZlbG9jaXR5LnByZXZQb3NpdGlvblkpIHZlbG9jaXR5LnByZXZQb3NpdGlvblkgPSBpbWFnZS50b3VjaGVzQ3VycmVudC55O1xuICAgIGlmICghdmVsb2NpdHkucHJldlRpbWUpIHZlbG9jaXR5LnByZXZUaW1lID0gRGF0ZS5ub3coKTtcbiAgICB2ZWxvY2l0eS54ID0gKGltYWdlLnRvdWNoZXNDdXJyZW50LnggLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSAvIChEYXRlLm5vdygpIC0gdmVsb2NpdHkucHJldlRpbWUpIC8gMjtcbiAgICB2ZWxvY2l0eS55ID0gKGltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZKSAvIChEYXRlLm5vdygpIC0gdmVsb2NpdHkucHJldlRpbWUpIC8gMjtcbiAgICBpZiAoTWF0aC5hYnMoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblgpIDwgMikgdmVsb2NpdHkueCA9IDA7XG4gICAgaWYgKE1hdGguYWJzKGltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZKSA8IDIpIHZlbG9jaXR5LnkgPSAwO1xuICAgIHZlbG9jaXR5LnByZXZQb3NpdGlvblggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54O1xuICAgIHZlbG9jaXR5LnByZXZQb3NpdGlvblkgPSBpbWFnZS50b3VjaGVzQ3VycmVudC55O1xuICAgIHZlbG9jaXR5LnByZXZUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHtpbWFnZS5jdXJyZW50WH1weCwgJHtpbWFnZS5jdXJyZW50WX1weCwwKWApO1xuICB9LFxuICBvblRvdWNoRW5kKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSwgaW1hZ2UsIHZlbG9jaXR5IH0gPSB6b29tO1xuICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmICghaW1hZ2UuaXNUb3VjaGVkIHx8ICFpbWFnZS5pc01vdmVkKSB7XG4gICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgIGltYWdlLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgaW1hZ2UuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGxldCBtb21lbnR1bUR1cmF0aW9uWCA9IDMwMDtcbiAgICBsZXQgbW9tZW50dW1EdXJhdGlvblkgPSAzMDA7XG4gICAgY29uc3QgbW9tZW50dW1EaXN0YW5jZVggPSB2ZWxvY2l0eS54ICogbW9tZW50dW1EdXJhdGlvblg7XG4gICAgY29uc3QgbmV3UG9zaXRpb25YID0gaW1hZ2UuY3VycmVudFggKyBtb21lbnR1bURpc3RhbmNlWDtcbiAgICBjb25zdCBtb21lbnR1bURpc3RhbmNlWSA9IHZlbG9jaXR5LnkgKiBtb21lbnR1bUR1cmF0aW9uWTtcbiAgICBjb25zdCBuZXdQb3NpdGlvblkgPSBpbWFnZS5jdXJyZW50WSArIG1vbWVudHVtRGlzdGFuY2VZO1xuXG4gICAgLy8gRml4IGR1cmF0aW9uXG4gICAgaWYgKHZlbG9jaXR5LnggIT09IDApIG1vbWVudHVtRHVyYXRpb25YID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uWCAtIGltYWdlLmN1cnJlbnRYKSAvIHZlbG9jaXR5LngpO1xuICAgIGlmICh2ZWxvY2l0eS55ICE9PSAwKSBtb21lbnR1bUR1cmF0aW9uWSA9IE1hdGguYWJzKChuZXdQb3NpdGlvblkgLSBpbWFnZS5jdXJyZW50WSkgLyB2ZWxvY2l0eS55KTtcbiAgICBjb25zdCBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5tYXgobW9tZW50dW1EdXJhdGlvblgsIG1vbWVudHVtRHVyYXRpb25ZKTtcblxuICAgIGltYWdlLmN1cnJlbnRYID0gbmV3UG9zaXRpb25YO1xuICAgIGltYWdlLmN1cnJlbnRZID0gbmV3UG9zaXRpb25ZO1xuXG4gICAgLy8gRGVmaW5lIGlmIHdlIG5lZWQgaW1hZ2UgZHJhZ1xuICAgIGNvbnN0IHNjYWxlZFdpZHRoID0gaW1hZ2Uud2lkdGggKiB6b29tLnNjYWxlO1xuICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IGltYWdlLmhlaWdodCAqIHpvb20uc2NhbGU7XG4gICAgaW1hZ2UubWluWCA9IE1hdGgubWluKCgoZ2VzdHVyZS5zbGlkZVdpZHRoIC8gMikgLSAoc2NhbGVkV2lkdGggLyAyKSksIDApO1xuICAgIGltYWdlLm1heFggPSAtaW1hZ2UubWluWDtcbiAgICBpbWFnZS5taW5ZID0gTWF0aC5taW4oKChnZXN0dXJlLnNsaWRlSGVpZ2h0IC8gMikgLSAoc2NhbGVkSGVpZ2h0IC8gMikpLCAwKTtcbiAgICBpbWFnZS5tYXhZID0gLWltYWdlLm1pblk7XG4gICAgaW1hZ2UuY3VycmVudFggPSBNYXRoLm1heChNYXRoLm1pbihpbWFnZS5jdXJyZW50WCwgaW1hZ2UubWF4WCksIGltYWdlLm1pblgpO1xuICAgIGltYWdlLmN1cnJlbnRZID0gTWF0aC5tYXgoTWF0aC5taW4oaW1hZ2UuY3VycmVudFksIGltYWdlLm1heFkpLCBpbWFnZS5taW5ZKTtcblxuICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24obW9tZW50dW1EdXJhdGlvbikudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke2ltYWdlLmN1cnJlbnRYfXB4LCAke2ltYWdlLmN1cnJlbnRZfXB4LDApYCk7XG4gIH0sXG4gIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCB7IGdlc3R1cmUgfSA9IHpvb207XG4gICAgaWYgKGdlc3R1cmUuJHNsaWRlRWwgJiYgc3dpcGVyLnByZXZpb3VzSW5kZXggIT09IHN3aXBlci5hY3RpdmVJbmRleCkge1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgxKScpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCknKTtcblxuICAgICAgem9vbS5zY2FsZSA9IDE7XG4gICAgICB6b29tLmN1cnJlbnRTY2FsZSA9IDE7XG5cbiAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSB1bmRlZmluZWQ7XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsID0gdW5kZWZpbmVkO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyBUb2dnbGUgWm9vbVxuICB0b2dnbGUoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuXG4gICAgaWYgKHpvb20uc2NhbGUgJiYgem9vbS5zY2FsZSAhPT0gMSkge1xuICAgICAgLy8gWm9vbSBPdXRcbiAgICAgIHpvb20ub3V0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFpvb20gSW5cbiAgICAgIHpvb20uaW4oZSk7XG4gICAgfVxuICB9LFxuICBpbihlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgY29uc3QgeyBnZXN0dXJlLCBpbWFnZSB9ID0gem9vbTtcblxuICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCkge1xuICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHN3aXBlci5jbGlja2VkU2xpZGUgPyAkKHN3aXBlci5jbGlja2VkU2xpZGUpIDogc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IGdlc3R1cmUuJHNsaWRlRWwuZmluZCgnaW1nLCBzdmcsIGNhbnZhcycpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgPSBnZXN0dXJlLiRpbWFnZUVsLnBhcmVudChgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApO1xuICAgIH1cbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGdlc3R1cmUuJHNsaWRlRWwuYWRkQ2xhc3MoYCR7cGFyYW1zLnpvb21lZFNsaWRlQ2xhc3N9YCk7XG5cbiAgICBsZXQgdG91Y2hYO1xuICAgIGxldCB0b3VjaFk7XG4gICAgbGV0IG9mZnNldFg7XG4gICAgbGV0IG9mZnNldFk7XG4gICAgbGV0IGRpZmZYO1xuICAgIGxldCBkaWZmWTtcbiAgICBsZXQgdHJhbnNsYXRlWDtcbiAgICBsZXQgdHJhbnNsYXRlWTtcbiAgICBsZXQgaW1hZ2VXaWR0aDtcbiAgICBsZXQgaW1hZ2VIZWlnaHQ7XG4gICAgbGV0IHNjYWxlZFdpZHRoO1xuICAgIGxldCBzY2FsZWRIZWlnaHQ7XG4gICAgbGV0IHRyYW5zbGF0ZU1pblg7XG4gICAgbGV0IHRyYW5zbGF0ZU1pblk7XG4gICAgbGV0IHRyYW5zbGF0ZU1heFg7XG4gICAgbGV0IHRyYW5zbGF0ZU1heFk7XG4gICAgbGV0IHNsaWRlV2lkdGg7XG4gICAgbGV0IHNsaWRlSGVpZ2h0O1xuXG4gICAgaWYgKHR5cGVvZiBpbWFnZS50b3VjaGVzU3RhcnQueCA9PT0gJ3VuZGVmaW5lZCcgJiYgZSkge1xuICAgICAgdG91Y2hYID0gZS50eXBlID09PSAndG91Y2hlbmQnID8gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICB0b3VjaFkgPSBlLnR5cGUgPT09ICd0b3VjaGVuZCcgPyBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG91Y2hYID0gaW1hZ2UudG91Y2hlc1N0YXJ0Lng7XG4gICAgICB0b3VjaFkgPSBpbWFnZS50b3VjaGVzU3RhcnQueTtcbiAgICB9XG5cbiAgICB6b29tLnNjYWxlID0gZ2VzdHVyZS4kaW1hZ2VXcmFwRWwuYXR0cignZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcbiAgICB6b29tLmN1cnJlbnRTY2FsZSA9IGdlc3R1cmUuJGltYWdlV3JhcEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXpvb20nKSB8fCBwYXJhbXMubWF4UmF0aW87XG4gICAgaWYgKGUpIHtcbiAgICAgIHNsaWRlV2lkdGggPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgc2xpZGVIZWlnaHQgPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgIG9mZnNldFggPSBnZXN0dXJlLiRzbGlkZUVsLm9mZnNldCgpLmxlZnQ7XG4gICAgICBvZmZzZXRZID0gZ2VzdHVyZS4kc2xpZGVFbC5vZmZzZXQoKS50b3A7XG4gICAgICBkaWZmWCA9IChvZmZzZXRYICsgKHNsaWRlV2lkdGggLyAyKSkgLSB0b3VjaFg7XG4gICAgICBkaWZmWSA9IChvZmZzZXRZICsgKHNsaWRlSGVpZ2h0IC8gMikpIC0gdG91Y2hZO1xuXG4gICAgICBpbWFnZVdpZHRoID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIGltYWdlSGVpZ2h0ID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBzY2FsZWRXaWR0aCA9IGltYWdlV2lkdGggKiB6b29tLnNjYWxlO1xuICAgICAgc2NhbGVkSGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKiB6b29tLnNjYWxlO1xuXG4gICAgICB0cmFuc2xhdGVNaW5YID0gTWF0aC5taW4oKChzbGlkZVdpZHRoIC8gMikgLSAoc2NhbGVkV2lkdGggLyAyKSksIDApO1xuICAgICAgdHJhbnNsYXRlTWluWSA9IE1hdGgubWluKCgoc2xpZGVIZWlnaHQgLyAyKSAtIChzY2FsZWRIZWlnaHQgLyAyKSksIDApO1xuICAgICAgdHJhbnNsYXRlTWF4WCA9IC10cmFuc2xhdGVNaW5YO1xuICAgICAgdHJhbnNsYXRlTWF4WSA9IC10cmFuc2xhdGVNaW5ZO1xuXG4gICAgICB0cmFuc2xhdGVYID0gZGlmZlggKiB6b29tLnNjYWxlO1xuICAgICAgdHJhbnNsYXRlWSA9IGRpZmZZICogem9vbS5zY2FsZTtcblxuICAgICAgaWYgKHRyYW5zbGF0ZVggPCB0cmFuc2xhdGVNaW5YKSB7XG4gICAgICAgIHRyYW5zbGF0ZVggPSB0cmFuc2xhdGVNaW5YO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zbGF0ZVggPiB0cmFuc2xhdGVNYXhYKSB7XG4gICAgICAgIHRyYW5zbGF0ZVggPSB0cmFuc2xhdGVNYXhYO1xuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNsYXRlWSA8IHRyYW5zbGF0ZU1pblkpIHtcbiAgICAgICAgdHJhbnNsYXRlWSA9IHRyYW5zbGF0ZU1pblk7XG4gICAgICB9XG4gICAgICBpZiAodHJhbnNsYXRlWSA+IHRyYW5zbGF0ZU1heFkpIHtcbiAgICAgICAgdHJhbnNsYXRlWSA9IHRyYW5zbGF0ZU1heFk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zbGF0ZVggPSAwO1xuICAgICAgdHJhbnNsYXRlWSA9IDA7XG4gICAgfVxuICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7dHJhbnNsYXRlWH1weCwgJHt0cmFuc2xhdGVZfXB4LDApYCk7XG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoJHt6b29tLnNjYWxlfSlgKTtcbiAgfSxcbiAgb3V0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSB9ID0gem9vbTtcblxuICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCkge1xuICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHN3aXBlci5jbGlja2VkU2xpZGUgPyAkKHN3aXBlci5jbGlja2VkU2xpZGUpIDogc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IGdlc3R1cmUuJHNsaWRlRWwuZmluZCgnaW1nLCBzdmcsIGNhbnZhcycpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgPSBnZXN0dXJlLiRpbWFnZUVsLnBhcmVudChgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApO1xuICAgIH1cbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIHpvb20uc2NhbGUgPSAxO1xuICAgIHpvb20uY3VycmVudFNjYWxlID0gMTtcbiAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCknKTtcbiAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgxKScpO1xuICAgIGdlc3R1cmUuJHNsaWRlRWwucmVtb3ZlQ2xhc3MoYCR7cGFyYW1zLnpvb21lZFNsaWRlQ2xhc3N9YCk7XG4gICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHVuZGVmaW5lZDtcbiAgfSxcbiAgLy8gQXR0YWNoL0RldGFjaCBFdmVudHNcbiAgZW5hYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGlmICh6b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICB6b29tLmVuYWJsZWQgPSB0cnVlO1xuXG4gICAgY29uc3QgcGFzc2l2ZUxpc3RlbmVyID0gc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcgJiYgU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgc3dpcGVyLnBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG5cbiAgICAvLyBTY2FsZSBpbWFnZVxuICAgIGlmIChTdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbignZ2VzdHVyZXN0YXJ0JywgJy5zd2lwZXItc2xpZGUnLCB6b29tLm9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oJ2dlc3R1cmVjaGFuZ2UnLCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlQ2hhbmdlLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oJ2dlc3R1cmVlbmQnLCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCwgJy5zd2lwZXItc2xpZGUnLCB6b29tLm9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsICcuc3dpcGVyLXNsaWRlJywgem9vbS5vbkdlc3R1cmVDaGFuZ2UsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMuZW5kLCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIE1vdmUgaW1hZ2VcbiAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMubW92ZSwgYC4ke3N3aXBlci5wYXJhbXMuem9vbS5jb250YWluZXJDbGFzc31gLCB6b29tLm9uVG91Y2hNb3ZlKTtcbiAgfSxcbiAgZGlzYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBpZiAoIXpvb20uZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgc3dpcGVyLnpvb20uZW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgY29uc3QgcGFzc2l2ZUxpc3RlbmVyID0gc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcgJiYgU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgc3dpcGVyLnBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG5cbiAgICAvLyBTY2FsZSBpbWFnZVxuICAgIGlmIChTdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoJ2dlc3R1cmVzdGFydCcsICcuc3dpcGVyLXNsaWRlJywgem9vbS5vbkdlc3R1cmVTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZignZ2VzdHVyZWNoYW5nZScsICcuc3dpcGVyLXNsaWRlJywgem9vbS5vbkdlc3R1cmVDaGFuZ2UsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoJ2dlc3R1cmVlbmQnLCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQsICcuc3dpcGVyLXNsaWRlJywgem9vbS5vbkdlc3R1cmVTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMubW92ZSwgJy5zd2lwZXItc2xpZGUnLCB6b29tLm9uR2VzdHVyZUNoYW5nZSwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMuZW5kLCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIE1vdmUgaW1hZ2VcbiAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsIGAuJHtzd2lwZXIucGFyYW1zLnpvb20uY29udGFpbmVyQ2xhc3N9YCwgem9vbS5vblRvdWNoTW92ZSk7XG4gIH0sXG59O1xuXG52YXIgWm9vbSQxID0ge1xuICBuYW1lOiAnem9vbScsXG4gIHBhcmFtczoge1xuICAgIHpvb206IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgbWF4UmF0aW86IDMsXG4gICAgICBtaW5SYXRpbzogMSxcbiAgICAgIHRvZ2dsZTogdHJ1ZSxcbiAgICAgIGNvbnRhaW5lckNsYXNzOiAnc3dpcGVyLXpvb20tY29udGFpbmVyJyxcbiAgICAgIHpvb21lZFNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUtem9vbWVkJyxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB6b29tID0ge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBzY2FsZTogMSxcbiAgICAgIGN1cnJlbnRTY2FsZTogMSxcbiAgICAgIGlzU2NhbGluZzogZmFsc2UsXG4gICAgICBnZXN0dXJlOiB7XG4gICAgICAgICRzbGlkZUVsOiB1bmRlZmluZWQsXG4gICAgICAgIHNsaWRlV2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgc2xpZGVIZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgJGltYWdlRWw6IHVuZGVmaW5lZCxcbiAgICAgICAgJGltYWdlV3JhcEVsOiB1bmRlZmluZWQsXG4gICAgICAgIG1heFJhdGlvOiAzLFxuICAgICAgfSxcbiAgICAgIGltYWdlOiB7XG4gICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICAgIGN1cnJlbnRYOiB1bmRlZmluZWQsXG4gICAgICAgIGN1cnJlbnRZOiB1bmRlZmluZWQsXG4gICAgICAgIG1pblg6IHVuZGVmaW5lZCxcbiAgICAgICAgbWluWTogdW5kZWZpbmVkLFxuICAgICAgICBtYXhYOiB1bmRlZmluZWQsXG4gICAgICAgIG1heFk6IHVuZGVmaW5lZCxcbiAgICAgICAgd2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgaGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0WDogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydFk6IHVuZGVmaW5lZCxcbiAgICAgICAgdG91Y2hlc1N0YXJ0OiB7fSxcbiAgICAgICAgdG91Y2hlc0N1cnJlbnQ6IHt9LFxuICAgICAgfSxcbiAgICAgIHZlbG9jaXR5OiB7XG4gICAgICAgIHg6IHVuZGVmaW5lZCxcbiAgICAgICAgeTogdW5kZWZpbmVkLFxuICAgICAgICBwcmV2UG9zaXRpb25YOiB1bmRlZmluZWQsXG4gICAgICAgIHByZXZQb3NpdGlvblk6IHVuZGVmaW5lZCxcbiAgICAgICAgcHJldlRpbWU6IHVuZGVmaW5lZCxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgICgnb25HZXN0dXJlU3RhcnQgb25HZXN0dXJlQ2hhbmdlIG9uR2VzdHVyZUVuZCBvblRvdWNoU3RhcnQgb25Ub3VjaE1vdmUgb25Ub3VjaEVuZCBvblRyYW5zaXRpb25FbmQgdG9nZ2xlIGVuYWJsZSBkaXNhYmxlIGluIG91dCcpLnNwbGl0KCcgJykuZm9yRWFjaCgobWV0aG9kTmFtZSkgPT4ge1xuICAgICAgem9vbVttZXRob2ROYW1lXSA9IFpvb21bbWV0aG9kTmFtZV0uYmluZChzd2lwZXIpO1xuICAgIH0pO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIHpvb20sXG4gICAgfSk7XG5cbiAgICBsZXQgc2NhbGUgPSAxO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzd2lwZXIuem9vbSwgJ3NjYWxlJywge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gc2NhbGU7XG4gICAgICB9LFxuICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgIGlmIChzY2FsZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICBjb25zdCBpbWFnZUVsID0gc3dpcGVyLnpvb20uZ2VzdHVyZS4kaW1hZ2VFbCA/IHN3aXBlci56b29tLmdlc3R1cmUuJGltYWdlRWxbMF0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgY29uc3Qgc2xpZGVFbCA9IHN3aXBlci56b29tLmdlc3R1cmUuJHNsaWRlRWwgPyBzd2lwZXIuem9vbS5nZXN0dXJlLiRzbGlkZUVsWzBdIDogdW5kZWZpbmVkO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCd6b29tQ2hhbmdlJywgdmFsdWUsIGltYWdlRWwsIHNsaWRlRWwpO1xuICAgICAgICB9XG4gICAgICAgIHNjYWxlID0gdmFsdWU7XG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci56b29tLmVuYWJsZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIuem9vbS5kaXNhYmxlKCk7XG4gICAgfSxcbiAgICB0b3VjaFN0YXJ0KGUpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci56b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci56b29tLm9uVG91Y2hTdGFydChlKTtcbiAgICB9LFxuICAgIHRvdWNoRW5kKGUpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci56b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci56b29tLm9uVG91Y2hFbmQoZSk7XG4gICAgfSxcbiAgICBkb3VibGVUYXAoZSkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuem9vbS50b2dnbGUpIHtcbiAgICAgICAgc3dpcGVyLnpvb20udG9nZ2xlKGUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIuem9vbS5vblRyYW5zaXRpb25FbmQoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgTGF6eSA9IHtcbiAgbG9hZEluU2xpZGUoaW5kZXgsIGxvYWRJbkR1cGxpY2F0ZSA9IHRydWUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubGF6eTtcbiAgICBpZiAodHlwZW9mIGluZGV4ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuc2xpZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuXG4gICAgY29uc3QgJHNsaWRlRWwgPSBpc1ZpcnR1YWxcbiAgICAgID8gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke2luZGV4fVwiXWApXG4gICAgICA6IHN3aXBlci5zbGlkZXMuZXEoaW5kZXgpO1xuXG4gICAgbGV0ICRpbWFnZXMgPSAkc2xpZGVFbC5maW5kKGAuJHtwYXJhbXMuZWxlbWVudENsYXNzfTpub3QoLiR7cGFyYW1zLmxvYWRlZENsYXNzfSk6bm90KC4ke3BhcmFtcy5sb2FkaW5nQ2xhc3N9KWApO1xuICAgIGlmICgkc2xpZGVFbC5oYXNDbGFzcyhwYXJhbXMuZWxlbWVudENsYXNzKSAmJiAhJHNsaWRlRWwuaGFzQ2xhc3MocGFyYW1zLmxvYWRlZENsYXNzKSAmJiAhJHNsaWRlRWwuaGFzQ2xhc3MocGFyYW1zLmxvYWRpbmdDbGFzcykpIHtcbiAgICAgICRpbWFnZXMgPSAkaW1hZ2VzLmFkZCgkc2xpZGVFbFswXSk7XG4gICAgfVxuICAgIGlmICgkaW1hZ2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgJGltYWdlcy5lYWNoKChpbWFnZUluZGV4LCBpbWFnZUVsKSA9PiB7XG4gICAgICBjb25zdCAkaW1hZ2VFbCA9ICQoaW1hZ2VFbCk7XG4gICAgICAkaW1hZ2VFbC5hZGRDbGFzcyhwYXJhbXMubG9hZGluZ0NsYXNzKTtcblxuICAgICAgY29uc3QgYmFja2dyb3VuZCA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtYmFja2dyb3VuZCcpO1xuICAgICAgY29uc3Qgc3JjID0gJGltYWdlRWwuYXR0cignZGF0YS1zcmMnKTtcbiAgICAgIGNvbnN0IHNyY3NldCA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICBjb25zdCBzaXplcyA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtc2l6ZXMnKTtcblxuICAgICAgc3dpcGVyLmxvYWRJbWFnZSgkaW1hZ2VFbFswXSwgKHNyYyB8fCBiYWNrZ3JvdW5kKSwgc3Jjc2V0LCBzaXplcywgZmFsc2UsICgpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzd2lwZXIgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlciA9PT0gbnVsbCB8fCAhc3dpcGVyIHx8IChzd2lwZXIgJiYgIXN3aXBlci5wYXJhbXMpIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgaWYgKGJhY2tncm91bmQpIHtcbiAgICAgICAgICAkaW1hZ2VFbC5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCBgdXJsKFwiJHtiYWNrZ3JvdW5kfVwiKWApO1xuICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtYmFja2dyb3VuZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzcmNzZXQpIHtcbiAgICAgICAgICAgICRpbWFnZUVsLmF0dHIoJ3NyY3NldCcsIHNyY3NldCk7XG4gICAgICAgICAgICAkaW1hZ2VFbC5yZW1vdmVBdHRyKCdkYXRhLXNyY3NldCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2l6ZXMpIHtcbiAgICAgICAgICAgICRpbWFnZUVsLmF0dHIoJ3NpemVzJywgc2l6ZXMpO1xuICAgICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1zaXplcycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3JjKSB7XG4gICAgICAgICAgICAkaW1hZ2VFbC5hdHRyKCdzcmMnLCBzcmMpO1xuICAgICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1zcmMnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAkaW1hZ2VFbC5hZGRDbGFzcyhwYXJhbXMubG9hZGVkQ2xhc3MpLnJlbW92ZUNsYXNzKHBhcmFtcy5sb2FkaW5nQ2xhc3MpO1xuICAgICAgICAkc2xpZGVFbC5maW5kKGAuJHtwYXJhbXMucHJlbG9hZGVyQ2xhc3N9YCkucmVtb3ZlKCk7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgJiYgbG9hZEluRHVwbGljYXRlKSB7XG4gICAgICAgICAgY29uc3Qgc2xpZGVPcmlnaW5hbEluZGV4ID0gJHNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgICAgICBpZiAoJHNsaWRlRWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxTbGlkZSA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlT3JpZ2luYWxJbmRleH1cIl06bm90KC4ke3N3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pYCk7XG4gICAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShvcmlnaW5hbFNsaWRlLmluZGV4KCksIGZhbHNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZHVwbGljYXRlZFNsaWRlID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlT3JpZ2luYWxJbmRleH1cIl1gKTtcbiAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGR1cGxpY2F0ZWRTbGlkZS5pbmRleCgpLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN3aXBlci5lbWl0KCdsYXp5SW1hZ2VSZWFkeScsICRzbGlkZUVsWzBdLCAkaW1hZ2VFbFswXSk7XG4gICAgICB9KTtcblxuICAgICAgc3dpcGVyLmVtaXQoJ2xhenlJbWFnZUxvYWQnLCAkc2xpZGVFbFswXSwgJGltYWdlRWxbMF0pO1xuICAgIH0pO1xuICB9LFxuICBsb2FkKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgJHdyYXBwZXJFbCwgcGFyYW1zOiBzd2lwZXJQYXJhbXMsIHNsaWRlcywgYWN0aXZlSW5kZXgsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXJQYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlclBhcmFtcy5sYXp5O1xuXG4gICAgbGV0IHNsaWRlc1BlclZpZXcgPSBzd2lwZXJQYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICBpZiAoc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgICBzbGlkZXNQZXJWaWV3ID0gMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzbGlkZUV4aXN0KGluZGV4KSB7XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIGlmICgkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXJQYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke2luZGV4fVwiXWApLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNsaWRlc1tpbmRleF0pIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzbGlkZUluZGV4KHNsaWRlRWwpIHtcbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgcmV0dXJuICQoc2xpZGVFbCkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAkKHNsaWRlRWwpLmluZGV4KCk7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXIubGF6eS5pbml0aWFsSW1hZ2VMb2FkZWQpIHN3aXBlci5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCA9IHRydWU7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXJQYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3N9YCkuZWFjaCgoZWxJbmRleCwgc2xpZGVFbCkgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IGlzVmlydHVhbCA/ICQoc2xpZGVFbCkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSA6ICQoc2xpZGVFbCkuaW5kZXgoKTtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChzbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4OyBpIDwgYWN0aXZlSW5kZXggKyBzbGlkZXNQZXJWaWV3OyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlRXhpc3QoaSkpIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShhY3RpdmVJbmRleCk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMubG9hZFByZXZOZXh0KSB7XG4gICAgICBpZiAoc2xpZGVzUGVyVmlldyA+IDEgfHwgKHBhcmFtcy5sb2FkUHJldk5leHRBbW91bnQgJiYgcGFyYW1zLmxvYWRQcmV2TmV4dEFtb3VudCA+IDEpKSB7XG4gICAgICAgIGNvbnN0IGFtb3VudCA9IHBhcmFtcy5sb2FkUHJldk5leHRBbW91bnQ7XG4gICAgICAgIGNvbnN0IHNwdiA9IHNsaWRlc1BlclZpZXc7XG4gICAgICAgIGNvbnN0IG1heEluZGV4ID0gTWF0aC5taW4oYWN0aXZlSW5kZXggKyBzcHYgKyBNYXRoLm1heChhbW91bnQsIHNwdiksIHNsaWRlcy5sZW5ndGgpO1xuICAgICAgICBjb25zdCBtaW5JbmRleCA9IE1hdGgubWF4KGFjdGl2ZUluZGV4IC0gTWF0aC5tYXgoc3B2LCBhbW91bnQpLCAwKTtcbiAgICAgICAgLy8gTmV4dCBTbGlkZXNcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzUGVyVmlldzsgaSA8IG1heEluZGV4OyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoc2xpZGVFeGlzdChpKSkgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoaSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJldiBTbGlkZXNcbiAgICAgICAgZm9yIChsZXQgaSA9IG1pbkluZGV4OyBpIDwgYWN0aXZlSW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZUV4aXN0KGkpKSBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbmV4dFNsaWRlID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7c3dpcGVyUGFyYW1zLnNsaWRlTmV4dENsYXNzfWApO1xuICAgICAgICBpZiAobmV4dFNsaWRlLmxlbmd0aCA+IDApIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKHNsaWRlSW5kZXgobmV4dFNsaWRlKSk7XG5cbiAgICAgICAgY29uc3QgcHJldlNsaWRlID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7c3dpcGVyUGFyYW1zLnNsaWRlUHJldkNsYXNzfWApO1xuICAgICAgICBpZiAocHJldlNsaWRlLmxlbmd0aCA+IDApIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKHNsaWRlSW5kZXgocHJldlNsaWRlKSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxufTtcblxudmFyIExhenkkMSA9IHtcbiAgbmFtZTogJ2xhenknLFxuICBwYXJhbXM6IHtcbiAgICBsYXp5OiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIGxvYWRQcmV2TmV4dDogZmFsc2UsXG4gICAgICBsb2FkUHJldk5leHRBbW91bnQ6IDEsXG4gICAgICBsb2FkT25UcmFuc2l0aW9uU3RhcnQ6IGZhbHNlLFxuXG4gICAgICBlbGVtZW50Q2xhc3M6ICdzd2lwZXItbGF6eScsXG4gICAgICBsb2FkaW5nQ2xhc3M6ICdzd2lwZXItbGF6eS1sb2FkaW5nJyxcbiAgICAgIGxvYWRlZENsYXNzOiAnc3dpcGVyLWxhenktbG9hZGVkJyxcbiAgICAgIHByZWxvYWRlckNsYXNzOiAnc3dpcGVyLWxhenktcHJlbG9hZGVyJyxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBsYXp5OiB7XG4gICAgICAgIGluaXRpYWxJbWFnZUxvYWRlZDogZmFsc2UsXG4gICAgICAgIGxvYWQ6IExhenkubG9hZC5iaW5kKHN3aXBlciksXG4gICAgICAgIGxvYWRJblNsaWRlOiBMYXp5LmxvYWRJblNsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy5wcmVsb2FkSW1hZ2VzKSB7XG4gICAgICAgIHN3aXBlci5wYXJhbXMucHJlbG9hZEltYWdlcyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiBzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSA9PT0gMCkge1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzY3JvbGwoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgIXN3aXBlci5wYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVzaXplKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzY3JvbGxiYXJEcmFnTW92ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNpdGlvblN0YXJ0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmxvYWRPblRyYW5zaXRpb25TdGFydCB8fCAoIXN3aXBlci5wYXJhbXMubGF6eS5sb2FkT25UcmFuc2l0aW9uU3RhcnQgJiYgIXN3aXBlci5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCkpIHtcbiAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHRyYW5zaXRpb25FbmQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmICFzd2lwZXIucGFyYW1zLmxhenkubG9hZE9uVHJhbnNpdGlvblN0YXJ0KSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufTtcblxuLyogZXNsaW50IG5vLWJpdHdpc2U6IFtcImVycm9yXCIsIHsgXCJhbGxvd1wiOiBbXCI+PlwiXSB9XSAqL1xuXG5jb25zdCBDb250cm9sbGVyID0ge1xuICBMaW5lYXJTcGxpbmU6IGZ1bmN0aW9uIExpbmVhclNwbGluZSh4LCB5KSB7XG4gICAgY29uc3QgYmluYXJ5U2VhcmNoID0gKGZ1bmN0aW9uIHNlYXJjaCgpIHtcbiAgICAgIGxldCBtYXhJbmRleDtcbiAgICAgIGxldCBtaW5JbmRleDtcbiAgICAgIGxldCBndWVzcztcbiAgICAgIHJldHVybiAoYXJyYXksIHZhbCkgPT4ge1xuICAgICAgICBtaW5JbmRleCA9IC0xO1xuICAgICAgICBtYXhJbmRleCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKG1heEluZGV4IC0gbWluSW5kZXggPiAxKSB7XG4gICAgICAgICAgZ3Vlc3MgPSBtYXhJbmRleCArIG1pbkluZGV4ID4+IDE7XG4gICAgICAgICAgaWYgKGFycmF5W2d1ZXNzXSA8PSB2YWwpIHtcbiAgICAgICAgICAgIG1pbkluZGV4ID0gZ3Vlc3M7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1heEluZGV4ID0gZ3Vlc3M7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXhJbmRleDtcbiAgICAgIH07XG4gICAgfSgpKTtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy5sYXN0SW5kZXggPSB4Lmxlbmd0aCAtIDE7XG4gICAgLy8gR2l2ZW4gYW4geCB2YWx1ZSAoeDIpLCByZXR1cm4gdGhlIGV4cGVjdGVkIHkyIHZhbHVlOlxuICAgIC8vICh4MSx5MSkgaXMgdGhlIGtub3duIHBvaW50IGJlZm9yZSBnaXZlbiB2YWx1ZSxcbiAgICAvLyAoeDMseTMpIGlzIHRoZSBrbm93biBwb2ludCBhZnRlciBnaXZlbiB2YWx1ZS5cbiAgICBsZXQgaTE7XG4gICAgbGV0IGkzO1xuXG4gICAgdGhpcy5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKHgyKSB7XG4gICAgICBpZiAoIXgyKSByZXR1cm4gMDtcblxuICAgICAgLy8gR2V0IHRoZSBpbmRleGVzIG9mIHgxIGFuZCB4MyAodGhlIGFycmF5IGluZGV4ZXMgYmVmb3JlIGFuZCBhZnRlciBnaXZlbiB4Mik6XG4gICAgICBpMyA9IGJpbmFyeVNlYXJjaCh0aGlzLngsIHgyKTtcbiAgICAgIGkxID0gaTMgLSAxO1xuXG4gICAgICAvLyBXZSBoYXZlIG91ciBpbmRleGVzIGkxICYgaTMsIHNvIHdlIGNhbiBjYWxjdWxhdGUgYWxyZWFkeTpcbiAgICAgIC8vIHkyIDo9ICgoeDLiiJJ4MSkgw5cgKHkz4oiSeTEpKSDDtyAoeDPiiJJ4MSkgKyB5MVxuICAgICAgcmV0dXJuICgoKHgyIC0gdGhpcy54W2kxXSkgKiAodGhpcy55W2kzXSAtIHRoaXMueVtpMV0pKSAvICh0aGlzLnhbaTNdIC0gdGhpcy54W2kxXSkpICsgdGhpcy55W2kxXTtcbiAgICB9O1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICAvLyB4eHg6IGZvciBub3cgaSB3aWxsIGp1c3Qgc2F2ZSBvbmUgc3BsaW5lIGZ1bmN0aW9uIHRvIHRvXG4gIGdldEludGVycG9sYXRlRnVuY3Rpb24oYykge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHN3aXBlci5wYXJhbXMubG9vcFxuICAgICAgICA/IG5ldyBDb250cm9sbGVyLkxpbmVhclNwbGluZShzd2lwZXIuc2xpZGVzR3JpZCwgYy5zbGlkZXNHcmlkKVxuICAgICAgICA6IG5ldyBDb250cm9sbGVyLkxpbmVhclNwbGluZShzd2lwZXIuc25hcEdyaWQsIGMuc25hcEdyaWQpO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNsYXRlKHNldFRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBjb250cm9sbGVkID0gc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbDtcbiAgICBsZXQgbXVsdGlwbGllcjtcbiAgICBsZXQgY29udHJvbGxlZFRyYW5zbGF0ZTtcbiAgICBmdW5jdGlvbiBzZXRDb250cm9sbGVkVHJhbnNsYXRlKGMpIHtcbiAgICAgIC8vIHRoaXMgd2lsbCBjcmVhdGUgYW4gSW50ZXJwb2xhdGUgZnVuY3Rpb24gYmFzZWQgb24gdGhlIHNuYXBHcmlkc1xuICAgICAgLy8geCBpcyB0aGUgR3JpZCBvZiB0aGUgc2Nyb2xsZWQgc2Nyb2xsZXIgYW5kIHkgd2lsbCBiZSB0aGUgY29udHJvbGxlZCBzY3JvbGxlclxuICAgICAgLy8gaXQgbWFrZXMgc2Vuc2UgdG8gY3JlYXRlIHRoaXMgb25seSBvbmNlIGFuZCByZWNhbGwgaXQgZm9yIHRoZSBpbnRlcnBvbGF0aW9uXG4gICAgICAvLyB0aGUgZnVuY3Rpb24gZG9lcyBhIGxvdCBvZiB2YWx1ZSBjYWNoaW5nIGZvciBwZXJmb3JtYW5jZVxuICAgICAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdzbGlkZScpIHtcbiAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbihjKTtcbiAgICAgICAgLy8gaSBhbSBub3Qgc3VyZSB3aHkgdGhlIHZhbHVlcyBoYXZlIHRvIGJlIG11bHRpcGxpY2F0ZWQgdGhpcyB3YXksIHRyaWVkIHRvIGludmVydCB0aGUgc25hcEdyaWRcbiAgICAgICAgLy8gYnV0IGl0IGRpZCBub3Qgd29yayBvdXRcbiAgICAgICAgY29udHJvbGxlZFRyYW5zbGF0ZSA9IC1zd2lwZXIuY29udHJvbGxlci5zcGxpbmUuaW50ZXJwb2xhdGUoLXRyYW5zbGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghY29udHJvbGxlZFRyYW5zbGF0ZSB8fCBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdjb250YWluZXInKSB7XG4gICAgICAgIG11bHRpcGxpZXIgPSAoYy5tYXhUcmFuc2xhdGUoKSAtIGMubWluVHJhbnNsYXRlKCkpIC8gKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSAoKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBtdWx0aXBsaWVyKSArIGMubWluVHJhbnNsYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuaW52ZXJzZSkge1xuICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gYy5tYXhUcmFuc2xhdGUoKSAtIGNvbnRyb2xsZWRUcmFuc2xhdGU7XG4gICAgICB9XG4gICAgICBjLnVwZGF0ZVByb2dyZXNzKGNvbnRyb2xsZWRUcmFuc2xhdGUpO1xuICAgICAgYy5zZXRUcmFuc2xhdGUoY29udHJvbGxlZFRyYW5zbGF0ZSwgc3dpcGVyKTtcbiAgICAgIGMudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIGMudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250cm9sbGVkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChjb250cm9sbGVkW2ldICE9PSBieUNvbnRyb2xsZXIgJiYgY29udHJvbGxlZFtpXSBpbnN0YW5jZW9mIFN3aXBlcikge1xuICAgICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoY29udHJvbGxlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7XG4gICAgICBzZXRDb250cm9sbGVkVHJhbnNsYXRlKGNvbnRyb2xsZWQpO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBjb250cm9sbGVkID0gc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbDtcbiAgICBsZXQgaTtcbiAgICBmdW5jdGlvbiBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjKSB7XG4gICAgICBjLnNldFRyYW5zaXRpb24oZHVyYXRpb24sIHN3aXBlcik7XG4gICAgICBpZiAoZHVyYXRpb24gIT09IDApIHtcbiAgICAgICAgYy50cmFuc2l0aW9uU3RhcnQoKTtcbiAgICAgICAgaWYgKGMucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgICBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICBjLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjLiR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgaWYgKCFjb250cm9sbGVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKGMucGFyYW1zLmxvb3AgJiYgc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmJ5ID09PSAnc2xpZGUnKSB7XG4gICAgICAgICAgICBjLmxvb3BGaXgoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYy50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNvbnRyb2xsZWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGNvbnRyb2xsZWRbaV0gIT09IGJ5Q29udHJvbGxlciAmJiBjb250cm9sbGVkW2ldIGluc3RhbmNlb2YgU3dpcGVyKSB7XG4gICAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oY29udHJvbGxlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7XG4gICAgICBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjb250cm9sbGVkKTtcbiAgICB9XG4gIH0sXG59O1xudmFyIENvbnRyb2xsZXIkMSA9IHtcbiAgbmFtZTogJ2NvbnRyb2xsZXInLFxuICBwYXJhbXM6IHtcbiAgICBjb250cm9sbGVyOiB7XG4gICAgICBjb250cm9sOiB1bmRlZmluZWQsXG4gICAgICBpbnZlcnNlOiBmYWxzZSxcbiAgICAgIGJ5OiAnc2xpZGUnLCAvLyBvciAnY29udGFpbmVyJ1xuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGNvbnRyb2xsZXI6IHtcbiAgICAgICAgY29udHJvbDogc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmNvbnRyb2wsXG4gICAgICAgIGdldEludGVycG9sYXRlRnVuY3Rpb246IENvbnRyb2xsZXIuZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICAgIHNldFRyYW5zbGF0ZTogQ29udHJvbGxlci5zZXRUcmFuc2xhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRUcmFuc2l0aW9uOiBDb250cm9sbGVyLnNldFRyYW5zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICB1cGRhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSByZXR1cm47XG4gICAgICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5jb250cm9sbGVyLnNwbGluZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlc2l6ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICAgIGlmIChzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gdW5kZWZpbmVkO1xuICAgICAgICBkZWxldGUgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lO1xuICAgICAgfVxuICAgIH0sXG4gICAgb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSByZXR1cm47XG4gICAgICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5jb250cm9sbGVyLnNwbGluZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKTtcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgYTExeSA9IHtcbiAgbWFrZUVsRm9jdXNhYmxlKCRlbCkge1xuICAgICRlbC5hdHRyKCd0YWJJbmRleCcsICcwJyk7XG4gICAgcmV0dXJuICRlbDtcbiAgfSxcbiAgYWRkRWxSb2xlKCRlbCwgcm9sZSkge1xuICAgICRlbC5hdHRyKCdyb2xlJywgcm9sZSk7XG4gICAgcmV0dXJuICRlbDtcbiAgfSxcbiAgYWRkRWxMYWJlbCgkZWwsIGxhYmVsKSB7XG4gICAgJGVsLmF0dHIoJ2FyaWEtbGFiZWwnLCBsYWJlbCk7XG4gICAgcmV0dXJuICRlbDtcbiAgfSxcbiAgZGlzYWJsZUVsKCRlbCkge1xuICAgICRlbC5hdHRyKCdhcmlhLWRpc2FibGVkJywgdHJ1ZSk7XG4gICAgcmV0dXJuICRlbDtcbiAgfSxcbiAgZW5hYmxlRWwoJGVsKSB7XG4gICAgJGVsLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgcmV0dXJuICRlbDtcbiAgfSxcbiAgb25FbnRlcktleShlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgaWYgKGUua2V5Q29kZSAhPT0gMTMpIHJldHVybjtcbiAgICBjb25zdCAkdGFyZ2V0RWwgPSAkKGUudGFyZ2V0KTtcbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbCAmJiAkdGFyZ2V0RWwuaXMoc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbCkpIHtcbiAgICAgIGlmICghKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgIHN3aXBlci5hMTF5Lm5vdGlmeShwYXJhbXMubGFzdFNsaWRlTWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbCAmJiAkdGFyZ2V0RWwuaXMoc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbCkpIHtcbiAgICAgIGlmICghKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICAgIHN3aXBlci5hMTF5Lm5vdGlmeShwYXJhbXMuZmlyc3RTbGlkZU1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5wcmV2U2xpZGVNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmICR0YXJnZXRFbC5pcyhgLiR7c3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzfWApKSB7XG4gICAgICAkdGFyZ2V0RWxbMF0uY2xpY2soKTtcbiAgICB9XG4gIH0sXG4gIG5vdGlmeShtZXNzYWdlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBub3RpZmljYXRpb24gPSBzd2lwZXIuYTExeS5saXZlUmVnaW9uO1xuICAgIGlmIChub3RpZmljYXRpb24ubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgbm90aWZpY2F0aW9uLmh0bWwoJycpO1xuICAgIG5vdGlmaWNhdGlvbi5odG1sKG1lc3NhZ2UpO1xuICB9LFxuICB1cGRhdGVOYXZpZ2F0aW9uKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSByZXR1cm47XG4gICAgY29uc3QgeyAkbmV4dEVsLCAkcHJldkVsIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcblxuICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICBzd2lwZXIuYTExeS5kaXNhYmxlRWwoJHByZXZFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuYTExeS5lbmFibGVFbCgkcHJldkVsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgIHN3aXBlci5hMTF5LmRpc2FibGVFbCgkbmV4dEVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5hMTF5LmVuYWJsZUVsKCRuZXh0RWwpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgdXBkYXRlUGFnaW5hdGlvbigpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoKSB7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmVhY2goKGJ1bGxldEluZGV4LCBidWxsZXRFbCkgPT4ge1xuICAgICAgICBjb25zdCAkYnVsbGV0RWwgPSAkKGJ1bGxldEVsKTtcbiAgICAgICAgc3dpcGVyLmExMXkubWFrZUVsRm9jdXNhYmxlKCRidWxsZXRFbCk7XG4gICAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkYnVsbGV0RWwsICdidXR0b24nKTtcbiAgICAgICAgc3dpcGVyLmExMXkuYWRkRWxMYWJlbCgkYnVsbGV0RWwsIHBhcmFtcy5wYWdpbmF0aW9uQnVsbGV0TWVzc2FnZS5yZXBsYWNlKC97e2luZGV4fX0vLCAkYnVsbGV0RWwuaW5kZXgoKSArIDEpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgaW5pdCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gICAgc3dpcGVyLiRlbC5hcHBlbmQoc3dpcGVyLmExMXkubGl2ZVJlZ2lvbik7XG5cbiAgICAvLyBOYXZpZ2F0aW9uXG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIGxldCAkbmV4dEVsO1xuICAgIGxldCAkcHJldkVsO1xuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsKSB7XG4gICAgICAkbmV4dEVsID0gc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbDtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwpIHtcbiAgICAgICRwcmV2RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsO1xuICAgIH1cbiAgICBpZiAoJG5leHRFbCkge1xuICAgICAgc3dpcGVyLmExMXkubWFrZUVsRm9jdXNhYmxlKCRuZXh0RWwpO1xuICAgICAgc3dpcGVyLmExMXkuYWRkRWxSb2xlKCRuZXh0RWwsICdidXR0b24nKTtcbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsTGFiZWwoJG5leHRFbCwgcGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpO1xuICAgICAgJG5leHRFbC5vbigna2V5ZG93bicsIHN3aXBlci5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgIH1cbiAgICBpZiAoJHByZXZFbCkge1xuICAgICAgc3dpcGVyLmExMXkubWFrZUVsRm9jdXNhYmxlKCRwcmV2RWwpO1xuICAgICAgc3dpcGVyLmExMXkuYWRkRWxSb2xlKCRwcmV2RWwsICdidXR0b24nKTtcbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsTGFiZWwoJHByZXZFbCwgcGFyYW1zLnByZXZTbGlkZU1lc3NhZ2UpO1xuICAgICAgJHByZXZFbC5vbigna2V5ZG93bicsIHN3aXBlci5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgIH1cblxuICAgIC8vIFBhZ2luYXRpb25cbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoKSB7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi4kZWwub24oJ2tleWRvd24nLCBgLiR7c3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzfWAsIHN3aXBlci5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuYTExeS5saXZlUmVnaW9uICYmIHN3aXBlci5hMTF5LmxpdmVSZWdpb24ubGVuZ3RoID4gMCkgc3dpcGVyLmExMXkubGl2ZVJlZ2lvbi5yZW1vdmUoKTtcblxuICAgIGxldCAkbmV4dEVsO1xuICAgIGxldCAkcHJldkVsO1xuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsKSB7XG4gICAgICAkbmV4dEVsID0gc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbDtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwpIHtcbiAgICAgICRwcmV2RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsO1xuICAgIH1cbiAgICBpZiAoJG5leHRFbCkge1xuICAgICAgJG5leHRFbC5vZmYoJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG4gICAgaWYgKCRwcmV2RWwpIHtcbiAgICAgICRwcmV2RWwub2ZmKCdrZXlkb3duJywgc3dpcGVyLmExMXkub25FbnRlcktleSk7XG4gICAgfVxuXG4gICAgLy8gUGFnaW5hdGlvblxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGgpIHtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC5vZmYoJ2tleWRvd24nLCBgLiR7c3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzfWAsIHN3aXBlci5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgIH1cbiAgfSxcbn07XG52YXIgQTExeSA9IHtcbiAgbmFtZTogJ2ExMXknLFxuICBwYXJhbXM6IHtcbiAgICBhMTF5OiB7XG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgbm90aWZpY2F0aW9uQ2xhc3M6ICdzd2lwZXItbm90aWZpY2F0aW9uJyxcbiAgICAgIHByZXZTbGlkZU1lc3NhZ2U6ICdQcmV2aW91cyBzbGlkZScsXG4gICAgICBuZXh0U2xpZGVNZXNzYWdlOiAnTmV4dCBzbGlkZScsXG4gICAgICBmaXJzdFNsaWRlTWVzc2FnZTogJ1RoaXMgaXMgdGhlIGZpcnN0IHNsaWRlJyxcbiAgICAgIGxhc3RTbGlkZU1lc3NhZ2U6ICdUaGlzIGlzIHRoZSBsYXN0IHNsaWRlJyxcbiAgICAgIHBhZ2luYXRpb25CdWxsZXRNZXNzYWdlOiAnR28gdG8gc2xpZGUge3tpbmRleH19JyxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBhMTF5OiB7XG4gICAgICAgIGxpdmVSZWdpb246ICQoYDxzcGFuIGNsYXNzPVwiJHtzd2lwZXIucGFyYW1zLmExMXkubm90aWZpY2F0aW9uQ2xhc3N9XCIgYXJpYS1saXZlPVwiYXNzZXJ0aXZlXCIgYXJpYS1hdG9taWM9XCJ0cnVlXCI+PC9zcGFuPmApLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBPYmplY3Qua2V5cyhhMTF5KS5mb3JFYWNoKChtZXRob2ROYW1lKSA9PiB7XG4gICAgICBzd2lwZXIuYTExeVttZXRob2ROYW1lXSA9IGExMXlbbWV0aG9kTmFtZV0uYmluZChzd2lwZXIpO1xuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmExMXkuaW5pdCgpO1xuICAgICAgc3dpcGVyLmExMXkudXBkYXRlTmF2aWdhdGlvbigpO1xuICAgIH0sXG4gICAgdG9FZGdlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5hMTF5LnVwZGF0ZU5hdmlnYXRpb24oKTtcbiAgICB9LFxuICAgIGZyb21FZGdlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5hMTF5LnVwZGF0ZU5hdmlnYXRpb24oKTtcbiAgICB9LFxuICAgIHBhZ2luYXRpb25VcGRhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmExMXkudXBkYXRlUGFnaW5hdGlvbigpO1xuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuYTExeS5kZXN0cm95KCk7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IEhpc3RvcnkgPSB7XG4gIGluaXQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeSkgcmV0dXJuO1xuICAgIGlmICghd2luZG93Lmhpc3RvcnkgfHwgIXdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSkge1xuICAgICAgc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGhpc3RvcnkgPSBzd2lwZXIuaGlzdG9yeTtcbiAgICBoaXN0b3J5LmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBoaXN0b3J5LnBhdGhzID0gSGlzdG9yeS5nZXRQYXRoVmFsdWVzKCk7XG4gICAgaWYgKCFoaXN0b3J5LnBhdGhzLmtleSAmJiAhaGlzdG9yeS5wYXRocy52YWx1ZSkgcmV0dXJuO1xuICAgIGhpc3Rvcnkuc2Nyb2xsVG9TbGlkZSgwLCBoaXN0b3J5LnBhdGhzLnZhbHVlLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBzd2lwZXIuaGlzdG9yeS5zZXRIaXN0b3J5UG9wU3RhdGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgc3dpcGVyLmhpc3Rvcnkuc2V0SGlzdG9yeVBvcFN0YXRlKTtcbiAgICB9XG4gIH0sXG4gIHNldEhpc3RvcnlQb3BTdGF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5oaXN0b3J5LnBhdGhzID0gSGlzdG9yeS5nZXRQYXRoVmFsdWVzKCk7XG4gICAgc3dpcGVyLmhpc3Rvcnkuc2Nyb2xsVG9TbGlkZShzd2lwZXIucGFyYW1zLnNwZWVkLCBzd2lwZXIuaGlzdG9yeS5wYXRocy52YWx1ZSwgZmFsc2UpO1xuICB9LFxuICBnZXRQYXRoVmFsdWVzKCkge1xuICAgIGNvbnN0IHBhdGhBcnJheSA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zbGljZSgxKS5zcGxpdCgnLycpLmZpbHRlcihwYXJ0ID0+IHBhcnQgIT09ICcnKTtcbiAgICBjb25zdCB0b3RhbCA9IHBhdGhBcnJheS5sZW5ndGg7XG4gICAgY29uc3Qga2V5ID0gcGF0aEFycmF5W3RvdGFsIC0gMl07XG4gICAgY29uc3QgdmFsdWUgPSBwYXRoQXJyYXlbdG90YWwgLSAxXTtcbiAgICByZXR1cm4geyBrZXksIHZhbHVlIH07XG4gIH0sXG4gIHNldEhpc3Rvcnkoa2V5LCBpbmRleCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuaGlzdG9yeS5pbml0aWFsaXplZCB8fCAhc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHJldHVybjtcbiAgICBjb25zdCBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaW5kZXgpO1xuICAgIGxldCB2YWx1ZSA9IEhpc3Rvcnkuc2x1Z2lmeShzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKSk7XG4gICAgaWYgKCF3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgdmFsdWUgPSBgJHtrZXl9LyR7dmFsdWV9YDtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudFN0YXRlID0gd2luZG93Lmhpc3Rvcnkuc3RhdGU7XG4gICAgaWYgKGN1cnJlbnRTdGF0ZSAmJiBjdXJyZW50U3RhdGUudmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoeyB2YWx1ZSB9LCBudWxsLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7IHZhbHVlIH0sIG51bGwsIHZhbHVlKTtcbiAgICB9XG4gIH0sXG4gIHNsdWdpZnkodGV4dCkge1xuICAgIHJldHVybiB0ZXh0LnRvU3RyaW5nKClcbiAgICAgIC5yZXBsYWNlKC9cXHMrL2csICctJylcbiAgICAgIC5yZXBsYWNlKC9bXlxcdy1dKy9nLCAnJylcbiAgICAgIC5yZXBsYWNlKC8tLSsvZywgJy0nKVxuICAgICAgLnJlcGxhY2UoL14tKy8sICcnKVxuICAgICAgLnJlcGxhY2UoLy0rJC8sICcnKTtcbiAgfSxcbiAgc2Nyb2xsVG9TbGlkZShzcGVlZCwgdmFsdWUsIHJ1bkNhbGxiYWNrcykge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgICAgIGNvbnN0IHNsaWRlSGlzdG9yeSA9IEhpc3Rvcnkuc2x1Z2lmeShzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKSk7XG4gICAgICAgIGlmIChzbGlkZUhpc3RvcnkgPT09IHZhbHVlICYmICFzbGlkZS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgY29uc3QgaW5kZXggPSBzbGlkZS5pbmRleCgpO1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbygwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzKTtcbiAgICB9XG4gIH0sXG59O1xuXG52YXIgSGlzdG9yeSQxID0ge1xuICBuYW1lOiAnaGlzdG9yeScsXG4gIHBhcmFtczoge1xuICAgIGhpc3Rvcnk6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgcmVwbGFjZVN0YXRlOiBmYWxzZSxcbiAgICAgIGtleTogJ3NsaWRlcycsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgaGlzdG9yeToge1xuICAgICAgICBpbml0OiBIaXN0b3J5LmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRIaXN0b3J5OiBIaXN0b3J5LnNldEhpc3RvcnkuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRIaXN0b3J5UG9wU3RhdGU6IEhpc3Rvcnkuc2V0SGlzdG9yeVBvcFN0YXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2Nyb2xsVG9TbGlkZTogSGlzdG9yeS5zY3JvbGxUb1NsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZGVzdHJveTogSGlzdG9yeS5kZXN0cm95LmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmhpc3RvcnkuaW5pdCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmhpc3RvcnkuZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLmhpc3RvcnkuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgc3dpcGVyLmhpc3Rvcnkuc2V0SGlzdG9yeShzd2lwZXIucGFyYW1zLmhpc3Rvcnkua2V5LCBzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBIYXNoTmF2aWdhdGlvbiA9IHtcbiAgb25IYXNoQ2FuZ2UoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBuZXdIYXNoID0gZG9jdW1lbnQubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuICAgIGNvbnN0IGFjdGl2ZVNsaWRlSGFzaCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KS5hdHRyKCdkYXRhLWhhc2gnKTtcbiAgICBpZiAobmV3SGFzaCAhPT0gYWN0aXZlU2xpZGVIYXNoKSB7XG4gICAgICBjb25zdCBuZXdJbmRleCA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtaGFzaD1cIiR7bmV3SGFzaH1cIl1gKS5pbmRleCgpO1xuICAgICAgaWYgKHR5cGVvZiBuZXdJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4KTtcbiAgICB9XG4gIH0sXG4gIHNldEhhc2goKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCB8fCAhc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ucmVwbGFjZVN0YXRlICYmIHdpbmRvdy5oaXN0b3J5ICYmIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIChgIyR7c3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtaGFzaCcpfWAgfHwgJycpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICBjb25zdCBoYXNoID0gc2xpZGUuYXR0cignZGF0YS1oYXNoJykgfHwgc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5Jyk7XG4gICAgICBkb2N1bWVudC5sb2NhdGlvbi5oYXNoID0gaGFzaCB8fCAnJztcbiAgICB9XG4gIH0sXG4gIGluaXQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCB8fCAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5ICYmIHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSkgcmV0dXJuO1xuICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgY29uc3QgaGFzaCA9IGRvY3VtZW50LmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKTtcbiAgICBpZiAoaGFzaCkge1xuICAgICAgY29uc3Qgc3BlZWQgPSAwO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgICBjb25zdCBzbGlkZUhhc2ggPSBzbGlkZS5hdHRyKCdkYXRhLWhhc2gnKSB8fCBzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKTtcbiAgICAgICAgaWYgKHNsaWRlSGFzaCA9PT0gaGFzaCAmJiAhc2xpZGUuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gc2xpZGUuaW5kZXgoKTtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi53YXRjaFN0YXRlKSB7XG4gICAgICAkKHdpbmRvdykub24oJ2hhc2hjaGFuZ2UnLCBzd2lwZXIuaGFzaE5hdmlnYXRpb24ub25IYXNoQ2FuZ2UpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLndhdGNoU3RhdGUpIHtcbiAgICAgICQod2luZG93KS5vZmYoJ2hhc2hjaGFuZ2UnLCBzd2lwZXIuaGFzaE5hdmlnYXRpb24ub25IYXNoQ2FuZ2UpO1xuICAgIH1cbiAgfSxcbn07XG52YXIgSGFzaE5hdmlnYXRpb24kMSA9IHtcbiAgbmFtZTogJ2hhc2gtbmF2aWdhdGlvbicsXG4gIHBhcmFtczoge1xuICAgIGhhc2hOYXZpZ2F0aW9uOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHJlcGxhY2VTdGF0ZTogZmFsc2UsXG4gICAgICB3YXRjaFN0YXRlOiBmYWxzZSxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBoYXNoTmF2aWdhdGlvbjoge1xuICAgICAgICBpbml0aWFsaXplZDogZmFsc2UsXG4gICAgICAgIGluaXQ6IEhhc2hOYXZpZ2F0aW9uLmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICBkZXN0cm95OiBIYXNoTmF2aWdhdGlvbi5kZXN0cm95LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2V0SGFzaDogSGFzaE5hdmlnYXRpb24uc2V0SGFzaC5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uSGFzaENhbmdlOiBIYXNoTmF2aWdhdGlvbi5vbkhhc2hDYW5nZS5iaW5kKHN3aXBlciksXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0cmFuc2l0aW9uRW5kKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLnNldEhhc2goKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufTtcblxuLyogZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBcIm9mZlwiICovXG5cbmNvbnN0IEF1dG9wbGF5ID0ge1xuICBydW4oKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCAkYWN0aXZlU2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICBsZXQgZGVsYXkgPSBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRlbGF5O1xuICAgIGlmICgkYWN0aXZlU2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1hdXRvcGxheScpKSB7XG4gICAgICBkZWxheSA9ICRhY3RpdmVTbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLWF1dG9wbGF5JykgfHwgc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kZWxheTtcbiAgICB9XG4gICAgc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgPSBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5yZXZlcnNlRGlyZWN0aW9uKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICAgIHN3aXBlci5zbGlkZVByZXYoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVByZXYoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCBzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5pc0VuZCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKDAsIHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICB9XG4gICAgfSwgZGVsYXkpO1xuICB9LFxuICBzdGFydCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgPSB0cnVlO1xuICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheVN0YXJ0Jyk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBzdG9wKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkudGltZW91dCk7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkudGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgPSBmYWxzZTtcbiAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXlTdG9wJyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIHBhdXNlKHNwZWVkKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpIGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkudGltZW91dCk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IHRydWU7XG4gICAgaWYgKHNwZWVkID09PSAwIHx8ICFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LndhaXRGb3JUcmFuc2l0aW9uKSB7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICB9XG4gIH0sXG59O1xuXG52YXIgQXV0b3BsYXkkMSA9IHtcbiAgbmFtZTogJ2F1dG9wbGF5JyxcbiAgcGFyYW1zOiB7XG4gICAgYXV0b3BsYXk6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgZGVsYXk6IDMwMDAsXG4gICAgICB3YWl0Rm9yVHJhbnNpdGlvbjogdHJ1ZSxcbiAgICAgIGRpc2FibGVPbkludGVyYWN0aW9uOiB0cnVlLFxuICAgICAgc3RvcE9uTGFzdFNsaWRlOiBmYWxzZSxcbiAgICAgIHJldmVyc2VEaXJlY3Rpb246IGZhbHNlLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGF1dG9wbGF5OiB7XG4gICAgICAgIHJ1bm5pbmc6IGZhbHNlLFxuICAgICAgICBwYXVzZWQ6IGZhbHNlLFxuICAgICAgICBydW46IEF1dG9wbGF5LnJ1bi5iaW5kKHN3aXBlciksXG4gICAgICAgIHN0YXJ0OiBBdXRvcGxheS5zdGFydC5iaW5kKHN3aXBlciksXG4gICAgICAgIHN0b3A6IEF1dG9wbGF5LnN0b3AuYmluZChzd2lwZXIpLFxuICAgICAgICBwYXVzZTogQXV0b3BsYXkucGF1c2UuYmluZChzd2lwZXIpLFxuICAgICAgICBvblRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci4kd3JhcHBlckVsKSByZXR1cm47XG4gICAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5zdGFydCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlVHJhbnNpdGlvblN0YXJ0KHNwZWVkLCBpbnRlcm5hbCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgICBpZiAoaW50ZXJuYWwgfHwgIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2Uoc3BlZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNsaWRlckZpcnN0TW92ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBGYWRlID0ge1xuICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHNsaWRlcyB9ID0gc3dpcGVyO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCAkc2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgICBjb25zdCBvZmZzZXQgPSAkc2xpZGVFbFswXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIGxldCB0eCA9IC1vZmZzZXQ7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkgdHggLT0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGxldCB0eSA9IDA7XG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB0eSA9IHR4O1xuICAgICAgICB0eCA9IDA7XG4gICAgICB9XG4gICAgICBjb25zdCBzbGlkZU9wYWNpdHkgPSBzd2lwZXIucGFyYW1zLmZhZGVFZmZlY3QuY3Jvc3NGYWRlXG4gICAgICAgID8gTWF0aC5tYXgoMSAtIE1hdGguYWJzKCRzbGlkZUVsWzBdLnByb2dyZXNzKSwgMClcbiAgICAgICAgOiAxICsgTWF0aC5taW4oTWF0aC5tYXgoJHNsaWRlRWxbMF0ucHJvZ3Jlc3MsIC0xKSwgMCk7XG4gICAgICAkc2xpZGVFbFxuICAgICAgICAuY3NzKHtcbiAgICAgICAgICBvcGFjaXR5OiBzbGlkZU9wYWNpdHksXG4gICAgICAgIH0pXG4gICAgICAgIC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7dHh9cHgsICR7dHl9cHgsIDBweClgKTtcbiAgICB9XG4gIH0sXG4gIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgc2xpZGVzLCAkd3JhcHBlckVsIH0gPSBzd2lwZXI7XG4gICAgc2xpZGVzLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgJiYgZHVyYXRpb24gIT09IDApIHtcbiAgICAgIGxldCBldmVudFRyaWdnZXJlZCA9IGZhbHNlO1xuICAgICAgc2xpZGVzLnRyYW5zaXRpb25FbmQoKCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyZWQpIHJldHVybjtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBldmVudFRyaWdnZXJlZCA9IHRydWU7XG4gICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgdHJpZ2dlckV2ZW50cyA9IFsnd2Via2l0VHJhbnNpdGlvbkVuZCcsICd0cmFuc2l0aW9uZW5kJ107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpZ2dlckV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICR3cmFwcGVyRWwudHJpZ2dlcih0cmlnZ2VyRXZlbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxufTtcblxudmFyIEVmZmVjdEZhZGUgPSB7XG4gIG5hbWU6ICdlZmZlY3QtZmFkZScsXG4gIHBhcmFtczoge1xuICAgIGZhZGVFZmZlY3Q6IHtcbiAgICAgIGNyb3NzRmFkZTogZmFsc2UsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgZmFkZUVmZmVjdDoge1xuICAgICAgICBzZXRUcmFuc2xhdGU6IEZhZGUuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogRmFkZS5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmYWRlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9ZmFkZWApO1xuICAgICAgY29uc3Qgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWUsXG4gICAgICB9O1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZhZGUnKSByZXR1cm47XG4gICAgICBzd2lwZXIuZmFkZUVmZmVjdC5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmYWRlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmZhZGVFZmZlY3Quc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IEN1YmUgPSB7XG4gIHNldFRyYW5zbGF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgICRlbCwgJHdyYXBwZXJFbCwgc2xpZGVzLCB3aWR0aDogc3dpcGVyV2lkdGgsIGhlaWdodDogc3dpcGVySGVpZ2h0LCBydGxUcmFuc2xhdGU6IHJ0bCwgc2l6ZTogc3dpcGVyU2l6ZSxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuY3ViZUVmZmVjdDtcbiAgICBjb25zdCBpc0hvcml6b250YWwgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgbGV0IHdyYXBwZXJSb3RhdGUgPSAwO1xuICAgIGxldCAkY3ViZVNoYWRvd0VsO1xuICAgIGlmIChwYXJhbXMuc2hhZG93KSB7XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICRjdWJlU2hhZG93RWwgPSAkd3JhcHBlckVsLmZpbmQoJy5zd2lwZXItY3ViZS1zaGFkb3cnKTtcbiAgICAgICAgaWYgKCRjdWJlU2hhZG93RWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICQoJzxkaXYgY2xhc3M9XCJzd2lwZXItY3ViZS1zaGFkb3dcIj48L2Rpdj4nKTtcbiAgICAgICAgICAkd3JhcHBlckVsLmFwcGVuZCgkY3ViZVNoYWRvd0VsKTtcbiAgICAgICAgfVxuICAgICAgICAkY3ViZVNoYWRvd0VsLmNzcyh7IGhlaWdodDogYCR7c3dpcGVyV2lkdGh9cHhgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICRlbC5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG4gICAgICAgIGlmICgkY3ViZVNoYWRvd0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRjdWJlU2hhZG93RWwgPSAkKCc8ZGl2IGNsYXNzPVwic3dpcGVyLWN1YmUtc2hhZG93XCI+PC9kaXY+Jyk7XG4gICAgICAgICAgJGVsLmFwcGVuZCgkY3ViZVNoYWRvd0VsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICBsZXQgc2xpZGVJbmRleCA9IGk7XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHNsaWRlSW5kZXggPSBwYXJzZUludCgkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgICB9XG4gICAgICBsZXQgc2xpZGVBbmdsZSA9IHNsaWRlSW5kZXggKiA5MDtcbiAgICAgIGxldCByb3VuZCA9IE1hdGguZmxvb3Ioc2xpZGVBbmdsZSAvIDM2MCk7XG4gICAgICBpZiAocnRsKSB7XG4gICAgICAgIHNsaWRlQW5nbGUgPSAtc2xpZGVBbmdsZTtcbiAgICAgICAgcm91bmQgPSBNYXRoLmZsb29yKC1zbGlkZUFuZ2xlIC8gMzYwKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oJHNsaWRlRWxbMF0ucHJvZ3Jlc3MsIDEpLCAtMSk7XG4gICAgICBsZXQgdHggPSAwO1xuICAgICAgbGV0IHR5ID0gMDtcbiAgICAgIGxldCB0eiA9IDA7XG4gICAgICBpZiAoc2xpZGVJbmRleCAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAtcm91bmQgKiA0ICogc3dpcGVyU2l6ZTtcbiAgICAgICAgdHogPSAwO1xuICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDEpICUgNCA9PT0gMCkge1xuICAgICAgICB0eCA9IDA7XG4gICAgICAgIHR6ID0gLXJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICB9IGVsc2UgaWYgKChzbGlkZUluZGV4IC0gMikgJSA0ID09PSAwKSB7XG4gICAgICAgIHR4ID0gc3dpcGVyU2l6ZSArIChyb3VuZCAqIDQgKiBzd2lwZXJTaXplKTtcbiAgICAgICAgdHogPSBzd2lwZXJTaXplO1xuICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDMpICUgNCA9PT0gMCkge1xuICAgICAgICB0eCA9IC1zd2lwZXJTaXplO1xuICAgICAgICB0eiA9ICgzICogc3dpcGVyU2l6ZSkgKyAoc3dpcGVyU2l6ZSAqIDQgKiByb3VuZCk7XG4gICAgICB9XG4gICAgICBpZiAocnRsKSB7XG4gICAgICAgIHR4ID0gLXR4O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzSG9yaXpvbnRhbCkge1xuICAgICAgICB0eSA9IHR4O1xuICAgICAgICB0eCA9IDA7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IGByb3RhdGVYKCR7aXNIb3Jpem9udGFsID8gMCA6IC1zbGlkZUFuZ2xlfWRlZykgcm90YXRlWSgke2lzSG9yaXpvbnRhbCA/IHNsaWRlQW5nbGUgOiAwfWRlZykgdHJhbnNsYXRlM2QoJHt0eH1weCwgJHt0eX1weCwgJHt0en1weClgO1xuICAgICAgaWYgKHByb2dyZXNzIDw9IDEgJiYgcHJvZ3Jlc3MgPiAtMSkge1xuICAgICAgICB3cmFwcGVyUm90YXRlID0gKHNsaWRlSW5kZXggKiA5MCkgKyAocHJvZ3Jlc3MgKiA5MCk7XG4gICAgICAgIGlmIChydGwpIHdyYXBwZXJSb3RhdGUgPSAoLXNsaWRlSW5kZXggKiA5MCkgLSAocHJvZ3Jlc3MgKiA5MCk7XG4gICAgICB9XG4gICAgICAkc2xpZGVFbC50cmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgIGlmIChwYXJhbXMuc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICAgIGxldCBzaGFkb3dCZWZvcmUgPSBpc0hvcml6b250YWwgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AnKTtcbiAgICAgICAgbGV0IHNoYWRvd0FmdGVyID0gaXNIb3Jpem9udGFsID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuICAgICAgICBpZiAoc2hhZG93QmVmb3JlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHNoYWRvd0JlZm9yZSA9ICQoYDxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGUtc2hhZG93LSR7aXNIb3Jpem9udGFsID8gJ2xlZnQnIDogJ3RvcCd9XCI+PC9kaXY+YCk7XG4gICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKHNoYWRvd0JlZm9yZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHNoYWRvd0FmdGVyID0gJChgPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZS1zaGFkb3ctJHtpc0hvcml6b250YWwgPyAncmlnaHQnIDogJ2JvdHRvbSd9XCI+PC9kaXY+YCk7XG4gICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKHNoYWRvd0FmdGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhZG93QmVmb3JlLmxlbmd0aCkgc2hhZG93QmVmb3JlWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heCgtcHJvZ3Jlc3MsIDApO1xuICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoKSBzaGFkb3dBZnRlclswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgocHJvZ3Jlc3MsIDApO1xuICAgICAgfVxuICAgIH1cbiAgICAkd3JhcHBlckVsLmNzcyh7XG4gICAgICAnLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luJzogYDUwJSA1MCUgLSR7c3dpcGVyU2l6ZSAvIDJ9cHhgLFxuICAgICAgJy1tb3otdHJhbnNmb3JtLW9yaWdpbic6IGA1MCUgNTAlIC0ke3N3aXBlclNpemUgLyAyfXB4YCxcbiAgICAgICctbXMtdHJhbnNmb3JtLW9yaWdpbic6IGA1MCUgNTAlIC0ke3N3aXBlclNpemUgLyAyfXB4YCxcbiAgICAgICd0cmFuc2Zvcm0tb3JpZ2luJzogYDUwJSA1MCUgLSR7c3dpcGVyU2l6ZSAvIDJ9cHhgLFxuICAgIH0pO1xuXG4gICAgaWYgKHBhcmFtcy5zaGFkb3cpIHtcbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgJGN1YmVTaGFkb3dFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDBweCwgJHsoc3dpcGVyV2lkdGggLyAyKSArIHBhcmFtcy5zaGFkb3dPZmZzZXR9cHgsICR7LXN3aXBlcldpZHRoIC8gMn1weCkgcm90YXRlWCg5MGRlZykgcm90YXRlWigwZGVnKSBzY2FsZSgke3BhcmFtcy5zaGFkb3dTY2FsZX0pYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzaGFkb3dBbmdsZSA9IE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC0gKE1hdGguZmxvb3IoTWF0aC5hYnMod3JhcHBlclJvdGF0ZSkgLyA5MCkgKiA5MCk7XG4gICAgICAgIGNvbnN0IG11bHRpcGxpZXIgPSAxLjUgLSAoXG4gICAgICAgICAgKE1hdGguc2luKChzaGFkb3dBbmdsZSAqIDIgKiBNYXRoLlBJKSAvIDM2MCkgLyAyKVxuICAgICAgICAgICsgKE1hdGguY29zKChzaGFkb3dBbmdsZSAqIDIgKiBNYXRoLlBJKSAvIDM2MCkgLyAyKVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBzY2FsZTEgPSBwYXJhbXMuc2hhZG93U2NhbGU7XG4gICAgICAgIGNvbnN0IHNjYWxlMiA9IHBhcmFtcy5zaGFkb3dTY2FsZSAvIG11bHRpcGxpZXI7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHBhcmFtcy5zaGFkb3dPZmZzZXQ7XG4gICAgICAgICRjdWJlU2hhZG93RWwudHJhbnNmb3JtKGBzY2FsZTNkKCR7c2NhbGUxfSwgMSwgJHtzY2FsZTJ9KSB0cmFuc2xhdGUzZCgwcHgsICR7KHN3aXBlckhlaWdodCAvIDIpICsgb2Zmc2V0fXB4LCAkey1zd2lwZXJIZWlnaHQgLyAyIC8gc2NhbGUyfXB4KSByb3RhdGVYKC05MGRlZylgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgekZhY3RvciA9IChCcm93c2VyLmlzU2FmYXJpIHx8IEJyb3dzZXIuaXNVaVdlYlZpZXcpID8gKC1zd2lwZXJTaXplIC8gMikgOiAwO1xuICAgICR3cmFwcGVyRWxcbiAgICAgIC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDBweCwwLCR7ekZhY3Rvcn1weCkgcm90YXRlWCgke3N3aXBlci5pc0hvcml6b250YWwoKSA/IDAgOiB3cmFwcGVyUm90YXRlfWRlZykgcm90YXRlWSgke3N3aXBlci5pc0hvcml6b250YWwoKSA/IC13cmFwcGVyUm90YXRlIDogMH1kZWcpYCk7XG4gIH0sXG4gIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgJGVsLCBzbGlkZXMgfSA9IHN3aXBlcjtcbiAgICBzbGlkZXNcbiAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKVxuICAgICAgLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpXG4gICAgICAudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3ViZUVmZmVjdC5zaGFkb3cgJiYgIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgJGVsLmZpbmQoJy5zd2lwZXItY3ViZS1zaGFkb3cnKS50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICB9XG4gIH0sXG59O1xuXG52YXIgRWZmZWN0Q3ViZSA9IHtcbiAgbmFtZTogJ2VmZmVjdC1jdWJlJyxcbiAgcGFyYW1zOiB7XG4gICAgY3ViZUVmZmVjdDoge1xuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgc2hhZG93OiB0cnVlLFxuICAgICAgc2hhZG93T2Zmc2V0OiAyMCxcbiAgICAgIHNoYWRvd1NjYWxlOiAwLjk0LFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGN1YmVFZmZlY3Q6IHtcbiAgICAgICAgc2V0VHJhbnNsYXRlOiBDdWJlLnNldFRyYW5zbGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgIHNldFRyYW5zaXRpb246IEN1YmUuc2V0VHJhbnNpdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY3ViZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWN1YmVgKTtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfTNkYCk7XG4gICAgICBjb25zdCBvdmVyd3JpdGVQYXJhbXMgPSB7XG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICAgIHNsaWRlc1BlckNvbHVtbjogMSxcbiAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHJlc2lzdGFuY2VSYXRpbzogMCxcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWUsXG4gICAgICB9O1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2N1YmUnKSByZXR1cm47XG4gICAgICBzd2lwZXIuY3ViZUVmZmVjdC5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjdWJlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmN1YmVFZmZlY3Quc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IEZsaXAgPSB7XG4gIHNldFRyYW5zbGF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgc2xpZGVzLCBydGxUcmFuc2xhdGU6IHJ0bCB9ID0gc3dpcGVyO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCAkc2xpZGVFbCA9IHNsaWRlcy5lcShpKTtcbiAgICAgIGxldCBwcm9ncmVzcyA9ICRzbGlkZUVsWzBdLnByb2dyZXNzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdC5saW1pdFJvdGF0aW9uKSB7XG4gICAgICAgIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oJHNsaWRlRWxbMF0ucHJvZ3Jlc3MsIDEpLCAtMSk7XG4gICAgICB9XG4gICAgICBjb25zdCBvZmZzZXQgPSAkc2xpZGVFbFswXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIGNvbnN0IHJvdGF0ZSA9IC0xODAgKiBwcm9ncmVzcztcbiAgICAgIGxldCByb3RhdGVZID0gcm90YXRlO1xuICAgICAgbGV0IHJvdGF0ZVggPSAwO1xuICAgICAgbGV0IHR4ID0gLW9mZnNldDtcbiAgICAgIGxldCB0eSA9IDA7XG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB0eSA9IHR4O1xuICAgICAgICB0eCA9IDA7XG4gICAgICAgIHJvdGF0ZVggPSAtcm90YXRlWTtcbiAgICAgICAgcm90YXRlWSA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHJ0bCkge1xuICAgICAgICByb3RhdGVZID0gLXJvdGF0ZVk7XG4gICAgICB9XG5cbiAgICAgICRzbGlkZUVsWzBdLnN0eWxlLnpJbmRleCA9IC1NYXRoLmFicyhNYXRoLnJvdW5kKHByb2dyZXNzKSkgKyBzbGlkZXMubGVuZ3RoO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mbGlwRWZmZWN0LnNsaWRlU2hhZG93cykge1xuICAgICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgICBsZXQgc2hhZG93QmVmb3JlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICAgIGxldCBzaGFkb3dBZnRlciA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcbiAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBzaGFkb3dCZWZvcmUgPSAkKGA8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0ke3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnfVwiPjwvZGl2PmApO1xuICAgICAgICAgICRzbGlkZUVsLmFwcGVuZChzaGFkb3dCZWZvcmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBzaGFkb3dBZnRlciA9ICQoYDxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGUtc2hhZG93LSR7c3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3JpZ2h0JyA6ICdib3R0b20nfVwiPjwvZGl2PmApO1xuICAgICAgICAgICRzbGlkZUVsLmFwcGVuZChzaGFkb3dBZnRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGgpIHNoYWRvd0JlZm9yZVswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLXByb2dyZXNzLCAwKTtcbiAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCkgc2hhZG93QWZ0ZXJbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KHByb2dyZXNzLCAwKTtcbiAgICAgIH1cbiAgICAgICRzbGlkZUVsXG4gICAgICAgIC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7dHh9cHgsICR7dHl9cHgsIDBweCkgcm90YXRlWCgke3JvdGF0ZVh9ZGVnKSByb3RhdGVZKCR7cm90YXRlWX1kZWcpYCk7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHNsaWRlcywgYWN0aXZlSW5kZXgsICR3cmFwcGVyRWwgfSA9IHN3aXBlcjtcbiAgICBzbGlkZXNcbiAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKVxuICAgICAgLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpXG4gICAgICAudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSAmJiBkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgbGV0IGV2ZW50VHJpZ2dlcmVkID0gZmFsc2U7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIHNsaWRlcy5lcShhY3RpdmVJbmRleCkudHJhbnNpdGlvbkVuZChmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoKSB7XG4gICAgICAgIGlmIChldmVudFRyaWdnZXJlZCkgcmV0dXJuO1xuICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIC8vIGlmICghJCh0aGlzKS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpKSByZXR1cm47XG4gICAgICAgIGV2ZW50VHJpZ2dlcmVkID0gdHJ1ZTtcbiAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICBjb25zdCB0cmlnZ2VyRXZlbnRzID0gWyd3ZWJraXRUcmFuc2l0aW9uRW5kJywgJ3RyYW5zaXRpb25lbmQnXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmlnZ2VyRXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgJHdyYXBwZXJFbC50cmlnZ2VyKHRyaWdnZXJFdmVudHNbaV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG59O1xuXG52YXIgRWZmZWN0RmxpcCA9IHtcbiAgbmFtZTogJ2VmZmVjdC1mbGlwJyxcbiAgcGFyYW1zOiB7XG4gICAgZmxpcEVmZmVjdDoge1xuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgbGltaXRSb3RhdGlvbjogdHJ1ZSxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBmbGlwRWZmZWN0OiB7XG4gICAgICAgIHNldFRyYW5zbGF0ZTogRmxpcC5zZXRUcmFuc2xhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRUcmFuc2l0aW9uOiBGbGlwLnNldFRyYW5zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZsaXAnKSByZXR1cm47XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31mbGlwYCk7XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30zZGApO1xuICAgICAgY29uc3Qgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWUsXG4gICAgICB9O1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZsaXAnKSByZXR1cm47XG4gICAgICBzd2lwZXIuZmxpcEVmZmVjdC5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmbGlwJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmZsaXBFZmZlY3Quc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IENvdmVyZmxvdyA9IHtcbiAgc2V0VHJhbnNsYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgd2lkdGg6IHN3aXBlcldpZHRoLCBoZWlnaHQ6IHN3aXBlckhlaWdodCwgc2xpZGVzLCAkd3JhcHBlckVsLCBzbGlkZXNTaXplc0dyaWQsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmNvdmVyZmxvd0VmZmVjdDtcbiAgICBjb25zdCBpc0hvcml6b250YWwgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICBjb25zdCBjZW50ZXIgPSBpc0hvcml6b250YWwgPyAtdHJhbnNmb3JtICsgKHN3aXBlcldpZHRoIC8gMikgOiAtdHJhbnNmb3JtICsgKHN3aXBlckhlaWdodCAvIDIpO1xuICAgIGNvbnN0IHJvdGF0ZSA9IGlzSG9yaXpvbnRhbCA/IHBhcmFtcy5yb3RhdGUgOiAtcGFyYW1zLnJvdGF0ZTtcbiAgICBjb25zdCB0cmFuc2xhdGUgPSBwYXJhbXMuZGVwdGg7XG4gICAgLy8gRWFjaCBzbGlkZSBvZmZzZXQgZnJvbSBjZW50ZXJcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCAkc2xpZGVFbCA9IHNsaWRlcy5lcShpKTtcbiAgICAgIGNvbnN0IHNsaWRlU2l6ZSA9IHNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICAgIGNvbnN0IHNsaWRlT2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICBjb25zdCBvZmZzZXRNdWx0aXBsaWVyID0gKChjZW50ZXIgLSBzbGlkZU9mZnNldCAtIChzbGlkZVNpemUgLyAyKSkgLyBzbGlkZVNpemUpICogcGFyYW1zLm1vZGlmaWVyO1xuXG4gICAgICBsZXQgcm90YXRlWSA9IGlzSG9yaXpvbnRhbCA/IHJvdGF0ZSAqIG9mZnNldE11bHRpcGxpZXIgOiAwO1xuICAgICAgbGV0IHJvdGF0ZVggPSBpc0hvcml6b250YWwgPyAwIDogcm90YXRlICogb2Zmc2V0TXVsdGlwbGllcjtcbiAgICAgIC8vIHZhciByb3RhdGVaID0gMFxuICAgICAgbGV0IHRyYW5zbGF0ZVogPSAtdHJhbnNsYXRlICogTWF0aC5hYnMob2Zmc2V0TXVsdGlwbGllcik7XG5cbiAgICAgIGxldCB0cmFuc2xhdGVZID0gaXNIb3Jpem9udGFsID8gMCA6IHBhcmFtcy5zdHJldGNoICogKG9mZnNldE11bHRpcGxpZXIpO1xuICAgICAgbGV0IHRyYW5zbGF0ZVggPSBpc0hvcml6b250YWwgPyBwYXJhbXMuc3RyZXRjaCAqIChvZmZzZXRNdWx0aXBsaWVyKSA6IDA7XG5cbiAgICAgIC8vIEZpeCBmb3IgdWx0cmEgc21hbGwgdmFsdWVzXG4gICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWCkgPCAwLjAwMSkgdHJhbnNsYXRlWCA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWSkgPCAwLjAwMSkgdHJhbnNsYXRlWSA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWikgPCAwLjAwMSkgdHJhbnNsYXRlWiA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnMocm90YXRlWSkgPCAwLjAwMSkgcm90YXRlWSA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnMocm90YXRlWCkgPCAwLjAwMSkgcm90YXRlWCA9IDA7XG5cbiAgICAgIGNvbnN0IHNsaWRlVHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7dHJhbnNsYXRlWH1weCwke3RyYW5zbGF0ZVl9cHgsJHt0cmFuc2xhdGVafXB4KSAgcm90YXRlWCgke3JvdGF0ZVh9ZGVnKSByb3RhdGVZKCR7cm90YXRlWX1kZWcpYDtcblxuICAgICAgJHNsaWRlRWwudHJhbnNmb3JtKHNsaWRlVHJhbnNmb3JtKTtcbiAgICAgICRzbGlkZUVsWzBdLnN0eWxlLnpJbmRleCA9IC1NYXRoLmFicyhNYXRoLnJvdW5kKG9mZnNldE11bHRpcGxpZXIpKSArIDE7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgICBsZXQgJHNoYWRvd0JlZm9yZUVsID0gaXNIb3Jpem9udGFsID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICAgIGxldCAkc2hhZG93QWZ0ZXJFbCA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcbiAgICAgICAgaWYgKCRzaGFkb3dCZWZvcmVFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAkc2hhZG93QmVmb3JlRWwgPSAkKGA8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0ke2lzSG9yaXpvbnRhbCA/ICdsZWZ0JyA6ICd0b3AnfVwiPjwvZGl2PmApO1xuICAgICAgICAgICRzbGlkZUVsLmFwcGVuZCgkc2hhZG93QmVmb3JlRWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkc2hhZG93QWZ0ZXJFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAkc2hhZG93QWZ0ZXJFbCA9ICQoYDxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGUtc2hhZG93LSR7aXNIb3Jpem9udGFsID8gJ3JpZ2h0JyA6ICdib3R0b20nfVwiPjwvZGl2PmApO1xuICAgICAgICAgICRzbGlkZUVsLmFwcGVuZCgkc2hhZG93QWZ0ZXJFbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRzaGFkb3dCZWZvcmVFbC5sZW5ndGgpICRzaGFkb3dCZWZvcmVFbFswXS5zdHlsZS5vcGFjaXR5ID0gb2Zmc2V0TXVsdGlwbGllciA+IDAgPyBvZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgICAgaWYgKCRzaGFkb3dBZnRlckVsLmxlbmd0aCkgJHNoYWRvd0FmdGVyRWxbMF0uc3R5bGUub3BhY2l0eSA9ICgtb2Zmc2V0TXVsdGlwbGllcikgPiAwID8gLW9mZnNldE11bHRpcGxpZXIgOiAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCBjb3JyZWN0IHBlcnNwZWN0aXZlIGZvciBJRTEwXG4gICAgaWYgKFN1cHBvcnQucG9pbnRlckV2ZW50cyB8fCBTdXBwb3J0LnByZWZpeGVkUG9pbnRlckV2ZW50cykge1xuICAgICAgY29uc3Qgd3MgPSAkd3JhcHBlckVsWzBdLnN0eWxlO1xuICAgICAgd3MucGVyc3BlY3RpdmVPcmlnaW4gPSBgJHtjZW50ZXJ9cHggNTAlYDtcbiAgICB9XG4gIH0sXG4gIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5zbGlkZXNcbiAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKVxuICAgICAgLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpXG4gICAgICAudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH0sXG59O1xuXG52YXIgRWZmZWN0Q292ZXJmbG93ID0ge1xuICBuYW1lOiAnZWZmZWN0LWNvdmVyZmxvdycsXG4gIHBhcmFtczoge1xuICAgIGNvdmVyZmxvd0VmZmVjdDoge1xuICAgICAgcm90YXRlOiA1MCxcbiAgICAgIHN0cmV0Y2g6IDAsXG4gICAgICBkZXB0aDogMTAwLFxuICAgICAgbW9kaWZpZXI6IDEsXG4gICAgICBzbGlkZVNoYWRvd3M6IHRydWUsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgY292ZXJmbG93RWZmZWN0OiB7XG4gICAgICAgIHNldFRyYW5zbGF0ZTogQ292ZXJmbG93LnNldFRyYW5zbGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgIHNldFRyYW5zaXRpb246IENvdmVyZmxvdy5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjb3ZlcmZsb3cnKSByZXR1cm47XG5cbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWNvdmVyZmxvd2ApO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9M2RgKTtcblxuICAgICAgc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjb3ZlcmZsb3cnKSByZXR1cm47XG4gICAgICBzd2lwZXIuY292ZXJmbG93RWZmZWN0LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2NvdmVyZmxvdycpIHJldHVybjtcbiAgICAgIHN3aXBlci5jb3ZlcmZsb3dFZmZlY3Quc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IFRodW1icyA9IHtcbiAgaW5pdCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgdGh1bWJzOiB0aHVtYnNQYXJhbXMgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgY29uc3QgU3dpcGVyQ2xhc3MgPSBzd2lwZXIuY29uc3RydWN0b3I7XG4gICAgaWYgKHRodW1ic1BhcmFtcy5zd2lwZXIgaW5zdGFuY2VvZiBTd2lwZXJDbGFzcykge1xuICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIgPSB0aHVtYnNQYXJhbXMuc3dpcGVyO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci50aHVtYnMuc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCB7XG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuICAgICAgfSk7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLnRodW1icy5zd2lwZXIucGFyYW1zLCB7XG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChVdGlscy5pc09iamVjdCh0aHVtYnNQYXJhbXMuc3dpcGVyKSkge1xuICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIgPSBuZXcgU3dpcGVyQ2xhc3MoVXRpbHMuZXh0ZW5kKHt9LCB0aHVtYnNQYXJhbXMuc3dpcGVyLCB7XG4gICAgICAgIHdhdGNoU2xpZGVzVmlzaWJpbGl0eTogdHJ1ZSxcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2UsXG4gICAgICB9KSk7XG4gICAgICBzd2lwZXIudGh1bWJzLnN3aXBlckNyZWF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBzd2lwZXIudGh1bWJzLnN3aXBlci4kZWwuYWRkQ2xhc3Moc3dpcGVyLnBhcmFtcy50aHVtYnMudGh1bWJzQ29udGFpbmVyQ2xhc3MpO1xuICAgIHN3aXBlci50aHVtYnMuc3dpcGVyLm9uKCd0YXAnLCBzd2lwZXIudGh1bWJzLm9uVGh1bWJDbGljayk7XG4gIH0sXG4gIG9uVGh1bWJDbGljaygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgIGlmICghdGh1bWJzU3dpcGVyKSByZXR1cm47XG4gICAgY29uc3QgY2xpY2tlZEluZGV4ID0gdGh1bWJzU3dpcGVyLmNsaWNrZWRJbmRleDtcbiAgICBjb25zdCBjbGlja2VkU2xpZGUgPSB0aHVtYnNTd2lwZXIuY2xpY2tlZFNsaWRlO1xuICAgIGlmIChjbGlja2VkU2xpZGUgJiYgJChjbGlja2VkU2xpZGUpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcykpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIGNsaWNrZWRJbmRleCA9PT0gJ3VuZGVmaW5lZCcgfHwgY2xpY2tlZEluZGV4ID09PSBudWxsKSByZXR1cm47XG4gICAgbGV0IHNsaWRlVG9JbmRleDtcbiAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzbGlkZVRvSW5kZXggPSBwYXJzZUludCgkKHRodW1ic1N3aXBlci5jbGlja2VkU2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVUb0luZGV4ID0gY2xpY2tlZEluZGV4O1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBsZXQgY3VycmVudEluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXMuZXEoY3VycmVudEluZGV4KS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICAgICAgICBjdXJyZW50SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICB9XG4gICAgICBjb25zdCBwcmV2SW5kZXggPSBzd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRJbmRleCkucHJldkFsbChgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzbGlkZVRvSW5kZXh9XCJdYCkuZXEoMCkuaW5kZXgoKTtcbiAgICAgIGNvbnN0IG5leHRJbmRleCA9IHN3aXBlci5zbGlkZXMuZXEoY3VycmVudEluZGV4KS5uZXh0QWxsKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlVG9JbmRleH1cIl1gKS5lcSgwKS5pbmRleCgpO1xuICAgICAgaWYgKHR5cGVvZiBwcmV2SW5kZXggPT09ICd1bmRlZmluZWQnKSBzbGlkZVRvSW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICBlbHNlIGlmICh0eXBlb2YgbmV4dEluZGV4ID09PSAndW5kZWZpbmVkJykgc2xpZGVUb0luZGV4ID0gcHJldkluZGV4O1xuICAgICAgZWxzZSBpZiAobmV4dEluZGV4IC0gY3VycmVudEluZGV4IDwgY3VycmVudEluZGV4IC0gcHJldkluZGV4KSBzbGlkZVRvSW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICBlbHNlIHNsaWRlVG9JbmRleCA9IHByZXZJbmRleDtcbiAgICB9XG4gICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgfSxcbiAgdXBkYXRlKGluaXRpYWwpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgIGlmICghdGh1bWJzU3dpcGVyKSByZXR1cm47XG5cbiAgICBjb25zdCBzbGlkZXNQZXJWaWV3ID0gdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bydcbiAgICAgID8gdGh1bWJzU3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKClcbiAgICAgIDogdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuXG4gICAgaWYgKHN3aXBlci5yZWFsSW5kZXggIT09IHRodW1ic1N3aXBlci5yZWFsSW5kZXgpIHtcbiAgICAgIGxldCBjdXJyZW50VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICBsZXQgbmV3VGh1bWJzSW5kZXg7XG4gICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIGlmICh0aHVtYnNTd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRUaHVtYnNJbmRleCkuaGFzQ2xhc3ModGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgIHRodW1ic1N3aXBlci5sb29wRml4KCk7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgdGh1bWJzU3dpcGVyLl9jbGllbnRMZWZ0ID0gdGh1bWJzU3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgICAgICAgICBjdXJyZW50VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmluZCBhY3R1YWwgdGh1bWJzIGluZGV4IHRvIHNsaWRlIHRvXG4gICAgICAgIGNvbnN0IHByZXZUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5zbGlkZXMuZXEoY3VycmVudFRodW1ic0luZGV4KS5wcmV2QWxsKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3N3aXBlci5yZWFsSW5kZXh9XCJdYCkuZXEoMCkuaW5kZXgoKTtcbiAgICAgICAgY29uc3QgbmV4dFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLnNsaWRlcy5lcShjdXJyZW50VGh1bWJzSW5kZXgpLm5leHRBbGwoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c3dpcGVyLnJlYWxJbmRleH1cIl1gKS5lcSgwKS5pbmRleCgpO1xuICAgICAgICBpZiAodHlwZW9mIHByZXZUaHVtYnNJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIG5ld1RodW1ic0luZGV4ID0gbmV4dFRodW1ic0luZGV4O1xuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbmV4dFRodW1ic0luZGV4ID09PSAndW5kZWZpbmVkJykgbmV3VGh1bWJzSW5kZXggPSBwcmV2VGh1bWJzSW5kZXg7XG4gICAgICAgIGVsc2UgaWYgKG5leHRUaHVtYnNJbmRleCAtIGN1cnJlbnRUaHVtYnNJbmRleCA9PT0gY3VycmVudFRodW1ic0luZGV4IC0gcHJldlRodW1ic0luZGV4KSBuZXdUaHVtYnNJbmRleCA9IGN1cnJlbnRUaHVtYnNJbmRleDtcbiAgICAgICAgZWxzZSBpZiAobmV4dFRodW1ic0luZGV4IC0gY3VycmVudFRodW1ic0luZGV4IDwgY3VycmVudFRodW1ic0luZGV4IC0gcHJldlRodW1ic0luZGV4KSBuZXdUaHVtYnNJbmRleCA9IG5leHRUaHVtYnNJbmRleDtcbiAgICAgICAgZWxzZSBuZXdUaHVtYnNJbmRleCA9IHByZXZUaHVtYnNJbmRleDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1RodW1ic0luZGV4ID0gc3dpcGVyLnJlYWxJbmRleDtcbiAgICAgIH1cbiAgICAgIGlmICh0aHVtYnNTd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMuaW5kZXhPZihuZXdUaHVtYnNJbmRleCkgPCAwKSB7XG4gICAgICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgICAgaWYgKG5ld1RodW1ic0luZGV4ID4gY3VycmVudFRodW1ic0luZGV4KSB7XG4gICAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4IC0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4ICsgTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChuZXdUaHVtYnNJbmRleCA+IGN1cnJlbnRUaHVtYnNJbmRleCkge1xuICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gbmV3VGh1bWJzSW5kZXggLSBzbGlkZXNQZXJWaWV3ICsgMTtcbiAgICAgICAgfVxuICAgICAgICB0aHVtYnNTd2lwZXIuc2xpZGVUbyhuZXdUaHVtYnNJbmRleCwgaW5pdGlhbCA/IDAgOiB1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFjdGl2YXRlIHRodW1ic1xuICAgIGxldCB0aHVtYnNUb0FjdGl2YXRlID0gMTtcbiAgICBjb25zdCB0aHVtYkFjdGl2ZUNsYXNzID0gc3dpcGVyLnBhcmFtcy50aHVtYnMuc2xpZGVUaHVtYkFjdGl2ZUNsYXNzO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHRodW1ic1RvQWN0aXZhdGUgPSBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgfVxuXG4gICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5yZW1vdmVDbGFzcyh0aHVtYkFjdGl2ZUNsYXNzKTtcbiAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRodW1ic1RvQWN0aXZhdGU7IGkgKz0gMSkge1xuICAgICAgICB0aHVtYnNTd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzd2lwZXIucmVhbEluZGV4ICsgaX1cIl1gKS5hZGRDbGFzcyh0aHVtYkFjdGl2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aHVtYnNUb0FjdGl2YXRlOyBpICs9IDEpIHtcbiAgICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5lcShzd2lwZXIucmVhbEluZGV4ICsgaSkuYWRkQ2xhc3ModGh1bWJBY3RpdmVDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxufTtcbnZhciBUaHVtYnMkMSA9IHtcbiAgbmFtZTogJ3RodW1icycsXG4gIHBhcmFtczoge1xuICAgIHRodW1iczoge1xuICAgICAgc3dpcGVyOiBudWxsLFxuICAgICAgc2xpZGVUaHVtYkFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXRodW1iLWFjdGl2ZScsXG4gICAgICB0aHVtYnNDb250YWluZXJDbGFzczogJ3N3aXBlci1jb250YWluZXItdGh1bWJzJyxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICB0aHVtYnM6IHtcbiAgICAgICAgc3dpcGVyOiBudWxsLFxuICAgICAgICBpbml0OiBUaHVtYnMuaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgIHVwZGF0ZTogVGh1bWJzLnVwZGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uVGh1bWJDbGljazogVGh1bWJzLm9uVGh1bWJDbGljay5iaW5kKHN3aXBlciksXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgY29uc3QgeyB0aHVtYnMgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgICBpZiAoIXRodW1icyB8fCAhdGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgc3dpcGVyLnRodW1icy5pbml0KCk7XG4gICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSh0cnVlKTtcbiAgICB9LFxuICAgIHNsaWRlQ2hhbmdlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnRodW1icy5zd2lwZXIpIHJldHVybjtcbiAgICAgIHN3aXBlci50aHVtYnMudXBkYXRlKCk7XG4gICAgfSxcbiAgICB1cGRhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICB9LFxuICAgIHJlc2l6ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci50aHVtYnMuc3dpcGVyKSByZXR1cm47XG4gICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICAgIGlmICghdGh1bWJzU3dpcGVyKSByZXR1cm47XG4gICAgICB0aHVtYnNTd2lwZXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgICBiZWZvcmVEZXN0cm95KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGNvbnN0IHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgICAgaWYgKCF0aHVtYnNTd2lwZXIpIHJldHVybjtcbiAgICAgIGlmIChzd2lwZXIudGh1bWJzLnN3aXBlckNyZWF0ZWQgJiYgdGh1bWJzU3dpcGVyKSB7XG4gICAgICAgIHRodW1ic1N3aXBlci5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn07XG5cbi8vIFN3aXBlciBDbGFzc1xuXG5jb25zdCBjb21wb25lbnRzID0gW1xuICBEZXZpY2UkMSxcbiAgU3VwcG9ydCQxLFxuICBCcm93c2VyJDEsXG4gIFJlc2l6ZSxcbiAgT2JzZXJ2ZXIkMSxcbiAgVmlydHVhbCQxLFxuICBLZXlib2FyZCQxLFxuICBNb3VzZXdoZWVsJDEsXG4gIE5hdmlnYXRpb24kMSxcbiAgUGFnaW5hdGlvbiQxLFxuICBTY3JvbGxiYXIkMSxcbiAgUGFyYWxsYXgkMSxcbiAgWm9vbSQxLFxuICBMYXp5JDEsXG4gIENvbnRyb2xsZXIkMSxcbiAgQTExeSxcbiAgSGlzdG9yeSQxLFxuICBIYXNoTmF2aWdhdGlvbiQxLFxuICBBdXRvcGxheSQxLFxuICBFZmZlY3RGYWRlLFxuICBFZmZlY3RDdWJlLFxuICBFZmZlY3RGbGlwLFxuICBFZmZlY3RDb3ZlcmZsb3csXG4gIFRodW1icyQxXG5dO1xuXG5pZiAodHlwZW9mIFN3aXBlci51c2UgPT09ICd1bmRlZmluZWQnKSB7XG4gIFN3aXBlci51c2UgPSBTd2lwZXIuQ2xhc3MudXNlO1xuICBTd2lwZXIuaW5zdGFsbE1vZHVsZSA9IFN3aXBlci5DbGFzcy5pbnN0YWxsTW9kdWxlO1xufVxuXG5Td2lwZXIudXNlKGNvbXBvbmVudHMpO1xuXG5leHBvcnQgZGVmYXVsdCBTd2lwZXI7XG4iLCJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiIsIi8qIVxuICogVnVlLmpzIHYyLjYuMTBcbiAqIChjKSAyMDE0LTIwMTkgRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuLyogICovXG5cbnZhciBlbXB0eU9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuXG4vLyBUaGVzZSBoZWxwZXJzIHByb2R1Y2UgYmV0dGVyIFZNIGNvZGUgaW4gSlMgZW5naW5lcyBkdWUgdG8gdGhlaXJcbi8vIGV4cGxpY2l0bmVzcyBhbmQgZnVuY3Rpb24gaW5saW5pbmcuXG5mdW5jdGlvbiBpc1VuZGVmICh2KSB7XG4gIHJldHVybiB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc0RlZiAodikge1xuICByZXR1cm4gdiAhPT0gdW5kZWZpbmVkICYmIHYgIT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNUcnVlICh2KSB7XG4gIHJldHVybiB2ID09PSB0cnVlXG59XG5cbmZ1bmN0aW9uIGlzRmFsc2UgKHYpIHtcbiAgcmV0dXJuIHYgPT09IGZhbHNlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgcHJpbWl0aXZlLlxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSAodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJ1xuICApXG59XG5cbi8qKlxuICogUXVpY2sgb2JqZWN0IGNoZWNrIC0gdGhpcyBpcyBwcmltYXJpbHkgdXNlZCB0byB0ZWxsXG4gKiBPYmplY3RzIGZyb20gcHJpbWl0aXZlIHZhbHVlcyB3aGVuIHdlIGtub3cgdGhlIHZhbHVlXG4gKiBpcyBhIEpTT04tY29tcGxpYW50IHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG4vKipcbiAqIEdldCB0aGUgcmF3IHR5cGUgc3RyaW5nIG9mIGEgdmFsdWUsIGUuZy4sIFtvYmplY3QgT2JqZWN0XS5cbiAqL1xudmFyIF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmZ1bmN0aW9uIHRvUmF3VHlwZSAodmFsdWUpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSlcbn1cblxuLyoqXG4gKiBTdHJpY3Qgb2JqZWN0IHR5cGUgY2hlY2suIE9ubHkgcmV0dXJucyB0cnVlXG4gKiBmb3IgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nXG59XG5cbmZ1bmN0aW9uIGlzUmVnRXhwICh2KSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2KSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWwgaXMgYSB2YWxpZCBhcnJheSBpbmRleC5cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZEFycmF5SW5kZXggKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQoU3RyaW5nKHZhbCkpO1xuICByZXR1cm4gbiA+PSAwICYmIE1hdGguZmxvb3IobikgPT09IG4gJiYgaXNGaW5pdGUodmFsKVxufVxuXG5mdW5jdGlvbiBpc1Byb21pc2UgKHZhbCkge1xuICByZXR1cm4gKFxuICAgIGlzRGVmKHZhbCkgJiZcbiAgICB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdmFsLmNhdGNoID09PSAnZnVuY3Rpb24nXG4gIClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgdG8gYSBzdHJpbmcgdGhhdCBpcyBhY3R1YWxseSByZW5kZXJlZC5cbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcgKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGxcbiAgICA/ICcnXG4gICAgOiBBcnJheS5pc0FycmF5KHZhbCkgfHwgKGlzUGxhaW5PYmplY3QodmFsKSAmJiB2YWwudG9TdHJpbmcgPT09IF90b1N0cmluZylcbiAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCBudWxsLCAyKVxuICAgICAgOiBTdHJpbmcodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gaW5wdXQgdmFsdWUgdG8gYSBudW1iZXIgZm9yIHBlcnNpc3RlbmNlLlxuICogSWYgdGhlIGNvbnZlcnNpb24gZmFpbHMsIHJldHVybiBvcmlnaW5hbCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG5cbn1cblxuLyoqXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcbiAqIGlzIGluIHRoYXQgbWFwLlxuICovXG5mdW5jdGlvbiBtYWtlTWFwIChcbiAgc3RyLFxuICBleHBlY3RzTG93ZXJDYXNlXG4pIHtcbiAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2VcbiAgICA/IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWwudG9Mb3dlckNhc2UoKV07IH1cbiAgICA6IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWxdOyB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0YWcgaXMgYSBidWlsdC1pbiB0YWcuXG4gKi9cbnZhciBpc0J1aWx0SW5UYWcgPSBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcsIHRydWUpO1xuXG4vKipcbiAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZS5cbiAqL1xudmFyIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUgPSBtYWtlTWFwKCdrZXkscmVmLHNsb3Qsc2xvdC1zY29wZSxpcycpO1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpdGVtIGZyb20gYW4gYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZSAoYXJyLCBpdGVtKSB7XG4gIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyB0aGUgcHJvcGVydHkuXG4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBoYXNPd24gKG9iaiwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FjaGVkIChmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gKGZ1bmN0aW9uIGNhY2hlZEZuIChzdHIpIHtcbiAgICB2YXIgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcbiAgfSlcbn1cblxuLyoqXG4gKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxpbWl0ZWQgc3RyaW5nLlxuICovXG52YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbnZhciBjYW1lbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCBmdW5jdGlvbiAoXywgYykgeyByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnOyB9KVxufSk7XG5cbi8qKlxuICogQ2FwaXRhbGl6ZSBhIHN0cmluZy5cbiAqL1xudmFyIGNhcGl0YWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpXG59KTtcblxuLyoqXG4gKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLlxuICovXG52YXIgaHlwaGVuYXRlUkUgPSAvXFxCKFtBLVpdKS9nO1xudmFyIGh5cGhlbmF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKClcbn0pO1xuXG4vKipcbiAqIFNpbXBsZSBiaW5kIHBvbHlmaWxsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3Qgc3VwcG9ydCBpdCxcbiAqIGUuZy4sIFBoYW50b21KUyAxLnguIFRlY2huaWNhbGx5LCB3ZSBkb24ndCBuZWVkIHRoaXMgYW55bW9yZVxuICogc2luY2UgbmF0aXZlIGJpbmQgaXMgbm93IHBlcmZvcm1hbnQgZW5vdWdoIGluIG1vc3QgYnJvd3NlcnMuXG4gKiBCdXQgcmVtb3ZpbmcgaXQgd291bGQgbWVhbiBicmVha2luZyBjb2RlIHRoYXQgd2FzIGFibGUgdG8gcnVuIGluXG4gKiBQaGFudG9tSlMgMS54LCBzbyB0aGlzIG11c3QgYmUga2VwdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gcG9seWZpbGxCaW5kIChmbiwgY3R4KSB7XG4gIGZ1bmN0aW9uIGJvdW5kRm4gKGEpIHtcbiAgICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIGxcbiAgICAgID8gbCA+IDFcbiAgICAgICAgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cylcbiAgICAgICAgOiBmbi5jYWxsKGN0eCwgYSlcbiAgICAgIDogZm4uY2FsbChjdHgpXG4gIH1cblxuICBib3VuZEZuLl9sZW5ndGggPSBmbi5sZW5ndGg7XG4gIHJldHVybiBib3VuZEZuXG59XG5cbmZ1bmN0aW9uIG5hdGl2ZUJpbmQgKGZuLCBjdHgpIHtcbiAgcmV0dXJuIGZuLmJpbmQoY3R4KVxufVxuXG52YXIgYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG4gID8gbmF0aXZlQmluZFxuICA6IHBvbHlmaWxsQmluZDtcblxuLyoqXG4gKiBDb252ZXJ0IGFuIEFycmF5LWxpa2Ugb2JqZWN0IHRvIGEgcmVhbCBBcnJheS5cbiAqL1xuZnVuY3Rpb24gdG9BcnJheSAobGlzdCwgc3RhcnQpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICB2YXIgaSA9IGxpc3QubGVuZ3RoIC0gc3RhcnQ7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0pIHtcbiAgICByZXRbaV0gPSBsaXN0W2kgKyBzdGFydF07XG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIE1peCBwcm9wZXJ0aWVzIGludG8gdGFyZ2V0IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kICh0bywgX2Zyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIF9mcm9tKSB7XG4gICAgdG9ba2V5XSA9IF9mcm9tW2tleV07XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogTWVyZ2UgYW4gQXJyYXkgb2YgT2JqZWN0cyBpbnRvIGEgc2luZ2xlIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gdG9PYmplY3QgKGFycikge1xuICB2YXIgcmVzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFycltpXSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXJyW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFBlcmZvcm0gbm8gb3BlcmF0aW9uLlxuICogU3R1YmJpbmcgYXJncyB0byBtYWtlIEZsb3cgaGFwcHkgd2l0aG91dCBsZWF2aW5nIHVzZWxlc3MgdHJhbnNwaWxlZCBjb2RlXG4gKiB3aXRoIC4uLnJlc3QgKGh0dHBzOi8vZmxvdy5vcmcvYmxvZy8yMDE3LzA1LzA3L1N0cmljdC1GdW5jdGlvbi1DYWxsLUFyaXR5LykuXG4gKi9cbmZ1bmN0aW9uIG5vb3AgKGEsIGIsIGMpIHt9XG5cbi8qKlxuICogQWx3YXlzIHJldHVybiBmYWxzZS5cbiAqL1xudmFyIG5vID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsgcmV0dXJuIGZhbHNlOyB9O1xuXG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUmV0dXJuIHRoZSBzYW1lIHZhbHVlLlxuICovXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTtcblxuLyoqXG4gKiBDaGVjayBpZiB0d28gdmFsdWVzIGFyZSBsb29zZWx5IGVxdWFsIC0gdGhhdCBpcyxcbiAqIGlmIHRoZXkgYXJlIHBsYWluIG9iamVjdHMsIGRvIHRoZXkgaGF2ZSB0aGUgc2FtZSBzaGFwZT9cbiAqL1xuZnVuY3Rpb24gbG9vc2VFcXVhbCAoYSwgYikge1xuICBpZiAoYSA9PT0gYikgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpc09iamVjdEEgPSBpc09iamVjdChhKTtcbiAgdmFyIGlzT2JqZWN0QiA9IGlzT2JqZWN0KGIpO1xuICBpZiAoaXNPYmplY3RBICYmIGlzT2JqZWN0Qikge1xuICAgIHRyeSB7XG4gICAgICB2YXIgaXNBcnJheUEgPSBBcnJheS5pc0FycmF5KGEpO1xuICAgICAgdmFyIGlzQXJyYXlCID0gQXJyYXkuaXNBcnJheShiKTtcbiAgICAgIGlmIChpc0FycmF5QSAmJiBpc0FycmF5Qikge1xuICAgICAgICByZXR1cm4gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChlLCBiW2ldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmIChhIGluc3RhbmNlb2YgRGF0ZSAmJiBiIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gYS5nZXRUaW1lKCkgPT09IGIuZ2V0VGltZSgpXG4gICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgZmlyc3QgaW5kZXggYXQgd2hpY2ggYSBsb29zZWx5IGVxdWFsIHZhbHVlIGNhbiBiZVxuICogZm91bmQgaW4gdGhlIGFycmF5IChpZiB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdCwgdGhlIGFycmF5IG11c3RcbiAqIGNvbnRhaW4gYW4gb2JqZWN0IG9mIHRoZSBzYW1lIHNoYXBlKSwgb3IgLTEgaWYgaXQgaXMgbm90IHByZXNlbnQuXG4gKi9cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZiAoYXJyLCB2YWwpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobG9vc2VFcXVhbChhcnJbaV0sIHZhbCkpIHsgcmV0dXJuIGkgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG4vKipcbiAqIEVuc3VyZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmx5IG9uY2UuXG4gKi9cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBTU1JfQVRUUiA9ICdkYXRhLXNlcnZlci1yZW5kZXJlZCc7XG5cbnZhciBBU1NFVF9UWVBFUyA9IFtcbiAgJ2NvbXBvbmVudCcsXG4gICdkaXJlY3RpdmUnLFxuICAnZmlsdGVyJ1xuXTtcblxudmFyIExJRkVDWUNMRV9IT09LUyA9IFtcbiAgJ2JlZm9yZUNyZWF0ZScsXG4gICdjcmVhdGVkJyxcbiAgJ2JlZm9yZU1vdW50JyxcbiAgJ21vdW50ZWQnLFxuICAnYmVmb3JlVXBkYXRlJyxcbiAgJ3VwZGF0ZWQnLFxuICAnYmVmb3JlRGVzdHJveScsXG4gICdkZXN0cm95ZWQnLFxuICAnYWN0aXZhdGVkJyxcbiAgJ2RlYWN0aXZhdGVkJyxcbiAgJ2Vycm9yQ2FwdHVyZWQnLFxuICAnc2VydmVyUHJlZmV0Y2gnXG5dO1xuXG4vKiAgKi9cblxuXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICovXG4gIHByb2R1Y3Rpb25UaXA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byByZWNvcmQgcGVyZlxuICAgKi9cbiAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBFcnJvciBoYW5kbGVyIGZvciB3YXRjaGVyIGVycm9yc1xuICAgKi9cbiAgZXJyb3JIYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnNcbiAgICovXG4gIHdhcm5IYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcbiAgICovXG4gIGlnbm9yZWRFbGVtZW50czogW10sXG5cbiAgLyoqXG4gICAqIEN1c3RvbSB1c2VyIGtleSBhbGlhc2VzIGZvciB2LW9uXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAga2V5Q29kZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnRcbiAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRBdHRyOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgYW4gdW5rbm93biBlbGVtZW50LlxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBpc1Vua25vd25FbGVtZW50OiBubyxcblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgKi9cbiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBtdXN0VXNlUHJvcDogbm8sXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gdXBkYXRlcyBhc3luY2hyb25vdXNseS4gSW50ZW5kZWQgdG8gYmUgdXNlZCBieSBWdWUgVGVzdCBVdGlsc1xuICAgKiBUaGlzIHdpbGwgc2lnbmlmaWNhbnRseSByZWR1Y2UgcGVyZm9ybWFuY2UgaWYgc2V0IHRvIGZhbHNlLlxuICAgKi9cbiAgYXN5bmM6IHRydWUsXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IExJRkVDWUNMRV9IT09LU1xufSk7XG5cbi8qICAqL1xuXG4vKipcbiAqIHVuaWNvZGUgbGV0dGVycyB1c2VkIGZvciBwYXJzaW5nIGh0bWwgdGFncywgY29tcG9uZW50IG5hbWVzIGFuZCBwcm9wZXJ0eSBwYXRocy5cbiAqIHVzaW5nIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNTMvc2VtYW50aWNzLXNjcmlwdGluZy5odG1sI3BvdGVudGlhbGN1c3RvbWVsZW1lbnRuYW1lXG4gKiBza2lwcGluZyBcXHUxMDAwMC1cXHVFRkZGRiBkdWUgdG8gaXQgZnJlZXppbmcgdXAgUGhhbnRvbUpTXG4gKi9cbnZhciB1bmljb2RlUmVnRXhwID0gL2EtekEtWlxcdTAwQjdcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDNGLVxcdTIwNDBcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkQvO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoICQgb3IgX1xuICovXG5mdW5jdGlvbiBpc1Jlc2VydmVkIChzdHIpIHtcbiAgdmFyIGMgPSAoc3RyICsgJycpLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiBjID09PSAweDI0IHx8IGMgPT09IDB4NUZcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZGVmIChvYmosIGtleSwgdmFsLCBlbnVtZXJhYmxlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIHZhbHVlOiB2YWwsXG4gICAgZW51bWVyYWJsZTogISFlbnVtZXJhYmxlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBQYXJzZSBzaW1wbGUgcGF0aC5cbiAqL1xudmFyIGJhaWxSRSA9IG5ldyBSZWdFeHAoKFwiW15cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIi4kX1xcXFxkXVwiKSk7XG5mdW5jdGlvbiBwYXJzZVBhdGggKHBhdGgpIHtcbiAgaWYgKGJhaWxSRS50ZXN0KHBhdGgpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLicpO1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghb2JqKSB7IHJldHVybiB9XG4gICAgICBvYmogPSBvYmpbc2VnbWVudHNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gb2JqXG4gIH1cbn1cblxuLyogICovXG5cbi8vIGNhbiB3ZSB1c2UgX19wcm90b19fP1xudmFyIGhhc1Byb3RvID0gJ19fcHJvdG9fXycgaW4ge307XG5cbi8vIEJyb3dzZXIgZW52aXJvbm1lbnQgc25pZmZpbmdcbnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbnZhciBpbldlZXggPSB0eXBlb2YgV1hFbnZpcm9ubWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgISFXWEVudmlyb25tZW50LnBsYXRmb3JtO1xudmFyIHdlZXhQbGF0Zm9ybSA9IGluV2VleCAmJiBXWEVudmlyb25tZW50LnBsYXRmb3JtLnRvTG93ZXJDYXNlKCk7XG52YXIgVUEgPSBpbkJyb3dzZXIgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbnZhciBpc0lFID0gVUEgJiYgL21zaWV8dHJpZGVudC8udGVzdChVQSk7XG52YXIgaXNJRTkgPSBVQSAmJiBVQS5pbmRleE9mKCdtc2llIDkuMCcpID4gMDtcbnZhciBpc0VkZ2UgPSBVQSAmJiBVQS5pbmRleE9mKCdlZGdlLycpID4gMDtcbnZhciBpc0FuZHJvaWQgPSAoVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMCkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2FuZHJvaWQnKTtcbnZhciBpc0lPUyA9IChVQSAmJiAvaXBob25lfGlwYWR8aXBvZHxpb3MvLnRlc3QoVUEpKSB8fCAod2VleFBsYXRmb3JtID09PSAnaW9zJyk7XG52YXIgaXNDaHJvbWUgPSBVQSAmJiAvY2hyb21lXFwvXFxkKy8udGVzdChVQSkgJiYgIWlzRWRnZTtcbnZhciBpc1BoYW50b21KUyA9IFVBICYmIC9waGFudG9tanMvLnRlc3QoVUEpO1xudmFyIGlzRkYgPSBVQSAmJiBVQS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pO1xuXG4vLyBGaXJlZm94IGhhcyBhIFwid2F0Y2hcIiBmdW5jdGlvbiBvbiBPYmplY3QucHJvdG90eXBlLi4uXG52YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoO1xuXG52YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5pZiAoaW5Ccm93c2VyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXSAmJiBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJlxuICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNldCAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFtrZXldID09PSB0cnVlXG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoa2V5KSB7XG4gICAgICB0aGlzLnNldFtrZXldID0gdHJ1ZTtcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcblxuICAgIHJldHVybiBTZXQ7XG4gIH0oKSk7XG59XG5cbi8qICAqL1xuXG52YXIgd2FybiA9IG5vb3A7XG52YXIgdGlwID0gbm9vcDtcbnZhciBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gKG5vb3ApOyAvLyB3b3JrIGFyb3VuZCBmbG93IGNoZWNrXG52YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IChub29wKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuICB2YXIgY2xhc3NpZnkgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHJcbiAgICAucmVwbGFjZShjbGFzc2lmeVJFLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1VwcGVyQ2FzZSgpOyB9KVxuICAgIC5yZXBsYWNlKC9bLV9dL2csICcnKTsgfTtcblxuICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XG5cbiAgICBpZiAoY29uZmlnLndhcm5IYW5kbGVyKSB7XG4gICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XG4gICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSB3YXJuXTogXCIgKyBtc2cgKyB0cmFjZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aXAgPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltWdWUgdGlwXTogXCIgKyBtc2cgKyAoXG4gICAgICAgIHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJ1xuICAgICAgKSk7XG4gICAgfVxuICB9O1xuXG4gIGZvcm1hdENvbXBvbmVudE5hbWUgPSBmdW5jdGlvbiAodm0sIGluY2x1ZGVGaWxlKSB7XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICc8Um9vdD4nXG4gICAgfVxuICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsXG4gICAgICA/IHZtLm9wdGlvbnNcbiAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9uc1xuICAgICAgICA6IHZtO1xuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlO1xuICAgIGlmICghbmFtZSAmJiBmaWxlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBmaWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcbiAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCI8XCIgKyAoY2xhc3NpZnkobmFtZSkpICsgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXG4gICAgICAoZmlsZSAmJiBpbmNsdWRlRmlsZSAhPT0gZmFsc2UgPyAoXCIgYXQgXCIgKyBmaWxlKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbikge1xuICAgIHZhciByZXMgPSAnJztcbiAgICB3aGlsZSAobikge1xuICAgICAgaWYgKG4gJSAyID09PSAxKSB7IHJlcyArPSBzdHI7IH1cbiAgICAgIGlmIChuID4gMSkgeyBzdHIgKz0gc3RyOyB9XG4gICAgICBuID4+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH07XG5cbiAgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkge1xuICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgIHZhciBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgbGFzdCA9IHRyZWVbdHJlZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSsrO1xuICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA+IDApIHtcbiAgICAgICAgICAgIHRyZWVbdHJlZS5sZW5ndGggLSAxXSA9IFtsYXN0LCBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2VdO1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJlZS5wdXNoKHZtKTtcbiAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuICdcXG5cXG5mb3VuZCBpblxcblxcbicgKyB0cmVlXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoXCJcIiArIChpID09PSAwID8gJy0tLT4gJyA6IHJlcGVhdCgnICcsIDUgKyBpICogMikpICsgKEFycmF5LmlzQXJyYXkodm0pXG4gICAgICAgICAgICA/ICgoZm9ybWF0Q29tcG9uZW50TmFtZSh2bVswXSkpICsgXCIuLi4gKFwiICsgKHZtWzFdKSArIFwiIHJlY3Vyc2l2ZSBjYWxscylcIilcbiAgICAgICAgICAgIDogZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpKTsgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcXG5cXG4oZm91bmQgaW4gXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIpXCIpXG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCA9IDA7XG5cbi8qKlxuICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXG4gKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICovXG52YXIgRGVwID0gZnVuY3Rpb24gRGVwICgpIHtcbiAgdGhpcy5pZCA9IHVpZCsrO1xuICB0aGlzLnN1YnMgPSBbXTtcbn07XG5cbkRlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24gYWRkU3ViIChzdWIpIHtcbiAgdGhpcy5zdWJzLnB1c2goc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUucmVtb3ZlU3ViID0gZnVuY3Rpb24gcmVtb3ZlU3ViIChzdWIpIHtcbiAgcmVtb3ZlKHRoaXMuc3Vicywgc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgaWYgKERlcC50YXJnZXQpIHtcbiAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcbiAgfVxufTtcblxuRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkgKCkge1xuICAvLyBzdGFiaWxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgLy8gc3VicyBhcmVuJ3Qgc29ydGVkIGluIHNjaGVkdWxlciBpZiBub3QgcnVubmluZyBhc3luY1xuICAgIC8vIHdlIG5lZWQgdG8gc29ydCB0aGVtIG5vdyB0byBtYWtlIHN1cmUgdGhleSBmaXJlIGluIGNvcnJlY3RcbiAgICAvLyBvcmRlclxuICAgIHN1YnMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyBUaGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4vLyBUaGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIG9ubHkgb25lIHdhdGNoZXJcbi8vIGNhbiBiZSBldmFsdWF0ZWQgYXQgYSB0aW1lLlxuRGVwLnRhcmdldCA9IG51bGw7XG52YXIgdGFyZ2V0U3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gcHVzaFRhcmdldCAodGFyZ2V0KSB7XG4gIHRhcmdldFN0YWNrLnB1c2godGFyZ2V0KTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldDtcbn1cblxuZnVuY3Rpb24gcG9wVGFyZ2V0ICgpIHtcbiAgdGFyZ2V0U3RhY2sucG9wKCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXRTdGFja1t0YXJnZXRTdGFjay5sZW5ndGggLSAxXTtcbn1cblxuLyogICovXG5cbnZhciBWTm9kZSA9IGZ1bmN0aW9uIFZOb2RlIChcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgdGV4dCxcbiAgZWxtLFxuICBjb250ZXh0LFxuICBjb21wb25lbnRPcHRpb25zLFxuICBhc3luY0ZhY3Rvcnlcbikge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnRleHQgPSB0ZXh0O1xuICB0aGlzLmVsbSA9IGVsbTtcbiAgdGhpcy5ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5mbkNvbnRleHQgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5PcHRpb25zID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuU2NvcGVJZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5rZXkgPSBkYXRhICYmIGRhdGEua2V5O1xuICB0aGlzLmNvbXBvbmVudE9wdGlvbnMgPSBjb21wb25lbnRPcHRpb25zO1xuICB0aGlzLmNvbXBvbmVudEluc3RhbmNlID0gdW5kZWZpbmVkO1xuICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5yYXcgPSBmYWxzZTtcbiAgdGhpcy5pc1N0YXRpYyA9IGZhbHNlO1xuICB0aGlzLmlzUm9vdEluc2VydCA9IHRydWU7XG4gIHRoaXMuaXNDb21tZW50ID0gZmFsc2U7XG4gIHRoaXMuaXNDbG9uZWQgPSBmYWxzZTtcbiAgdGhpcy5pc09uY2UgPSBmYWxzZTtcbiAgdGhpcy5hc3luY0ZhY3RvcnkgPSBhc3luY0ZhY3Rvcnk7XG4gIHRoaXMuYXN5bmNNZXRhID0gdW5kZWZpbmVkO1xuICB0aGlzLmlzQXN5bmNQbGFjZWhvbGRlciA9IGZhbHNlO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY2hpbGQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLy8gREVQUkVDQVRFRDogYWxpYXMgZm9yIGNvbXBvbmVudEluc3RhbmNlIGZvciBiYWNrd2FyZHMgY29tcGF0LlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnByb3RvdHlwZUFjY2Vzc29ycy5jaGlsZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmNvbXBvbmVudEluc3RhbmNlXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVk5vZGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxudmFyIGNyZWF0ZUVtcHR5Vk5vZGUgPSBmdW5jdGlvbiAodGV4dCkge1xuICBpZiAoIHRleHQgPT09IHZvaWQgMCApIHRleHQgPSAnJztcblxuICB2YXIgbm9kZSA9IG5ldyBWTm9kZSgpO1xuICBub2RlLnRleHQgPSB0ZXh0O1xuICBub2RlLmlzQ29tbWVudCA9IHRydWU7XG4gIHJldHVybiBub2RlXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUgKHZhbCkge1xuICByZXR1cm4gbmV3IFZOb2RlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFN0cmluZyh2YWwpKVxufVxuXG4vLyBvcHRpbWl6ZWQgc2hhbGxvdyBjbG9uZVxuLy8gdXNlZCBmb3Igc3RhdGljIG5vZGVzIGFuZCBzbG90IG5vZGVzIGJlY2F1c2UgdGhleSBtYXkgYmUgcmV1c2VkIGFjcm9zc1xuLy8gbXVsdGlwbGUgcmVuZGVycywgY2xvbmluZyB0aGVtIGF2b2lkcyBlcnJvcnMgd2hlbiBET00gbWFuaXB1bGF0aW9ucyByZWx5XG4vLyBvbiB0aGVpciBlbG0gcmVmZXJlbmNlLlxuZnVuY3Rpb24gY2xvbmVWTm9kZSAodm5vZGUpIHtcbiAgdmFyIGNsb25lZCA9IG5ldyBWTm9kZShcbiAgICB2bm9kZS50YWcsXG4gICAgdm5vZGUuZGF0YSxcbiAgICAvLyAjNzk3NVxuICAgIC8vIGNsb25lIGNoaWxkcmVuIGFycmF5IHRvIGF2b2lkIG11dGF0aW5nIG9yaWdpbmFsIGluIGNhc2Ugb2YgY2xvbmluZ1xuICAgIC8vIGEgY2hpbGQuXG4gICAgdm5vZGUuY2hpbGRyZW4gJiYgdm5vZGUuY2hpbGRyZW4uc2xpY2UoKSxcbiAgICB2bm9kZS50ZXh0LFxuICAgIHZub2RlLmVsbSxcbiAgICB2bm9kZS5jb250ZXh0LFxuICAgIHZub2RlLmNvbXBvbmVudE9wdGlvbnMsXG4gICAgdm5vZGUuYXN5bmNGYWN0b3J5XG4gICk7XG4gIGNsb25lZC5ucyA9IHZub2RlLm5zO1xuICBjbG9uZWQuaXNTdGF0aWMgPSB2bm9kZS5pc1N0YXRpYztcbiAgY2xvbmVkLmtleSA9IHZub2RlLmtleTtcbiAgY2xvbmVkLmlzQ29tbWVudCA9IHZub2RlLmlzQ29tbWVudDtcbiAgY2xvbmVkLmZuQ29udGV4dCA9IHZub2RlLmZuQ29udGV4dDtcbiAgY2xvbmVkLmZuT3B0aW9ucyA9IHZub2RlLmZuT3B0aW9ucztcbiAgY2xvbmVkLmZuU2NvcGVJZCA9IHZub2RlLmZuU2NvcGVJZDtcbiAgY2xvbmVkLmFzeW5jTWV0YSA9IHZub2RlLmFzeW5jTWV0YTtcbiAgY2xvbmVkLmlzQ2xvbmVkID0gdHJ1ZTtcbiAgcmV0dXJuIGNsb25lZFxufVxuXG4vKlxuICogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoXG4gKiBkeW5hbWljYWxseSBhY2Nlc3NpbmcgbWV0aG9kcyBvbiBBcnJheSBwcm90b3R5cGVcbiAqL1xuXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbnZhciBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pO1xuXG52YXIgbWV0aG9kc1RvUGF0Y2ggPSBbXG4gICdwdXNoJyxcbiAgJ3BvcCcsXG4gICdzaGlmdCcsXG4gICd1bnNoaWZ0JyxcbiAgJ3NwbGljZScsXG4gICdzb3J0JyxcbiAgJ3JldmVyc2UnXG5dO1xuXG4vKipcbiAqIEludGVyY2VwdCBtdXRhdGluZyBtZXRob2RzIGFuZCBlbWl0IGV2ZW50c1xuICovXG5tZXRob2RzVG9QYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgLy8gY2FjaGUgb3JpZ2luYWwgbWV0aG9kXG4gIHZhciBvcmlnaW5hbCA9IGFycmF5UHJvdG9bbWV0aG9kXTtcbiAgZGVmKGFycmF5TWV0aG9kcywgbWV0aG9kLCBmdW5jdGlvbiBtdXRhdG9yICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICB2YXIgcmVzdWx0ID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgdmFyIG9iID0gdGhpcy5fX29iX187XG4gICAgdmFyIGluc2VydGVkO1xuICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICBjYXNlICdwdXNoJzpcbiAgICAgIGNhc2UgJ3Vuc2hpZnQnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3M7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdzcGxpY2UnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3Muc2xpY2UoMik7XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChpbnNlcnRlZCkgeyBvYi5vYnNlcnZlQXJyYXkoaW5zZXJ0ZWQpOyB9XG4gICAgLy8gbm90aWZ5IGNoYW5nZVxuICAgIG9iLmRlcC5ub3RpZnkoKTtcbiAgICByZXR1cm4gcmVzdWx0XG4gIH0pO1xufSk7XG5cbi8qICAqL1xuXG52YXIgYXJyYXlLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJyYXlNZXRob2RzKTtcblxuLyoqXG4gKiBJbiBzb21lIGNhc2VzIHdlIG1heSB3YW50IHRvIGRpc2FibGUgb2JzZXJ2YXRpb24gaW5zaWRlIGEgY29tcG9uZW50J3NcbiAqIHVwZGF0ZSBjb21wdXRhdGlvbi5cbiAqL1xudmFyIHNob3VsZE9ic2VydmUgPSB0cnVlO1xuXG5mdW5jdGlvbiB0b2dnbGVPYnNlcnZpbmcgKHZhbHVlKSB7XG4gIHNob3VsZE9ic2VydmUgPSB2YWx1ZTtcbn1cblxuLyoqXG4gKiBPYnNlcnZlciBjbGFzcyB0aGF0IGlzIGF0dGFjaGVkIHRvIGVhY2ggb2JzZXJ2ZWRcbiAqIG9iamVjdC4gT25jZSBhdHRhY2hlZCwgdGhlIG9ic2VydmVyIGNvbnZlcnRzIHRoZSB0YXJnZXRcbiAqIG9iamVjdCdzIHByb3BlcnR5IGtleXMgaW50byBnZXR0ZXIvc2V0dGVycyB0aGF0XG4gKiBjb2xsZWN0IGRlcGVuZGVuY2llcyBhbmQgZGlzcGF0Y2ggdXBkYXRlcy5cbiAqL1xudmFyIE9ic2VydmVyID0gZnVuY3Rpb24gT2JzZXJ2ZXIgKHZhbHVlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgdGhpcy5kZXAgPSBuZXcgRGVwKCk7XG4gIHRoaXMudm1Db3VudCA9IDA7XG4gIGRlZih2YWx1ZSwgJ19fb2JfXycsIHRoaXMpO1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBpZiAoaGFzUHJvdG8pIHtcbiAgICAgIHByb3RvQXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29weUF1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcywgYXJyYXlLZXlzKTtcbiAgICB9XG4gICAgdGhpcy5vYnNlcnZlQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud2Fsayh2YWx1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV2FsayB0aHJvdWdoIGFsbCBwcm9wZXJ0aWVzIGFuZCBjb252ZXJ0IHRoZW0gaW50b1xuICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gKiB2YWx1ZSB0eXBlIGlzIE9iamVjdC5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMShvYmosIGtleXNbaV0pO1xuICB9XG59O1xuXG4vKipcbiAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5IChpdGVtcykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9ic2VydmUoaXRlbXNbaV0pO1xuICB9XG59O1xuXG4vLyBoZWxwZXJzXG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgaW50ZXJjZXB0aW5nXG4gKiB0aGUgcHJvdG90eXBlIGNoYWluIHVzaW5nIF9fcHJvdG9fX1xuICovXG5mdW5jdGlvbiBwcm90b0F1Z21lbnQgKHRhcmdldCwgc3JjKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG4gIHRhcmdldC5fX3Byb3RvX18gPSBzcmM7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8gKi9cbn1cblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZ1xuICogaGlkZGVuIHByb3BlcnRpZXMuXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBjb3B5QXVnbWVudCAodGFyZ2V0LCBzcmMsIGtleXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGRlZih0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdCB0byBjcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UgZm9yIGEgdmFsdWUsXG4gKiByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgaWYgc3VjY2Vzc2Z1bGx5IG9ic2VydmVkLFxuICogb3IgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGhhcyBvbmUuXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmUgKHZhbHVlLCBhc1Jvb3REYXRhKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IHZhbHVlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2I7XG4gIGlmIChoYXNPd24odmFsdWUsICdfX29iX18nKSAmJiB2YWx1ZS5fX29iX18gaW5zdGFuY2VvZiBPYnNlcnZlcikge1xuICAgIG9iID0gdmFsdWUuX19vYl9fO1xuICB9IGVsc2UgaWYgKFxuICAgIHNob3VsZE9ic2VydmUgJiZcbiAgICAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSAmJlxuICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkgJiZcbiAgICBPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSAmJlxuICAgICF2YWx1ZS5faXNWdWVcbiAgKSB7XG4gICAgb2IgPSBuZXcgT2JzZXJ2ZXIodmFsdWUpO1xuICB9XG4gIGlmIChhc1Jvb3REYXRhICYmIG9iKSB7XG4gICAgb2Iudm1Db3VudCsrO1xuICB9XG4gIHJldHVybiBvYlxufVxuXG4vKipcbiAqIERlZmluZSBhIHJlYWN0aXZlIHByb3BlcnR5IG9uIGFuIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lUmVhY3RpdmUkJDEgKFxuICBvYmosXG4gIGtleSxcbiAgdmFsLFxuICBjdXN0b21TZXR0ZXIsXG4gIHNoYWxsb3dcbikge1xuICB2YXIgZGVwID0gbmV3IERlcCgpO1xuXG4gIHZhciBwcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gY2F0ZXIgZm9yIHByZS1kZWZpbmVkIGdldHRlci9zZXR0ZXJzXG4gIHZhciBnZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5nZXQ7XG4gIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG4gIGlmICgoIWdldHRlciB8fCBzZXR0ZXIpICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICB2YWwgPSBvYmpba2V5XTtcbiAgfVxuXG4gIHZhciBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZSh2YWwpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlR2V0dGVyICgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICBkZXAuZGVwZW5kKCk7XG4gICAgICAgIGlmIChjaGlsZE9iKSB7XG4gICAgICAgICAgY2hpbGRPYi5kZXAuZGVwZW5kKCk7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gcmVhY3RpdmVTZXR0ZXIgKG5ld1ZhbCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKG5ld1ZhbCA9PT0gdmFsdWUgfHwgKG5ld1ZhbCAhPT0gbmV3VmFsICYmIHZhbHVlICE9PSB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY3VzdG9tU2V0dGVyKSB7XG4gICAgICAgIGN1c3RvbVNldHRlcigpO1xuICAgICAgfVxuICAgICAgLy8gIzc5ODE6IGZvciBhY2Nlc3NvciBwcm9wZXJ0aWVzIHdpdGhvdXQgc2V0dGVyXG4gICAgICBpZiAoZ2V0dGVyICYmICFzZXR0ZXIpIHsgcmV0dXJuIH1cbiAgICAgIGlmIChzZXR0ZXIpIHtcbiAgICAgICAgc2V0dGVyLmNhbGwob2JqLCBuZXdWYWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gbmV3VmFsO1xuICAgICAgfVxuICAgICAgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUobmV3VmFsKTtcbiAgICAgIGRlcC5ub3RpZnkoKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCBhIHByb3BlcnR5IG9uIGFuIG9iamVjdC4gQWRkcyB0aGUgbmV3IHByb3BlcnR5IGFuZFxuICogdHJpZ2dlcnMgY2hhbmdlIG5vdGlmaWNhdGlvbiBpZiB0aGUgcHJvcGVydHkgZG9lc24ndFxuICogYWxyZWFkeSBleGlzdC5cbiAqL1xuZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBzZXQgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5sZW5ndGggPSBNYXRoLm1heCh0YXJnZXQubGVuZ3RoLCBrZXkpO1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxLCB2YWwpO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoa2V5IGluIHRhcmdldCAmJiAhKGtleSBpbiBPYmplY3QucHJvdG90eXBlKSkge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBhZGRpbmcgcmVhY3RpdmUgcHJvcGVydGllcyB0byBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICdhdCBydW50aW1lIC0gZGVjbGFyZSBpdCB1cGZyb250IGluIHRoZSBkYXRhIG9wdGlvbi4nXG4gICAgKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKCFvYikge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBkZWZpbmVSZWFjdGl2ZSQkMShvYi52YWx1ZSwga2V5LCB2YWwpO1xuICBvYi5kZXAubm90aWZ5KCk7XG4gIHJldHVybiB2YWxcbn1cblxuLyoqXG4gKiBEZWxldGUgYSBwcm9wZXJ0eSBhbmQgdHJpZ2dlciBjaGFuZ2UgaWYgbmVjZXNzYXJ5LlxuICovXG5mdW5jdGlvbiBkZWwgKHRhcmdldCwga2V5KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBkZWxldGUgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBkZWxldGluZyBwcm9wZXJ0aWVzIG9uIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJy0ganVzdCBzZXQgaXQgdG8gbnVsbC4nXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoIWhhc093bih0YXJnZXQsIGtleSkpIHtcbiAgICByZXR1cm5cbiAgfVxuICBkZWxldGUgdGFyZ2V0W2tleV07XG4gIGlmICghb2IpIHtcbiAgICByZXR1cm5cbiAgfVxuICBvYi5kZXAubm90aWZ5KCk7XG59XG5cbi8qKlxuICogQ29sbGVjdCBkZXBlbmRlbmNpZXMgb24gYXJyYXkgZWxlbWVudHMgd2hlbiB0aGUgYXJyYXkgaXMgdG91Y2hlZCwgc2luY2VcbiAqIHdlIGNhbm5vdCBpbnRlcmNlcHQgYXJyYXkgZWxlbWVudCBhY2Nlc3MgbGlrZSBwcm9wZXJ0eSBnZXR0ZXJzLlxuICovXG5mdW5jdGlvbiBkZXBlbmRBcnJheSAodmFsdWUpIHtcbiAgZm9yICh2YXIgZSA9ICh2b2lkIDApLCBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGUgPSB2YWx1ZVtpXTtcbiAgICBlICYmIGUuX19vYl9fICYmIGUuX19vYl9fLmRlcC5kZXBlbmQoKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgZGVwZW5kQXJyYXkoZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIE9wdGlvbiBvdmVyd3JpdGluZyBzdHJhdGVnaWVzIGFyZSBmdW5jdGlvbnMgdGhhdCBoYW5kbGVcbiAqIGhvdyB0byBtZXJnZSBhIHBhcmVudCBvcHRpb24gdmFsdWUgYW5kIGEgY2hpbGQgb3B0aW9uXG4gKiB2YWx1ZSBpbnRvIHRoZSBmaW5hbCB2YWx1ZS5cbiAqL1xudmFyIHN0cmF0cyA9IGNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG5cbi8qKlxuICogT3B0aW9ucyB3aXRoIHJlc3RyaWN0aW9uc1xuICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIm9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgaW5zdGFuY2UgXCIgK1xuICAgICAgICAnY3JlYXRpb24gd2l0aCB0aGUgYG5ld2Aga2V5d29yZC4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCwgY2hpbGQpXG4gIH07XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgcmVjdXJzaXZlbHkgbWVyZ2VzIHR3byBkYXRhIG9iamVjdHMgdG9nZXRoZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YSAodG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7IHJldHVybiB0byB9XG4gIHZhciBrZXksIHRvVmFsLCBmcm9tVmFsO1xuXG4gIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgPyBSZWZsZWN0Lm93bktleXMoZnJvbSlcbiAgICA6IE9iamVjdC5rZXlzKGZyb20pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgLy8gaW4gY2FzZSB0aGUgb2JqZWN0IGlzIGFscmVhZHkgb2JzZXJ2ZWQuLi5cbiAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgdG9WYWwgPSB0b1trZXldO1xuICAgIGZyb21WYWwgPSBmcm9tW2tleV07XG4gICAgaWYgKCFoYXNPd24odG8sIGtleSkpIHtcbiAgICAgIHNldCh0bywga2V5LCBmcm9tVmFsKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgdG9WYWwgIT09IGZyb21WYWwgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QodG9WYWwpICYmXG4gICAgICBpc1BsYWluT2JqZWN0KGZyb21WYWwpXG4gICAgKSB7XG4gICAgICBtZXJnZURhdGEodG9WYWwsIGZyb21WYWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBEYXRhXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YU9yRm4gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICAvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xuICAgIGlmICghY2hpbGRWYWwpIHtcbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgIH1cbiAgICAvLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXG4gICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvXG4gICAgLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXG4gICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbiAoKSB7XG4gICAgICByZXR1cm4gbWVyZ2VEYXRhKFxuICAgICAgICB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbicgPyBjaGlsZFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogY2hpbGRWYWwsXG4gICAgICAgIHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbicgPyBwYXJlbnRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IHBhcmVudFZhbFxuICAgICAgKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkSW5zdGFuY2VEYXRhRm4gKCkge1xuICAgICAgLy8gaW5zdGFuY2UgbWVyZ2VcbiAgICAgIHZhciBpbnN0YW5jZURhdGEgPSB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBjaGlsZFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBjaGlsZFZhbDtcbiAgICAgIHZhciBkZWZhdWx0RGF0YSA9IHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwYXJlbnRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogcGFyZW50VmFsO1xuICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VEYXRhKGluc3RhbmNlRGF0YSwgZGVmYXVsdERhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERhdGFcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIGlmIChjaGlsZFZhbCAmJiB0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ1RoZSBcImRhdGFcIiBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gJyArXG4gICAgICAgICd0aGF0IHJldHVybnMgYSBwZXItaW5zdGFuY2UgdmFsdWUgaW4gY29tcG9uZW50ICcgK1xuICAgICAgICAnZGVmaW5pdGlvbnMuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbClcbiAgfVxuXG4gIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKVxufTtcblxuLyoqXG4gKiBIb29rcyBhbmQgcHJvcHMgYXJlIG1lcmdlZCBhcyBhcnJheXMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlSG9vayAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWxcbikge1xuICB2YXIgcmVzID0gY2hpbGRWYWxcbiAgICA/IHBhcmVudFZhbFxuICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkVmFsKVxuICAgICAgICA/IGNoaWxkVmFsXG4gICAgICAgIDogW2NoaWxkVmFsXVxuICAgIDogcGFyZW50VmFsO1xuICByZXR1cm4gcmVzXG4gICAgPyBkZWR1cGVIb29rcyhyZXMpXG4gICAgOiByZXNcbn1cblxuZnVuY3Rpb24gZGVkdXBlSG9va3MgKGhvb2tzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChyZXMuaW5kZXhPZihob29rc1tpXSkgPT09IC0xKSB7XG4gICAgICByZXMucHVzaChob29rc1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuTElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xufSk7XG5cbi8qKlxuICogQXNzZXRzXG4gKlxuICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICogb3B0aW9ucyBhbmQgcGFyZW50IG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQXNzZXRzIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTtcbiAgaWYgKGNoaWxkVmFsKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgICByZXR1cm4gZXh0ZW5kKHJlcywgY2hpbGRWYWwpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbkFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG59KTtcblxuLyoqXG4gKiBXYXRjaGVycy5cbiAqXG4gKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lXG4gKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAqL1xuc3RyYXRzLndhdGNoID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgLy8gd29yayBhcm91bmQgRmlyZWZveCdzIE9iamVjdC5wcm90b3R5cGUud2F0Y2guLi5cbiAgaWYgKHBhcmVudFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgcGFyZW50VmFsID0gdW5kZWZpbmVkOyB9XG4gIGlmIChjaGlsZFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgY2hpbGRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0ge307XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGZvciAodmFyIGtleSQxIGluIGNoaWxkVmFsKSB7XG4gICAgdmFyIHBhcmVudCA9IHJldFtrZXkkMV07XG4gICAgdmFyIGNoaWxkID0gY2hpbGRWYWxba2V5JDFdO1xuICAgIGlmIChwYXJlbnQgJiYgIUFycmF5LmlzQXJyYXkocGFyZW50KSkge1xuICAgICAgcGFyZW50ID0gW3BhcmVudF07XG4gICAgfVxuICAgIHJldFtrZXkkMV0gPSBwYXJlbnRcbiAgICAgID8gcGFyZW50LmNvbmNhdChjaGlsZClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZCkgPyBjaGlsZCA6IFtjaGlsZF07XG4gIH1cbiAgcmV0dXJuIHJldFxufTtcblxuLyoqXG4gKiBPdGhlciBvYmplY3QgaGFzaGVzLlxuICovXG5zdHJhdHMucHJvcHMgPVxuc3RyYXRzLm1ldGhvZHMgPVxuc3RyYXRzLmluamVjdCA9XG5zdHJhdHMuY29tcHV0ZWQgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICBpZiAoY2hpbGRWYWwgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBpZiAoY2hpbGRWYWwpIHsgZXh0ZW5kKHJldCwgY2hpbGRWYWwpOyB9XG4gIHJldHVybiByZXRcbn07XG5zdHJhdHMucHJvdmlkZSA9IG1lcmdlRGF0YU9yRm47XG5cbi8qKlxuICogRGVmYXVsdCBzdHJhdGVneS5cbiAqL1xudmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkXG4gICAgPyBwYXJlbnRWYWxcbiAgICA6IGNoaWxkVmFsXG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGNvbXBvbmVudCBuYW1lc1xuICovXG5mdW5jdGlvbiBjaGVja0NvbXBvbmVudHMgKG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMuY29tcG9uZW50cykge1xuICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ29tcG9uZW50TmFtZSAobmFtZSkge1xuICBpZiAoIW5ldyBSZWdFeHAoKFwiXlthLXpBLVpdW1xcXFwtXFxcXC4wLTlfXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCJdKiRcIikpLnRlc3QobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgY29tcG9uZW50IG5hbWU6IFwiJyArIG5hbWUgKyAnXCIuIENvbXBvbmVudCBuYW1lcyAnICtcbiAgICAgICdzaG91bGQgY29uZm9ybSB0byB2YWxpZCBjdXN0b20gZWxlbWVudCBuYW1lIGluIGh0bWw1IHNwZWNpZmljYXRpb24uJ1xuICAgICk7XG4gIH1cbiAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCAnICtcbiAgICAgICdpZDogJyArIG5hbWVcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlXG4gKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyAob3B0aW9ucywgdm0pIHtcbiAgdmFyIHByb3BzID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKCFwcm9wcykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBpLCB2YWwsIG5hbWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFsID0gcHJvcHNbaV07XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbmFtZSA9IGNhbWVsaXplKHZhbCk7XG4gICAgICAgIHJlc1tuYW1lXSA9IHsgdHlwZTogbnVsbCB9O1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oJ3Byb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIHZhbCA9IHByb3BzW2tleV07XG4gICAgICBuYW1lID0gY2FtZWxpemUoa2V5KTtcbiAgICAgIHJlc1tuYW1lXSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IHZhbFxuICAgICAgICA6IHsgdHlwZTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcInByb3BzXFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHByb3BzKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICBvcHRpb25zLnByb3BzID0gcmVzO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhbGwgaW5qZWN0aW9ucyBpbnRvIE9iamVjdC1iYXNlZCBmb3JtYXRcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0IChvcHRpb25zLCB2bSkge1xuICB2YXIgaW5qZWN0ID0gb3B0aW9ucy5pbmplY3Q7XG4gIGlmICghaW5qZWN0KSB7IHJldHVybiB9XG4gIHZhciBub3JtYWxpemVkID0gb3B0aW9ucy5pbmplY3QgPSB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5qZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBub3JtYWxpemVkW2luamVjdFtpXV0gPSB7IGZyb206IGluamVjdFtpXSB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5qZWN0KSB7XG4gICAgICB2YXIgdmFsID0gaW5qZWN0W2tleV07XG4gICAgICBub3JtYWxpemVkW2tleV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyBleHRlbmQoeyBmcm9tOiBrZXkgfSwgdmFsKVxuICAgICAgICA6IHsgZnJvbTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcImluamVjdFxcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShpbmplY3QpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTm9ybWFsaXplIHJhdyBmdW5jdGlvbiBkaXJlY3RpdmVzIGludG8gb2JqZWN0IGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyAob3B0aW9ucykge1xuICB2YXIgZGlycyA9IG9wdGlvbnMuZGlyZWN0aXZlcztcbiAgaWYgKGRpcnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGlycykge1xuICAgICAgdmFyIGRlZiQkMSA9IGRpcnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgZGVmJCQxID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRpcnNba2V5XSA9IHsgYmluZDogZGVmJCQxLCB1cGRhdGU6IGRlZiQkMSB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRPYmplY3RUeXBlIChuYW1lLCB2YWx1ZSwgdm0pIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiOiBleHBlY3RlZCBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9wdGlvbiBvYmplY3RzIGludG8gYSBuZXcgb25lLlxuICogQ29yZSB1dGlsaXR5IHVzZWQgaW4gYm90aCBpbnN0YW50aWF0aW9uIGFuZCBpbmhlcml0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VPcHRpb25zIChcbiAgcGFyZW50LFxuICBjaGlsZCxcbiAgdm1cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrQ29tcG9uZW50cyhjaGlsZCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGNoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2hpbGQgPSBjaGlsZC5vcHRpb25zO1xuICB9XG5cbiAgbm9ybWFsaXplUHJvcHMoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplSW5qZWN0KGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpO1xuXG4gIC8vIEFwcGx5IGV4dGVuZHMgYW5kIG1peGlucyBvbiB0aGUgY2hpbGQgb3B0aW9ucyxcbiAgLy8gYnV0IG9ubHkgaWYgaXQgaXMgYSByYXcgb3B0aW9ucyBvYmplY3QgdGhhdCBpc24ndFxuICAvLyB0aGUgcmVzdWx0IG9mIGFub3RoZXIgbWVyZ2VPcHRpb25zIGNhbGwuXG4gIC8vIE9ubHkgbWVyZ2VkIG9wdGlvbnMgaGFzIHRoZSBfYmFzZSBwcm9wZXJ0eS5cbiAgaWYgKCFjaGlsZC5fYmFzZSkge1xuICAgIGlmIChjaGlsZC5leHRlbmRzKSB7XG4gICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5leHRlbmRzLCB2bSk7XG4gICAgfVxuICAgIGlmIChjaGlsZC5taXhpbnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5taXhpbnNbaV0sIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IHt9O1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBwYXJlbnQpIHtcbiAgICBtZXJnZUZpZWxkKGtleSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gY2hpbGQpIHtcbiAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWVyZ2VGaWVsZCAoa2V5KSB7XG4gICAgdmFyIHN0cmF0ID0gc3RyYXRzW2tleV0gfHwgZGVmYXVsdFN0cmF0O1xuICAgIG9wdGlvbnNba2V5XSA9IHN0cmF0KHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSwga2V5KTtcbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG4vKipcbiAqIFJlc29sdmUgYW4gYXNzZXQuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3NcbiAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0IChcbiAgb3B0aW9ucyxcbiAgdHlwZSxcbiAgaWQsXG4gIHdhcm5NaXNzaW5nXG4pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGFzc2V0cyA9IG9wdGlvbnNbdHlwZV07XG4gIC8vIGNoZWNrIGxvY2FsIHJlZ2lzdHJhdGlvbiB2YXJpYXRpb25zIGZpcnN0XG4gIGlmIChoYXNPd24oYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfVxuICB2YXIgY2FtZWxpemVkSWQgPSBjYW1lbGl6ZShpZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBjYW1lbGl6ZWRJZCkpIHsgcmV0dXJuIGFzc2V0c1tjYW1lbGl6ZWRJZF0gfVxuICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBQYXNjYWxDYXNlSWQpKSB7IHJldHVybiBhc3NldHNbUGFzY2FsQ2FzZUlkXSB9XG4gIC8vIGZhbGxiYWNrIHRvIHByb3RvdHlwZSBjaGFpblxuICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuTWlzc2luZyAmJiAhcmVzKSB7XG4gICAgd2FybihcbiAgICAgICdGYWlsZWQgdG8gcmVzb2x2ZSAnICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnOiAnICsgaWQsXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wIChcbiAga2V5LFxuICBwcm9wT3B0aW9ucyxcbiAgcHJvcHNEYXRhLFxuICB2bVxuKSB7XG4gIHZhciBwcm9wID0gcHJvcE9wdGlvbnNba2V5XTtcbiAgdmFyIGFic2VudCA9ICFoYXNPd24ocHJvcHNEYXRhLCBrZXkpO1xuICB2YXIgdmFsdWUgPSBwcm9wc0RhdGFba2V5XTtcbiAgLy8gYm9vbGVhbiBjYXN0aW5nXG4gIHZhciBib29sZWFuSW5kZXggPSBnZXRUeXBlSW5kZXgoQm9vbGVhbiwgcHJvcC50eXBlKTtcbiAgaWYgKGJvb2xlYW5JbmRleCA+IC0xKSB7XG4gICAgaWYgKGFic2VudCAmJiAhaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSB7XG4gICAgICAvLyBvbmx5IGNhc3QgZW1wdHkgc3RyaW5nIC8gc2FtZSBuYW1lIHRvIGJvb2xlYW4gaWZcbiAgICAgIC8vIGJvb2xlYW4gaGFzIGhpZ2hlciBwcmlvcml0eVxuICAgICAgdmFyIHN0cmluZ0luZGV4ID0gZ2V0VHlwZUluZGV4KFN0cmluZywgcHJvcC50eXBlKTtcbiAgICAgIGlmIChzdHJpbmdJbmRleCA8IDAgfHwgYm9vbGVhbkluZGV4IDwgc3RyaW5nSW5kZXgpIHtcbiAgICAgICAgdmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBjaGVjayBkZWZhdWx0IHZhbHVlXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsdWUgPSBnZXRQcm9wRGVmYXVsdFZhbHVlKHZtLCBwcm9wLCBrZXkpO1xuICAgIC8vIHNpbmNlIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGEgZnJlc2ggY29weSxcbiAgICAvLyBtYWtlIHN1cmUgdG8gb2JzZXJ2ZSBpdC5cbiAgICB2YXIgcHJldlNob3VsZE9ic2VydmUgPSBzaG91bGRPYnNlcnZlO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICBvYnNlcnZlKHZhbHVlKTtcbiAgICB0b2dnbGVPYnNlcnZpbmcocHJldlNob3VsZE9ic2VydmUpO1xuICB9XG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgLy8gc2tpcCB2YWxpZGF0aW9uIGZvciB3ZWV4IHJlY3ljbGUtbGlzdCBjaGlsZCBjb21wb25lbnQgcHJvcHNcbiAgICAhKGZhbHNlKVxuICApIHtcbiAgICBhc3NlcnRQcm9wKHByb3AsIGtleSwgdmFsdWUsIHZtLCBhYnNlbnQpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUgKHZtLCBwcm9wLCBrZXkpIHtcbiAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHZhciBkZWYgPSBwcm9wLmRlZmF1bHQ7XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tZmFjdG9yeSBkZWZhdWx0cyBmb3IgT2JqZWN0ICYgQXJyYXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF2YWxpZCkge1xuICAgIHdhcm4oXG4gICAgICBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZSAobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgdmFyIG1lc3NhZ2UgPSBcIkludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIiArXG4gICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSk7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xuICB2YXIgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgdmFyIGV4cGVjdGVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgcmVjZWl2ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSk7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSBleHBlY3RlZCB2YWx1ZVxuICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiZcbiAgICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmXG4gICAgICAhaXNCb29sZWFuKGV4cGVjdGVkVHlwZSwgcmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCIgd2l0aCB2YWx1ZSBcIiArIGV4cGVjdGVkVmFsdWU7XG4gIH1cbiAgbWVzc2FnZSArPSBcIiwgZ290IFwiICsgcmVjZWl2ZWRUeXBlICsgXCIgXCI7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxuICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwid2l0aCB2YWx1ZSBcIiArIHJlY2VpdmVkVmFsdWUgKyBcIi5cIjtcbiAgfVxuICByZXR1cm4gbWVzc2FnZVxufVxuXG5mdW5jdGlvbiBzdHlsZVZhbHVlICh2YWx1ZSwgdHlwZSkge1xuICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICByZXR1cm4gKFwiXFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIilcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnTnVtYmVyJykge1xuICAgIHJldHVybiAoXCJcIiArIChOdW1iZXIodmFsdWUpKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiXCIgKyB2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0V4cGxpY2FibGUgKHZhbHVlKSB7XG4gIHZhciBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcbiAgcmV0dXJuIGV4cGxpY2l0VHlwZXMuc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbTsgfSlcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuICgpIHtcbiAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICByZXR1cm4gYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJzsgfSlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIC8vIERlYWN0aXZhdGUgZGVwcyB0cmFja2luZyB3aGlsZSBwcm9jZXNzaW5nIGVycm9yIGhhbmRsZXIgdG8gYXZvaWQgcG9zc2libGUgaW5maW5pdGUgcmVuZGVyaW5nLlxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWV4L2lzc3Vlcy8xNTA1XG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICBpZiAodm0pIHtcbiAgICAgIHZhciBjdXIgPSB2bTtcbiAgICAgIHdoaWxlICgoY3VyID0gY3VyLiRwYXJlbnQpKSB7XG4gICAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgY2FwdHVyZSA9IGhvb2tzW2ldLmNhbGwoY3VyLCBlcnIsIHZtLCBpbmZvKSA9PT0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmIChjYXB0dXJlKSB7IHJldHVybiB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGdsb2JhbEhhbmRsZUVycm9yKGUsIGN1ciwgJ2Vycm9yQ2FwdHVyZWQgaG9vaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBnbG9iYWxIYW5kbGVFcnJvcihlcnIsIHZtLCBpbmZvKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyAoXG4gIGhhbmRsZXIsXG4gIGNvbnRleHQsXG4gIGFyZ3MsXG4gIHZtLFxuICBpbmZvXG4pIHtcbiAgdmFyIHJlcztcbiAgdHJ5IHtcbiAgICByZXMgPSBhcmdzID8gaGFuZGxlci5hcHBseShjb250ZXh0LCBhcmdzKSA6IGhhbmRsZXIuY2FsbChjb250ZXh0KTtcbiAgICBpZiAocmVzICYmICFyZXMuX2lzVnVlICYmIGlzUHJvbWlzZShyZXMpICYmICFyZXMuX2hhbmRsZWQpIHtcbiAgICAgIHJlcy5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8gKyBcIiAoUHJvbWlzZS9hc3luYylcIik7IH0pO1xuICAgICAgLy8gaXNzdWUgIzk1MTFcbiAgICAgIC8vIGF2b2lkIGNhdGNoIHRyaWdnZXJpbmcgbXVsdGlwbGUgdGltZXMgd2hlbiBuZXN0ZWQgY2FsbHNcbiAgICAgIHJlcy5faGFuZGxlZCA9IHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8pO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2xvYmFsSGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlcnIsIHZtLCBpbmZvKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGlmIHRoZSB1c2VyIGludGVudGlvbmFsbHkgdGhyb3dzIHRoZSBvcmlnaW5hbCBlcnJvciBpbiB0aGUgaGFuZGxlcixcbiAgICAgIC8vIGRvIG5vdCBsb2cgaXQgdHdpY2VcbiAgICAgIGlmIChlICE9PSBlcnIpIHtcbiAgICAgICAgbG9nRXJyb3IoZSwgbnVsbCwgJ2NvbmZpZy5lcnJvckhhbmRsZXInKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGxvZ0Vycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybigoXCJFcnJvciBpbiBcIiArIGluZm8gKyBcIjogXFxcIlwiICsgKGVyci50b1N0cmluZygpKSArIFwiXFxcIlwiKSwgdm0pO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICgoaW5Ccm93c2VyIHx8IGluV2VleCkgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGVyclxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgaXNVc2luZ01pY3JvVGFzayA9IGZhbHNlO1xuXG52YXIgY2FsbGJhY2tzID0gW107XG52YXIgcGVuZGluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBmbHVzaENhbGxiYWNrcyAoKSB7XG4gIHBlbmRpbmcgPSBmYWxzZTtcbiAgdmFyIGNvcGllcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcbiAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29waWVzW2ldKCk7XG4gIH1cbn1cblxuLy8gSGVyZSB3ZSBoYXZlIGFzeW5jIGRlZmVycmluZyB3cmFwcGVycyB1c2luZyBtaWNyb3Rhc2tzLlxuLy8gSW4gMi41IHdlIHVzZWQgKG1hY3JvKSB0YXNrcyAoaW4gY29tYmluYXRpb24gd2l0aCBtaWNyb3Rhc2tzKS5cbi8vIEhvd2V2ZXIsIGl0IGhhcyBzdWJ0bGUgcHJvYmxlbXMgd2hlbiBzdGF0ZSBpcyBjaGFuZ2VkIHJpZ2h0IGJlZm9yZSByZXBhaW50XG4vLyAoZS5nLiAjNjgxMywgb3V0LWluIHRyYW5zaXRpb25zKS5cbi8vIEFsc28sIHVzaW5nIChtYWNybykgdGFza3MgaW4gZXZlbnQgaGFuZGxlciB3b3VsZCBjYXVzZSBzb21lIHdlaXJkIGJlaGF2aW9yc1xuLy8gdGhhdCBjYW5ub3QgYmUgY2lyY3VtdmVudGVkIChlLmcuICM3MTA5LCAjNzE1MywgIzc1NDYsICM3ODM0LCAjODEwOSkuXG4vLyBTbyB3ZSBub3cgdXNlIG1pY3JvdGFza3MgZXZlcnl3aGVyZSwgYWdhaW4uXG4vLyBBIG1ham9yIGRyYXdiYWNrIG9mIHRoaXMgdHJhZGVvZmYgaXMgdGhhdCB0aGVyZSBhcmUgc29tZSBzY2VuYXJpb3Ncbi8vIHdoZXJlIG1pY3JvdGFza3MgaGF2ZSB0b28gaGlnaCBhIHByaW9yaXR5IGFuZCBmaXJlIGluIGJldHdlZW4gc3VwcG9zZWRseVxuLy8gc2VxdWVudGlhbCBldmVudHMgKGUuZy4gIzQ1MjEsICM2NjkwLCB3aGljaCBoYXZlIHdvcmthcm91bmRzKVxuLy8gb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lIGV2ZW50ICgjNjU2NikuXG52YXIgdGltZXJGdW5jO1xuXG4vLyBUaGUgbmV4dFRpY2sgYmVoYXZpb3IgbGV2ZXJhZ2VzIHRoZSBtaWNyb3Rhc2sgcXVldWUsIHdoaWNoIGNhbiBiZSBhY2Nlc3NlZFxuLy8gdmlhIGVpdGhlciBuYXRpdmUgUHJvbWlzZS50aGVuIG9yIE11dGF0aW9uT2JzZXJ2ZXIuXG4vLyBNdXRhdGlvbk9ic2VydmVyIGhhcyB3aWRlciBzdXBwb3J0LCBob3dldmVyIGl0IGlzIHNlcmlvdXNseSBidWdnZWQgaW5cbi8vIFVJV2ViVmlldyBpbiBpT1MgPj0gOS4zLjMgd2hlbiB0cmlnZ2VyZWQgaW4gdG91Y2ggZXZlbnQgaGFuZGxlcnMuIEl0XG4vLyBjb21wbGV0ZWx5IHN0b3BzIHdvcmtpbmcgYWZ0ZXIgdHJpZ2dlcmluZyBhIGZldyB0aW1lcy4uLiBzbywgaWYgbmF0aXZlXG4vLyBQcm9taXNlIGlzIGF2YWlsYWJsZSwgd2Ugd2lsbCB1c2UgaXQ6XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCwgJGZsb3ctZGlzYWJsZS1saW5lICovXG5pZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwLnRoZW4oZmx1c2hDYWxsYmFja3MpO1xuICAgIC8vIEluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuICAgIC8vIGl0IGNhbiBnZXQgc3R1Y2sgaW4gYSB3ZWlyZCBzdGF0ZSB3aGVyZSBjYWxsYmFja3MgYXJlIHB1c2hlZCBpbnRvIHRoZVxuICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG4gICAgLy8gXCJmb3JjZVwiIHRoZSBtaWNyb3Rhc2sgcXVldWUgdG8gYmUgZmx1c2hlZCBieSBhZGRpbmcgYW4gZW1wdHkgdGltZXIuXG4gICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgfTtcbiAgaXNVc2luZ01pY3JvVGFzayA9IHRydWU7XG59IGVsc2UgaWYgKCFpc0lFICYmIHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gIGlzTmF0aXZlKE11dGF0aW9uT2JzZXJ2ZXIpIHx8XG4gIC8vIFBoYW50b21KUyBhbmQgaU9TIDcueFxuICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG4pKSB7XG4gIC8vIFVzZSBNdXRhdGlvbk9ic2VydmVyIHdoZXJlIG5hdGl2ZSBQcm9taXNlIGlzIG5vdCBhdmFpbGFibGUsXG4gIC8vIGUuZy4gUGhhbnRvbUpTLCBpT1M3LCBBbmRyb2lkIDQuNFxuICAvLyAoIzY0NjYgTXV0YXRpb25PYnNlcnZlciBpcyB1bnJlbGlhYmxlIGluIElFMTEpXG4gIHZhciBjb3VudGVyID0gMTtcbiAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2hDYWxsYmFja3MpO1xuICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoY291bnRlcikpO1xuICBvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLCB7XG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICB9KTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICB0ZXh0Tm9kZS5kYXRhID0gU3RyaW5nKGNvdW50ZXIpO1xuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoc2V0SW1tZWRpYXRlKSkge1xuICAvLyBGYWxsYmFjayB0byBzZXRJbW1lZGlhdGUuXG4gIC8vIFRlY2hpbmljYWxseSBpdCBsZXZlcmFnZXMgdGhlIChtYWNybykgdGFzayBxdWV1ZSxcbiAgLy8gYnV0IGl0IGlzIHN0aWxsIGEgYmV0dGVyIGNob2ljZSB0aGFuIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRJbW1lZGlhdGUoZmx1c2hDYWxsYmFja3MpO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gRmFsbGJhY2sgdG8gc2V0VGltZW91dC5cbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldFRpbWVvdXQoZmx1c2hDYWxsYmFja3MsIDApO1xuICB9O1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayAoY2IsIGN0eCkge1xuICB2YXIgX3Jlc29sdmU7XG4gIGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNiLmNhbGwoY3R4KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZSwgY3R4LCAnbmV4dFRpY2snKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKF9yZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZShjdHgpO1xuICAgIH1cbiAgfSk7XG4gIGlmICghcGVuZGluZykge1xuICAgIHBlbmRpbmcgPSB0cnVlO1xuICAgIHRpbWVyRnVuYygpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBpZiAoIWNiICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pXG4gIH1cbn1cblxuLyogICovXG5cbi8qIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aCBQcm94eSAqL1xuXG52YXIgaW5pdFByb3h5O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgYWxsb3dlZEdsb2JhbHMgPSBtYWtlTWFwKFxuICAgICdJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLCcgK1xuICAgICdwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCwnICtcbiAgICAnTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLCcgK1xuICAgICdyZXF1aXJlJyAvLyBmb3IgV2VicGFjay9Ccm93c2VyaWZ5XG4gICk7XG5cbiAgdmFyIHdhcm5Ob25QcmVzZW50ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgb3IgbWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UgYnV0IFwiICtcbiAgICAgICdyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgcmVhY3RpdmUsICcgK1xuICAgICAgJ2VpdGhlciBpbiB0aGUgZGF0YSBvcHRpb24sIG9yIGZvciBjbGFzcy1iYXNlZCBjb21wb25lbnRzLCBieSAnICtcbiAgICAgICdpbml0aWFsaXppbmcgdGhlIHByb3BlcnR5LiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL3JlYWN0aXZpdHkuaHRtbCNEZWNsYXJpbmctUmVhY3RpdmUtUHJvcGVydGllcy4nLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgd2FyblJlc2VydmVkUHJlZml4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIG11c3QgYmUgYWNjZXNzZWQgd2l0aCBcXFwiJGRhdGEuXCIgKyBrZXkgKyBcIlxcXCIgYmVjYXVzZSBcIiArXG4gICAgICAncHJvcGVydGllcyBzdGFydGluZyB3aXRoIFwiJFwiIG9yIFwiX1wiIGFyZSBub3QgcHJveGllZCBpbiB0aGUgVnVlIGluc3RhbmNlIHRvICcgK1xuICAgICAgJ3ByZXZlbnQgY29uZmxpY3RzIHdpdGggVnVlIGludGVybmFscycgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvYXBpLyNkYXRhJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIGhhc1Byb3h5ID1cbiAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb3h5KTtcblxuICBpZiAoaGFzUHJveHkpIHtcbiAgICB2YXIgaXNCdWlsdEluTW9kaWZpZXIgPSBtYWtlTWFwKCdzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhLGV4YWN0Jyk7XG4gICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNCdWlsdEluTW9kaWZpZXIoa2V5KSkge1xuICAgICAgICAgIHdhcm4oKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIgKyBrZXkpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYXNIYW5kbGVyID0ge1xuICAgIGhhczogZnVuY3Rpb24gaGFzICh0YXJnZXQsIGtleSkge1xuICAgICAgdmFyIGhhcyA9IGtleSBpbiB0YXJnZXQ7XG4gICAgICB2YXIgaXNBbGxvd2VkID0gYWxsb3dlZEdsb2JhbHMoa2V5KSB8fFxuICAgICAgICAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5LmNoYXJBdCgwKSA9PT0gJ18nICYmICEoa2V5IGluIHRhcmdldC4kZGF0YSkpO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXMgfHwgIWlzQWxsb3dlZFxuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0SGFuZGxlciA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldFtrZXldXG4gICAgfVxuICB9O1xuXG4gIGluaXRQcm94eSA9IGZ1bmN0aW9uIGluaXRQcm94eSAodm0pIHtcbiAgICBpZiAoaGFzUHJveHkpIHtcbiAgICAgIC8vIGRldGVybWluZSB3aGljaCBwcm94eSBoYW5kbGVyIHRvIHVzZVxuICAgICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgICAgIHZhciBoYW5kbGVycyA9IG9wdGlvbnMucmVuZGVyICYmIG9wdGlvbnMucmVuZGVyLl93aXRoU3RyaXBwZWRcbiAgICAgICAgPyBnZXRIYW5kbGVyXG4gICAgICAgIDogaGFzSGFuZGxlcjtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IG5ldyBQcm94eSh2bSwgaGFuZGxlcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgc2Vlbk9iamVjdHMgPSBuZXcgX1NldCgpO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG4gKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdFxuICogaXMgY29sbGVjdGVkIGFzIGEgXCJkZWVwXCIgZGVwZW5kZW5jeS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2UgKHZhbCkge1xuICBfdHJhdmVyc2UodmFsLCBzZWVuT2JqZWN0cyk7XG4gIHNlZW5PYmplY3RzLmNsZWFyKCk7XG59XG5cbmZ1bmN0aW9uIF90cmF2ZXJzZSAodmFsLCBzZWVuKSB7XG4gIHZhciBpLCBrZXlzO1xuICB2YXIgaXNBID0gQXJyYXkuaXNBcnJheSh2YWwpO1xuICBpZiAoKCFpc0EgJiYgIWlzT2JqZWN0KHZhbCkpIHx8IE9iamVjdC5pc0Zyb3plbih2YWwpIHx8IHZhbCBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbC5fX29iX18pIHtcbiAgICB2YXIgZGVwSWQgPSB2YWwuX19vYl9fLmRlcC5pZDtcbiAgICBpZiAoc2Vlbi5oYXMoZGVwSWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc2Vlbi5hZGQoZGVwSWQpO1xuICB9XG4gIGlmIChpc0EpIHtcbiAgICBpID0gdmFsLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pOyB9XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtrZXlzW2ldXSwgc2Vlbik7IH1cbiAgfVxufVxuXG52YXIgbWFyaztcbnZhciBtZWFzdXJlO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcGVyZiA9IGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcGVyZiAmJlxuICAgIHBlcmYubWFyayAmJlxuICAgIHBlcmYubWVhc3VyZSAmJlxuICAgIHBlcmYuY2xlYXJNYXJrcyAmJlxuICAgIHBlcmYuY2xlYXJNZWFzdXJlc1xuICApIHtcbiAgICBtYXJrID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gcGVyZi5tYXJrKHRhZyk7IH07XG4gICAgbWVhc3VyZSA9IGZ1bmN0aW9uIChuYW1lLCBzdGFydFRhZywgZW5kVGFnKSB7XG4gICAgICBwZXJmLm1lYXN1cmUobmFtZSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XG4gICAgICAvLyBwZXJmLmNsZWFyTWVhc3VyZXMobmFtZSlcbiAgICB9O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zLCB2bSkge1xuICBmdW5jdGlvbiBpbnZva2VyICgpIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgZm5zID0gaW52b2tlci5mbnM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZm5zKSkge1xuICAgICAgdmFyIGNsb25lZCA9IGZucy5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2xvbmVkW2ldLCBudWxsLCBhcmd1bWVudHMkMSwgdm0sIFwidi1vbiBoYW5kbGVyXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZucywgbnVsbCwgYXJndW1lbnRzLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIilcbiAgICB9XG4gIH1cbiAgaW52b2tlci5mbnMgPSBmbnM7XG4gIHJldHVybiBpbnZva2VyXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG4gIG9uLFxuICBvbGRPbixcbiAgYWRkLFxuICByZW1vdmUkJDEsXG4gIGNyZWF0ZU9uY2VIYW5kbGVyLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYkJDEsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmJCQxID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyLCB2bSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNUcnVlKGV2ZW50Lm9uY2UpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlT25jZUhhbmRsZXIoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFByb3ZpZGUgKHZtKSB7XG4gIHZhciBwcm92aWRlID0gdm0uJG9wdGlvbnMucHJvdmlkZTtcbiAgaWYgKHByb3ZpZGUpIHtcbiAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm92aWRlLmNhbGwodm0pXG4gICAgICA6IHByb3ZpZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEluamVjdGlvbnMgKHZtKSB7XG4gIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pO1xuICBpZiAocmVzdWx0KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpXG4gICAgICA6IE9iamVjdC5rZXlzKGluamVjdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgLy8gIzY1NzQgaW4gY2FzZSB0aGUgaW5qZWN0IG9iamVjdCBpcyBvYnNlcnZlZC4uLlxuICAgICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgICAgdmFyIHByb3ZpZGVLZXkgPSBpbmplY3Rba2V5XS5mcm9tO1xuICAgICAgdmFyIHNvdXJjZSA9IHZtO1xuICAgICAgd2hpbGUgKHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLl9wcm92aWRlZCAmJiBoYXNPd24oc291cmNlLl9wcm92aWRlZCwgcHJvdmlkZUtleSkpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZS5fcHJvdmlkZWRbcHJvdmlkZUtleV07XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBzb3VyY2UuJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIGlmICgnZGVmYXVsdCcgaW4gaW5qZWN0W2tleV0pIHtcbiAgICAgICAgICB2YXIgcHJvdmlkZURlZmF1bHQgPSBpbmplY3Rba2V5XS5kZWZhdWx0O1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdHlwZW9mIHByb3ZpZGVEZWZhdWx0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHByb3ZpZGVEZWZhdWx0LmNhbGwodm0pXG4gICAgICAgICAgICA6IHByb3ZpZGVEZWZhdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKChcIkluamVjdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbm90IGZvdW5kXCIpLCB2bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHJldHVybiB7fVxuICB9XG4gIHZhciBzbG90cyA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIHZhciBkYXRhID0gY2hpbGQuZGF0YTtcbiAgICAvLyByZW1vdmUgc2xvdCBhdHRyaWJ1dGUgaWYgdGhlIG5vZGUgaXMgcmVzb2x2ZWQgYXMgYSBWdWUgc2xvdCBub2RlXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnNsb3QpIHtcbiAgICAgIGRlbGV0ZSBkYXRhLmF0dHJzLnNsb3Q7XG4gICAgfVxuICAgIC8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZVxuICAgIC8vIHNhbWUgY29udGV4dC5cbiAgICBpZiAoKGNoaWxkLmNvbnRleHQgPT09IGNvbnRleHQgfHwgY2hpbGQuZm5Db250ZXh0ID09PSBjb250ZXh0KSAmJlxuICAgICAgZGF0YSAmJiBkYXRhLnNsb3QgIT0gbnVsbFxuICAgICkge1xuICAgICAgdmFyIG5hbWUgPSBkYXRhLnNsb3Q7XG4gICAgICB2YXIgc2xvdCA9IChzbG90c1tuYW1lXSB8fCAoc2xvdHNbbmFtZV0gPSBbXSkpO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICBzbG90LnB1c2guYXBwbHkoc2xvdCwgY2hpbGQuY2hpbGRyZW4gfHwgW10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdC5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHNsb3RzLmRlZmF1bHQgfHwgKHNsb3RzLmRlZmF1bHQgPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICAvLyBpZ25vcmUgc2xvdHMgdGhhdCBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VcbiAgZm9yICh2YXIgbmFtZSQxIGluIHNsb3RzKSB7XG4gICAgaWYgKHNsb3RzW25hbWUkMV0uZXZlcnkoaXNXaGl0ZXNwYWNlKSkge1xuICAgICAgZGVsZXRlIHNsb3RzW25hbWUkMV07XG4gICAgfVxuICB9XG4gIHJldHVybiBzbG90c1xufVxuXG5mdW5jdGlvbiBpc1doaXRlc3BhY2UgKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLmlzQ29tbWVudCAmJiAhbm9kZS5hc3luY0ZhY3RvcnkpIHx8IG5vZGUudGV4dCA9PT0gJyAnXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90cyAoXG4gIHNsb3RzLFxuICBub3JtYWxTbG90cyxcbiAgcHJldlNsb3RzXG4pIHtcbiAgdmFyIHJlcztcbiAgdmFyIGhhc05vcm1hbFNsb3RzID0gT2JqZWN0LmtleXMobm9ybWFsU2xvdHMpLmxlbmd0aCA+IDA7XG4gIHZhciBpc1N0YWJsZSA9IHNsb3RzID8gISFzbG90cy4kc3RhYmxlIDogIWhhc05vcm1hbFNsb3RzO1xuICB2YXIga2V5ID0gc2xvdHMgJiYgc2xvdHMuJGtleTtcbiAgaWYgKCFzbG90cykge1xuICAgIHJlcyA9IHt9O1xuICB9IGVsc2UgaWYgKHNsb3RzLl9ub3JtYWxpemVkKSB7XG4gICAgLy8gZmFzdCBwYXRoIDE6IGNoaWxkIGNvbXBvbmVudCByZS1yZW5kZXIgb25seSwgcGFyZW50IGRpZCBub3QgY2hhbmdlXG4gICAgcmV0dXJuIHNsb3RzLl9ub3JtYWxpemVkXG4gIH0gZWxzZSBpZiAoXG4gICAgaXNTdGFibGUgJiZcbiAgICBwcmV2U2xvdHMgJiZcbiAgICBwcmV2U2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmXG4gICAga2V5ID09PSBwcmV2U2xvdHMuJGtleSAmJlxuICAgICFoYXNOb3JtYWxTbG90cyAmJlxuICAgICFwcmV2U2xvdHMuJGhhc05vcm1hbFxuICApIHtcbiAgICAvLyBmYXN0IHBhdGggMjogc3RhYmxlIHNjb3BlZCBzbG90cyB3LyBubyBub3JtYWwgc2xvdHMgdG8gcHJveHksXG4gICAgLy8gb25seSBuZWVkIHRvIG5vcm1hbGl6ZSBvbmNlXG4gICAgcmV0dXJuIHByZXZTbG90c1xuICB9IGVsc2Uge1xuICAgIHJlcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSQxIGluIHNsb3RzKSB7XG4gICAgICBpZiAoc2xvdHNba2V5JDFdICYmIGtleSQxWzBdICE9PSAnJCcpIHtcbiAgICAgICAgcmVzW2tleSQxXSA9IG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSQxLCBzbG90c1trZXkkMV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBleHBvc2Ugbm9ybWFsIHNsb3RzIG9uIHNjb3BlZFNsb3RzXG4gIGZvciAodmFyIGtleSQyIGluIG5vcm1hbFNsb3RzKSB7XG4gICAgaWYgKCEoa2V5JDIgaW4gcmVzKSkge1xuICAgICAgcmVzW2tleSQyXSA9IHByb3h5Tm9ybWFsU2xvdChub3JtYWxTbG90cywga2V5JDIpO1xuICAgIH1cbiAgfVxuICAvLyBhdm9yaWF6IHNlZW1zIHRvIG1vY2sgYSBub24tZXh0ZW5zaWJsZSAkc2NvcGVkU2xvdHMgb2JqZWN0XG4gIC8vIGFuZCB3aGVuIHRoYXQgaXMgcGFzc2VkIGRvd24gdGhpcyB3b3VsZCBjYXVzZSBhbiBlcnJvclxuICBpZiAoc2xvdHMgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShzbG90cykpIHtcbiAgICAoc2xvdHMpLl9ub3JtYWxpemVkID0gcmVzO1xuICB9XG4gIGRlZihyZXMsICckc3RhYmxlJywgaXNTdGFibGUpO1xuICBkZWYocmVzLCAnJGtleScsIGtleSk7XG4gIGRlZihyZXMsICckaGFzTm9ybWFsJywgaGFzTm9ybWFsU2xvdHMpO1xuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSwgZm4pIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlcyA9IGFyZ3VtZW50cy5sZW5ndGggPyBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpIDogZm4oe30pO1xuICAgIHJlcyA9IHJlcyAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXMpXG4gICAgICA/IFtyZXNdIC8vIHNpbmdsZSB2bm9kZVxuICAgICAgOiBub3JtYWxpemVDaGlsZHJlbihyZXMpO1xuICAgIHJldHVybiByZXMgJiYgKFxuICAgICAgcmVzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgKHJlcy5sZW5ndGggPT09IDEgJiYgcmVzWzBdLmlzQ29tbWVudCkgLy8gIzk2NThcbiAgICApID8gdW5kZWZpbmVkXG4gICAgICA6IHJlc1xuICB9O1xuICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbiAgLy8gY29tcGlsZWQgYXMgYSBzY29wZWQgc2xvdCwgcmVuZGVyIGZuIHVzZXJzIHdvdWxkIGV4cGVjdCBpdCB0byBiZSBwcmVzZW50XG4gIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LlxuICBpZiAoZm4ucHJveHkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwge1xuICAgICAgZ2V0OiBub3JtYWxpemVkLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkXG59XG5cbmZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNEZWYocmV0KSkge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2ssXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNPYmplY3QoYmluZE9iamVjdCkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnc2xvdCB2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCcsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2s7XG4gIH0gZWxzZSB7XG4gICAgbm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXSB8fCBmYWxsYmFjaztcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gIGRhdGEsXG4gIHRhZyxcbiAgdmFsdWUsXG4gIGFzUHJvcCxcbiAgaXNTeW5jXG4pIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIGhhc2g7XG4gICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ID09PSAnY2xhc3MnIHx8XG4gICAgICAgICAga2V5ID09PSAnc3R5bGUnIHx8XG4gICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpXG4gICAgICAgICkge1xuICAgICAgICAgIGhhc2ggPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnR5cGU7XG4gICAgICAgICAgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpXG4gICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSlcbiAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgaWYgKCEoY2FtZWxpemVkS2V5IGluIGhhc2gpICYmICEoaHlwaGVuYXRlZEtleSBpbiBoYXNoKSkge1xuICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgICAgICAgICAgb25bKFwidXBkYXRlOlwiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhbHVlW2tleV0gPSAkZXZlbnQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSBsb29wKCBrZXkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gIGluZGV4LFxuICBpc0luRm9yXG4pIHtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX3N0YXRpY1RyZWVzIHx8ICh0aGlzLl9zdGF0aWNUcmVlcyA9IFtdKTtcbiAgdmFyIHRyZWUgPSBjYWNoZWRbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUuXG4gIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG4gICAgcmV0dXJuIHRyZWVcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoXG4gICAgdGhpcy5fcmVuZGVyUHJveHksXG4gICAgbnVsbCxcbiAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4gICk7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19zdGF0aWNfX1wiICsgaW5kZXgpLCBmYWxzZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS5cbiAqIEVmZmVjdGl2ZWx5IGl0IG1lYW5zIG1hcmtpbmcgdGhlIG5vZGUgYXMgc3RhdGljIHdpdGggYSB1bmlxdWUga2V5LlxuICovXG5mdW5jdGlvbiBtYXJrT25jZSAoXG4gIHRyZWUsXG4gIGluZGV4LFxuICBrZXlcbikge1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyAoXG4gIHRyZWUsXG4gIGtleSxcbiAgaXNPbmNlXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWFya1N0YXRpY05vZGUodHJlZSwga2V5LCBpc09uY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlIChub2RlLCBrZXksIGlzT25jZSkge1xuICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgbm9kZS5rZXkgPSBrZXk7XG4gIG5vZGUuaXNPbmNlID0gaXNPbmNlO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyAoZGF0YSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVTY29wZWRTbG90cyAoXG4gIGZucywgLy8gc2VlIGZsb3cvdm5vZGVcbiAgcmVzLFxuICAvLyB0aGUgZm9sbG93aW5nIGFyZSBhZGRlZCBpbiAyLjZcbiAgaGFzRHluYW1pY0tleXMsXG4gIGNvbnRlbnRIYXNoS2V5XG4pIHtcbiAgcmVzID0gcmVzIHx8IHsgJHN0YWJsZTogIWhhc0R5bmFtaWNLZXlzIH07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNsb3QgPSBmbnNbaV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xvdCkpIHtcbiAgICAgIHJlc29sdmVTY29wZWRTbG90cyhzbG90LCByZXMsIGhhc0R5bmFtaWNLZXlzKTtcbiAgICB9IGVsc2UgaWYgKHNsb3QpIHtcbiAgICAgIC8vIG1hcmtlciBmb3IgcmV2ZXJzZSBwcm94eWluZyB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICAgICAgaWYgKHNsb3QucHJveHkpIHtcbiAgICAgICAgc2xvdC5mbi5wcm94eSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXNbc2xvdC5rZXldID0gc2xvdC5mbjtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbnRlbnRIYXNoS2V5KSB7XG4gICAgKHJlcykuJGtleSA9IGNvbnRlbnRIYXNoS2V5O1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmREeW5hbWljS2V5cyAoYmFzZU9iaiwgdmFsdWVzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGtleSA9IHZhbHVlc1tpXTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5KSB7XG4gICAgICBiYXNlT2JqW3ZhbHVlc1tpXV0gPSB2YWx1ZXNbaSArIDFdO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBrZXkgIT09ICcnICYmIGtleSAhPT0gbnVsbCkge1xuICAgICAgLy8gbnVsbCBpcyBhIHNwZWljYWwgdmFsdWUgZm9yIGV4cGxpY2l0bHkgcmVtb3ZpbmcgYSBiaW5kaW5nXG4gICAgICB3YXJuKFxuICAgICAgICAoXCJJbnZhbGlkIHZhbHVlIGZvciBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCAoZXhwZWN0ZWQgc3RyaW5nIG9yIG51bGwpOiBcIiArIGtleSksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlT2JqXG59XG5cbi8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLlxuLy8gZW5zdXJlIG9ubHkgYXBwZW5kIHdoZW4gdmFsdWUgaXMgYWxyZWFkeSBzdHJpbmcsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGNhc3Rcbi8vIHRvIHN0cmluZyBhbmQgY2F1c2UgdGhlIHR5cGUgY2hlY2sgdG8gbWlzcy5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllciAodmFsdWUsIHN5bWJvbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN5bWJvbCArIHZhbHVlIDogdmFsdWVcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG4gIHRhcmdldC5fZCA9IGJpbmREeW5hbWljS2V5cztcbiAgdGFyZ2V0Ll9wID0gcHJlcGVuZE1vZGlmaWVyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgKFxuICBkYXRhLFxuICBwcm9wcyxcbiAgY2hpbGRyZW4sXG4gIHBhcmVudCxcbiAgQ3RvclxuKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIGNvbnRleHRWbTtcbiAgaWYgKGhhc093bihwYXJlbnQsICdfdWlkJykpIHtcbiAgICBjb250ZXh0Vm0gPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgY29udGV4dFZtLl9vcmlnaW5hbCA9IHBhcmVudDtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY29udGV4dCB2bSBwYXNzZWQgaW4gaXMgYSBmdW5jdGlvbmFsIGNvbnRleHQgYXMgd2VsbC5cbiAgICAvLyBpbiB0aGlzIGNhc2Ugd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYXJlIGFibGUgdG8gZ2V0IGEgaG9sZCB0byB0aGVcbiAgICAvLyByZWFsIGNvbnRleHQgaW5zdGFuY2UuXG4gICAgY29udGV4dFZtID0gcGFyZW50O1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHBhcmVudCA9IHBhcmVudC5fb3JpZ2luYWw7XG4gIH1cbiAgdmFyIGlzQ29tcGlsZWQgPSBpc1RydWUob3B0aW9ucy5fY29tcGlsZWQpO1xuICB2YXIgbmVlZE5vcm1hbGl6YXRpb24gPSAhaXNDb21waWxlZDtcblxuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMubGlzdGVuZXJzID0gZGF0YS5vbiB8fCBlbXB0eU9iamVjdDtcbiAgdGhpcy5pbmplY3Rpb25zID0gcmVzb2x2ZUluamVjdChvcHRpb25zLmluamVjdCwgcGFyZW50KTtcbiAgdGhpcy5zbG90cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMkMS4kc2xvdHMpIHtcbiAgICAgIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBkYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB0aGlzJDEuJHNsb3RzID0gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcyQxLiRzbG90c1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NvcGVkU2xvdHMnLCAoe1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuc2xvdHMoKSlcbiAgICB9XG4gIH0pKTtcblxuICAvLyBzdXBwb3J0IGZvciBjb21waWxlZCBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChpc0NvbXBpbGVkKSB7XG4gICAgLy8gZXhwb3NpbmcgJG9wdGlvbnMgZm9yIHJlbmRlclN0YXRpYygpXG4gICAgdGhpcy4kb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gcHJlLXJlc29sdmUgc2xvdHMgZm9yIHJlbmRlclNsb3QoKVxuICAgIHRoaXMuJHNsb3RzID0gdGhpcy5zbG90cygpO1xuICAgIHRoaXMuJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy4kc2xvdHMpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dClcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIChjbG9uZS5kZXZ0b29sc01ldGEgPSBjbG9uZS5kZXZ0b29sc01ldGEgfHwge30pLnJlbmRlckNvbnRleHQgPSByZW5kZXJDb250ZXh0O1xuICB9XG4gIGlmIChkYXRhLnNsb3QpIHtcbiAgICAoY2xvbmUuZGF0YSB8fCAoY2xvbmUuZGF0YSA9IHt9KSkuc2xvdCA9IGRhdGEuc2xvdDtcbiAgfVxuICByZXR1cm4gY2xvbmVcbn1cblxuZnVuY3Rpb24gbWVyZ2VQcm9wcyAodG8sIGZyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICB0b1tjYW1lbGl6ZShrZXkpXSA9IGZyb21ba2V5XTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gaW5saW5lIGhvb2tzIHRvIGJlIGludm9rZWQgb24gY29tcG9uZW50IFZOb2RlcyBkdXJpbmcgcGF0Y2hcbnZhciBjb21wb25lbnRWTm9kZUhvb2tzID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgaWYgKFxuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiZcbiAgICAgICF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQgJiZcbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlXG4gICAgKSB7XG4gICAgICAvLyBrZXB0LWFsaXZlIGNvbXBvbmVudHMsIHRyZWF0IGFzIGEgcGF0Y2hcbiAgICAgIHZhciBtb3VudGVkTm9kZSA9IHZub2RlOyAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgICBjb21wb25lbnRWTm9kZUhvb2tzLnByZXBhdGNoKG1vdW50ZWROb2RlLCBtb3VudGVkTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGFjdGl2ZUluc3RhbmNlXG4gICAgICApO1xuICAgICAgY2hpbGQuJG1vdW50KGh5ZHJhdGluZyA/IHZub2RlLmVsbSA6IHVuZGVmaW5lZCwgaHlkcmF0aW5nKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlcGF0Y2g6IGZ1bmN0aW9uIHByZXBhdGNoIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB1cGRhdGVDaGlsZENvbXBvbmVudChcbiAgICAgIGNoaWxkLFxuICAgICAgb3B0aW9ucy5wcm9wc0RhdGEsIC8vIHVwZGF0ZWQgcHJvcHNcbiAgICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVyc1xuICAgICAgdm5vZGUsIC8vIG5ldyBwYXJlbnQgdm5vZGVcbiAgICAgIG9wdGlvbnMuY2hpbGRyZW4gLy8gbmV3IGNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydCAodm5vZGUpIHtcbiAgICB2YXIgY29udGV4dCA9IHZub2RlLmNvbnRleHQ7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkKSB7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgLy8gdnVlLXJvdXRlciMxMjEyXG4gICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgIC8vIG9uIGluY29ycmVjdCBjaGlsZHJlbi4gSW5zdGVhZCB3ZSBwdXNoIHRoZW0gaW50byBhIHF1ZXVlIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICBDdG9yLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgaWYgKGlzVW5kZWYoQ3RvcikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7XG5cbiAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXG4gIGlmIChpc09iamVjdChDdG9yKSkge1xuICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG4gIH1cblxuICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksXG4gIC8vIHJlamVjdC5cbiAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICB2YXIgYXN5bmNGYWN0b3J5O1xuICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHtcbiAgICBhc3luY0ZhY3RvcnkgPSBDdG9yO1xuICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoYXN5bmNGYWN0b3J5LCBiYXNlQ3Rvcik7XG4gICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxuICAgICAgLy8gYXMgYSBjb21tZW50IG5vZGUgYnV0IHByZXNlcnZlcyBhbGwgdGhlIHJhdyBpbmZvcm1hdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uXG4gICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihcbiAgICAgICAgYXN5bmNGYWN0b3J5LFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgdGFnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgZGF0YSBpbnRvIHByb3BzICYgZXZlbnRzXG4gIGlmIChpc0RlZihkYXRhLm1vZGVsKSkge1xuICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XG4gIH1cblxuICAvLyBleHRyYWN0IHByb3BzXG4gIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHRhZyk7XG5cbiAgLy8gZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuZnVuY3Rpb25hbCkpIHtcbiAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudChDdG9yLCBwcm9wc0RhdGEsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKVxuICB9XG5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMsIHNpbmNlIHRoZXNlIG5lZWRzIHRvIGJlIHRyZWF0ZWQgYXNcbiAgLy8gY2hpbGQgY29tcG9uZW50IGxpc3RlbmVycyBpbnN0ZWFkIG9mIERPTSBsaXN0ZW5lcnNcbiAgdmFyIGxpc3RlbmVycyA9IGRhdGEub247XG4gIC8vIHJlcGxhY2Ugd2l0aCBsaXN0ZW5lcnMgd2l0aCAubmF0aXZlIG1vZGlmaWVyXG4gIC8vIHNvIGl0IGdldHMgcHJvY2Vzc2VkIGR1cmluZyBwYXJlbnQgY29tcG9uZW50IHBhdGNoLlxuICBkYXRhLm9uID0gZGF0YS5uYXRpdmVPbjtcblxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5hYnN0cmFjdCkpIHtcbiAgICAvLyBhYnN0cmFjdCBjb21wb25lbnRzIGRvIG5vdCBrZWVwIGFueXRoaW5nXG4gICAgLy8gb3RoZXIgdGhhbiBwcm9wcyAmIGxpc3RlbmVycyAmIHNsb3RcblxuICAgIC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICB2YXIgc2xvdCA9IGRhdGEuc2xvdDtcbiAgICBkYXRhID0ge307XG4gICAgaWYgKHNsb3QpIHtcbiAgICAgIGRhdGEuc2xvdCA9IHNsb3Q7XG4gICAgfVxuICB9XG5cbiAgLy8gaW5zdGFsbCBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXG4gIGluc3RhbGxDb21wb25lbnRIb29rcyhkYXRhKTtcblxuICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxuICB2YXIgbmFtZSA9IEN0b3Iub3B0aW9ucy5uYW1lIHx8IHRhZztcbiAgdmFyIHZub2RlID0gbmV3IFZOb2RlKFxuICAgIChcInZ1ZS1jb21wb25lbnQtXCIgKyAoQ3Rvci5jaWQpICsgKG5hbWUgPyAoXCItXCIgKyBuYW1lKSA6ICcnKSksXG4gICAgZGF0YSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dCxcbiAgICB7IEN0b3I6IEN0b3IsIHByb3BzRGF0YTogcHJvcHNEYXRhLCBsaXN0ZW5lcnM6IGxpc3RlbmVycywgdGFnOiB0YWcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9LFxuICAgIGFzeW5jRmFjdG9yeVxuICApO1xuXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgX2lzQ29tcG9uZW50OiB0cnVlLFxuICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgcGFyZW50OiBwYXJlbnRcbiAgfTtcbiAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbiAgdmFyIGlubGluZVRlbXBsYXRlID0gdm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtcbiAgaWYgKGlzRGVmKGlubGluZVRlbXBsYXRlKSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICB9XG4gIHJldHVybiBuZXcgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGluc3RhbGxDb21wb25lbnRIb29rcyAoZGF0YSkge1xuICB2YXIgaG9va3MgPSBkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gaG9va3NUb01lcmdlW2ldO1xuICAgIHZhciBleGlzdGluZyA9IGhvb2tzW2tleV07XG4gICAgdmFyIHRvTWVyZ2UgPSBjb21wb25lbnRWTm9kZUhvb2tzW2tleV07XG4gICAgaWYgKGV4aXN0aW5nICE9PSB0b01lcmdlICYmICEoZXhpc3RpbmcgJiYgZXhpc3RpbmcuX21lcmdlZCkpIHtcbiAgICAgIGhvb2tzW2tleV0gPSBleGlzdGluZyA/IG1lcmdlSG9vayQxKHRvTWVyZ2UsIGV4aXN0aW5nKSA6IHRvTWVyZ2U7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9vayQxIChmMSwgZjIpIHtcbiAgdmFyIG1lcmdlZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgLy8gZmxvdyBjb21wbGFpbnMgYWJvdXQgZXh0cmEgYXJncyB3aGljaCBpcyB3aHkgd2UgdXNlIGFueVxuICAgIGYxKGEsIGIpO1xuICAgIGYyKGEsIGIpO1xuICB9O1xuICBtZXJnZWQuX21lcmdlZCA9IHRydWU7XG4gIHJldHVybiBtZXJnZWRcbn1cblxuLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGluZm8gKHZhbHVlIGFuZCBjYWxsYmFjaykgaW50b1xuLy8gcHJvcCBhbmQgZXZlbnQgaGFuZGxlciByZXNwZWN0aXZlbHkuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbCAob3B0aW9ucywgZGF0YSkge1xuICB2YXIgcHJvcCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwucHJvcCkgfHwgJ3ZhbHVlJztcbiAgdmFyIGV2ZW50ID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5ldmVudCkgfHwgJ2lucHV0J1xuICA7KGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgdmFyIGV4aXN0aW5nID0gb25bZXZlbnRdO1xuICB2YXIgY2FsbGJhY2sgPSBkYXRhLm1vZGVsLmNhbGxiYWNrO1xuICBpZiAoaXNEZWYoZXhpc3RpbmcpKSB7XG4gICAgaWYgKFxuICAgICAgQXJyYXkuaXNBcnJheShleGlzdGluZylcbiAgICAgICAgPyBleGlzdGluZy5pbmRleE9mKGNhbGxiYWNrKSA9PT0gLTFcbiAgICAgICAgOiBleGlzdGluZyAhPT0gY2FsbGJhY2tcbiAgICApIHtcbiAgICAgIG9uW2V2ZW50XSA9IFtjYWxsYmFja10uY29uY2F0KGV4aXN0aW5nKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb25bZXZlbnRdID0gY2FsbGJhY2s7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBTSU1QTEVfTk9STUFMSVpFID0gMTtcbnZhciBBTFdBWVNfTk9STUFMSVpFID0gMjtcblxuLy8gd3JhcHBlciBmdW5jdGlvbiBmb3IgcHJvdmlkaW5nIGEgbW9yZSBmbGV4aWJsZSBpbnRlcmZhY2Vcbi8vIHdpdGhvdXQgZ2V0dGluZyB5ZWxsZWQgYXQgYnkgZmxvd1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlLFxuICBhbHdheXNOb3JtYWxpemVcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSB8fCBpc1ByaW1pdGl2ZShkYXRhKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47XG4gICAgY2hpbGRyZW4gPSBkYXRhO1xuICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGlzVHJ1ZShhbHdheXNOb3JtYWxpemUpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBBTFdBWVNfTk9STUFMSVpFO1xuICB9XG4gIHJldHVybiBfY3JlYXRlRWxlbWVudChjb250ZXh0LCB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSlcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZVxuKSB7XG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZigoZGF0YSkuX19vYl9fKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiQXZvaWQgdXNpbmcgb2JzZXJ2ZWQgZGF0YSBvYmplY3QgYXMgdm5vZGUgZGF0YTogXCIgKyAoSlNPTi5zdHJpbmdpZnkoZGF0YSkpICsgXCJcXG5cIiArXG4gICAgICAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxcbiAgICAgIGNvbnRleHRcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyBvYmplY3Qgc3ludGF4IGluIHYtYmluZFxuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5pcykpIHtcbiAgICB0YWcgPSBkYXRhLmlzO1xuICB9XG4gIGlmICghdGFnKSB7XG4gICAgLy8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZVxuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyB3YXJuIGFnYWluc3Qgbm9uLXByaW1pdGl2ZSBrZXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmtleSkgJiYgIWlzUHJpbWl0aXZlKGRhdGEua2V5KVxuICApIHtcbiAgICB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgdXNpbmcgbm9uLXByaW1pdGl2ZSB2YWx1ZSBhcyBrZXksICcgK1xuICAgICAgICAndXNlIHN0cmluZy9udW1iZXIgdmFsdWUgaW5zdGVhZC4nLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfVxuICAvLyBzdXBwb3J0IHNpbmdsZSBmdW5jdGlvbiBjaGlsZHJlbiBhcyBkZWZhdWx0IHNjb3BlZCBzbG90XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJlxuICAgIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9O1xuICAgIGNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIH1cbiAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH0gZWxzZSBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IFNJTVBMRV9OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfVxuICB2YXIgdm5vZGUsIG5zO1xuICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgQ3RvcjtcbiAgICBucyA9IChjb250ZXh0LiR2bm9kZSAmJiBjb250ZXh0LiR2bm9kZS5ucykgfHwgY29uZmlnLmdldFRhZ05hbWVzcGFjZSh0YWcpO1xuICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgICAvLyBwbGF0Zm9ybSBidWlsdC1pbiBlbGVtZW50c1xuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICgoIWRhdGEgfHwgIWRhdGEucHJlKSAmJiBpc0RlZihDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHtcbiAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVua25vd24gb3IgdW5saXN0ZWQgbmFtZXNwYWNlZCBlbGVtZW50c1xuICAgICAgLy8gY2hlY2sgYXQgcnVudGltZSBiZWNhdXNlIGl0IG1heSBnZXQgYXNzaWduZWQgYSBuYW1lc3BhY2Ugd2hlbiBpdHNcbiAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgdGFnLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG4gICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQodGFnLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSBpZiAoaXNEZWYodm5vZGUpKSB7XG4gICAgaWYgKGlzRGVmKG5zKSkgeyBhcHBseU5TKHZub2RlLCBucyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHsgcmVnaXN0ZXJEZWVwQmluZGluZ3MoZGF0YSk7IH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlOUyAodm5vZGUsIG5zLCBmb3JjZSkge1xuICB2bm9kZS5ucyA9IG5zO1xuICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICBucyA9IHVuZGVmaW5lZDtcbiAgICBmb3JjZSA9IHRydWU7XG4gIH1cbiAgaWYgKGlzRGVmKHZub2RlLmNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjaGlsZC50YWcpICYmIChcbiAgICAgICAgaXNVbmRlZihjaGlsZC5ucykgfHwgKGlzVHJ1ZShmb3JjZSkgJiYgY2hpbGQudGFnICE9PSAnc3ZnJykpKSB7XG4gICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zLCBmb3JjZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIHJlZiAjNTMxOFxuLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmRcbi8vIDpjbGFzcyBhcmUgdXNlZCBvbiBzbG90IG5vZGVzXG5mdW5jdGlvbiByZWdpc3RlckRlZXBCaW5kaW5ncyAoZGF0YSkge1xuICBpZiAoaXNPYmplY3QoZGF0YS5zdHlsZSkpIHtcbiAgICB0cmF2ZXJzZShkYXRhLnN0eWxlKTtcbiAgfVxuICBpZiAoaXNPYmplY3QoZGF0YS5jbGFzcykpIHtcbiAgICB0cmF2ZXJzZShkYXRhLmNsYXNzKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFJlbmRlciAodm0pIHtcbiAgdm0uX3Zub2RlID0gbnVsbDsgLy8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcbiAgdm0uX3N0YXRpY1RyZWVzID0gbnVsbDsgLy8gdi1vbmNlIGNhY2hlZCB0cmVlc1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICB2YXIgcGFyZW50Vm5vZGUgPSB2bS4kdm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcbiAgdmFyIHJlbmRlckNvbnRleHQgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5jb250ZXh0O1xuICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMob3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpO1xuICB2bS4kc2NvcGVkU2xvdHMgPSBlbXB0eU9iamVjdDtcbiAgLy8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4gIC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuXG4gIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcbiAgLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbiAgdm0uX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOyB9O1xuICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cbiAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gIHZtLiRjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xuXG4gIC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uXG4gIC8vIHRoZXkgbmVlZCB0byBiZSByZWFjdGl2ZSBzbyB0aGF0IEhPQ3MgdXNpbmcgdGhlbSBhcmUgYWx3YXlzIHVwZGF0ZWRcbiAgdmFyIHBhcmVudERhdGEgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5kYXRhO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRhdHRycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGxpc3RlbmVycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICB9XG59XG5cbnZhciBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuXG5mdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7XG4gIC8vIGluc3RhbGwgcnVudGltZSBjb252ZW5pZW5jZSBoZWxwZXJzXG4gIGluc3RhbGxSZW5kZXJIZWxwZXJzKFZ1ZS5wcm90b3R5cGUpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciByZWYgPSB2bS4kb3B0aW9ucztcbiAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblxuICAgIGlmIChfcGFyZW50Vm5vZGUpIHtcbiAgICAgIHZtLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdm0uJHNsb3RzLFxuICAgICAgICB2bS4kc2NvcGVkU2xvdHNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIG1haW50YWluIGEgc3RhY2sgYmVjYXVlcyBhbGwgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyBzZXBhcmF0ZWx5IGZyb20gb25lIGFub3RoZXIuIE5lc3RlZCBjb21wb25lbnQncyByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHdoZW4gcGFyZW50IGNvbXBvbmVudCBpcyBwYXRjaGVkLlxuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gdm07XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlclwiKTtcbiAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlckVycm9yXCIpO1xuICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gICAgLy8gaWYgdGhlIHJldHVybmVkIGFycmF5IGNvbnRhaW5zIG9ubHkgYSBzaW5nbGUgbm9kZSwgYWxsb3cgaXRcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkgJiYgdm5vZGUubGVuZ3RoID09PSAxKSB7XG4gICAgICB2bm9kZSA9IHZub2RlWzBdO1xuICAgIH1cbiAgICAvLyByZXR1cm4gZW1wdHkgdm5vZGUgaW4gY2FzZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGVycm9yZWQgb3V0XG4gICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yXG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gIGlmIChvd25lciAmJiBpc0RlZihmYWN0b3J5Lm93bmVycykgJiYgZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcikgPT09IC0xKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5vd25lcnMucHVzaChvd25lcik7XG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKG93bmVyICYmICFpc0RlZihmYWN0b3J5Lm93bmVycykpIHtcbiAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICB2YXIgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbFxuXG4gICAgOyhvd25lcikuJG9uKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShvd25lcnMsIG93bmVyKTsgfSk7XG5cbiAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG93bmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgKG93bmVyc1tpXSkuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aW1lckxvYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTtcbiAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0KTtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogXCIgKyAoU3RyaW5nKGZhY3RvcnkpKSArXG4gICAgICAgIChyZWFzb24gPyAoXCJcXG5SZWFzb246IFwiICsgcmVhc29uKSA6ICcnKVxuICAgICAgKTtcbiAgICAgIGlmIChpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICAgICAgZmFjdG9yeS5lcnJvciA9IHRydWU7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAoaXNQcm9taXNlKHJlcykpIHtcbiAgICAgICAgLy8gKCkgPT4gUHJvbWlzZVxuICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKHJlcy5jb21wb25lbnQpKSB7XG4gICAgICAgIHJlcy5jb21wb25lbnQudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICAgIGlmIChpc0RlZihyZXMuZXJyb3IpKSB7XG4gICAgICAgICAgZmFjdG9yeS5lcnJvckNvbXAgPSBlbnN1cmVDdG9yKHJlcy5lcnJvciwgYmFzZUN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5sb2FkaW5nKSkge1xuICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7XG4gICAgICAgICAgaWYgKHJlcy5kZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpICYmIGlzVW5kZWYoZmFjdG9yeS5lcnJvcikpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgICAgICAgICAgICAgICA/IChcInRpbWVvdXQgKFwiICsgKHJlcy50aW1lb3V0KSArIFwibXMpXCIpXG4gICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCByZXMudGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzeW5jID0gZmFsc2U7XG4gICAgLy8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdcbiAgICAgID8gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICAgICAgOiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzQXN5bmNQbGFjZWhvbGRlciAobm9kZSkge1xuICByZXR1cm4gbm9kZS5pc0NvbW1lbnQgJiYgbm9kZS5hc3luY0ZhY3Rvcnlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgKGlzRGVmKGMuY29tcG9uZW50T3B0aW9ucykgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpKSkge1xuICAgICAgICByZXR1cm4gY1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7XG4gIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2bS5faGFzSG9va0V2ZW50ID0gZmFsc2U7XG4gIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xuICB2YXIgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgaWYgKGxpc3RlbmVycykge1xuICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0O1xuXG5mdW5jdGlvbiBhZGQgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIgKGV2ZW50LCBmbikge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldDtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICBfdGFyZ2V0LiRvZmYoZXZlbnQsIG9uY2VIYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgY3JlYXRlT25jZUhhbmRsZXIsIHZtKTtcbiAgdGFyZ2V0ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZtLiRvbihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgIC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgICAgdm0uX2hhc0hvb2tFdmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICBmbi5hcHBseSh2bSwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgb24uZm4gPSBmbjtcbiAgICB2bS4kb24oZXZlbnQsIG9uKTtcbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhbGxcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIGFycmF5IG9mIGV2ZW50c1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSQxID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSQxIDwgbDsgaSQxKyspIHtcbiAgICAgICAgdm0uJG9mZihldmVudFtpJDFdLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgIHZhciBjYjtcbiAgICB2YXIgaSA9IGNicy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY2IgPSBjYnNbaV07XG4gICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICBjYnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIFwiRXZlbnQgXFxcIlwiICsgbG93ZXJDYXNlRXZlbnQgKyBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIgK1xuICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICBcInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBcIiArXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBpbmZvID0gXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzZXRBY3RpdmVJbnN0YW5jZSh2bSkge1xuICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh2bSk7XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7XG4gICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0cnVlIC8qIGlzUmVuZGVyV2F0Y2hlciAqLyk7XG4gIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG4gIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuICB9XG4gIHJldHVybiB2bVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgLy8gZHluYW1pYyBzbG90IG5hbWVzKS4gU3RhdGljIHNjb3BlZCBzbG90cyBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGhhcyB0aGVcbiAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7XG4gIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSlcbiAgKTtcblxuICAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXG4gIC8vIHVwZGF0ZS4gRHluYW1pYyBzY29wZWQgc2xvdHMgbWF5IGFsc28gaGF2ZSBjaGFuZ2VkLiBJbiBzdWNoIGNhc2VzLCBhIGZvcmNlZFxuICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIGhhc0R5bmFtaWNTY29wZWRTbG90XG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG5cbiAgLy8gdXBkYXRlIHByb3BzXG4gIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIC8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gIH1cblxuICAvLyB1cGRhdGUgbGlzdGVuZXJzXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcbiAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpO1xuXG4gIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gIGlmIChuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTtcbiAgICB2bS4kZm9yY2VVcGRhdGUoKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJbkluYWN0aXZlVHJlZSAodm0pIHtcbiAgd2hpbGUgKHZtICYmICh2bSA9IHZtLiRwYXJlbnQpKSB7XG4gICAgaWYgKHZtLl9pbmFjdGl2ZSkgeyByZXR1cm4gdHJ1ZSB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9IGVsc2UgaWYgKHZtLl9kaXJlY3RJbmFjdGl2ZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2bS5faW5hY3RpdmUgfHwgdm0uX2luYWN0aXZlID09PSBudWxsKSB7XG4gICAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IHRydWU7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cbiAgaWYgKCF2bS5faW5hY3RpdmUpIHtcbiAgICB2bS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdkZWFjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rICh2bSwgaG9vaykge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgbGlmZWN5Y2xlIGhvb2tzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XG4gIHZhciBpbmZvID0gaG9vayArIFwiIGhvb2tcIjtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGhhbmRsZXJzW2ldLCB2bSwgbnVsbCwgdm0sIGluZm8pO1xuICAgIH1cbiAgfVxuICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcbiAgfVxuICBwb3BUYXJnZXQoKTtcbn1cblxuLyogICovXG5cbnZhciBNQVhfVVBEQVRFX0NPVU5UID0gMTAwO1xuXG52YXIgcXVldWUgPSBbXTtcbnZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xudmFyIGhhcyA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgaGFzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLy8gQXN5bmMgZWRnZSBjYXNlICM2NTY2IHJlcXVpcmVzIHNhdmluZyB0aGUgdGltZXN0YW1wIHdoZW4gZXZlbnQgbGlzdGVuZXJzIGFyZVxuLy8gYXR0YWNoZWQuIEhvd2V2ZXIsIGNhbGxpbmcgcGVyZm9ybWFuY2Uubm93KCkgaGFzIGEgcGVyZiBvdmVyaGVhZCBlc3BlY2lhbGx5XG4vLyBpZiB0aGUgcGFnZSBoYXMgdGhvdXNhbmRzIG9mIGV2ZW50IGxpc3RlbmVycy4gSW5zdGVhZCwgd2UgdGFrZSBhIHRpbWVzdGFtcFxuLy8gZXZlcnkgdGltZSB0aGUgc2NoZWR1bGVyIGZsdXNoZXMgYW5kIHVzZSB0aGF0IGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzXG4vLyBhdHRhY2hlZCBkdXJpbmcgdGhhdCBmbHVzaC5cbnZhciBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSAwO1xuXG4vLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxudmFyIGdldE5vdyA9IERhdGUubm93O1xuXG4vLyBEZXRlcm1pbmUgd2hhdCBldmVudCB0aW1lc3RhbXAgdGhlIGJyb3dzZXIgaXMgdXNpbmcuIEFubm95aW5nbHksIHRoZVxuLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcbi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxuLy8gc2FtZSB0aW1lc3RhbXAgdHlwZSB3aGVuIHNhdmluZyB0aGUgZmx1c2ggdGltZXN0YW1wLlxuLy8gQWxsIElFIHZlcnNpb25zIHVzZSBsb3ctcmVzIGV2ZW50IHRpbWVzdGFtcHMsIGFuZCBoYXZlIHByb2JsZW1hdGljIGNsb2NrXG4vLyBpbXBsZW1lbnRhdGlvbnMgKCM5NjMyKVxuaWYgKGluQnJvd3NlciAmJiAhaXNJRSkge1xuICB2YXIgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIGlmIChcbiAgICBwZXJmb3JtYW5jZSAmJlxuICAgIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicgJiZcbiAgICBnZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcFxuICApIHtcbiAgICAvLyBpZiB0aGUgZXZlbnQgdGltZXN0YW1wLCBhbHRob3VnaCBldmFsdWF0ZWQgQUZURVIgdGhlIERhdGUubm93KCksIGlzXG4gICAgLy8gc21hbGxlciB0aGFuIGl0LCBpdCBtZWFucyB0aGUgZXZlbnQgaXMgdXNpbmcgYSBoaS1yZXMgdGltZXN0YW1wLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXNcbiAgICAvLyB3ZWxsLlxuICAgIGdldE5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpOyB9O1xuICB9XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSBnZXROb3coKTtcbiAgZmx1c2hpbmcgPSB0cnVlO1xuICB2YXIgd2F0Y2hlciwgaWQ7XG5cbiAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZClcbiAgLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpXG4gIC8vIDMuIElmIGEgY29tcG9uZW50IGlzIGRlc3Ryb3llZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3Mgd2F0Y2hlciBydW4sXG4gIC8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cbiAgcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuXG4gIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuICAvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcXVldWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcbiAgICBpZiAod2F0Y2hlci5iZWZvcmUpIHtcbiAgICAgIHdhdGNoZXIuYmVmb3JlKCk7XG4gICAgfVxuICAgIGlkID0gd2F0Y2hlci5pZDtcbiAgICBoYXNbaWRdID0gbnVsbDtcbiAgICB3YXRjaGVyLnJ1bigpO1xuICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBoYXNbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IE1BWF9VUERBVEVfQ09VTlQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8ga2VlcCBjb3BpZXMgb2YgcG9zdCBxdWV1ZXMgYmVmb3JlIHJlc2V0dGluZyBzdGF0ZVxuICB2YXIgYWN0aXZhdGVkUXVldWUgPSBhY3RpdmF0ZWRDaGlsZHJlbi5zbGljZSgpO1xuICB2YXIgdXBkYXRlZFF1ZXVlID0gcXVldWUuc2xpY2UoKTtcblxuICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG5cbiAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG4gIGNhbGxBY3RpdmF0ZWRIb29rcyhhY3RpdmF0ZWRRdWV1ZSk7XG4gIGNhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTtcblxuICAvLyBkZXZ0b29sIGhvb2tcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIHZhciBpID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIHdhdGNoZXIgPSBxdWV1ZVtpXTtcbiAgICB2YXIgdm0gPSB3YXRjaGVyLnZtO1xuICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVBY3RpdmF0ZWRDb21wb25lbnQgKHZtKSB7XG4gIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW5cbiAgLy8gcmVseSBvbiBjaGVja2luZyB3aGV0aGVyIGl0J3MgaW4gYW4gaW5hY3RpdmUgdHJlZSAoZS5nLiByb3V0ZXItdmlldylcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pO1xufVxuXG5mdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XG4gIH1cbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXNbaWRdID09IG51bGwpIHtcbiAgICBoYXNbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgICAgICBmbHVzaFNjaGVkdWxlclF1ZXVlKCk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbmV4dFRpY2soZmx1c2hTY2hlZHVsZXJRdWV1ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5cblxudmFyIHVpZCQyID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zLFxuICBpc1JlbmRlcldhdGNoZXJcbikge1xuICB0aGlzLnZtID0gdm07XG4gIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICB2bS5fd2F0Y2hlciA9IHRoaXM7XG4gIH1cbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgICB0aGlzLmJlZm9yZSA9IG9wdGlvbnMuYmVmb3JlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGVlcCA9IHRoaXMudXNlciA9IHRoaXMubGF6eSA9IHRoaXMuc3luYyA9IGZhbHNlO1xuICB9XG4gIHRoaXMuY2IgPSBjYjtcbiAgdGhpcy5pZCA9ICsrdWlkJDI7IC8vIHVpZCBmb3IgYmF0Y2hpbmdcbiAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICB0aGlzLmRpcnR5ID0gdGhpcy5sYXp5OyAvLyBmb3IgbGF6eSB3YXRjaGVyc1xuICB0aGlzLmRlcHMgPSBbXTtcbiAgdGhpcy5uZXdEZXBzID0gW107XG4gIHRoaXMuZGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5uZXdEZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLmV4cHJlc3Npb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgPyBleHBPckZuLnRvU3RyaW5nKClcbiAgICA6ICcnO1xuICAvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXJcbiAgaWYgKHR5cGVvZiBleHBPckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBleHBPckZuO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZ2V0dGVyID0gcGFyc2VQYXRoKGV4cE9yRm4pO1xuICAgIGlmICghdGhpcy5nZXR0ZXIpIHtcbiAgICAgIHRoaXMuZ2V0dGVyID0gbm9vcDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgd2F0Y2hpbmcgcGF0aDogXFxcIlwiICsgZXhwT3JGbiArIFwiXFxcIiBcIiArXG4gICAgICAgICdXYXRjaGVyIG9ubHkgYWNjZXB0cyBzaW1wbGUgZG90LWRlbGltaXRlZCBwYXRocy4gJyArXG4gICAgICAgICdGb3IgZnVsbCBjb250cm9sLCB1c2UgYSBmdW5jdGlvbiBpbnN0ZWFkLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICB0aGlzLnZhbHVlID0gdGhpcy5sYXp5XG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHRoaXMuZ2V0KCk7XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0ICgpIHtcbiAgcHVzaFRhcmdldCh0aGlzKTtcbiAgdmFyIHZhbHVlO1xuICB2YXIgdm0gPSB0aGlzLnZtO1xuICB0cnkge1xuICAgIHZhbHVlID0gdGhpcy5nZXR0ZXIuY2FsbCh2bSwgdm0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIChcImdldHRlciBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG4gICAgLy8gZGVwZW5kZW5jaWVzIGZvciBkZWVwIHdhdGNoaW5nXG4gICAgaWYgKHRoaXMuZGVlcCkge1xuICAgICAgdHJhdmVyc2UodmFsdWUpO1xuICAgIH1cbiAgICBwb3BUYXJnZXQoKTtcbiAgICB0aGlzLmNsZWFudXBEZXBzKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59O1xuXG4vKipcbiAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmFkZERlcCA9IGZ1bmN0aW9uIGFkZERlcCAoZGVwKSB7XG4gIHZhciBpZCA9IGRlcC5pZDtcbiAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoaWQpKSB7XG4gICAgdGhpcy5uZXdEZXBJZHMuYWRkKGlkKTtcbiAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApO1xuICAgIGlmICghdGhpcy5kZXBJZHMuaGFzKGlkKSkge1xuICAgICAgZGVwLmFkZFN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuY2xlYW51cERlcHMgPSBmdW5jdGlvbiBjbGVhbnVwRGVwcyAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBkZXAgPSB0aGlzLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgZGVwLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbiAgdmFyIHRtcCA9IHRoaXMuZGVwSWRzO1xuICB0aGlzLmRlcElkcyA9IHRoaXMubmV3RGVwSWRzO1xuICB0aGlzLm5ld0RlcElkcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBJZHMuY2xlYXIoKTtcbiAgdG1wID0gdGhpcy5kZXBzO1xuICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7XG4gIHRoaXMubmV3RGVwcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBzLmxlbmd0aCA9IDA7XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZXIgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgd2hlbiBhIGRlcGVuZGVuY3kgY2hhbmdlcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHRoaXMubGF6eSkge1xuICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHRoaXMuc3luYykge1xuICAgIHRoaXMucnVuKCk7XG4gIH0gZWxzZSB7XG4gICAgcXVldWVXYXRjaGVyKHRoaXMpO1xuICB9XG59O1xuXG4vKipcbiAqIFNjaGVkdWxlciBqb2IgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gcnVuICgpIHtcbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICBpZiAoXG4gICAgICB2YWx1ZSAhPT0gdGhpcy52YWx1ZSB8fFxuICAgICAgLy8gRGVlcCB3YXRjaGVycyBhbmQgd2F0Y2hlcnMgb24gT2JqZWN0L0FycmF5cyBzaG91bGQgZmlyZSBldmVuXG4gICAgICAvLyB3aGVuIHRoZSB2YWx1ZSBpcyB0aGUgc2FtZSwgYmVjYXVzZSB0aGUgdmFsdWUgbWF5XG4gICAgICAvLyBoYXZlIG11dGF0ZWQuXG4gICAgICBpc09iamVjdCh2YWx1ZSkgfHxcbiAgICAgIHRoaXMuZGVlcFxuICAgICkge1xuICAgICAgLy8gc2V0IG5ldyB2YWx1ZVxuICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHRoaXMudm0sIChcImNhbGxiYWNrIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSB2YWx1ZSBvZiB0aGUgd2F0Y2hlci5cbiAqIFRoaXMgb25seSBnZXRzIGNhbGxlZCBmb3IgbGF6eSB3YXRjaGVycy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZSAoKSB7XG4gIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpO1xuICB0aGlzLmRpcnR5ID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzLmRlcHNbaV0uZGVwZW5kKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gdGVhcmRvd24gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHZtJ3Mgd2F0Y2hlciBsaXN0XG4gICAgLy8gdGhpcyBpcyBhIHNvbWV3aGF0IGV4cGVuc2l2ZSBvcGVyYXRpb24gc28gd2Ugc2tpcCBpdFxuICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgaWYgKCF0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZW1vdmUodGhpcy52bS5fd2F0Y2hlcnMsIHRoaXMpO1xuICAgIH1cbiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBub29wLFxuICBzZXQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHByb3h5ICh0YXJnZXQsIHNvdXJjZUtleSwga2V5KSB7XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXNbc291cmNlS2V5XVtrZXldXG4gIH07XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgdGhpc1tzb3VyY2VLZXldW2tleV0gPSB2YWw7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICB2bS5fd2F0Y2hlcnMgPSBbXTtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucztcbiAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG4gIGlmIChvcHRzLmRhdGEpIHtcbiAgICBpbml0RGF0YSh2bSk7XG4gIH0gZWxzZSB7XG4gICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuICB9XG4gIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cbiAgaWYgKG9wdHMud2F0Y2ggJiYgb3B0cy53YXRjaCAhPT0gbmF0aXZlV2F0Y2gpIHtcbiAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykge1xuICB2YXIgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bS5fcHJvcHMgPSB7fTtcbiAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbiAgLy8gaW5zdGVhZCBvZiBkeW5hbWljIG9iamVjdCBrZXkgZW51bWVyYXRpb24uXG4gIHZhciBrZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzID0gW107XG4gIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG4gIGlmICghaXNSb290KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgfVxuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgIGtleXMucHVzaChrZXkpO1xuICAgIHZhciB2YWx1ZSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BzT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGh5cGhlbmF0ZWRLZXkpIHx8XG4gICAgICAgICAgY29uZmlnLmlzUmVzZXJ2ZWRBdHRyKGh5cGhlbmF0ZWRLZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiXFxcIlwiICsgaHlwaGVuYXRlZEtleSArIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzUm9vdCAmJiAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50KSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NTUikge1xuICAgICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgdm0sXG4gICAgICAgIGdldHRlciB8fCBub29wLFxuICAgICAgICBub29wLFxuICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmKTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmLmdldClcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXJJbnZva2VyKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcywgdGhpcylcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyB0eXBlIFxcXCJcIiArICh0eXBlb2YgbWV0aG9kc1trZXldKSArIFwiXFxcIiBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoKGtleSBpbiB2bSkgJiYgaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIFZ1ZSBpbnN0YW5jZSBtZXRob2QuIFwiICtcbiAgICAgICAgICBcIkF2b2lkIGRlZmluaW5nIGNvbXBvbmVudCBtZXRob2RzIHRoYXQgc3RhcnQgd2l0aCBfIG9yICQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdm1ba2V5XSA9IHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicgPyBub29wIDogYmluZChtZXRob2RzW2tleV0sIHZtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0V2F0Y2ggKHZtLCB3YXRjaCkge1xuICBmb3IgKHZhciBrZXkgaW4gd2F0Y2gpIHtcbiAgICB2YXIgaGFuZGxlciA9IHdhdGNoW2tleV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXJbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGhhbmRsZXIsXG4gIG9wdGlvbnNcbikge1xuICBpZiAoaXNQbGFpbk9iamVjdChoYW5kbGVyKSkge1xuICAgIG9wdGlvbnMgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBoYW5kbGVyLmhhbmRsZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJykge1xuICAgIGhhbmRsZXIgPSB2bVtoYW5kbGVyXTtcbiAgfVxuICByZXR1cm4gdm0uJHdhdGNoKGV4cE9yRm4sIGhhbmRsZXIsIG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIHN0YXRlTWl4aW4gKFZ1ZSkge1xuICAvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3RcbiAgLy8gd2hlbiB1c2luZyBPYmplY3QuZGVmaW5lUHJvcGVydHksIHNvIHdlIGhhdmUgdG8gcHJvY2VkdXJhbGx5IGJ1aWxkIHVwXG4gIC8vIHRoZSBvYmplY3QgaGVyZS5cbiAgdmFyIGRhdGFEZWYgPSB7fTtcbiAgZGF0YURlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhIH07XG4gIHZhciBwcm9wc0RlZiA9IHt9O1xuICBwcm9wc0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcm9wcyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRhdGFEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHJlcGxhY2luZyBpbnN0YW5jZSByb290ICRkYXRhLiAnICtcbiAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXCIkcHJvcHMgaXMgcmVhZG9ubHkuXCIsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckZGF0YScsIGRhdGFEZWYpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTtcblxuICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQ7XG4gIFZ1ZS5wcm90b3R5cGUuJGRlbGV0ZSA9IGRlbDtcblxuICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICBleHBPckZuLFxuICAgIGNiLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucylcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy51c2VyID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVycm9yLCB2bSwgKFwiY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSB3YXRjaGVyIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCQzID0gMDtcblxuZnVuY3Rpb24gaW5pdE1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhIHVpZFxuICAgIHZtLl91aWQgPSB1aWQkMysrO1xuXG4gICAgdmFyIHN0YXJ0VGFnLCBlbmRUYWc7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArICh2bS5fdWlkKTtcbiAgICAgIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgKHZtLl91aWQpO1xuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgfVxuXG4gICAgLy8gYSBmbGFnIHRvIGF2b2lkIHRoaXMgYmVpbmcgb2JzZXJ2ZWRcbiAgICB2bS5faXNWdWUgPSB0cnVlO1xuICAgIC8vIG1lcmdlIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9pc0NvbXBvbmVudCkge1xuICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cbiAgICAgIC8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcbiAgICAgIC8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LlxuICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLFxuICAgICAgICBvcHRpb25zIHx8IHt9LFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW5pdFByb3h5KHZtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcbiAgZm9yICh2YXIga2V5IGluIGxhdGVzdCkge1xuICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfVxuICAgICAgbW9kaWZpZWRba2V5XSA9IGxhdGVzdFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWRcbn1cblxuZnVuY3Rpb24gVnVlIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgLy8gMi42IGV4cGxpY2l0IG9ic2VydmFibGUgQVBJXG4gIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIG9ic2VydmUob2JqKTtcbiAgICByZXR1cm4gb2JqXG4gIH07XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi42LjEwJztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSA9IG1ha2VNYXAoJ2V2ZW50cyxjYXJldCx0eXBpbmcscGxhaW50ZXh0LW9ubHknKTtcblxudmFyIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZSdcbiAgICA/ICdmYWxzZSdcbiAgICAvLyBhbGxvdyBhcmJpdHJhcnkgc3RyaW5nIHZhbHVlIGZvciBjb250ZW50ZWRpdGFibGVcbiAgICA6IGtleSA9PT0gJ2NvbnRlbnRlZGl0YWJsZScgJiYgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlKHZhbHVlKVxuICAgICAgPyB2YWx1ZVxuICAgICAgOiAndHJ1ZSdcbn07XG5cbnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcbiAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSx0cmFuc2xhdGUsJyArXG4gICd0cnVlc3BlZWQsdHlwZW11c3RtYXRjaCx2aXNpYmxlJ1xuKTtcblxudmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5cbnZhciBpc1hsaW5rID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xufTtcblxudmFyIGdldFhsaW5rUHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBpc1hsaW5rKG5hbWUpID8gbmFtZS5zbGljZSg2LCBuYW1lLmxlbmd0aCkgOiAnJ1xufTtcblxudmFyIGlzRmFsc3lBdHRyVmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbCB8fCB2YWwgPT09IGZhbHNlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gIHdoaWxlIChpc0RlZihjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoY2hpbGROb2RlLmRhdGEsIGRhdGEpO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoaXNEZWYocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlICYmIHBhcmVudE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZW5kZXJDbGFzcyhkYXRhLnN0YXRpY0NsYXNzLCBkYXRhLmNsYXNzKVxufVxuXG5mdW5jdGlvbiBtZXJnZUNsYXNzRGF0YSAoY2hpbGQsIHBhcmVudCkge1xuICByZXR1cm4ge1xuICAgIHN0YXRpY0NsYXNzOiBjb25jYXQoY2hpbGQuc3RhdGljQ2xhc3MsIHBhcmVudC5zdGF0aWNDbGFzcyksXG4gICAgY2xhc3M6IGlzRGVmKGNoaWxkLmNsYXNzKVxuICAgICAgPyBbY2hpbGQuY2xhc3MsIHBhcmVudC5jbGFzc11cbiAgICAgIDogcGFyZW50LmNsYXNzXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2xhc3MgKFxuICBzdGF0aWNDbGFzcyxcbiAgZHluYW1pY0NsYXNzXG4pIHtcbiAgaWYgKGlzRGVmKHN0YXRpY0NsYXNzKSB8fCBpc0RlZihkeW5hbWljQ2xhc3MpKSB7XG4gICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG4gIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpXG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIHN0cmluZ2lmaWVkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChpc0RlZihzdHJpbmdpZmllZCA9IHN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkgJiYgc3RyaW5naWZpZWQgIT09ICcnKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlW2tleV0pIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIG5hbWVzcGFjZU1hcCA9IHtcbiAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICBtYXRoOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCdcbn07XG5cbnZhciBpc0hUTUxUYWcgPSBtYWtlTWFwKFxuICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sJyArXG4gICdkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCwnICtcbiAgJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnICtcbiAgJ3Msc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLCcgK1xuICAnZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsJyArXG4gICdjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnICtcbiAgJ2J1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sJyArXG4gICdvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLCcgK1xuICAnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcgK1xuICAnY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCdcbik7XG5cbi8vIHRoaXMgbWFwIGlzIGludGVudGlvbmFsbHkgc2VsZWN0aXZlLCBvbmx5IGNvdmVyaW5nIFNWRyBlbGVtZW50cyB0aGF0IG1heVxuLy8gY29udGFpbiBjaGlsZCBlbGVtZW50cy5cbnZhciBpc1NWRyA9IG1ha2VNYXAoXG4gICdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlcixmb250LWZhY2UsJyArXG4gICdmb3JlaWduT2JqZWN0LGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICtcbiAgJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLFxuICB0cnVlXG4pO1xuXG52YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgcmV0dXJuIGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHKHRhZylcbn07XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gIGlmIChpc1NWRyh0YWcpKSB7XG4gICAgcmV0dXJuICdzdmcnXG4gIH1cbiAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG4gIC8vIG5vdGUgaXQgZG9lc24ndCBzdXBwb3J0IG90aGVyIE1hdGhNTCBlbGVtZW50cyBiZWluZyBjb21wb25lbnQgcm9vdHNcbiAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgcmV0dXJuICdtYXRoJ1xuICB9XG59XG5cbnZhciB1bmtub3duRWxlbWVudENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHRhZykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChpc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB1bmtub3duRWxlbWVudENhY2hlW3RhZ11cbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0YWcuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxVbmtub3duRWxlbWVudCB8fFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudFxuICAgICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKVxuICB9XG59XG5cbnZhciBpc1RleHRJbnB1dFR5cGUgPSBtYWtlTWFwKCd0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCcpO1xuXG4vKiAgKi9cblxuLyoqXG4gKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS5cbiAqL1xuZnVuY3Rpb24gcXVlcnkgKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgaWYgKCFzZWxlY3RlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnQ2Fubm90IGZpbmQgZWxlbWVudDogJyArIGVsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RlZFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gZWxtXG4gIH1cbiAgLy8gZmFsc2Ugb3IgbnVsbCB3aWxsIHJlbW92ZSB0aGUgYXR0cmlidXRlIGJ1dCB1bmRlZmluZWQgd2lsbCBub3RcbiAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICB9XG4gIHJldHVybiBlbG1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG59XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nIChub2RlKSB7XG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0U3R5bGVTY29wZSAobm9kZSwgc2NvcGVJZCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG59XG5cbnZhciBub2RlT3BzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG4gIGNyZWF0ZUVsZW1lbnROUzogY3JlYXRlRWxlbWVudE5TLFxuICBjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsXG4gIGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG4gIGluc2VydEJlZm9yZTogaW5zZXJ0QmVmb3JlLFxuICByZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsXG4gIGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcbiAgcGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcbiAgbmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLFxuICB0YWdOYW1lOiB0YWdOYW1lLFxuICBzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG4gIHNldFN0eWxlU2NvcGU6IHNldFN0eWxlU2NvcGVcbn0pO1xuXG4vKiAgKi9cblxudmFyIHJlZiA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUgKF8sIHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgaWYgKG9sZFZub2RlLmRhdGEucmVmICE9PSB2bm9kZS5kYXRhLnJlZikge1xuICAgICAgcmVnaXN0ZXJSZWYob2xkVm5vZGUsIHRydWUpO1xuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSwgdHJ1ZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjtcbiAgaWYgKCFpc0RlZihrZXkpKSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgcmV0dXJuIChcbiAgICBhLmtleSA9PT0gYi5rZXkgJiYgKFxuICAgICAgKFxuICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiZcbiAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKVxuICAgICAgKSB8fCAoXG4gICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmUkJDFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8pO1xuICAgICAgfVxuICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxuICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkge1xuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBpZiAoaXNEZWYocmVmJCQxKSkge1xuICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZiQkMSkgPT09IHBhcmVudCkge1xuICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYkJDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpc0RlZihpLmNyZWF0ZSkpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgLy8gdGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNwZWNpYWwgY2FzZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWRcbiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGFuY2VzdG9yLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgICB9XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJlxuICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpXG4gICAgKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAocGFyZW50RWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICB2YXIgY2ggPSB2bm9kZXNbc3RhcnRJZHhdO1xuICAgICAgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAoaXNEZWYoY2gudGFnKSkge1xuICAgICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soY2gpO1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKGNoKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gVGV4dCBub2RlXG4gICAgICAgICAgcmVtb3ZlTm9kZShjaC5lbG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayAodm5vZGUsIHJtKSB7XG4gICAgaWYgKGlzRGVmKHJtKSB8fCBpc0RlZih2bm9kZS5kYXRhKSkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY2JzLnJlbW92ZS5sZW5ndGggKyAxO1xuICAgICAgaWYgKGlzRGVmKHJtKSkge1xuICAgICAgICAvLyB3ZSBoYXZlIGEgcmVjdXJzaXZlbHkgcGFzc2VkIGRvd24gcm0gY2FsbGJhY2tcbiAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGxpc3RlbmVycyBjb3VudFxuICAgICAgICBybS5saXN0ZW5lcnMgKz0gbGlzdGVuZXJzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGlyZWN0bHkgcmVtb3ZpbmdcbiAgICAgICAgcm0gPSBjcmVhdGVSbUNiKHZub2RlLmVsbSwgbGlzdGVuZXJzKTtcbiAgICAgIH1cbiAgICAgIC8vIHJlY3Vyc2l2ZWx5IGludm9rZSBob29rcyBvbiBjaGlsZCBjb21wb25lbnQgcm9vdCBub2RlXG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpc0RlZihpID0gaS5fdm5vZGUpICYmIGlzRGVmKGkuZGF0YSkpIHtcbiAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhpLCBybSk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnJlbW92ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjYnMucmVtb3ZlW2ldKHZub2RlLCBybSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucmVtb3ZlKSkge1xuICAgICAgICBpKHZub2RlLCBybSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBybSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVOb2RlKHZub2RlLmVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4gKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICB2YXIgb2xkU3RhcnRJZHggPSAwO1xuICAgIHZhciBuZXdTdGFydElkeCA9IDA7XG4gICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFswXTtcbiAgICB2YXIgb2xkRW5kVm5vZGUgPSBvbGRDaFtvbGRFbmRJZHhdO1xuICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuICAgIHZhciBuZXdTdGFydFZub2RlID0gbmV3Q2hbMF07XG4gICAgdmFyIG5ld0VuZFZub2RlID0gbmV3Q2hbbmV3RW5kSWR4XTtcbiAgICB2YXIgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCB2bm9kZVRvTW92ZSwgcmVmRWxtO1xuXG4gICAgLy8gcmVtb3ZlT25seSBpcyBhIHNwZWNpYWwgZmxhZyB1c2VkIG9ubHkgYnkgPHRyYW5zaXRpb24tZ3JvdXA+XG4gICAgLy8gdG8gZW5zdXJlIHJlbW92ZWQgZWxlbWVudHMgc3RheSBpbiBjb3JyZWN0IHJlbGF0aXZlIHBvc2l0aW9uc1xuICAgIC8vIGR1cmluZyBsZWF2aW5nIHRyYW5zaXRpb25zXG4gICAgdmFyIGNhbk1vdmUgPSAhcmVtb3ZlT25seTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja0R1cGxpY2F0ZUtleXMobmV3Q2gpO1xuICAgIH1cblxuICAgIHdoaWxlIChvbGRTdGFydElkeCA8PSBvbGRFbmRJZHggJiYgbmV3U3RhcnRJZHggPD0gbmV3RW5kSWR4KSB7XG4gICAgICBpZiAoaXNVbmRlZihvbGRTdGFydFZub2RlKSkge1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07IC8vIFZub2RlIGhhcyBiZWVuIG1vdmVkIGxlZnRcbiAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGRFbmRWbm9kZSkpIHtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdFbmRJZHgpO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgcmlnaHRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkRW5kVm5vZGUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNVbmRlZihvbGRLZXlUb0lkeCkpIHsgb2xkS2V5VG9JZHggPSBjcmVhdGVLZXlUb09sZElkeChvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7IH1cbiAgICAgICAgaWR4SW5PbGQgPSBpc0RlZihuZXdTdGFydFZub2RlLmtleSlcbiAgICAgICAgICA/IG9sZEtleVRvSWR4W25ld1N0YXJ0Vm5vZGUua2V5XVxuICAgICAgICAgIDogZmluZElkeEluT2xkKG5ld1N0YXJ0Vm5vZGUsIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICAgICAgaWYgKGlzVW5kZWYoaWR4SW5PbGQpKSB7IC8vIE5ldyBlbGVtZW50XG4gICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm5vZGVUb01vdmUgPSBvbGRDaFtpZHhJbk9sZF07XG4gICAgICAgICAgaWYgKHNhbWVWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGNoVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICAgIG9sZENoW2lkeEluT2xkXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCB2bm9kZVRvTW92ZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2FtZSBrZXkgYnV0IGRpZmZlcmVudCBlbGVtZW50LiB0cmVhdCBhcyBuZXcgZWxlbWVudFxuICAgICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9sZFN0YXJ0SWR4ID4gb2xkRW5kSWR4KSB7XG4gICAgICByZWZFbG0gPSBpc1VuZGVmKG5ld0NoW25ld0VuZElkeCArIDFdKSA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS5lbG07XG4gICAgICBhZGRWbm9kZXMocGFyZW50RWxtLCByZWZFbG0sIG5ld0NoLCBuZXdTdGFydElkeCwgbmV3RW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSBpZiAobmV3U3RhcnRJZHggPiBuZXdFbmRJZHgpIHtcbiAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZUtleXMgKGNoaWxkcmVuKSB7XG4gICAgdmFyIHNlZW5LZXlzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZub2RlID0gY2hpbGRyZW5baV07XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5O1xuICAgICAgaWYgKGlzRGVmKGtleSkpIHtcbiAgICAgICAgaWYgKHNlZW5LZXlzW2tleV0pIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgKFwiRHVwbGljYXRlIGtleXMgZGV0ZWN0ZWQ6ICdcIiArIGtleSArIFwiJy4gVGhpcyBtYXkgY2F1c2UgYW4gdXBkYXRlIGVycm9yLlwiKSxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZW5LZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZElkeEluT2xkIChub2RlLCBvbGRDaCwgc3RhcnQsIGVuZCkge1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG9sZENoW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIHNhbWVWbm9kZShub2RlLCBjKSkgeyByZXR1cm4gaSB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF0Y2hWbm9kZSAoXG4gICAgb2xkVm5vZGUsXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXgsXG4gICAgcmVtb3ZlT25seVxuICApIHtcbiAgICBpZiAob2xkVm5vZGUgPT09IHZub2RlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gY2xvbmUgcmV1c2VkIHZub2RlXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTtcblxuICAgIGlmIChpc1RydWUob2xkVm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyKSkge1xuICAgICAgaWYgKGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgaHlkcmF0ZShvbGRWbm9kZS5lbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHJldXNlIGVsZW1lbnQgZm9yIHN0YXRpYyB0cmVlcy5cbiAgICAvLyBub3RlIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIC1cbiAgICAvLyBpZiB0aGUgbmV3IG5vZGUgaXMgbm90IGNsb25lZCBpdCBtZWFucyB0aGUgcmVuZGVyIGZ1bmN0aW9ucyBoYXZlIGJlZW5cbiAgICAvLyByZXNldCBieSB0aGUgaG90LXJlbG9hZC1hcGkgYW5kIHdlIG5lZWQgdG8gZG8gYSBwcm9wZXIgcmUtcmVuZGVyLlxuICAgIGlmIChpc1RydWUodm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICBpc1RydWUob2xkVm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICB2bm9kZS5rZXkgPT09IG9sZFZub2RlLmtleSAmJlxuICAgICAgKGlzVHJ1ZSh2bm9kZS5pc0Nsb25lZCkgfHwgaXNUcnVlKHZub2RlLmlzT25jZSkpXG4gICAgKSB7XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHtcbiAgICAgIGkob2xkVm5vZGUsIHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgb2xkQ2ggPSBvbGRWbm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgY2ggPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnVwZGF0ZS5sZW5ndGg7ICsraSkgeyBjYnMudXBkYXRlW2ldKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS51cGRhdGUpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNVbmRlZih2bm9kZS50ZXh0KSkge1xuICAgICAgaWYgKGlzRGVmKG9sZENoKSAmJiBpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKG9sZENoICE9PSBjaCkgeyB1cGRhdGVDaGlsZHJlbihlbG0sIG9sZENoLCBjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTsgfVxuICAgICAgfSBlbHNlIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2gpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKGVsbSwgb2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5KSB7XG4gICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpc1JlYWxFbGVtZW50ID0gaXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO1xuICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBudWxsLCBudWxsLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcbiAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZVxuICAgICAgICBjcmVhdGVFbG0oXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgIC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4gICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICBvbGRFbG0uX2xlYXZlQ2IgPyBudWxsIDogcGFyZW50RWxtLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0pKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgW29sZFZub2RlXSwgMCwgMCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGFnKSkge1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaXNJbml0aWFsUGF0Y2gpO1xuICAgIHJldHVybiB2bm9kZS5lbG1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGRpcmVjdGl2ZXMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgdXBkYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICBkZXN0cm95OiBmdW5jdGlvbiB1bmJpbmREaXJlY3RpdmVzICh2bm9kZSkge1xuICAgIHVwZGF0ZURpcmVjdGl2ZXModm5vZGUsIGVtcHR5Tm9kZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGl2ZXMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzIHx8IHZub2RlLmRhdGEuZGlyZWN0aXZlcykge1xuICAgIF91cGRhdGUob2xkVm5vZGUsIHZub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGlzQ3JlYXRlID0gb2xkVm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBvbGREaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcywgb2xkVm5vZGUuY29udGV4dCk7XG4gIHZhciBuZXdEaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKHZub2RlLmRhdGEuZGlyZWN0aXZlcywgdm5vZGUuY29udGV4dCk7XG5cbiAgdmFyIGRpcnNXaXRoSW5zZXJ0ID0gW107XG4gIHZhciBkaXJzV2l0aFBvc3RwYXRjaCA9IFtdO1xuXG4gIHZhciBrZXksIG9sZERpciwgZGlyO1xuICBmb3IgKGtleSBpbiBuZXdEaXJzKSB7XG4gICAgb2xkRGlyID0gb2xkRGlyc1trZXldO1xuICAgIGRpciA9IG5ld0RpcnNba2V5XTtcbiAgICBpZiAoIW9sZERpcikge1xuICAgICAgLy8gbmV3IGRpcmVjdGl2ZSwgYmluZFxuICAgICAgY2FsbEhvb2skMShkaXIsICdiaW5kJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuaW5zZXJ0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhJbnNlcnQucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBkaXJlY3RpdmUsIHVwZGF0ZVxuICAgICAgZGlyLm9sZFZhbHVlID0gb2xkRGlyLnZhbHVlO1xuICAgICAgZGlyLm9sZEFyZyA9IG9sZERpci5hcmc7XG4gICAgICBjYWxsSG9vayQxKGRpciwgJ3VwZGF0ZScsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmNvbXBvbmVudFVwZGF0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhQb3N0cGF0Y2gucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aEluc2VydC5sZW5ndGgpIHtcbiAgICB2YXIgY2FsbEluc2VydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhJbnNlcnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aEluc2VydFtpXSwgJ2luc2VydGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChpc0NyZWF0ZSkge1xuICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBjYWxsSW5zZXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbEluc2VydCgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGgpIHtcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aFBvc3RwYXRjaFtpXSwgJ2NvbXBvbmVudFVwZGF0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKCFpc0NyZWF0ZSkge1xuICAgIGZvciAoa2V5IGluIG9sZERpcnMpIHtcbiAgICAgIGlmICghbmV3RGlyc1trZXldKSB7XG4gICAgICAgIC8vIG5vIGxvbmdlciBwcmVzZW50LCB1bmJpbmRcbiAgICAgICAgY2FsbEhvb2skMShvbGREaXJzW2tleV0sICd1bmJpbmQnLCBvbGRWbm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBlbXB0eU1vZGlmaWVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSAoXG4gIGRpcnMsXG4gIHZtXG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmICghZGlycykge1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHJldHVybiByZXNcbiAgfVxuICB2YXIgaSwgZGlyO1xuICBmb3IgKGkgPSAwOyBpIDwgZGlycy5sZW5ndGg7IGkrKykge1xuICAgIGRpciA9IGRpcnNbaV07XG4gICAgaWYgKCFkaXIubW9kaWZpZXJzKSB7XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIGRpci5tb2RpZmllcnMgPSBlbXB0eU1vZGlmaWVycztcbiAgICB9XG4gICAgcmVzW2dldFJhd0Rpck5hbWUoZGlyKV0gPSBkaXI7XG4gICAgZGlyLmRlZiA9IHJlc29sdmVBc3NldCh2bS4kb3B0aW9ucywgJ2RpcmVjdGl2ZXMnLCBkaXIubmFtZSwgdHJ1ZSk7XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2V0UmF3RGlyTmFtZSAoZGlyKSB7XG4gIHJldHVybiBkaXIucmF3TmFtZSB8fCAoKGRpci5uYW1lKSArIFwiLlwiICsgKE9iamVjdC5rZXlzKGRpci5tb2RpZmllcnMgfHwge30pLmpvaW4oJy4nKSkpXG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rJDEgKGRpciwgaG9vaywgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpIHtcbiAgdmFyIGZuID0gZGlyLmRlZiAmJiBkaXIuZGVmW2hvb2tdO1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgZm4odm5vZGUuZWxtLCBkaXIsIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bm9kZS5jb250ZXh0LCAoXCJkaXJlY3RpdmUgXCIgKyAoZGlyLm5hbWUpICsgXCIgXCIgKyBob29rICsgXCIgaG9va1wiKSk7XG4gICAgfVxuICB9XG59XG5cbnZhciBiYXNlTW9kdWxlcyA9IFtcbiAgcmVmLFxuICBkaXJlY3RpdmVzXG5dO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQXR0cnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgb3B0cyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChpc0RlZihvcHRzKSAmJiBvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnMgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5hdHRycykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmF0dHJzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1ciwgb2xkO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKGF0dHJzLl9fb2JfXykpIHtcbiAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICBvbGQgPSBvbGRBdHRyc1trZXldO1xuICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgc2V0QXR0cihlbG0sIGtleSwgY3VyKTtcbiAgICB9XG4gIH1cbiAgLy8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbiAgLy8gIzY2NjY6IElFL0VkZ2UgZm9yY2VzIHByb2dyZXNzIHZhbHVlIGRvd24gdG8gMSBiZWZvcmUgc2V0dGluZyBhIG1heFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKChpc0lFIHx8IGlzRWRnZSkgJiYgYXR0cnMudmFsdWUgIT09IG9sZEF0dHJzLnZhbHVlKSB7XG4gICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcbiAgfVxuICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgIGlmIChpc1VuZGVmKGF0dHJzW2tleV0pKSB7XG4gICAgICBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoZWwudGFnTmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChpc0Jvb2xlYW5BdHRyKGtleSkpIHtcbiAgICAvLyBzZXQgYXR0cmlidXRlIGZvciBibGFuayB2YWx1ZVxuICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGVjaG5pY2FsbHkgYWxsb3dmdWxsc2NyZWVuIGlzIGEgYm9vbGVhbiBhdHRyaWJ1dGUgZm9yIDxpZnJhbWU+LFxuICAgICAgLy8gYnV0IEZsYXNoIGV4cGVjdHMgYSB2YWx1ZSBvZiBcInRydWVcIiB3aGVuIHVzZWQgb24gPGVtYmVkPiB0YWdcbiAgICAgIHZhbHVlID0ga2V5ID09PSAnYWxsb3dmdWxsc2NyZWVuJyAmJiBlbC50YWdOYW1lID09PSAnRU1CRUQnXG4gICAgICAgID8gJ3RydWUnXG4gICAgICAgIDoga2V5O1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBjb252ZXJ0RW51bWVyYXRlZFZhbHVlKGtleSwgdmFsdWUpKTtcbiAgfSBlbHNlIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlTlMoeGxpbmtOUywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlU2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gIzcxMzg6IElFMTAgJiAxMSBmaXJlcyBpbnB1dCBldmVudCB3aGVuIHNldHRpbmcgcGxhY2Vob2xkZXIgb25cbiAgICAvLyA8dGV4dGFyZWE+Li4uIGJsb2NrIHRoZSBmaXJzdCBpbnB1dCBldmVudCBhbmQgcmVtb3ZlIHRoZSBibG9ja2VyXG4gICAgLy8gaW1tZWRpYXRlbHkuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKFxuICAgICAgaXNJRSAmJiAhaXNJRTkgJiZcbiAgICAgIGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScgJiZcbiAgICAgIGtleSA9PT0gJ3BsYWNlaG9sZGVyJyAmJiB2YWx1ZSAhPT0gJycgJiYgIWVsLl9faWVwaFxuICAgICkge1xuICAgICAgdmFyIGJsb2NrZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgfTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIGVsLl9faWVwaCA9IHRydWU7IC8qIElFIHBsYWNlaG9sZGVyIHBhdGNoZWQgKi9cbiAgICB9XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICB9XG59XG5cbnZhciBhdHRycyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVBdHRycyxcbiAgdXBkYXRlOiB1cGRhdGVBdHRyc1xufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcbiAgaWYgKFxuICAgIGlzVW5kZWYoZGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICBpc1VuZGVmKGRhdGEuY2xhc3MpICYmIChcbiAgICAgIGlzVW5kZWYob2xkRGF0YSkgfHwgKFxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5jbGFzcylcbiAgICAgIClcbiAgICApXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNscyA9IGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpO1xuXG4gIC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXNcbiAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcztcbiAgaWYgKGlzRGVmKHRyYW5zaXRpb25DbGFzcykpIHtcbiAgICBjbHMgPSBjb25jYXQoY2xzLCBzdHJpbmdpZnlDbGFzcyh0cmFuc2l0aW9uQ2xhc3MpKTtcbiAgfVxuXG4gIC8vIHNldCB0aGUgY2xhc3NcbiAgaWYgKGNscyAhPT0gZWwuX3ByZXZDbGFzcykge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpO1xuICAgIGVsLl9wcmV2Q2xhc3MgPSBjbHM7XG4gIH1cbn1cblxudmFyIGtsYXNzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUNsYXNzLFxuICB1cGRhdGU6IHVwZGF0ZUNsYXNzXG59O1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZVxuLy8gc28gd2UgdXNlZCBzb21lIHJlc2VydmVkIHRva2VucyBkdXJpbmcgY29tcGlsZS5cbnZhciBSQU5HRV9UT0tFTiA9ICdfX3InO1xudmFyIENIRUNLQk9YX1JBRElPX1RPS0VOID0gJ19fYyc7XG5cbi8qICAqL1xuXG4vLyBub3JtYWxpemUgdi1tb2RlbCBldmVudCB0b2tlbnMgdGhhdCBjYW4gb25seSBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWUuXG4vLyBpdCdzIGltcG9ydGFudCB0byBwbGFjZSB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGluIHRoZSBhcnJheSBiZWNhdXNlXG4vLyB0aGUgd2hvbGUgcG9pbnQgaXMgZW5zdXJpbmcgdGhlIHYtbW9kZWwgY2FsbGJhY2sgZ2V0cyBjYWxsZWQgYmVmb3JlXG4vLyB1c2VyLWF0dGFjaGVkIGhhbmRsZXJzLlxuZnVuY3Rpb24gbm9ybWFsaXplRXZlbnRzIChvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW1JBTkdFX1RPS0VOXSkpIHtcbiAgICAvLyBJRSBpbnB1dFt0eXBlPXJhbmdlXSBvbmx5IHN1cHBvcnRzIGBjaGFuZ2VgIGV2ZW50XG4gICAgdmFyIGV2ZW50ID0gaXNJRSA/ICdjaGFuZ2UnIDogJ2lucHV0JztcbiAgICBvbltldmVudF0gPSBbXS5jb25jYXQob25bUkFOR0VfVE9LRU5dLCBvbltldmVudF0gfHwgW10pO1xuICAgIGRlbGV0ZSBvbltSQU5HRV9UT0tFTl07XG4gIH1cbiAgLy8gVGhpcyB3YXMgb3JpZ2luYWxseSBpbnRlbmRlZCB0byBmaXggIzQ1MjEgYnV0IG5vIGxvbmdlciBuZWNlc3NhcnlcbiAgLy8gYWZ0ZXIgMi41LiBLZWVwaW5nIGl0IGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggZ2VuZXJhdGVkIGNvZGUgZnJvbSA8IDIuNFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSkpIHtcbiAgICBvbi5jaGFuZ2UgPSBbXS5jb25jYXQob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dLCBvbi5jaGFuZ2UgfHwgW10pO1xuICAgIGRlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07XG4gIH1cbn1cblxudmFyIHRhcmdldCQxO1xuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciQxIChldmVudCwgaGFuZGxlciwgY2FwdHVyZSkge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldCQxOyAvLyBzYXZlIGN1cnJlbnQgdGFyZ2V0IGVsZW1lbnQgaW4gY2xvc3VyZVxuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBoYW5kbGVyLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgcmVtb3ZlJDIoZXZlbnQsIG9uY2VIYW5kbGVyLCBjYXB0dXJlLCBfdGFyZ2V0KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gIzk0NDY6IEZpcmVmb3ggPD0gNTMgKGluIHBhcnRpY3VsYXIsIEVTUiA1MikgaGFzIGluY29ycmVjdCBFdmVudC50aW1lU3RhbXBcbi8vIGltcGxlbWVudGF0aW9uIGFuZCBkb2VzIG5vdCBmaXJlIG1pY3JvdGFza3MgaW4gYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbiwgc29cbi8vIHNhZmUgdG8gZXhjbHVkZS5cbnZhciB1c2VNaWNyb3Rhc2tGaXggPSBpc1VzaW5nTWljcm9UYXNrICYmICEoaXNGRiAmJiBOdW1iZXIoaXNGRlsxXSkgPD0gNTMpO1xuXG5mdW5jdGlvbiBhZGQkMSAoXG4gIG5hbWUsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIHBhc3NpdmVcbikge1xuICAvLyBhc3luYyBlZGdlIGNhc2UgIzY1NjY6IGlubmVyIGNsaWNrIGV2ZW50IHRyaWdnZXJzIHBhdGNoLCBldmVudCBoYW5kbGVyXG4gIC8vIGF0dGFjaGVkIHRvIG91dGVyIGVsZW1lbnQgZHVyaW5nIHBhdGNoLCBhbmQgdHJpZ2dlcmVkIGFnYWluLiBUaGlzXG4gIC8vIGhhcHBlbnMgYmVjYXVzZSBicm93c2VycyBmaXJlIG1pY3JvdGFzayB0aWNrcyBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLlxuICAvLyB0aGUgc29sdXRpb24gaXMgc2ltcGxlOiB3ZSBzYXZlIHRoZSB0aW1lc3RhbXAgd2hlbiBhIGhhbmRsZXIgaXMgYXR0YWNoZWQsXG4gIC8vIGFuZCB0aGUgaGFuZGxlciB3b3VsZCBvbmx5IGZpcmUgaWYgdGhlIGV2ZW50IHBhc3NlZCB0byBpdCB3YXMgZmlyZWRcbiAgLy8gQUZURVIgaXQgd2FzIGF0dGFjaGVkLlxuICBpZiAodXNlTWljcm90YXNrRml4KSB7XG4gICAgdmFyIGF0dGFjaGVkVGltZXN0YW1wID0gY3VycmVudEZsdXNoVGltZXN0YW1wO1xuICAgIHZhciBvcmlnaW5hbCA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IG9yaWdpbmFsLl93cmFwcGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm8gYnViYmxpbmcsIHNob3VsZCBhbHdheXMgZmlyZS5cbiAgICAgICAgLy8gdGhpcyBpcyBqdXN0IGEgc2FmZXR5IG5ldCBpbiBjYXNlIGV2ZW50LnRpbWVTdGFtcCBpcyB1bnJlbGlhYmxlIGluXG4gICAgICAgIC8vIGNlcnRhaW4gd2VpcmQgZW52aXJvbm1lbnRzLi4uXG4gICAgICAgIGUudGFyZ2V0ID09PSBlLmN1cnJlbnRUYXJnZXQgfHxcbiAgICAgICAgLy8gZXZlbnQgaXMgZmlyZWQgYWZ0ZXIgaGFuZGxlciBhdHRhY2htZW50XG4gICAgICAgIGUudGltZVN0YW1wID49IGF0dGFjaGVkVGltZXN0YW1wIHx8XG4gICAgICAgIC8vIGJhaWwgZm9yIGVudmlyb25tZW50cyB0aGF0IGhhdmUgYnVnZ3kgZXZlbnQudGltZVN0YW1wIGltcGxlbWVudGF0aW9uc1xuICAgICAgICAvLyAjOTQ2MiBpT1MgOSBidWc6IGV2ZW50LnRpbWVTdGFtcCBpcyAwIGFmdGVyIGhpc3RvcnkucHVzaFN0YXRlXG4gICAgICAgIC8vICM5NjgxIFF0V2ViRW5naW5lIGV2ZW50LnRpbWVTdGFtcCBpcyBuZWdhdGl2ZSB2YWx1ZVxuICAgICAgICBlLnRpbWVTdGFtcCA8PSAwIHx8XG4gICAgICAgIC8vICM5NDQ4IGJhaWwgaWYgZXZlbnQgaXMgZmlyZWQgaW4gYW5vdGhlciBkb2N1bWVudCBpbiBhIG11bHRpLXBhZ2VcbiAgICAgICAgLy8gZWxlY3Ryb24vbncuanMgYXBwLCBzaW5jZSBldmVudC50aW1lU3RhbXAgd2lsbCBiZSB1c2luZyBhIGRpZmZlcmVudFxuICAgICAgICAvLyBzdGFydGluZyByZWZlcmVuY2VcbiAgICAgICAgZS50YXJnZXQub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnRcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgdGFyZ2V0JDEuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBuYW1lLFxuICAgIGhhbmRsZXIsXG4gICAgc3VwcG9ydHNQYXNzaXZlXG4gICAgICA/IHsgY2FwdHVyZTogY2FwdHVyZSwgcGFzc2l2ZTogcGFzc2l2ZSB9XG4gICAgICA6IGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDIgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBfdGFyZ2V0XG4pIHtcbiAgKF90YXJnZXQgfHwgdGFyZ2V0JDEpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLl93cmFwcGVyIHx8IGhhbmRsZXIsXG4gICAgY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLm9uKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEub24pKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9uID0gdm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdmFyIG9sZE9uID0gb2xkVm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdGFyZ2V0JDEgPSB2bm9kZS5lbG07XG4gIG5vcm1hbGl6ZUV2ZW50cyhvbik7XG4gIHVwZGF0ZUxpc3RlbmVycyhvbiwgb2xkT24sIGFkZCQxLCByZW1vdmUkMiwgY3JlYXRlT25jZUhhbmRsZXIkMSwgdm5vZGUuY29udGV4dCk7XG4gIHRhcmdldCQxID0gdW5kZWZpbmVkO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycyxcbiAgdXBkYXRlOiB1cGRhdGVET01MaXN0ZW5lcnNcbn07XG5cbi8qICAqL1xuXG52YXIgc3ZnQ29udGFpbmVyO1xuXG5mdW5jdGlvbiB1cGRhdGVET01Qcm9wcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuZG9tUHJvcHMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5kb21Qcm9wcykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXI7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRQcm9wcyA9IG9sZFZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIHZhciBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYocHJvcHMuX19vYl9fKSkge1xuICAgIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyA9IGV4dGVuZCh7fSwgcHJvcHMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICBpZiAoIShrZXkgaW4gcHJvcHMpKSB7XG4gICAgICBlbG1ba2V5XSA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoa2V5IGluIHByb3BzKSB7XG4gICAgY3VyID0gcHJvcHNba2V5XTtcbiAgICAvLyBpZ25vcmUgY2hpbGRyZW4gaWYgdGhlIG5vZGUgaGFzIHRleHRDb250ZW50IG9yIGlubmVySFRNTCxcbiAgICAvLyBhcyB0aGVzZSB3aWxsIHRocm93IGF3YXkgZXhpc3RpbmcgRE9NIG5vZGVzIGFuZCBjYXVzZSByZW1vdmFsIGVycm9yc1xuICAgIC8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApXG4gICAgaWYgKGtleSA9PT0gJ3RleHRDb250ZW50JyB8fCBrZXkgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgICBpZiAodm5vZGUuY2hpbGRyZW4pIHsgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoID0gMDsgfVxuICAgICAgaWYgKGN1ciA9PT0gb2xkUHJvcHNba2V5XSkgeyBjb250aW51ZSB9XG4gICAgICAvLyAjNjYwMSB3b3JrIGFyb3VuZCBDaHJvbWUgdmVyc2lvbiA8PSA1NSBidWcgd2hlcmUgc2luZ2xlIHRleHROb2RlXG4gICAgICAvLyByZXBsYWNlZCBieSBpbm5lckhUTUwvdGV4dENvbnRlbnQgcmV0YWlucyBpdHMgcGFyZW50Tm9kZSBwcm9wZXJ0eVxuICAgICAgaWYgKGVsbS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICd2YWx1ZScgJiYgZWxtLnRhZ05hbWUgIT09ICdQUk9HUkVTUycpIHtcbiAgICAgIC8vIHN0b3JlIHZhbHVlIGFzIF92YWx1ZSBhcyB3ZWxsIHNpbmNlXG4gICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkXG4gICAgICBlbG0uX3ZhbHVlID0gY3VyO1xuICAgICAgLy8gYXZvaWQgcmVzZXR0aW5nIGN1cnNvciBwb3NpdGlvbiB3aGVuIHZhbHVlIGlzIHRoZSBzYW1lXG4gICAgICB2YXIgc3RyQ3VyID0gaXNVbmRlZihjdXIpID8gJycgOiBTdHJpbmcoY3VyKTtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVWYWx1ZShlbG0sIHN0ckN1cikpIHtcbiAgICAgICAgZWxtLnZhbHVlID0gc3RyQ3VyO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaW5uZXJIVE1MJyAmJiBpc1NWRyhlbG0udGFnTmFtZSkgJiYgaXNVbmRlZihlbG0uaW5uZXJIVE1MKSkge1xuICAgICAgLy8gSUUgZG9lc24ndCBzdXBwb3J0IGlubmVySFRNTCBmb3IgU1ZHIGVsZW1lbnRzXG4gICAgICBzdmdDb250YWluZXIgPSBzdmdDb250YWluZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzdmdDb250YWluZXIuaW5uZXJIVE1MID0gXCI8c3ZnPlwiICsgY3VyICsgXCI8L3N2Zz5cIjtcbiAgICAgIHZhciBzdmcgPSBzdmdDb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICAgIHdoaWxlIChlbG0uZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHN2Zy5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsbS5hcHBlbmRDaGlsZChzdmcuZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIC8vIHNraXAgdGhlIHVwZGF0ZSBpZiBvbGQgYW5kIG5ldyBWRE9NIHN0YXRlIGlzIHRoZSBzYW1lLlxuICAgICAgLy8gYHZhbHVlYCBpcyBoYW5kbGVkIHNlcGFyYXRlbHkgYmVjYXVzZSB0aGUgRE9NIHZhbHVlIG1heSBiZSB0ZW1wb3JhcmlseVxuICAgICAgLy8gb3V0IG9mIHN5bmMgd2l0aCBWRE9NIHN0YXRlIGR1ZSB0byBmb2N1cywgY29tcG9zaXRpb24gYW5kIG1vZGlmaWVycy5cbiAgICAgIC8vIFRoaXMgICM0NTIxIGJ5IHNraXBwaW5nIHRoZSB1bm5lY2VzYXJyeSBgY2hlY2tlZGAgdXBkYXRlLlxuICAgICAgY3VyICE9PSBvbGRQcm9wc1trZXldXG4gICAgKSB7XG4gICAgICAvLyBzb21lIHByb3BlcnR5IHVwZGF0ZXMgY2FuIHRocm93XG4gICAgICAvLyBlLmcuIGB2YWx1ZWAgb24gPHByb2dyZXNzPiB3LyBub24tZmluaXRlIHZhbHVlXG4gICAgICB0cnkge1xuICAgICAgICBlbG1ba2V5XSA9IGN1cjtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuICB9XG59XG5cbi8vIGNoZWNrIHBsYXRmb3Jtcy93ZWIvdXRpbC9hdHRycy5qcyBhY2NlcHRWYWx1ZVxuXG5cbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVZhbHVlIChlbG0sIGNoZWNrVmFsKSB7XG4gIHJldHVybiAoIWVsbS5jb21wb3NpbmcgJiYgKFxuICAgIGVsbS50YWdOYW1lID09PSAnT1BUSU9OJyB8fFxuICAgIGlzTm90SW5Gb2N1c0FuZERpcnR5KGVsbSwgY2hlY2tWYWwpIHx8XG4gICAgaXNEaXJ0eVdpdGhNb2RpZmllcnMoZWxtLCBjaGVja1ZhbClcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNOb3RJbkZvY3VzQW5kRGlydHkgKGVsbSwgY2hlY2tWYWwpIHtcbiAgLy8gcmV0dXJuIHRydWUgd2hlbiB0ZXh0Ym94ICgubnVtYmVyIGFuZCAudHJpbSkgbG9zZXMgZm9jdXMgYW5kIGl0cyB2YWx1ZSBpc1xuICAvLyBub3QgZXF1YWwgdG8gdGhlIHVwZGF0ZWQgdmFsdWVcbiAgdmFyIG5vdEluRm9jdXMgPSB0cnVlO1xuICAvLyAjNjE1N1xuICAvLyB3b3JrIGFyb3VuZCBJRSBidWcgd2hlbiBhY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbiBhbiBpZnJhbWVcbiAgdHJ5IHsgbm90SW5Gb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGVsbTsgfSBjYXRjaCAoZSkge31cbiAgcmV0dXJuIG5vdEluRm9jdXMgJiYgZWxtLnZhbHVlICE9PSBjaGVja1ZhbFxufVxuXG5mdW5jdGlvbiBpc0RpcnR5V2l0aE1vZGlmaWVycyAoZWxtLCBuZXdWYWwpIHtcbiAgdmFyIHZhbHVlID0gZWxtLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gZWxtLl92TW9kaWZpZXJzOyAvLyBpbmplY3RlZCBieSB2LW1vZGVsIHJ1bnRpbWVcbiAgaWYgKGlzRGVmKG1vZGlmaWVycykpIHtcbiAgICBpZiAobW9kaWZpZXJzLm51bWJlcikge1xuICAgICAgcmV0dXJuIHRvTnVtYmVyKHZhbHVlKSAhPT0gdG9OdW1iZXIobmV3VmFsKVxuICAgIH1cbiAgICBpZiAobW9kaWZpZXJzLnRyaW0pIHtcbiAgICAgIHJldHVybiB2YWx1ZS50cmltKCkgIT09IG5ld1ZhbC50cmltKClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlICE9PSBuZXdWYWxcbn1cblxudmFyIGRvbVByb3BzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTVByb3BzLFxuICB1cGRhdGU6IHVwZGF0ZURPTVByb3BzXG59O1xuXG4vKiAgKi9cblxudmFyIHBhcnNlU3R5bGVUZXh0ID0gY2FjaGVkKGZ1bmN0aW9uIChjc3NUZXh0KSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGxpc3REZWxpbWl0ZXIgPSAvOyg/IVteKF0qXFwpKS9nO1xuICB2YXIgcHJvcGVydHlEZWxpbWl0ZXIgPSAvOiguKykvO1xuICBjc3NUZXh0LnNwbGl0KGxpc3REZWxpbWl0ZXIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgdmFyIHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXIpO1xuICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vLyBtZXJnZSBzdGF0aWMgYW5kIGR5bmFtaWMgc3R5bGUgZGF0YSBvbiB0aGUgc2FtZSB2bm9kZVxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVEYXRhIChkYXRhKSB7XG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyhkYXRhLnN0eWxlKTtcbiAgLy8gc3RhdGljIHN0eWxlIGlzIHByZS1wcm9jZXNzZWQgaW50byBhbiBvYmplY3QgZHVyaW5nIGNvbXBpbGF0aW9uXG4gIC8vIGFuZCBpcyBhbHdheXMgYSBmcmVzaCBvYmplY3QsIHNvIGl0J3Mgc2FmZSB0byBtZXJnZSBpbnRvIGl0XG4gIHJldHVybiBkYXRhLnN0YXRpY1N0eWxlXG4gICAgPyBleHRlbmQoZGF0YS5zdGF0aWNTdHlsZSwgc3R5bGUpXG4gICAgOiBzdHlsZVxufVxuXG4vLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0XG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZUJpbmRpbmcgKGJpbmRpbmdTdHlsZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShiaW5kaW5nU3R5bGUpKSB7XG4gICAgcmV0dXJuIHRvT2JqZWN0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICBpZiAodHlwZW9mIGJpbmRpbmdTdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGFyc2VTdHlsZVRleHQoYmluZGluZ1N0eWxlKVxuICB9XG4gIHJldHVybiBiaW5kaW5nU3R5bGVcbn1cblxuLyoqXG4gKiBwYXJlbnQgY29tcG9uZW50IHN0eWxlIHNob3VsZCBiZSBhZnRlciBjaGlsZCdzXG4gKiBzbyB0aGF0IHBhcmVudCBjb21wb25lbnQncyBzdHlsZSBjb3VsZCBvdmVycmlkZSBpdFxuICovXG5mdW5jdGlvbiBnZXRTdHlsZSAodm5vZGUsIGNoZWNrQ2hpbGQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgc3R5bGVEYXRhO1xuXG4gIGlmIChjaGVja0NoaWxkKSB7XG4gICAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoXG4gICAgICAgIGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSAmJlxuICAgICAgICAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKGNoaWxkTm9kZS5kYXRhKSlcbiAgICAgICkge1xuICAgICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICgoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHZub2RlLmRhdGEpKSkge1xuICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gIH1cblxuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB3aGlsZSAoKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEocGFyZW50Tm9kZS5kYXRhKSkpIHtcbiAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBjc3NWYXJSRSA9IC9eLS0vO1xudmFyIGltcG9ydGFudFJFID0gL1xccyohaW1wb3J0YW50JC87XG52YXIgc2V0UHJvcCA9IGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoY3NzVmFyUkUudGVzdChuYW1lKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbCk7XG4gIH0gZWxzZSBpZiAoaW1wb3J0YW50UkUudGVzdCh2YWwpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoaHlwaGVuYXRlKG5hbWUpLCB2YWwucmVwbGFjZShpbXBvcnRhbnRSRSwgJycpLCAnaW1wb3J0YW50Jyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG5vcm1hbGl6ZWROYW1lID0gbm9ybWFsaXplKG5hbWUpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIC8vIFN1cHBvcnQgdmFsdWVzIGFycmF5IGNyZWF0ZWQgYnkgYXV0b3ByZWZpeGVyLCBlLmcuXG4gICAgICAvLyB7ZGlzcGxheTogW1wiLXdlYmtpdC1ib3hcIiwgXCItbXMtZmxleGJveFwiLCBcImZsZXhcIl19XG4gICAgICAvLyBTZXQgdGhlbSBvbmUgYnkgb25lLCBhbmQgdGhlIGJyb3dzZXIgd2lsbCBvbmx5IHNldCB0aG9zZSBpdCBjYW4gcmVjb2duaXplXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdmFsLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHZlbmRvck5hbWVzID0gWydXZWJraXQnLCAnTW96JywgJ21zJ107XG5cbnZhciBlbXB0eVN0eWxlO1xudmFyIG5vcm1hbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAocHJvcCkge1xuICBlbXB0eVN0eWxlID0gZW1wdHlTdHlsZSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcbiAgcHJvcCA9IGNhbWVsaXplKHByb3ApO1xuICBpZiAocHJvcCAhPT0gJ2ZpbHRlcicgJiYgKHByb3AgaW4gZW1wdHlTdHlsZSkpIHtcbiAgICByZXR1cm4gcHJvcFxuICB9XG4gIHZhciBjYXBOYW1lID0gcHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3Auc2xpY2UoMSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9yTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbmFtZSA9IHZlbmRvck5hbWVzW2ldICsgY2FwTmFtZTtcbiAgICBpZiAobmFtZSBpbiBlbXB0eVN0eWxlKSB7XG4gICAgICByZXR1cm4gbmFtZVxuICAgIH1cbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG5cbiAgaWYgKGlzVW5kZWYoZGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihkYXRhLnN0eWxlKSAmJlxuICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihvbGREYXRhLnN0eWxlKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjdXIsIG5hbWU7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFN0YXRpY1N0eWxlID0gb2xkRGF0YS5zdGF0aWNTdHlsZTtcbiAgdmFyIG9sZFN0eWxlQmluZGluZyA9IG9sZERhdGEubm9ybWFsaXplZFN0eWxlIHx8IG9sZERhdGEuc3R5bGUgfHwge307XG5cbiAgLy8gaWYgc3RhdGljIHN0eWxlIGV4aXN0cywgc3R5bGViaW5kaW5nIGFscmVhZHkgbWVyZ2VkIGludG8gaXQgd2hlbiBkb2luZyBub3JtYWxpemVTdHlsZURhdGFcbiAgdmFyIG9sZFN0eWxlID0gb2xkU3RhdGljU3R5bGUgfHwgb2xkU3R5bGVCaW5kaW5nO1xuXG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyh2bm9kZS5kYXRhLnN0eWxlKSB8fCB7fTtcblxuICAvLyBzdG9yZSBub3JtYWxpemVkIHN0eWxlIHVuZGVyIGEgZGlmZmVyZW50IGtleSBmb3IgbmV4dCBkaWZmXG4gIC8vIG1ha2Ugc3VyZSB0byBjbG9uZSBpdCBpZiBpdCdzIHJlYWN0aXZlLCBzaW5jZSB0aGUgdXNlciBsaWtlbHkgd2FudHNcbiAgLy8gdG8gbXV0YXRlIGl0LlxuICB2bm9kZS5kYXRhLm5vcm1hbGl6ZWRTdHlsZSA9IGlzRGVmKHN0eWxlLl9fb2JfXylcbiAgICA/IGV4dGVuZCh7fSwgc3R5bGUpXG4gICAgOiBzdHlsZTtcblxuICB2YXIgbmV3U3R5bGUgPSBnZXRTdHlsZSh2bm9kZSwgdHJ1ZSk7XG5cbiAgZm9yIChuYW1lIGluIG9sZFN0eWxlKSB7XG4gICAgaWYgKGlzVW5kZWYobmV3U3R5bGVbbmFtZV0pKSB7XG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCAnJyk7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBuZXdTdHlsZSkge1xuICAgIGN1ciA9IG5ld1N0eWxlW25hbWVdO1xuICAgIGlmIChjdXIgIT09IG9sZFN0eWxlW25hbWVdKSB7XG4gICAgICAvLyBpZTkgc2V0dGluZyB0byBudWxsIGhhcyBubyBlZmZlY3QsIG11c3QgdXNlIGVtcHR5IHN0cmluZ1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgY3VyID09IG51bGwgPyAnJyA6IGN1cik7XG4gICAgfVxuICB9XG59XG5cbnZhciBzdHlsZSA9IHtcbiAgY3JlYXRlOiB1cGRhdGVTdHlsZSxcbiAgdXBkYXRlOiB1cGRhdGVTdHlsZVxufTtcblxuLyogICovXG5cbnZhciB3aGl0ZXNwYWNlUkUgPSAvXFxzKy87XG5cbi8qKlxuICogQWRkIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gYWRkQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QuYWRkKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIGlmIChjdXIuaW5kZXhPZignICcgKyBjbHMgKyAnICcpIDwgMCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIChjdXIgKyBjbHMpLnRyaW0oKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuICAgIH1cbiAgICBpZiAoIWVsLmNsYXNzTGlzdC5sZW5ndGgpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICB2YXIgdGFyID0gJyAnICsgY2xzICsgJyAnO1xuICAgIHdoaWxlIChjdXIuaW5kZXhPZih0YXIpID49IDApIHtcbiAgICAgIGN1ciA9IGN1ci5yZXBsYWNlKHRhciwgJyAnKTtcbiAgICB9XG4gICAgY3VyID0gY3VyLnRyaW0oKTtcbiAgICBpZiAoY3VyKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb24gKGRlZiQkMSkge1xuICBpZiAoIWRlZiQkMSkge1xuICAgIHJldHVyblxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0eXBlb2YgZGVmJCQxID09PSAnb2JqZWN0Jykge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBpZiAoZGVmJCQxLmNzcyAhPT0gZmFsc2UpIHtcbiAgICAgIGV4dGVuZChyZXMsIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMS5uYW1lIHx8ICd2JykpO1xuICAgIH1cbiAgICBleHRlbmQocmVzLCBkZWYkJDEpO1xuICAgIHJldHVybiByZXNcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmJCQxID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEpXG4gIH1cbn1cblxudmFyIGF1dG9Dc3NUcmFuc2l0aW9uID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiB7XG4gICAgZW50ZXJDbGFzczogKG5hbWUgKyBcIi1lbnRlclwiKSxcbiAgICBlbnRlclRvQ2xhc3M6IChuYW1lICsgXCItZW50ZXItdG9cIiksXG4gICAgZW50ZXJBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1lbnRlci1hY3RpdmVcIiksXG4gICAgbGVhdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZVwiKSxcbiAgICBsZWF2ZVRvQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtdG9cIiksXG4gICAgbGVhdmVBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZS1hY3RpdmVcIilcbiAgfVxufSk7XG5cbnZhciBoYXNUcmFuc2l0aW9uID0gaW5Ccm93c2VyICYmICFpc0lFOTtcbnZhciBUUkFOU0lUSU9OID0gJ3RyYW5zaXRpb24nO1xudmFyIEFOSU1BVElPTiA9ICdhbmltYXRpb24nO1xuXG4vLyBUcmFuc2l0aW9uIHByb3BlcnR5L2V2ZW50IHNuaWZmaW5nXG52YXIgdHJhbnNpdGlvblByb3AgPSAndHJhbnNpdGlvbic7XG52YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3RyYW5zaXRpb25lbmQnO1xudmFyIGFuaW1hdGlvblByb3AgPSAnYW5pbWF0aW9uJztcbnZhciBhbmltYXRpb25FbmRFdmVudCA9ICdhbmltYXRpb25lbmQnO1xuaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgdHJhbnNpdGlvblByb3AgPSAnV2Via2l0VHJhbnNpdGlvbic7XG4gICAgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQnO1xuICB9XG4gIGlmICh3aW5kb3cub25hbmltYXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIGFuaW1hdGlvblByb3AgPSAnV2Via2l0QW5pbWF0aW9uJztcbiAgICBhbmltYXRpb25FbmRFdmVudCA9ICd3ZWJraXRBbmltYXRpb25FbmQnO1xuICB9XG59XG5cbi8vIGJpbmRpbmcgdG8gd2luZG93IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGhvdCByZWxvYWQgd29yayBpbiBJRSBpbiBzdHJpY3QgbW9kZVxudmFyIHJhZiA9IGluQnJvd3NlclxuICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpXG4gICAgOiBzZXRUaW1lb3V0XG4gIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gZnVuY3Rpb24gKGZuKSB7IHJldHVybiBmbigpOyB9O1xuXG5mdW5jdGlvbiBuZXh0RnJhbWUgKGZuKSB7XG4gIHJhZihmdW5jdGlvbiAoKSB7XG4gICAgcmFmKGZuKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzZXMgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXMgfHwgKGVsLl90cmFuc2l0aW9uQ2xhc3NlcyA9IFtdKTtcbiAgaWYgKHRyYW5zaXRpb25DbGFzc2VzLmluZGV4T2YoY2xzKSA8IDApIHtcbiAgICB0cmFuc2l0aW9uQ2xhc3Nlcy5wdXNoKGNscyk7XG4gICAgYWRkQ2xhc3MoZWwsIGNscyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICByZW1vdmUoZWwuX3RyYW5zaXRpb25DbGFzc2VzLCBjbHMpO1xuICB9XG4gIHJlbW92ZUNsYXNzKGVsLCBjbHMpO1xufVxuXG5mdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMgKFxuICBlbCxcbiAgZXhwZWN0ZWRUeXBlLFxuICBjYlxuKSB7XG4gIHZhciByZWYgPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKTtcbiAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgdmFyIHRpbWVvdXQgPSByZWYudGltZW91dDtcbiAgdmFyIHByb3BDb3VudCA9IHJlZi5wcm9wQ291bnQ7XG4gIGlmICghdHlwZSkgeyByZXR1cm4gY2IoKSB9XG4gIHZhciBldmVudCA9IHR5cGUgPT09IFRSQU5TSVRJT04gPyB0cmFuc2l0aW9uRW5kRXZlbnQgOiBhbmltYXRpb25FbmRFdmVudDtcbiAgdmFyIGVuZGVkID0gMDtcbiAgdmFyIGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG4gICAgY2IoKTtcbiAgfTtcbiAgdmFyIG9uRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGVsKSB7XG4gICAgICBpZiAoKytlbmRlZCA+PSBwcm9wQ291bnQpIHtcbiAgICAgICAgZW5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcbiAgICAgIGVuZCgpO1xuICAgIH1cbiAgfSwgdGltZW91dCArIDEpO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG59XG5cbnZhciB0cmFuc2Zvcm1SRSA9IC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87XG5cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvIChlbCwgZXhwZWN0ZWRUeXBlKSB7XG4gIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIC8vIEpTRE9NIG1heSByZXR1cm4gdW5kZWZpbmVkIGZvciB0cmFuc2l0aW9uIHByb3BlcnRpZXNcbiAgdmFyIHRyYW5zaXRpb25EZWxheXMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uVGltZW91dCA9IGdldFRpbWVvdXQodHJhbnNpdGlvbkRlbGF5cywgdHJhbnNpdGlvbkR1cmF0aW9ucyk7XG4gIHZhciBhbmltYXRpb25EZWxheXMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG5cbiAgdmFyIHR5cGU7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgdmFyIHByb3BDb3VudCA9IDA7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7XG4gICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IFRSQU5TSVRJT047XG4gICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcbiAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBBTklNQVRJT047XG4gICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgdHlwZSA9IHRpbWVvdXQgPiAwXG4gICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxuICAgICAgICA/IFRSQU5TSVRJT05cbiAgICAgICAgOiBBTklNQVRJT05cbiAgICAgIDogbnVsbDtcbiAgICBwcm9wQ291bnQgPSB0eXBlXG4gICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cbiAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuICB2YXIgaGFzVHJhbnNmb3JtID1cbiAgICB0eXBlID09PSBUUkFOU0lUSU9OICYmXG4gICAgdHJhbnNmb3JtUkUudGVzdChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnUHJvcGVydHknXSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIHByb3BDb3VudDogcHJvcENvdW50LFxuICAgIGhhc1RyYW5zZm9ybTogaGFzVHJhbnNmb3JtXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZW91dCAoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKVxuICB9KSlcbn1cblxuLy8gT2xkIHZlcnNpb25zIG9mIENocm9taXVtIChiZWxvdyA2MS4wLjMxNjMuMTAwKSBmb3JtYXRzIGZsb2F0aW5nIHBvaW50ZXIgbnVtYmVyc1xuLy8gaW4gYSBsb2NhbGUtZGVwZW5kZW50IHdheSwgdXNpbmcgYSBjb21tYSBpbnN0ZWFkIG9mIGEgZG90LlxuLy8gSWYgY29tbWEgaXMgbm90IHJlcGxhY2VkIHdpdGggYSBkb3QsIHRoZSBpbnB1dCB3aWxsIGJlIHJvdW5kZWQgZG93biAoaS5lLiBhY3Rpbmdcbi8vIGFzIGEgZmxvb3IgZnVuY3Rpb24pIGNhdXNpbmcgdW5leHBlY3RlZCBiZWhhdmlvcnNcbmZ1bmN0aW9uIHRvTXMgKHMpIHtcbiAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKS5yZXBsYWNlKCcsJywgJy4nKSkgKiAxMDAwXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnRlciAodm5vZGUsIHRvZ2dsZURpc3BsYXkpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgbGVhdmUgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICBlbC5fbGVhdmVDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9sZWF2ZUNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGVudGVyQ2xhc3MgPSBkYXRhLmVudGVyQ2xhc3M7XG4gIHZhciBlbnRlclRvQ2xhc3MgPSBkYXRhLmVudGVyVG9DbGFzcztcbiAgdmFyIGVudGVyQWN0aXZlQ2xhc3MgPSBkYXRhLmVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciBhcHBlYXJDbGFzcyA9IGRhdGEuYXBwZWFyQ2xhc3M7XG4gIHZhciBhcHBlYXJUb0NsYXNzID0gZGF0YS5hcHBlYXJUb0NsYXNzO1xuICB2YXIgYXBwZWFyQWN0aXZlQ2xhc3MgPSBkYXRhLmFwcGVhckFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlRW50ZXIgPSBkYXRhLmJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXIgPSBkYXRhLmVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlciA9IGRhdGEuYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkID0gZGF0YS5lbnRlckNhbmNlbGxlZDtcbiAgdmFyIGJlZm9yZUFwcGVhciA9IGRhdGEuYmVmb3JlQXBwZWFyO1xuICB2YXIgYXBwZWFyID0gZGF0YS5hcHBlYXI7XG4gIHZhciBhZnRlckFwcGVhciA9IGRhdGEuYWZ0ZXJBcHBlYXI7XG4gIHZhciBhcHBlYXJDYW5jZWxsZWQgPSBkYXRhLmFwcGVhckNhbmNlbGxlZDtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICAvLyBhY3RpdmVJbnN0YW5jZSB3aWxsIGFsd2F5cyBiZSB0aGUgPHRyYW5zaXRpb24+IGNvbXBvbmVudCBtYW5hZ2luZyB0aGlzXG4gIC8vIHRyYW5zaXRpb24uIE9uZSBlZGdlIGNhc2UgdG8gY2hlY2sgaXMgd2hlbiB0aGUgPHRyYW5zaXRpb24+IGlzIHBsYWNlZFxuICAvLyBhcyB0aGUgcm9vdCBub2RlIG9mIGEgY2hpbGQgY29tcG9uZW50LiBJbiB0aGF0IGNhc2Ugd2UgbmVlZCB0byBjaGVja1xuICAvLyA8dHJhbnNpdGlvbj4ncyBwYXJlbnQgZm9yIGFwcGVhciBjaGVjay5cbiAgdmFyIGNvbnRleHQgPSBhY3RpdmVJbnN0YW5jZTtcbiAgdmFyIHRyYW5zaXRpb25Ob2RlID0gYWN0aXZlSW5zdGFuY2UuJHZub2RlO1xuICB3aGlsZSAodHJhbnNpdGlvbk5vZGUgJiYgdHJhbnNpdGlvbk5vZGUucGFyZW50KSB7XG4gICAgY29udGV4dCA9IHRyYW5zaXRpb25Ob2RlLmNvbnRleHQ7XG4gICAgdHJhbnNpdGlvbk5vZGUgPSB0cmFuc2l0aW9uTm9kZS5wYXJlbnQ7XG4gIH1cblxuICB2YXIgaXNBcHBlYXIgPSAhY29udGV4dC5faXNNb3VudGVkIHx8ICF2bm9kZS5pc1Jvb3RJbnNlcnQ7XG5cbiAgaWYgKGlzQXBwZWFyICYmICFhcHBlYXIgJiYgYXBwZWFyICE9PSAnJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHN0YXJ0Q2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJDbGFzc1xuICAgID8gYXBwZWFyQ2xhc3NcbiAgICA6IGVudGVyQ2xhc3M7XG4gIHZhciBhY3RpdmVDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgPyBhcHBlYXJBY3RpdmVDbGFzc1xuICAgIDogZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIHRvQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJUb0NsYXNzXG4gICAgPyBhcHBlYXJUb0NsYXNzXG4gICAgOiBlbnRlclRvQ2xhc3M7XG5cbiAgdmFyIGJlZm9yZUVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYmVmb3JlQXBwZWFyIHx8IGJlZm9yZUVudGVyKVxuICAgIDogYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKHR5cGVvZiBhcHBlYXIgPT09ICdmdW5jdGlvbicgPyBhcHBlYXIgOiBlbnRlcilcbiAgICA6IGVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFmdGVyQXBwZWFyIHx8IGFmdGVyRW50ZXIpXG4gICAgOiBhZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWRIb29rID0gaXNBcHBlYXJcbiAgICA/IChhcHBlYXJDYW5jZWxsZWQgfHwgZW50ZXJDYW5jZWxsZWQpXG4gICAgOiBlbnRlckNhbmNlbGxlZDtcblxuICB2YXIgZXhwbGljaXRFbnRlckR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmVudGVyXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZXhwbGljaXRFbnRlckR1cmF0aW9uICE9IG51bGwpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiwgJ2VudGVyJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGVudGVySG9vayk7XG5cbiAgdmFyIGNiID0gZWwuX2VudGVyQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgfVxuICAgICAgZW50ZXJDYW5jZWxsZWRIb29rICYmIGVudGVyQ2FuY2VsbGVkSG9vayhlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTtcbiAgICB9XG4gICAgZWwuX2VudGVyQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgIC8vIHJlbW92ZSBwZW5kaW5nIGxlYXZlIGVsZW1lbnQgb24gZW50ZXIgYnkgaW5qZWN0aW5nIGFuIGluc2VydCBob29rXG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIHZhciBwZW5kaW5nTm9kZSA9IHBhcmVudCAmJiBwYXJlbnQuX3BlbmRpbmcgJiYgcGFyZW50Ll9wZW5kaW5nW3Zub2RlLmtleV07XG4gICAgICBpZiAocGVuZGluZ05vZGUgJiZcbiAgICAgICAgcGVuZGluZ05vZGUudGFnID09PSB2bm9kZS50YWcgJiZcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiXG4gICAgICApIHtcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKCk7XG4gICAgICB9XG4gICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG4gIGJlZm9yZUVudGVySG9vayAmJiBiZWZvcmVFbnRlckhvb2soZWwpO1xuICBpZiAoZXhwZWN0c0NTUykge1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbikpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0RW50ZXJEdXJhdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHZub2RlLmRhdGEuc2hvdykge1xuICAgIHRvZ2dsZURpc3BsYXkgJiYgdG9nZ2xlRGlzcGxheSgpO1xuICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgfVxuXG4gIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgIGNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVhdmUgKHZub2RlLCBybSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBlbnRlciBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSkge1xuICAgIGVsLl9lbnRlckNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2VudGVyQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gcm0oKVxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBsZWF2ZUNsYXNzID0gZGF0YS5sZWF2ZUNsYXNzO1xuICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7XG4gIHZhciBsZWF2ZUFjdGl2ZUNsYXNzID0gZGF0YS5sZWF2ZUFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlTGVhdmUgPSBkYXRhLmJlZm9yZUxlYXZlO1xuICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlO1xuICB2YXIgYWZ0ZXJMZWF2ZSA9IGRhdGEuYWZ0ZXJMZWF2ZTtcbiAgdmFyIGxlYXZlQ2FuY2VsbGVkID0gZGF0YS5sZWF2ZUNhbmNlbGxlZDtcbiAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGxlYXZlKTtcblxuICB2YXIgZXhwbGljaXRMZWF2ZUR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmxlYXZlXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNEZWYoZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uLCAnbGVhdmUnLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgY2IgPSBlbC5fbGVhdmVDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuX3BlbmRpbmcpIHtcbiAgICAgIGVsLnBhcmVudE5vZGUuX3BlbmRpbmdbdm5vZGUua2V5XSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgbGVhdmVDYW5jZWxsZWQgJiYgbGVhdmVDYW5jZWxsZWQoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKGVsKTtcbiAgICB9XG4gICAgZWwuX2xlYXZlQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgIGRlbGF5TGVhdmUocGVyZm9ybUxlYXZlKTtcbiAgfSBlbHNlIHtcbiAgICBwZXJmb3JtTGVhdmUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlcmZvcm1MZWF2ZSAoKSB7XG4gICAgLy8gdGhlIGRlbGF5ZWQgbGVhdmUgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIGNhbmNlbGxlZFxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyByZWNvcmQgbGVhdmluZyBlbGVtZW50XG4gICAgaWYgKCF2bm9kZS5kYXRhLnNob3cgJiYgZWwucGFyZW50Tm9kZSkge1xuICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpWyh2bm9kZS5rZXkpXSA9IHZub2RlO1xuICAgIH1cbiAgICBiZWZvcmVMZWF2ZSAmJiBiZWZvcmVMZWF2ZShlbCk7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRMZWF2ZUR1cmF0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxlYXZlICYmIGxlYXZlKGVsLCBjYik7XG4gICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBvbmx5IHVzZWQgaW4gZGV2IG1vZGVcbmZ1bmN0aW9uIGNoZWNrRHVyYXRpb24gKHZhbCwgbmFtZSwgdm5vZGUpIHtcbiAgaWYgKHR5cGVvZiB2YWwgIT09ICdudW1iZXInKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIFwiICtcbiAgICAgIFwiZ290IFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbCkpICsgXCIuXCIsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIE5hTiAtIFwiICtcbiAgICAgICd0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuJyxcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbiAodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHRyYW5zaXRpb24gaG9vaydzIGFyZ3VtZW50IGxlbmd0aC4gVGhlIGhvb2sgbWF5IGJlOlxuICogLSBhIG1lcmdlZCBob29rIChpbnZva2VyKSB3aXRoIHRoZSBvcmlnaW5hbCBpbiAuZm5zXG4gKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcbiAqIC0gYSBwbGFpbiBmdW5jdGlvbiAoLmxlbmd0aClcbiAqL1xuZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCAoZm4pIHtcbiAgaWYgKGlzVW5kZWYoZm4pKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdmFyIGludm9rZXJGbnMgPSBmbi5mbnM7XG4gIGlmIChpc0RlZihpbnZva2VyRm5zKSkge1xuICAgIC8vIGludm9rZXJcbiAgICByZXR1cm4gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChcbiAgICAgIEFycmF5LmlzQXJyYXkoaW52b2tlckZucylcbiAgICAgICAgPyBpbnZva2VyRm5zWzBdXG4gICAgICAgIDogaW52b2tlckZuc1xuICAgIClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZuLl9sZW5ndGggfHwgZm4ubGVuZ3RoKSA+IDFcbiAgfVxufVxuXG5mdW5jdGlvbiBfZW50ZXIgKF8sIHZub2RlKSB7XG4gIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICBlbnRlcih2bm9kZSk7XG4gIH1cbn1cblxudmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7XG4gIGNyZWF0ZTogX2VudGVyLFxuICBhY3RpdmF0ZTogX2VudGVyLFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSQkMSAodm5vZGUsIHJtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgIH1cbiAgfVxufSA6IHt9O1xuXG52YXIgcGxhdGZvcm1Nb2R1bGVzID0gW1xuICBhdHRycyxcbiAga2xhc3MsXG4gIGV2ZW50cyxcbiAgZG9tUHJvcHMsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uXG5dO1xuXG4vKiAgKi9cblxuLy8gdGhlIGRpcmVjdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIGFwcGxpZWQgbGFzdCwgYWZ0ZXIgYWxsXG4vLyBidWlsdC1pbiBtb2R1bGVzIGhhdmUgYmVlbiBhcHBsaWVkLlxudmFyIG1vZHVsZXMgPSBwbGF0Zm9ybU1vZHVsZXMuY29uY2F0KGJhc2VNb2R1bGVzKTtcblxudmFyIHBhdGNoID0gY3JlYXRlUGF0Y2hGdW5jdGlvbih7IG5vZGVPcHM6IG5vZGVPcHMsIG1vZHVsZXM6IG1vZHVsZXMgfSk7XG5cbi8qKlxuICogTm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IGxpa2UgYXR0YWNoaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIEVsZW1lbnRzLlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuaWYgKGlzSUU5KSB7XG4gIC8vIGh0dHA6Ly93d3cubWF0dHM0MTEuY29tL3Bvc3QvaW50ZXJuZXQtZXhwbG9yZXItOS1vbmlucHV0L1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICBpZiAoZWwgJiYgZWwudm1vZGVsKSB7XG4gICAgICB0cmlnZ2VyKGVsLCAnaW5wdXQnKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgZGlyZWN0aXZlID0ge1xuICBpbnNlcnRlZDogZnVuY3Rpb24gaW5zZXJ0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSwgb2xkVm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgLy8gIzY5MDNcbiAgICAgIGlmIChvbGRWbm9kZS5lbG0gJiYgIW9sZFZub2RlLmVsbS5fdk9wdGlvbnMpIHtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGlyZWN0aXZlLmNvbXBvbmVudFVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICB9XG4gICAgICBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2bm9kZS50YWcgPT09ICd0ZXh0YXJlYScgfHwgaXNUZXh0SW5wdXRUeXBlKGVsLnR5cGUpKSB7XG4gICAgICBlbC5fdk1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzO1xuICAgICAgaWYgKCFiaW5kaW5nLm1vZGlmaWVycy5sYXp5KSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvLyBTYWZhcmkgPCAxMC4yICYgVUlXZWJWaWV3IGRvZXNuJ3QgZmlyZSBjb21wb3NpdGlvbmVuZCB3aGVuXG4gICAgICAgIC8vIHN3aXRjaGluZyBmb2N1cyBiZWZvcmUgY29uZmlybWluZyBjb21wb3NpdGlvbiBjaG9pY2VcbiAgICAgICAgLy8gdGhpcyBhbHNvIGZpeGVzIHRoZSBpc3N1ZSB3aGVyZSBzb21lIGJyb3dzZXJzIGUuZy4gaU9TIENocm9tZVxuICAgICAgICAvLyBmaXJlcyBcImNoYW5nZVwiIGluc3RlYWQgb2YgXCJpbnB1dFwiIG9uIGF1dG9jb21wbGV0ZS5cbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoaXNJRTkpIHtcbiAgICAgICAgICBlbC52bW9kZWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudFVwZGF0ZWQ6IGZ1bmN0aW9uIGNvbXBvbmVudFVwZGF0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICAvLyBpbiBjYXNlIHRoZSBvcHRpb25zIHJlbmRlcmVkIGJ5IHYtZm9yIGhhdmUgY2hhbmdlZCxcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAgICAgIC8vIGRldGVjdCBzdWNoIGNhc2VzIGFuZCBmaWx0ZXIgb3V0IHZhbHVlcyB0aGF0IG5vIGxvbmdlciBoYXMgYSBtYXRjaGluZ1xuICAgICAgLy8gb3B0aW9uIGluIHRoZSBET00uXG4gICAgICB2YXIgcHJldk9wdGlvbnMgPSBlbC5fdk9wdGlvbnM7XG4gICAgICB2YXIgY3VyT3B0aW9ucyA9IGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICAgIGlmIChjdXJPcHRpb25zLnNvbWUoZnVuY3Rpb24gKG8sIGkpIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHByZXZPcHRpb25zW2ldKTsgfSkpIHtcbiAgICAgICAgLy8gdHJpZ2dlciBjaGFuZ2UgZXZlbnQgaWZcbiAgICAgICAgLy8gbm8gbWF0Y2hpbmcgb3B0aW9uIGZvdW5kIGZvciBhdCBsZWFzdCBvbmUgdmFsdWVcbiAgICAgICAgdmFyIG5lZWRSZXNldCA9IGVsLm11bHRpcGxlXG4gICAgICAgICAgPyBiaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGhhc05vTWF0Y2hpbmdPcHRpb24odiwgY3VyT3B0aW9ucyk7IH0pXG4gICAgICAgICAgOiBiaW5kaW5nLnZhbHVlICE9PSBiaW5kaW5nLm9sZFZhbHVlICYmIGhhc05vTWF0Y2hpbmdPcHRpb24oYmluZGluZy52YWx1ZSwgY3VyT3B0aW9ucyk7XG4gICAgICAgIGlmIChuZWVkUmVzZXQpIHtcbiAgICAgICAgICB0cmlnZ2VyKGVsLCAnY2hhbmdlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzSUUgfHwgaXNFZGdlKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gICAgfSwgMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWN0dWFsbHlTZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIHZhciB2YWx1ZSA9IGJpbmRpbmcudmFsdWU7XG4gIHZhciBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XG4gIGlmIChpc011bHRpcGxlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPVxcXCJcIiArIChiaW5kaW5nLmV4cHJlc3Npb24pICsgXCJcXFwiPiBcIiArXG4gICAgICBcImV4cGVjdHMgYW4gQXJyYXkgdmFsdWUgZm9yIGl0cyBiaW5kaW5nLCBidXQgZ290IFwiICsgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VsZWN0ZWQsIG9wdGlvbjtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XG4gICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgIHNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBnZXRWYWx1ZShvcHRpb24pKSA+IC0xO1xuICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xuICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSkge1xuICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzTm9NYXRjaGluZ09wdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZXZlcnkoZnVuY3Rpb24gKG8pIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHZhbHVlKTsgfSlcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUgKG9wdGlvbikge1xuICByZXR1cm4gJ192YWx1ZScgaW4gb3B0aW9uXG4gICAgPyBvcHRpb24uX3ZhbHVlXG4gICAgOiBvcHRpb24udmFsdWVcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0IChlKSB7XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25FbmQgKGUpIHtcbiAgLy8gcHJldmVudCB0cmlnZ2VyaW5nIGFuIGlucHV0IGV2ZW50IGZvciBubyByZWFzb25cbiAgaWYgKCFlLnRhcmdldC5jb21wb3NpbmcpIHsgcmV0dXJuIH1cbiAgZS50YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XG4gIHRyaWdnZXIoZS50YXJnZXQsICdpbnB1dCcpO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyIChlbCwgdHlwZSkge1xuICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XG4gIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xuICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xufVxuXG4vKiAgKi9cblxuLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdFxuZnVuY3Rpb24gbG9jYXRlTm9kZSAodm5vZGUpIHtcbiAgcmV0dXJuIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmICghdm5vZGUuZGF0YSB8fCAhdm5vZGUuZGF0YS50cmFuc2l0aW9uKVxuICAgID8gbG9jYXRlTm9kZSh2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpXG4gICAgOiB2bm9kZVxufVxuXG52YXIgc2hvdyA9IHtcbiAgYmluZDogZnVuY3Rpb24gYmluZCAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG5cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgdmFyIG9yaWdpbmFsRGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA9XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnJyA6IGVsLnN0eWxlLmRpc3BsYXk7XG4gICAgaWYgKHZhbHVlICYmIHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gb3JpZ2luYWxEaXNwbGF5O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IG9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuICAgIHZhciBvbGRWYWx1ZSA9IHJlZi5vbGRWYWx1ZTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghdmFsdWUgPT09ICFvbGRWYWx1ZSkgeyByZXR1cm4gfVxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICBpZiAodHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVhdmUodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gZWwuX192T3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCAoXG4gICAgZWwsXG4gICAgYmluZGluZyxcbiAgICB2bm9kZSxcbiAgICBvbGRWbm9kZSxcbiAgICBpc0Rlc3Ryb3lcbiAgKSB7XG4gICAgaWYgKCFpc0Rlc3Ryb3kpIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0ge1xuICBtb2RlbDogZGlyZWN0aXZlLFxuICBzaG93OiBzaG93XG59O1xuXG4vKiAgKi9cblxudmFyIHRyYW5zaXRpb25Qcm9wcyA9IHtcbiAgbmFtZTogU3RyaW5nLFxuICBhcHBlYXI6IEJvb2xlYW4sXG4gIGNzczogQm9vbGVhbixcbiAgbW9kZTogU3RyaW5nLFxuICB0eXBlOiBTdHJpbmcsXG4gIGVudGVyQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVDbGFzczogU3RyaW5nLFxuICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVUb0NsYXNzOiBTdHJpbmcsXG4gIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJDbGFzczogU3RyaW5nLFxuICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJUb0NsYXNzOiBTdHJpbmcsXG4gIGR1cmF0aW9uOiBbTnVtYmVyLCBTdHJpbmcsIE9iamVjdF1cbn07XG5cbi8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPlxuLy8gd2Ugd2FudCB0byByZWN1cnNpdmVseSByZXRyaWV2ZSB0aGUgcmVhbCBjb21wb25lbnQgdG8gYmUgcmVuZGVyZWRcbmZ1bmN0aW9uIGdldFJlYWxDaGlsZCAodm5vZGUpIHtcbiAgdmFyIGNvbXBPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGNvbXBPcHRpb25zICYmIGNvbXBPcHRpb25zLkN0b3Iub3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHJldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFRyYW5zaXRpb25EYXRhIChjb21wKSB7XG4gIHZhciBkYXRhID0ge307XG4gIHZhciBvcHRpb25zID0gY29tcC4kb3B0aW9ucztcbiAgLy8gcHJvcHNcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMucHJvcHNEYXRhKSB7XG4gICAgZGF0YVtrZXldID0gY29tcFtrZXldO1xuICB9XG4gIC8vIGV2ZW50cy5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzXG4gIHZhciBsaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGZvciAodmFyIGtleSQxIGluIGxpc3RlbmVycykge1xuICAgIGRhdGFbY2FtZWxpemUoa2V5JDEpXSA9IGxpc3RlbmVyc1trZXkkMV07XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gcGxhY2Vob2xkZXIgKGgsIHJhd0NoaWxkKSB7XG4gIGlmICgvXFxkLWtlZXAtYWxpdmUkLy50ZXN0KHJhd0NoaWxkLnRhZykpIHtcbiAgICByZXR1cm4gaCgna2VlcC1hbGl2ZScsIHtcbiAgICAgIHByb3BzOiByYXdDaGlsZC5jb21wb25lbnRPcHRpb25zLnByb3BzRGF0YVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzUGFyZW50VHJhbnNpdGlvbiAodm5vZGUpIHtcbiAgd2hpbGUgKCh2bm9kZSA9IHZub2RlLnBhcmVudCkpIHtcbiAgICBpZiAodm5vZGUuZGF0YS50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1NhbWVDaGlsZCAoY2hpbGQsIG9sZENoaWxkKSB7XG4gIHJldHVybiBvbGRDaGlsZC5rZXkgPT09IGNoaWxkLmtleSAmJiBvbGRDaGlsZC50YWcgPT09IGNoaWxkLnRhZ1xufVxuXG52YXIgaXNOb3RUZXh0Tm9kZSA9IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRhZyB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYyk7IH07XG5cbnZhciBpc1ZTaG93RGlyZWN0aXZlID0gZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubmFtZSA9PT0gJ3Nob3cnOyB9O1xuXG52YXIgVHJhbnNpdGlvbiA9IHtcbiAgbmFtZTogJ3RyYW5zaXRpb24nLFxuICBwcm9wczogdHJhbnNpdGlvblByb3BzLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGlzTm90VGV4dE5vZGUpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgd2FybihcbiAgICAgICAgJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQuIFVzZSAnICtcbiAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBtb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgLy8gd2FybiBpbnZhbGlkIG1vZGVcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgbW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJ1xuICAgICkge1xuICAgICAgd2FybihcbiAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgY29tcG9uZW50IHJvb3Qgbm9kZSBhbmQgdGhlIGNvbXBvbmVudCdzXG4gICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICAvLyBhcHBseSB0cmFuc2l0aW9uIGRhdGEgdG8gY2hpbGRcbiAgICAvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlXG4gICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGVhdmluZykge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgIH1cblxuICAgIC8vIGVuc3VyZSBhIGtleSB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgdm5vZGUgdHlwZSBhbmQgdG8gdGhpcyB0cmFuc2l0aW9uXG4gICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgIC8vIGR1cmluZyBlbnRlcmluZy5cbiAgICB2YXIgaWQgPSBcIl9fdHJhbnNpdGlvbi1cIiArICh0aGlzLl91aWQpICsgXCItXCI7XG4gICAgY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGxcbiAgICAgID8gY2hpbGQuaXNDb21tZW50XG4gICAgICAgID8gaWQgKyAnY29tbWVudCdcbiAgICAgICAgOiBpZCArIGNoaWxkLnRhZ1xuICAgICAgOiBpc1ByaW1pdGl2ZShjaGlsZC5rZXkpXG4gICAgICAgID8gKFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwID8gY2hpbGQua2V5IDogaWQgKyBjaGlsZC5rZXkpXG4gICAgICAgIDogY2hpbGQua2V5O1xuXG4gICAgdmFyIGRhdGEgPSAoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcbiAgICB2YXIgb2xkUmF3Q2hpbGQgPSB0aGlzLl92bm9kZTtcbiAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgLy8gbWFyayB2LXNob3dcbiAgICAvLyBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIG1vZHVsZSBjYW4gaGFuZCBvdmVyIHRoZSBjb250cm9sIHRvIHRoZSBkaXJlY3RpdmVcbiAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGlzVlNob3dEaXJlY3RpdmUpKSB7XG4gICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG9sZENoaWxkICYmXG4gICAgICBvbGRDaGlsZC5kYXRhICYmXG4gICAgICAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSAmJlxuICAgICAgIWlzQXN5bmNQbGFjZWhvbGRlcihvbGRDaGlsZCkgJiZcbiAgICAgIC8vICM2Njg3IGNvbXBvbmVudCByb290IGlzIGEgY29tbWVudCBub2RlXG4gICAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpXG4gICAgKSB7XG4gICAgICAvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcbiAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGRcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgeyBkZWxheWVkTGVhdmUgPSBsZWF2ZTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn07XG5cbi8qICAqL1xuXG52YXIgcHJvcHMgPSBleHRlbmQoe1xuICB0YWc6IFN0cmluZyxcbiAgbW92ZUNsYXNzOiBTdHJpbmdcbn0sIHRyYW5zaXRpb25Qcm9wcyk7XG5cbmRlbGV0ZSBwcm9wcy5tb2RlO1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0ge1xuICBwcm9wczogcHJvcHMsXG5cbiAgYmVmb3JlTW91bnQ6IGZ1bmN0aW9uIGJlZm9yZU1vdW50ICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB1cGRhdGUgPSB0aGlzLl91cGRhdGU7XG4gICAgdGhpcy5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh0aGlzJDEpO1xuICAgICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuICAgICAgdGhpcyQxLl9fcGF0Y2hfXyhcbiAgICAgICAgdGhpcyQxLl92bm9kZSxcbiAgICAgICAgdGhpcyQxLmtlcHQsXG4gICAgICAgIGZhbHNlLCAvLyBoeWRyYXRpbmdcbiAgICAgICAgdHJ1ZSAvLyByZW1vdmVPbmx5ICghaW1wb3J0YW50LCBhdm9pZHMgdW5uZWNlc3NhcnkgbW92ZXMpXG4gICAgICApO1xuICAgICAgdGhpcyQxLl92bm9kZSA9IHRoaXMkMS5rZXB0O1xuICAgICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgICB1cGRhdGUuY2FsbCh0aGlzJDEsIHZub2RlLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgdmFyIHJhd0NoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdmFyIHRyYW5zaXRpb25EYXRhID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSByYXdDaGlsZHJlbltpXTtcbiAgICAgIGlmIChjLnRhZykge1xuICAgICAgICBpZiAoYy5rZXkgIT0gbnVsbCAmJiBTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSAhPT0gMCkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goYyk7XG4gICAgICAgICAgbWFwW2Mua2V5XSA9IGNcbiAgICAgICAgICA7KGMuZGF0YSB8fCAoYy5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHZhciBvcHRzID0gYy5jb21wb25lbnRPcHRpb25zO1xuICAgICAgICAgIHZhciBuYW1lID0gb3B0cyA/IChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnIHx8ICcnKSA6IGMudGFnO1xuICAgICAgICAgIHdhcm4oKFwiPHRyYW5zaXRpb24tZ3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQ6IDxcIiArIG5hbWUgKyBcIj5cIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZDaGlsZHJlbikge1xuICAgICAgdmFyIGtlcHQgPSBbXTtcbiAgICAgIHZhciByZW1vdmVkID0gW107XG4gICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICB2YXIgYyQxID0gcHJldkNoaWxkcmVuW2kkMV07XG4gICAgICAgIGMkMS5kYXRhLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgYyQxLmRhdGEucG9zID0gYyQxLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKG1hcFtjJDEua2V5XSkge1xuICAgICAgICAgIGtlcHQucHVzaChjJDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlbW92ZWQucHVzaChjJDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmtlcHQgPSBoKHRhZywgbnVsbCwga2VwdCk7XG4gICAgICB0aGlzLnJlbW92ZWQgPSByZW1vdmVkO1xuICAgIH1cblxuICAgIHJldHVybiBoKHRhZywgbnVsbCwgY2hpbGRyZW4pXG4gIH0sXG5cbiAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW47XG4gICAgdmFyIG1vdmVDbGFzcyA9IHRoaXMubW92ZUNsYXNzIHx8ICgodGhpcy5uYW1lIHx8ICd2JykgKyAnLW1vdmUnKTtcbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCB8fCAhdGhpcy5oYXNNb3ZlKGNoaWxkcmVuWzBdLmVsbSwgbW92ZUNsYXNzKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXG4gICAgLy8gaW4gZWFjaCBpdGVyYXRpb24gLSB3aGljaCBoZWxwcyBwcmV2ZW50IGxheW91dCB0aHJhc2hpbmcuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChjYWxsUGVuZGluZ0Nicyk7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChhcHBseVRyYW5zbGF0aW9uKTtcblxuICAgIC8vIGZvcmNlIHJlZmxvdyB0byBwdXQgZXZlcnl0aGluZyBpbiBwb3NpdGlvblxuICAgIC8vIGFzc2lnbiB0byB0aGlzIHRvIGF2b2lkIGJlaW5nIHJlbW92ZWQgaW4gdHJlZS1zaGFraW5nXG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdGhpcy5fcmVmbG93ID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7XG5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICBpZiAoYy5kYXRhLm1vdmVkKSB7XG4gICAgICAgIHZhciBlbCA9IGMuZWxtO1xuICAgICAgICB2YXIgcyA9IGVsLnN0eWxlO1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcnO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgZWwuX21vdmVDYiA9IGZ1bmN0aW9uIGNiIChlKSB7XG4gICAgICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IGVsKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGNiKTtcbiAgICAgICAgICAgIGVsLl9tb3ZlQ2IgPSBudWxsO1xuICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGhhc01vdmU6IGZ1bmN0aW9uIGhhc01vdmUgKGVsLCBtb3ZlQ2xhc3MpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCFoYXNUcmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAodGhpcy5faGFzTW92ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzTW92ZVxuICAgICAgfVxuICAgICAgLy8gRGV0ZWN0IHdoZXRoZXIgYW4gZWxlbWVudCB3aXRoIHRoZSBtb3ZlIGNsYXNzIGFwcGxpZWQgaGFzXG4gICAgICAvLyBDU1MgdHJhbnNpdGlvbnMuIFNpbmNlIHRoZSBlbGVtZW50IG1heSBiZSBpbnNpZGUgYW4gZW50ZXJpbmdcbiAgICAgIC8vIHRyYW5zaXRpb24gYXQgdGhpcyB2ZXJ5IG1vbWVudCwgd2UgbWFrZSBhIGNsb25lIG9mIGl0IGFuZCByZW1vdmVcbiAgICAgIC8vIGFsbCBvdGhlciB0cmFuc2l0aW9uIGNsYXNzZXMgYXBwbGllZCB0byBlbnN1cmUgb25seSB0aGUgbW92ZSBjbGFzc1xuICAgICAgLy8gaXMgYXBwbGllZC5cbiAgICAgIHZhciBjbG9uZSA9IGVsLmNsb25lTm9kZSgpO1xuICAgICAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgICAgICBlbC5fdHJhbnNpdGlvbkNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7IHJlbW92ZUNsYXNzKGNsb25lLCBjbHMpOyB9KTtcbiAgICAgIH1cbiAgICAgIGFkZENsYXNzKGNsb25lLCBtb3ZlQ2xhc3MpO1xuICAgICAgY2xvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIHRoaXMuJGVsLmFwcGVuZENoaWxkKGNsb25lKTtcbiAgICAgIHZhciBpbmZvID0gZ2V0VHJhbnNpdGlvbkluZm8oY2xvbmUpO1xuICAgICAgdGhpcy4kZWwucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgcmV0dXJuICh0aGlzLl9oYXNNb3ZlID0gaW5mby5oYXNUcmFuc2Zvcm0pXG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyAoYykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9tb3ZlQ2IpIHtcbiAgICBjLmVsbS5fbW92ZUNiKCk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fZW50ZXJDYikge1xuICAgIGMuZWxtLl9lbnRlckNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24gKGMpIHtcbiAgYy5kYXRhLm5ld1BvcyA9IGMuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uIChjKSB7XG4gIHZhciBvbGRQb3MgPSBjLmRhdGEucG9zO1xuICB2YXIgbmV3UG9zID0gYy5kYXRhLm5ld1BvcztcbiAgdmFyIGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgdmFyIGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XG4gIGlmIChkeCB8fCBkeSkge1xuICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7XG4gICAgdmFyIHMgPSBjLmVsbS5zdHlsZTtcbiAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyBkeCArIFwicHgsXCIgKyBkeSArIFwicHgpXCI7XG4gICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xuICB9XG59XG5cbnZhciBwbGF0Zm9ybUNvbXBvbmVudHMgPSB7XG4gIFRyYW5zaXRpb246IFRyYW5zaXRpb24sXG4gIFRyYW5zaXRpb25Hcm91cDogVHJhbnNpdGlvbkdyb3VwXG59O1xuXG4vKiAgKi9cblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBzcGVjaWZpYyB1dGlsc1xuVnVlLmNvbmZpZy5tdXN0VXNlUHJvcCA9IG11c3RVc2VQcm9wO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkVGFnID0gaXNSZXNlcnZlZFRhZztcblZ1ZS5jb25maWcuaXNSZXNlcnZlZEF0dHIgPSBpc1Jlc2VydmVkQXR0cjtcblZ1ZS5jb25maWcuZ2V0VGFnTmFtZXNwYWNlID0gZ2V0VGFnTmFtZXNwYWNlO1xuVnVlLmNvbmZpZy5pc1Vua25vd25FbGVtZW50ID0gaXNVbmtub3duRWxlbWVudDtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBydW50aW1lIGRpcmVjdGl2ZXMgJiBjb21wb25lbnRzXG5leHRlbmQoVnVlLm9wdGlvbnMuZGlyZWN0aXZlcywgcGxhdGZvcm1EaXJlY3RpdmVzKTtcbmV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBwbGF0Zm9ybUNvbXBvbmVudHMpO1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHBhdGNoIGZ1bmN0aW9uXG5WdWUucHJvdG90eXBlLl9fcGF0Y2hfXyA9IGluQnJvd3NlciA/IHBhdGNoIDogbm9vcDtcblxuLy8gcHVibGljIG1vdW50IG1ldGhvZFxuVnVlLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICBlbCA9IGVsICYmIGluQnJvd3NlciA/IHF1ZXJ5KGVsKSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIG1vdW50Q29tcG9uZW50KHRoaXMsIGVsLCBoeWRyYXRpbmcpXG59O1xuXG4vLyBkZXZ0b29scyBnbG9iYWwgaG9va1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpbkJyb3dzZXIpIHtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNvbmZpZy5kZXZ0b29scykge1xuICAgICAgaWYgKGRldnRvb2xzKSB7XG4gICAgICAgIGRldnRvb2xzLmVtaXQoJ2luaXQnLCBWdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnXG4gICAgICApIHtcbiAgICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgICAgJ0Rvd25sb2FkIHRoZSBWdWUgRGV2dG9vbHMgZXh0ZW5zaW9uIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOlxcbicgK1xuICAgICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLWRldnRvb2xzJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgY29uZmlnLnByb2R1Y3Rpb25UaXAgIT09IGZhbHNlICYmXG4gICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICApIHtcbiAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICBcIllvdSBhcmUgcnVubmluZyBWdWUgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cXG5cIiArXG4gICAgICAgIFwiTWFrZSBzdXJlIHRvIHR1cm4gb24gcHJvZHVjdGlvbiBtb2RlIHdoZW4gZGVwbG95aW5nIGZvciBwcm9kdWN0aW9uLlxcblwiICtcbiAgICAgICAgXCJTZWUgbW9yZSB0aXBzIGF0IGh0dHBzOi8vdnVlanMub3JnL2d1aWRlL2RlcGxveW1lbnQuaHRtbFwiXG4gICAgICApO1xuICAgIH1cbiAgfSwgMCk7XG59XG5cbi8qICAqL1xuXG5leHBvcnQgZGVmYXVsdCBWdWU7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvKipcbiAqIFplbnNjcm9sbCA0LjAuMlxuICogaHR0cHM6Ly9naXRodWIuY29tL3plbmdhYm9yL3plbnNjcm9sbC9cbiAqXG4gKiBDb3B5cmlnaHQgMjAxNeKAkzIwMTggR2Fib3IgTGVuYXJkXG4gKlxuICogVGhpcyBpcyBmcmVlIGFuZCB1bmVuY3VtYmVyZWQgc29mdHdhcmUgcmVsZWFzZWQgaW50byB0aGUgcHVibGljIGRvbWFpbi5cbiAqIFxuICogQW55b25lIGlzIGZyZWUgdG8gY29weSwgbW9kaWZ5LCBwdWJsaXNoLCB1c2UsIGNvbXBpbGUsIHNlbGwsIG9yXG4gKiBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUsIGVpdGhlciBpbiBzb3VyY2UgY29kZSBmb3JtIG9yIGFzIGEgY29tcGlsZWRcbiAqIGJpbmFyeSwgZm9yIGFueSBwdXJwb3NlLCBjb21tZXJjaWFsIG9yIG5vbi1jb21tZXJjaWFsLCBhbmQgYnkgYW55XG4gKiBtZWFucy5cbiAqIFxuICogSW4ganVyaXNkaWN0aW9ucyB0aGF0IHJlY29nbml6ZSBjb3B5cmlnaHQgbGF3cywgdGhlIGF1dGhvciBvciBhdXRob3JzXG4gKiBvZiB0aGlzIHNvZnR3YXJlIGRlZGljYXRlIGFueSBhbmQgYWxsIGNvcHlyaWdodCBpbnRlcmVzdCBpbiB0aGVcbiAqIHNvZnR3YXJlIHRvIHRoZSBwdWJsaWMgZG9tYWluLiBXZSBtYWtlIHRoaXMgZGVkaWNhdGlvbiBmb3IgdGhlIGJlbmVmaXRcbiAqIG9mIHRoZSBwdWJsaWMgYXQgbGFyZ2UgYW5kIHRvIHRoZSBkZXRyaW1lbnQgb2Ygb3VyIGhlaXJzIGFuZFxuICogc3VjY2Vzc29ycy4gV2UgaW50ZW5kIHRoaXMgZGVkaWNhdGlvbiB0byBiZSBhbiBvdmVydCBhY3Qgb2ZcbiAqIHJlbGlucXVpc2htZW50IGluIHBlcnBldHVpdHkgb2YgYWxsIHByZXNlbnQgYW5kIGZ1dHVyZSByaWdodHMgdG8gdGhpc1xuICogc29mdHdhcmUgdW5kZXIgY29weXJpZ2h0IGxhdy5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuICogSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1JcbiAqIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLFxuICogQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SXG4gKiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBwbGVhc2UgcmVmZXIgdG8gPGh0dHA6Ly91bmxpY2Vuc2Uub3JnPlxuICogXG4gKi9cblxuLypqc2hpbnQgZGV2ZWw6dHJ1ZSwgYXNpOnRydWUgKi9cblxuLypnbG9iYWwgZGVmaW5lLCBtb2R1bGUgKi9cblxuXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KCkpXG5cdH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpXG5cdH0gZWxzZSB7XG5cdFx0KGZ1bmN0aW9uIGluc3RhbGwoKSB7XG5cdFx0XHQvLyBUbyBtYWtlIHN1cmUgWmVuc2Nyb2xsIGNhbiBiZSByZWZlcmVuY2VkIGZyb20gdGhlIGhlYWRlciwgYmVmb3JlIGBib2R5YCBpcyBhdmFpbGFibGVcblx0XHRcdGlmIChkb2N1bWVudCAmJiBkb2N1bWVudC5ib2R5KSB7XG5cdFx0XHRcdHJvb3QuemVuc2Nyb2xsID0gZmFjdG9yeSgpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyByZXRyeSA5bXMgbGF0ZXJcblx0XHRcdFx0c2V0VGltZW91dChpbnN0YWxsLCA5KVxuXHRcdFx0fVxuXHRcdH0pKClcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG5cdFwidXNlIHN0cmljdFwiXG5cblxuXHQvLyBEZXRlY3QgaWYgdGhlIGJyb3dzZXIgYWxyZWFkeSBzdXBwb3J0cyBuYXRpdmUgc21vb3RoIHNjcm9sbGluZyAoZS5nLiwgRmlyZWZveCAzNisgYW5kIENocm9tZSA0OSspIGFuZCBpdCBpcyBlbmFibGVkOlxuXHR2YXIgaXNOYXRpdmVTbW9vdGhTY3JvbGxFbmFibGVkT24gPSBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdHJldHVybiBlbGVtICYmIFwiZ2V0Q29tcHV0ZWRTdHlsZVwiIGluIHdpbmRvdyAmJlxuXHRcdFx0d2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbSlbXCJzY3JvbGwtYmVoYXZpb3JcIl0gPT09IFwic21vb3RoXCJcblx0fVxuXG5cblx0Ly8gRXhpdCBpZiBpdOKAmXMgbm90IGEgYnJvd3NlciBlbnZpcm9ubWVudDpcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgfHwgIShcImRvY3VtZW50XCIgaW4gd2luZG93KSkge1xuXHRcdHJldHVybiB7fVxuXHR9XG5cblxuXHR2YXIgbWFrZVNjcm9sbGVyID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgZGVmYXVsdER1cmF0aW9uLCBlZGdlT2Zmc2V0KSB7XG5cblx0XHQvLyBVc2UgZGVmYXVsdHMgaWYgbm90IHByb3ZpZGVkXG5cdFx0ZGVmYXVsdER1cmF0aW9uID0gZGVmYXVsdER1cmF0aW9uIHx8IDk5OSAvL21zXG5cdFx0aWYgKCFlZGdlT2Zmc2V0ICYmIGVkZ2VPZmZzZXQgIT09IDApIHtcblx0XHRcdC8vIFdoZW4gc2Nyb2xsaW5nLCB0aGlzIGFtb3VudCBvZiBkaXN0YW5jZSBpcyBrZXB0IGZyb20gdGhlIGVkZ2VzIG9mIHRoZSBjb250YWluZXI6XG5cdFx0XHRlZGdlT2Zmc2V0ID0gOSAvL3B4XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxpbmcgdGhlIGxpZmUtY3ljbGUgb2YgdGhlIHNjcm9sbGVyXG5cdFx0dmFyIHNjcm9sbFRpbWVvdXRJZFxuXHRcdHZhciBzZXRTY3JvbGxUaW1lb3V0SWQgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcblx0XHRcdHNjcm9sbFRpbWVvdXRJZCA9IG5ld1ZhbHVlXG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogU3RvcCB0aGUgY3VycmVudCBzbW9vdGggc2Nyb2xsIG9wZXJhdGlvbiBpbW1lZGlhdGVseVxuXHRcdCAqL1xuXHRcdHZhciBzdG9wU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KHNjcm9sbFRpbWVvdXRJZClcblx0XHRcdHNldFNjcm9sbFRpbWVvdXRJZCgwKVxuXHRcdH1cblxuXHRcdHZhciBnZXRUb3BXaXRoRWRnZU9mZnNldCA9IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRyZXR1cm4gTWF0aC5tYXgoMCwgY29udGFpbmVyLmdldFRvcE9mKGVsZW0pIC0gZWRnZU9mZnNldClcblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBTY3JvbGxzIHRvIGEgc3BlY2lmaWMgdmVydGljYWwgcG9zaXRpb24gaW4gdGhlIGRvY3VtZW50LlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHt0YXJnZXRZfSBUaGUgdmVydGljYWwgcG9zaXRpb24gd2l0aGluIHRoZSBkb2N1bWVudC5cblx0XHQgKiBAcGFyYW0ge2R1cmF0aW9ufSBPcHRpb25hbGx5IHRoZSBkdXJhdGlvbiBvZiB0aGUgc2Nyb2xsIG9wZXJhdGlvbi5cblx0XHQgKiAgICAgICAgSWYgbm90IHByb3ZpZGVkIHRoZSBkZWZhdWx0IGR1cmF0aW9uIGlzIHVzZWQuXG5cdFx0ICogQHBhcmFtIHtvbkRvbmV9IEFuIG9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGludm9rZWQgb25jZSB0aGUgc2Nyb2xsIGZpbmlzaGVkLlxuXHRcdCAqL1xuXHRcdHZhciBzY3JvbGxUb1kgPSBmdW5jdGlvbiAodGFyZ2V0WSwgZHVyYXRpb24sIG9uRG9uZSkge1xuXHRcdFx0c3RvcFNjcm9sbCgpXG5cdFx0XHRpZiAoZHVyYXRpb24gPT09IDAgfHwgKGR1cmF0aW9uICYmIGR1cmF0aW9uIDwgMCkgfHwgaXNOYXRpdmVTbW9vdGhTY3JvbGxFbmFibGVkT24oY29udGFpbmVyLmJvZHkpKSB7XG5cdFx0XHRcdGNvbnRhaW5lci50b1kodGFyZ2V0WSlcblx0XHRcdFx0aWYgKG9uRG9uZSkge1xuXHRcdFx0XHRcdG9uRG9uZSgpXG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBzdGFydFkgPSBjb250YWluZXIuZ2V0WSgpXG5cdFx0XHRcdHZhciBkaXN0YW5jZSA9IE1hdGgubWF4KDAsIHRhcmdldFkpIC0gc3RhcnRZXG5cdFx0XHRcdHZhciBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuXHRcdFx0XHRkdXJhdGlvbiA9IGR1cmF0aW9uIHx8IE1hdGgubWluKE1hdGguYWJzKGRpc3RhbmNlKSwgZGVmYXVsdER1cmF0aW9uKTtcblx0XHRcdFx0KGZ1bmN0aW9uIGxvb3BTY3JvbGwoKSB7XG5cdFx0XHRcdFx0c2V0U2Nyb2xsVGltZW91dElkKHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0Ly8gQ2FsY3VsYXRlIHBlcmNlbnRhZ2U6XG5cdFx0XHRcdFx0XHR2YXIgcCA9IE1hdGgubWluKDEsIChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0VGltZSkgLyBkdXJhdGlvbilcblx0XHRcdFx0XHRcdC8vIENhbGN1bGF0ZSB0aGUgYWJzb2x1dGUgdmVydGljYWwgcG9zaXRpb246XG5cdFx0XHRcdFx0XHR2YXIgeSA9IE1hdGgubWF4KDAsIE1hdGguZmxvb3Ioc3RhcnRZICsgZGlzdGFuY2UqKHAgPCAwLjUgPyAyKnAqcCA6IHAqKDQgLSBwKjIpLTEpKSlcblx0XHRcdFx0XHRcdGNvbnRhaW5lci50b1koeSlcblx0XHRcdFx0XHRcdGlmIChwIDwgMSAmJiAoY29udGFpbmVyLmdldEhlaWdodCgpICsgeSkgPCBjb250YWluZXIuYm9keS5zY3JvbGxIZWlnaHQpIHtcblx0XHRcdFx0XHRcdFx0bG9vcFNjcm9sbCgpXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KHN0b3BTY3JvbGwsIDk5KSAvLyB3aXRoIGNvb2xkb3duIHRpbWVcblx0XHRcdFx0XHRcdFx0aWYgKG9uRG9uZSkge1xuXHRcdFx0XHRcdFx0XHRcdG9uRG9uZSgpXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LCA5KSlcblx0XHRcdFx0fSkoKVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFNjcm9sbHMgdG8gdGhlIHRvcCBvZiBhIHNwZWNpZmljIGVsZW1lbnQuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge2VsZW19IFRoZSBlbGVtZW50IHRvIHNjcm9sbCB0by5cblx0XHQgKiBAcGFyYW0ge2R1cmF0aW9ufSBPcHRpb25hbGx5IHRoZSBkdXJhdGlvbiBvZiB0aGUgc2Nyb2xsIG9wZXJhdGlvbi5cblx0XHQgKiBAcGFyYW0ge29uRG9uZX0gQW4gb3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgaW52b2tlZCBvbmNlIHRoZSBzY3JvbGwgZmluaXNoZWQuXG5cdFx0ICovXG5cdFx0dmFyIHNjcm9sbFRvRWxlbSA9IGZ1bmN0aW9uIChlbGVtLCBkdXJhdGlvbiwgb25Eb25lKSB7XG5cdFx0XHRzY3JvbGxUb1koZ2V0VG9wV2l0aEVkZ2VPZmZzZXQoZWxlbSksIGR1cmF0aW9uLCBvbkRvbmUpXG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogU2Nyb2xscyBhbiBlbGVtZW50IGludG8gdmlldyBpZiBuZWNlc3NhcnkuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge2VsZW19IFRoZSBlbGVtZW50LlxuXHRcdCAqIEBwYXJhbSB7ZHVyYXRpb259IE9wdGlvbmFsbHkgdGhlIGR1cmF0aW9uIG9mIHRoZSBzY3JvbGwgb3BlcmF0aW9uLlxuXHRcdCAqIEBwYXJhbSB7b25Eb25lfSBBbiBvcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBpbnZva2VkIG9uY2UgdGhlIHNjcm9sbCBmaW5pc2hlZC5cblx0XHQgKi9cblx0XHR2YXIgc2Nyb2xsSW50b1ZpZXcgPSBmdW5jdGlvbiAoZWxlbSwgZHVyYXRpb24sIG9uRG9uZSkge1xuXHRcdFx0dmFyIGVsZW1IZWlnaHQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodFxuXHRcdFx0dmFyIGVsZW1Cb3R0b20gPSBjb250YWluZXIuZ2V0VG9wT2YoZWxlbSkgKyBlbGVtSGVpZ2h0XG5cdFx0XHR2YXIgY29udGFpbmVySGVpZ2h0ID0gY29udGFpbmVyLmdldEhlaWdodCgpXG5cdFx0XHR2YXIgeSA9IGNvbnRhaW5lci5nZXRZKClcblx0XHRcdHZhciBjb250YWluZXJCb3R0b20gPSB5ICsgY29udGFpbmVySGVpZ2h0XG5cdFx0XHRpZiAoZ2V0VG9wV2l0aEVkZ2VPZmZzZXQoZWxlbSkgPCB5IHx8IChlbGVtSGVpZ2h0ICsgZWRnZU9mZnNldCkgPiBjb250YWluZXJIZWlnaHQpIHtcblx0XHRcdFx0Ly8gRWxlbWVudCBpcyBjbGlwcGVkIGF0IHRvcCBvciBpcyBoaWdoZXIgdGhhbiBzY3JlZW4uXG5cdFx0XHRcdHNjcm9sbFRvRWxlbShlbGVtLCBkdXJhdGlvbiwgb25Eb25lKVxuXHRcdFx0fSBlbHNlIGlmICgoZWxlbUJvdHRvbSArIGVkZ2VPZmZzZXQpID4gY29udGFpbmVyQm90dG9tKSB7XG5cdFx0XHRcdC8vIEVsZW1lbnQgaXMgY2xpcHBlZCBhdCB0aGUgYm90dG9tLlxuXHRcdFx0XHRzY3JvbGxUb1koZWxlbUJvdHRvbSAtIGNvbnRhaW5lckhlaWdodCArIGVkZ2VPZmZzZXQsIGR1cmF0aW9uLCBvbkRvbmUpXG5cdFx0XHR9IGVsc2UgaWYgKG9uRG9uZSkge1xuXHRcdFx0XHRvbkRvbmUoKVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFNjcm9sbHMgdG8gdGhlIGNlbnRlciBvZiBhbiBlbGVtZW50LlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtlbGVtfSBUaGUgZWxlbWVudC5cblx0XHQgKiBAcGFyYW0ge2R1cmF0aW9ufSBPcHRpb25hbGx5IHRoZSBkdXJhdGlvbiBvZiB0aGUgc2Nyb2xsIG9wZXJhdGlvbi5cblx0XHQgKiBAcGFyYW0ge29mZnNldH0gT3B0aW9uYWxseSB0aGUgb2Zmc2V0IG9mIHRoZSB0b3Agb2YgdGhlIGVsZW1lbnQgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSBzY3JlZW4uXG5cdFx0ICogICAgICAgIEEgdmFsdWUgb2YgMCBpcyBpZ25vcmVkLlxuXHRcdCAqIEBwYXJhbSB7b25Eb25lfSBBbiBvcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBpbnZva2VkIG9uY2UgdGhlIHNjcm9sbCBmaW5pc2hlZC5cblx0XHQgKi9cblx0XHR2YXIgc2Nyb2xsVG9DZW50ZXJPZiA9IGZ1bmN0aW9uIChlbGVtLCBkdXJhdGlvbiwgb2Zmc2V0LCBvbkRvbmUpIHtcblx0XHRcdHNjcm9sbFRvWShNYXRoLm1heCgwLCBjb250YWluZXIuZ2V0VG9wT2YoZWxlbSkgLSBjb250YWluZXIuZ2V0SGVpZ2h0KCkvMiArIChvZmZzZXQgfHwgZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQvMikpLCBkdXJhdGlvbiwgb25Eb25lKVxuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIENoYW5nZXMgZGVmYXVsdCBzZXR0aW5ncyBmb3IgdGhpcyBzY3JvbGxlci5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7bmV3RGVmYXVsdER1cmF0aW9ufSBPcHRpb25hbGx5IGEgbmV3IHZhbHVlIGZvciBkZWZhdWx0IGR1cmF0aW9uLCB1c2VkIGZvciBlYWNoIHNjcm9sbCBtZXRob2QgYnkgZGVmYXVsdC5cblx0XHQgKiAgICAgICAgSWdub3JlZCBpZiBudWxsIG9yIHVuZGVmaW5lZC5cblx0XHQgKiBAcGFyYW0ge25ld0VkZ2VPZmZzZXR9IE9wdGlvbmFsbHkgYSBuZXcgdmFsdWUgZm9yIHRoZSBlZGdlIG9mZnNldCwgdXNlZCBieSBlYWNoIHNjcm9sbCBtZXRob2QgYnkgZGVmYXVsdC4gSWdub3JlZCBpZiBudWxsIG9yIHVuZGVmaW5lZC5cblx0XHQgKiBAcmV0dXJucyBBbiBvYmplY3Qgd2l0aCB0aGUgY3VycmVudCB2YWx1ZXMuXG5cdFx0ICovXG5cdFx0dmFyIHNldHVwID0gZnVuY3Rpb24gKG5ld0RlZmF1bHREdXJhdGlvbiwgbmV3RWRnZU9mZnNldCkge1xuXHRcdFx0aWYgKG5ld0RlZmF1bHREdXJhdGlvbiA9PT0gMCB8fCBuZXdEZWZhdWx0RHVyYXRpb24pIHtcblx0XHRcdFx0ZGVmYXVsdER1cmF0aW9uID0gbmV3RGVmYXVsdER1cmF0aW9uXG5cdFx0XHR9XG5cdFx0XHRpZiAobmV3RWRnZU9mZnNldCA9PT0gMCB8fCBuZXdFZGdlT2Zmc2V0KSB7XG5cdFx0XHRcdGVkZ2VPZmZzZXQgPSBuZXdFZGdlT2Zmc2V0XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRkZWZhdWx0RHVyYXRpb246IGRlZmF1bHREdXJhdGlvbixcblx0XHRcdFx0ZWRnZU9mZnNldDogZWRnZU9mZnNldFxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRzZXR1cDogc2V0dXAsXG5cdFx0XHR0bzogc2Nyb2xsVG9FbGVtLFxuXHRcdFx0dG9ZOiBzY3JvbGxUb1ksXG5cdFx0XHRpbnRvVmlldzogc2Nyb2xsSW50b1ZpZXcsXG5cdFx0XHRjZW50ZXI6IHNjcm9sbFRvQ2VudGVyT2YsXG5cdFx0XHRzdG9wOiBzdG9wU2Nyb2xsLFxuXHRcdFx0bW92aW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAhIXNjcm9sbFRpbWVvdXRJZCB9LFxuXHRcdFx0Z2V0WTogY29udGFpbmVyLmdldFksXG5cdFx0XHRnZXRUb3BPZjogY29udGFpbmVyLmdldFRvcE9mXG5cdFx0fVxuXG5cdH1cblxuXG5cdHZhciBkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XG5cdHZhciBnZXREb2NZID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gd2luZG93LnNjcm9sbFkgfHwgZG9jRWxlbS5zY3JvbGxUb3AgfVxuXG5cdC8vIENyZWF0ZSBhIHNjcm9sbGVyIGZvciB0aGUgZG9jdW1lbnQ6XG5cdHZhciB6ZW5zY3JvbGwgPSBtYWtlU2Nyb2xsZXIoe1xuXHRcdGJvZHk6IGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgZG9jdW1lbnQuYm9keSxcblx0XHR0b1k6IGZ1bmN0aW9uICh5KSB7IHdpbmRvdy5zY3JvbGxUbygwLCB5KSB9LFxuXHRcdGdldFk6IGdldERvY1ksXG5cdFx0Z2V0SGVpZ2h0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgZG9jRWxlbS5jbGllbnRIZWlnaHQgfSxcblx0XHRnZXRUb3BPZjogZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgZ2V0RG9jWSgpIC0gZG9jRWxlbS5vZmZzZXRUb3AgfVxuXHR9KVxuXG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBzY3JvbGxlciBmcm9tIHRoZSBwcm92aWRlZCBjb250YWluZXIgZWxlbWVudCAoZS5nLiwgYSBESVYpXG5cdCAqXG5cdCAqIEBwYXJhbSB7c2Nyb2xsQ29udGFpbmVyfSBUaGUgdmVydGljYWwgcG9zaXRpb24gd2l0aGluIHRoZSBkb2N1bWVudC5cblx0ICogQHBhcmFtIHtkZWZhdWx0RHVyYXRpb259IE9wdGlvbmFsbHkgYSB2YWx1ZSBmb3IgZGVmYXVsdCBkdXJhdGlvbiwgdXNlZCBmb3IgZWFjaCBzY3JvbGwgbWV0aG9kIGJ5IGRlZmF1bHQuXG5cdCAqICAgICAgICBJZ25vcmVkIGlmIDAgb3IgbnVsbCBvciB1bmRlZmluZWQuXG5cdCAqIEBwYXJhbSB7ZWRnZU9mZnNldH0gT3B0aW9uYWxseSBhIHZhbHVlIGZvciB0aGUgZWRnZSBvZmZzZXQsIHVzZWQgYnkgZWFjaCBzY3JvbGwgbWV0aG9kIGJ5IGRlZmF1bHQuIFxuXHQgKiAgICAgICAgSWdub3JlZCBpZiBudWxsIG9yIHVuZGVmaW5lZC5cblx0ICogQHJldHVybnMgQSBzY3JvbGxlciBvYmplY3QsIHNpbWlsYXIgdG8gYHplbnNjcm9sbGAgYnV0IGNvbnRyb2xsaW5nIHRoZSBwcm92aWRlZCBlbGVtZW50LlxuXHQgKi9cblx0emVuc2Nyb2xsLmNyZWF0ZVNjcm9sbGVyID0gZnVuY3Rpb24gKHNjcm9sbENvbnRhaW5lciwgZGVmYXVsdER1cmF0aW9uLCBlZGdlT2Zmc2V0KSB7XG5cdFx0cmV0dXJuIG1ha2VTY3JvbGxlcih7XG5cdFx0XHRib2R5OiBzY3JvbGxDb250YWluZXIsXG5cdFx0XHR0b1k6IGZ1bmN0aW9uICh5KSB7IHNjcm9sbENvbnRhaW5lci5zY3JvbGxUb3AgPSB5IH0sXG5cdFx0XHRnZXRZOiBmdW5jdGlvbiAoKSB7IHJldHVybiBzY3JvbGxDb250YWluZXIuc2Nyb2xsVG9wIH0sXG5cdFx0XHRnZXRIZWlnaHQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE1hdGgubWluKHNjcm9sbENvbnRhaW5lci5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2NFbGVtLmNsaWVudEhlaWdodCkgfSxcblx0XHRcdGdldFRvcE9mOiBmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gZWxlbS5vZmZzZXRUb3AgfVxuXHRcdH0sIGRlZmF1bHREdXJhdGlvbiwgZWRnZU9mZnNldClcblx0fVxuXG5cblx0Ly8gQXV0b21hdGljIGxpbmstc21vb3RoaW5nIG9uIGFjaG9yc1xuXHQvLyBFeGNsdWRlIElFOC0gb3Igd2hlbiBuYXRpdmUgaXMgZW5hYmxlZCBvciBaZW5zY3JvbGwgYXV0by0gaXMgZGlzYWJsZWRcblx0aWYgKFwiYWRkRXZlbnRMaXN0ZW5lclwiIGluIHdpbmRvdyAmJiAhd2luZG93Lm5vWmVuc21vb3RoICYmICFpc05hdGl2ZVNtb290aFNjcm9sbEVuYWJsZWRPbihkb2N1bWVudC5ib2R5KSkge1xuXG5cdFx0dmFyIGlzSGlzdG9yeVN1cHBvcnRlZCA9IFwiaGlzdG9yeVwiIGluIHdpbmRvdyAmJiBcInB1c2hTdGF0ZVwiIGluIGhpc3Rvcnlcblx0XHR2YXIgaXNTY3JvbGxSZXN0b3JhdGlvblN1cHBvcnRlZCA9IGlzSGlzdG9yeVN1cHBvcnRlZCAmJiBcInNjcm9sbFJlc3RvcmF0aW9uXCIgaW4gaGlzdG9yeVxuXG5cdFx0Ly8gT24gZmlyc3QgbG9hZCAmIHJlZnJlc2ggbWFrZSBzdXJlIHRoZSBicm93c2VyIHJlc3RvcmVzIHRoZSBwb3NpdGlvbiBmaXJzdFxuXHRcdGlmIChpc1Njcm9sbFJlc3RvcmF0aW9uU3VwcG9ydGVkKSB7XG5cdFx0XHRoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCJcblx0XHR9XG5cblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRpZiAoaXNTY3JvbGxSZXN0b3JhdGlvblN1cHBvcnRlZCkge1xuXHRcdFx0XHQvLyBTZXQgaXQgdG8gbWFudWFsXG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIiB9LCA5KVxuXHRcdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIGZ1bmN0aW9uIChldmVudCkge1xuXHRcdFx0XHRcdGlmIChldmVudC5zdGF0ZSAmJiBcInplbnNjcm9sbFlcIiBpbiBldmVudC5zdGF0ZSkge1xuXHRcdFx0XHRcdFx0emVuc2Nyb2xsLnRvWShldmVudC5zdGF0ZS56ZW5zY3JvbGxZKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSwgZmFsc2UpXG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlZGdlIG9mZnNldCBvbiBmaXJzdCBsb2FkIGlmIG5lY2Vzc2FyeVxuXHRcdFx0Ly8gVGhpcyBtYXkgbm90IHdvcmsgb24gSUUgKG9yIG9sZGVyIGNvbXB1dGVyPykgYXMgaXQgcmVxdWlyZXMgbW9yZSB0aW1lb3V0LCBhcm91bmQgMTAwIG1zXG5cdFx0XHRpZiAod2luZG93LmxvY2F0aW9uLmhhc2gpIHtcblx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0Ly8gQWRqdXN0bWVudCBpcyBvbmx5IG5lZWRlZCBpZiB0aGVyZSBpcyBhbiBlZGdlIG9mZnNldDpcblx0XHRcdFx0XHR2YXIgZWRnZU9mZnNldCA9IHplbnNjcm9sbC5zZXR1cCgpLmVkZ2VPZmZzZXRcblx0XHRcdFx0XHRpZiAoZWRnZU9mZnNldCkge1xuXHRcdFx0XHRcdFx0dmFyIHRhcmdldEVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdChcIiNcIilbMV0pXG5cdFx0XHRcdFx0XHRpZiAodGFyZ2V0RWxlbSkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGFyZ2V0WSA9IE1hdGgubWF4KDAsIHplbnNjcm9sbC5nZXRUb3BPZih0YXJnZXRFbGVtKSAtIGVkZ2VPZmZzZXQpXG5cdFx0XHRcdFx0XHRcdHZhciBkaWZmID0gemVuc2Nyb2xsLmdldFkoKSAtIHRhcmdldFlcblx0XHRcdFx0XHRcdFx0Ly8gT25seSBkbyB0aGUgYWRqdXN0bWVudCBpZiB0aGUgYnJvd3NlciBpcyB2ZXJ5IGNsb3NlIHRvIHRoZSBlbGVtZW50OlxuXHRcdFx0XHRcdFx0XHRpZiAoMCA8PSBkaWZmICYmIGRpZmYgPCA5ICkge1xuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zY3JvbGxUbygwLCB0YXJnZXRZKVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LCA5KVxuXHRcdFx0fVxuXG5cdFx0fSwgZmFsc2UpXG5cblx0XHQvLyBIYW5kbGluZyBjbGlja3Mgb24gYW5jaG9yc1xuXHRcdHZhciBSRV9ub1plbnNtb290aCA9IG5ldyBSZWdFeHAoXCIoXnxcXFxccylub1plbnNtb290aChcXFxcc3wkKVwiKVxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0XHR2YXIgYW5jaG9yID0gZXZlbnQudGFyZ2V0XG5cdFx0XHR3aGlsZSAoYW5jaG9yICYmIGFuY2hvci50YWdOYW1lICE9PSBcIkFcIikge1xuXHRcdFx0XHRhbmNob3IgPSBhbmNob3IucGFyZW50Tm9kZVxuXHRcdFx0fVxuXHRcdFx0Ly8gTGV0IHRoZSBicm93c2VyIGhhbmRsZSB0aGUgY2xpY2sgaWYgaXQgd2Fzbid0IHdpdGggdGhlIHByaW1hcnkgYnV0dG9uLCBvciB3aXRoIHNvbWUgbW9kaWZpZXIga2V5czpcblx0XHRcdGlmICghYW5jaG9yIHx8IGV2ZW50LndoaWNoICE9PSAxIHx8IGV2ZW50LnNoaWZ0S2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5hbHRLZXkpIHtcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHR9XG5cdFx0XHQvLyBTYXZlIHRoZSBjdXJyZW50IHNjcm9sbGluZyBwb3NpdGlvbiBzbyBpdCBjYW4gYmUgdXNlZCBmb3Igc2Nyb2xsIHJlc3RvcmF0aW9uOlxuXHRcdFx0aWYgKGlzU2Nyb2xsUmVzdG9yYXRpb25TdXBwb3J0ZWQpIHtcblx0XHRcdFx0dmFyIGhpc3RvcnlTdGF0ZSA9IGhpc3Rvcnkuc3RhdGUgJiYgdHlwZW9mIGhpc3Rvcnkuc3RhdGUgPT09IFwib2JqZWN0XCIgPyBoaXN0b3J5LnN0YXRlIDoge31cblx0XHRcdFx0aGlzdG9yeVN0YXRlLnplbnNjcm9sbFkgPSB6ZW5zY3JvbGwuZ2V0WSgpXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aGlzdG9yeS5yZXBsYWNlU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiKVxuXHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0Ly8gQXZvaWQgdGhlIENocm9tZSBTZWN1cml0eSBleGNlcHRpb24gb24gZmlsZSBwcm90b2NvbCwgZS5nLiwgZmlsZTovL2luZGV4Lmh0bWxcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Ly8gRmluZCB0aGUgcmVmZXJlbmNlZCBJRDpcblx0XHRcdHZhciBocmVmID0gYW5jaG9yLmdldEF0dHJpYnV0ZShcImhyZWZcIikgfHwgXCJcIlxuXHRcdFx0aWYgKGhyZWYuaW5kZXhPZihcIiNcIikgPT09IDAgJiYgIVJFX25vWmVuc21vb3RoLnRlc3QoYW5jaG9yLmNsYXNzTmFtZSkpIHtcblx0XHRcdFx0dmFyIHRhcmdldFkgPSAwXG5cdFx0XHRcdHZhciB0YXJnZXRFbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaHJlZi5zdWJzdHJpbmcoMSkpXG5cdFx0XHRcdGlmIChocmVmICE9PSBcIiNcIikge1xuXHRcdFx0XHRcdGlmICghdGFyZ2V0RWxlbSkge1xuXHRcdFx0XHRcdFx0Ly8gTGV0IHRoZSBicm93c2VyIGhhbmRsZSB0aGUgY2xpY2sgaWYgdGhlIHRhcmdldCBJRCBpcyBub3QgZm91bmQuXG5cdFx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGFyZ2V0WSA9IHplbnNjcm9sbC5nZXRUb3BPZih0YXJnZXRFbGVtKVxuXHRcdFx0XHR9XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KClcblx0XHRcdFx0Ly8gQnkgZGVmYXVsdCB0cmlnZ2VyIHRoZSBicm93c2VyJ3MgYGhhc2hjaGFuZ2VgIGV2ZW50Li4uXG5cdFx0XHRcdHZhciBvbkRvbmUgPSBmdW5jdGlvbiAoKSB7IHdpbmRvdy5sb2NhdGlvbiA9IGhyZWYgfVxuXHRcdFx0XHQvLyAuLi51bmxlc3MgdGhlcmUgaXMgYW4gZWRnZSBvZmZzZXQgc3BlY2lmaWVkXG5cdFx0XHRcdHZhciBlZGdlT2Zmc2V0ID0gemVuc2Nyb2xsLnNldHVwKCkuZWRnZU9mZnNldFxuXHRcdFx0XHRpZiAoZWRnZU9mZnNldCkge1xuXHRcdFx0XHRcdHRhcmdldFkgPSBNYXRoLm1heCgwLCB0YXJnZXRZIC0gZWRnZU9mZnNldClcblx0XHRcdFx0XHRpZiAoaXNIaXN0b3J5U3VwcG9ydGVkKSB7XG5cdFx0XHRcdFx0XHRvbkRvbmUgPSBmdW5jdGlvbiAoKSB7IGhpc3RvcnkucHVzaFN0YXRlKHt9LCBcIlwiLCBocmVmKSB9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHplbnNjcm9sbC50b1kodGFyZ2V0WSwgbnVsbCwgb25Eb25lKVxuXHRcdFx0fVxuXHRcdH0sIGZhbHNlKVxuXG5cdH1cblxuXG5cdHJldHVybiB6ZW5zY3JvbGxcblxuXG59KSk7XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iLCJpbXBvcnQgeyBzaXRlTWFuYWdlciB9IGZyb20gJy4vanMvbWFpbi5qcydcbmltcG9ydCAnLi9qcy9jb21wb25lbnRzJ1xuaW1wb3J0ICcuL2pzL2xheW91dCdcbmltcG9ydCAnLi9jc3Mvc3R5bGUuY3NzJ1xuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIChldmVudCkgPT4ge1xuICAgIHNpdGVNYW5hZ2VyLmluaXQoKVxuXG4gICAgY29uc29sZS5sb2coc2l0ZU1hbmFnZXIpXG59KTtcblxuLy8gRVhBTVBMRTogaW50ZWdyYXRlIFZ1ZSBjb21wb25lbnRzXG4vL1xuLy8gaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXG4vLyBpbXBvcnQgQnV0dG9uIGZyb20gJy4vanMvdnVlL2J1dHRvbi52dWUnXG4vLyBpbXBvcnQgQ291bnRlciBmcm9tICcuL2pzL3Z1ZS9jb3VudGVyLnZ1ZSdcbi8vXG4vLyBsZXQgYnV0dG9ucyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ1dHRvbicpKVxuLy8gYnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IHtcbi8vICAgbmV3IFZ1ZSh7XG4vLyAgICAgcmVuZGVyOiAoaCkgPT4gaChCdXR0b24pXG4vLyAgIH0pLiRtb3VudChidXR0b24pXG4vLyB9KVxuLy9cbi8vIGxldCBjb3VudGVycyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNvdW50ZXInKSlcbi8vIGNvdW50ZXJzLmZvckVhY2goKGNvdW50ZXIpID0+IHtcbi8vICAgbmV3IFZ1ZSh7XG4vLyAgICAgcmVuZGVyOiAoaCkgPT4gaChDb3VudGVyKVxuLy8gICB9KS4kbW91bnQoY291bnRlcilcbi8vIH0pXG4vL1xuLy8gRU5EIEVYQU1QTEVcbiIsImltcG9ydCBhbmltZSBmcm9tICdhbmltZWpzL2xpYi9hbmltZS5lcydcbmltcG9ydCBTY3JvbGxNYWdpYyBmcm9tICdzY3JvbGxtYWdpYydcbmltcG9ydCB7IHNjcm9sbENvbnRyb2xsZXIgfSBmcm9tICcuLi9jb3JlJ1xuXG5jbGFzcyBBbmltZU1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmFkZFNsaWRlSW4oKVxuICB9XG5cbiAgYWRkU2xpZGVJbigpIHtcbiAgICBsZXQgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYW5pbWUtc2xpZGUtaW4nKVxuXG4gICAgZWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgbGV0IGNoaWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG4gICAgICBsZXQgc2xpZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG5cbiAgICAgIGNoaWxkLmlubmVyVGV4dCA9IGVsZW1lbnQuaW5uZXJUZXh0XG4gICAgICBzbGlkZXIuaW5uZXJUZXh0ID0gZWxlbWVudC5pbm5lclRleHRcblxuICAgICAgbGV0IGxpbmVIZWlnaHQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5saW5lSGVpZ2h0XG4gICAgICBsZXQgbGluZUhlaWdodE51bWJlciA9IGxpbmVIZWlnaHQuc3Vic3RyKDAsIGxpbmVIZWlnaHQubGVuZ3RoIC0gMilcblxuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdwb2ludGVyLWV2ZW50cy1ub25lJywgJ3RleHQtdHJhbnNwYXJlbnQnKVxuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdyZWxhdGl2ZScpXG4gICAgICBjaGlsZC5jbGFzc0xpc3QuYWRkKCdhYnNvbHV0ZScsICdibG9jaycsICdpbnNldC0wJywgJ3RleHQtYmxhY2snKVxuICAgICAgc2xpZGVyLmNsYXNzTGlzdC5hZGQoJ2Fic29sdXRlJywgJ2Jsb2NrJywgJ3RvcC0wJywgJ2xlZnQtMCcsICdiZy13aGl0ZScpXG5cbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGQpXG4gICAgICBlbGVtZW50LmFwcGVuZENoaWxkKHNsaWRlcilcblxuICAgICAgbGV0IGNoaWxkQW5pbWUgPSBhbmltZSh7XG4gICAgICAgIHRhcmdldHM6IGNoaWxkLFxuICAgICAgICB0cmFuc2xhdGVZOiBbJzAuNWVtJywgMF0sXG4gICAgICAgIGxpbmVIZWlnaHQ6IFtsaW5lSGVpZ2h0TnVtYmVyICogMS41LCBsaW5lSGVpZ2h0TnVtYmVyXSxcbiAgICAgICAgZHVyYXRpb246IDYwMCxcbiAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgICBlYXNpbmc6ICdlYXNlT3V0U2luZScsXG4gICAgICAgIGNvbXBsZXRlOiAoYW5pbWUpID0+IHtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2FuaW1lLWNvbXBsZXRlZCcpXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIGxldCBzbGlkZXJBbmltZSA9IGFuaW1lKHtcbiAgICAgICAgdGFyZ2V0czogc2xpZGVyLFxuICAgICAgICB0cmFuc2xhdGVZOiBbJzAuNWVtJywgMF0sXG4gICAgICAgIGxpbmVIZWlnaHQ6IFtsaW5lSGVpZ2h0TnVtYmVyICogMS41ICsgOCwgMF0sXG4gICAgICAgIGR1cmF0aW9uOiA2MDAsXG4gICAgICAgIGF1dG9wbGF5OiBmYWxzZSxcbiAgICAgICAgZWFzaW5nOiAnZWFzZU91dFNpbmUnLFxuICAgICAgICBjb21wbGV0ZTogKGFuaW1lKSA9PiB7XG4gICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhbmltZS1jb21wbGV0ZWQnKVxuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoc2xpZGVyKVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICBsZXQgc2NlbmUgPSBuZXcgU2Nyb2xsTWFnaWMuU2NlbmUoe1xuICAgICAgICB0cmlnZ2VyRWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgdHJpZ2dlckhvb2s6IDAuOVxuICAgICAgfSlcblxuICAgICAgc2NlbmUub24oJ2VudGVyJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGxldCBlbGVtZW50ID0gZXZlbnQuY3VycmVudFRhcmdldC50cmlnZ2VyRWxlbWVudCgpXG4gICAgICAgIGlmICghZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2FuaW1lLWNvbXBsZXRlZCcpKSB7XG4gICAgICAgICAgY2hpbGRBbmltZS5wbGF5KClcbiAgICAgICAgICBzbGlkZXJBbmltZS5wbGF5KClcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgc2NlbmUuYWRkVG8oc2Nyb2xsQ29udHJvbGxlcilcbiAgICB9KVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBhbmltZU1hbmFnZXIgPSBuZXcgQW5pbWVNYW5hZ2VyKCkiLCJpbXBvcnQgU3dpcGVyIGZyb20gJ3N3aXBlcidcbmltcG9ydCAnc3dpcGVyL2Rpc3QvY3NzL3N3aXBlci5taW4uY3NzJ1xuXG5jbGFzcyBGaWV0c2VuU3dpcGVyIHtcbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIGluaXQoKSB7XG4gICAgbGV0IHNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmlldHNlbi1zd2lwZXItc2VjdGlvbicpXG5cbiAgICBpZiAoc2VjdGlvbikge1xuICAgICAgbGV0IHN3aXBlcnMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBzbHVnOiAndXJiYW4nLFxuICAgICAgICAgIGNvbnRhaW5lcjogc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcudXJiYW4uc3dpcGVyLWNvbnRhaW5lcicpLFxuICAgICAgICAgIG5hdmlnYXRvcjogc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcudXJiYW4uc3dpcGVyLW5hdmlnYXRvcicpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBzbHVnOiAnY3Jvc3MnLFxuICAgICAgICAgIGNvbnRhaW5lcjogc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcuY3Jvc3Muc3dpcGVyLWNvbnRhaW5lcicpLFxuICAgICAgICAgIG5hdmlnYXRvcjogc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcuY3Jvc3Muc3dpcGVyLW5hdmlnYXRvcicpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBzbHVnOiAncmFjZScsXG4gICAgICAgICAgY29udGFpbmVyOiBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5yYWNlLnN3aXBlci1jb250YWluZXInKSxcbiAgICAgICAgICBuYXZpZ2F0b3I6IHNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnJhY2Uuc3dpcGVyLW5hdmlnYXRvcicpXG4gICAgICAgIH1cbiAgICAgIF1cblxuICAgICAgY29uc29sZS5sb2coc3dpcGVycylcblxuICAgICAgc3dpcGVycy5mb3JFYWNoKChmaWV0c1N3aXBlcikgPT4ge1xuICAgICAgICBsZXQgc2xpZGVzUGVyVmlldyA9IGZpZXRzU3dpcGVyLmNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgJ2RhdGEtc2xpZGVzLXBlci12aWV3J1xuICAgICAgICApXG4gICAgICAgICAgPyBjb250YWluZXIuZ2V0QXR0cmlidXRlKCdkYXRhLXNsaWRlcy1wZXItdmlldycpXG4gICAgICAgICAgOiAxXG4gICAgICAgIGxldCBzcGFjZUJldHdlZW4gPSBmaWV0c1N3aXBlci5jb250YWluZXIuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICdkYXRhLXNwYWNlLWJldHdlZW4nXG4gICAgICAgIClcbiAgICAgICAgICA/IGNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3BhY2UtYmV0d2VlbicpICogNFxuICAgICAgICAgIDogMFxuICAgICAgICBsZXQgZnJlZU1vZGUgPSBmaWV0c1N3aXBlci5jb250YWluZXIuZ2V0QXR0cmlidXRlKCdkYXRhLWZyZWUtbW9kZScpXG4gICAgICAgICAgPyBjb250YWluZXIuZ2V0QXR0cmlidXRlKCdkYXRhLWZyZWUtbW9kZScpID09ICd0cnVlJ1xuICAgICAgICAgIDogZmFsc2VcbiAgICAgICAgbGV0IGF1dG9wbGF5ID0gZmlldHNTd2lwZXIuY29udGFpbmVyLmdldEF0dHJpYnV0ZSgnZGF0YS1hdXRvcGxheScpXG4gICAgICAgICAgPyBjb250YWluZXIuZ2V0QXR0cmlidXRlKCdkYXRhLWF1dG9wbGF5JykgPT0gJ3RydWUnXG4gICAgICAgICAgOiBmYWxzZVxuXG4gICAgICAgIGxldCBpbnN0YW5jZSA9IG5ldyBTd2lwZXIoZmlldHNTd2lwZXIuY29udGFpbmVyLCB7XG4gICAgICAgICAgbG9vcDogdHJ1ZSxcbiAgICAgICAgICBhdXRvcGxheTogYXV0b3BsYXksXG4gICAgICAgICAgc2xpZGVzUGVyVmlldzogc2xpZGVzUGVyVmlldyxcbiAgICAgICAgICBzcGFjZUJldHdlZW46IHNwYWNlQmV0d2VlbixcbiAgICAgICAgICBmcmVlTW9kZTogZnJlZU1vZGVcbiAgICAgICAgfSlcblxuICAgICAgICBmaWV0c1N3aXBlci5uYXZpZ2F0b3IuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICBzd2lwZXJzLmZvckVhY2goKG90aGVyKSA9PiB7XG4gICAgICAgICAgICBvdGhlci5uYXZpZ2F0b3IuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcbiAgICAgICAgICAgIG90aGVyLmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICBmaWV0c1N3aXBlci5uYXZpZ2F0b3IuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcbiAgICAgICAgICBmaWV0c1N3aXBlci5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcbiAgICAgICAgfSlcblxuICAgICAgICBsZXQgbmF2SXRlbXMgPSBmaWV0c1N3aXBlci5uYXZpZ2F0b3IucXVlcnlTZWxlY3RvckFsbCgnLm5hdi1pdGVtJylcblxuICAgICAgICBuYXZJdGVtcy5mb3JFYWNoKChpdGVtLCBrZXkpID0+IHtcbiAgICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpbnN0YW5jZS5zbGlkZVRvKGtleSArIDEpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuICAgICAgICBpbnN0YW5jZS5vbignc2xpZGVDaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgbmF2SXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICBuYXZJdGVtc1tpbnN0YW5jZS5yZWFsSW5kZXhdLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZmlldHNlblN3aXBlciA9IG5ldyBGaWV0c2VuU3dpcGVyKClcbiIsImltcG9ydCBvYmplY3RGaXRJbWFnZXMgZnJvbSAnb2JqZWN0LWZpdC1pbWFnZXMnXG5cbmNsYXNzIEltYWdlTWFuYWdlciB7XG4gIGluaXQoKSB7XG4gICAgb2JqZWN0Rml0SW1hZ2VzKClcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgaW1hZ2VNYW5hZ2VyID0gbmV3IEltYWdlTWFuYWdlcigpIiwiaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICdAL2pzL2NvcmUnXG5pbXBvcnQgeyBhbmltZU1hbmFnZXIgfSBmcm9tICcuL2FuaW1lLW1hbmFnZXInXG5pbXBvcnQgeyBpbWFnZU1hbmFnZXIgfSBmcm9tICcuL2ltYWdlLW1hbmFnZXInXG5pbXBvcnQgeyBzd2lwZXJNYW5hZ2VyIH0gZnJvbSAnLi9zd2lwZXItbWFuYWdlcidcbmltcG9ydCB7IGZpZXRzZW5Td2lwZXIgfSBmcm9tICcuL2ZpZXRzZW4tc3dpcGVyJ1xuXG5ldmVudEJ1cy4kb24oJ2luaXQnLCAoKSA9PiB7XG4gIGFuaW1lTWFuYWdlci5pbml0KClcbiAgaW1hZ2VNYW5hZ2VyLmluaXQoKVxuICBzd2lwZXJNYW5hZ2VyLmluaXQoKVxuICBmaWV0c2VuU3dpcGVyLmluaXQoKVxufSlcblxuZXZlbnRCdXMuJG9uKCdiYXJiYS1wYWdlLWNoYW5nZScsICgpID0+IHtcbiAgc3dpcGVyTWFuYWdlci5pbml0KClcbiAgZmlldHNlblN3aXBlci5pbml0KClcbn0pXG5cbmV4cG9ydCB7IGFuaW1lTWFuYWdlciwgaW1hZ2VNYW5hZ2VyLCBzd2lwZXJNYW5hZ2VyLCBmaWV0c2VuU3dpcGVyIH1cbiIsImltcG9ydCBTd2lwZXIgZnJvbSAnc3dpcGVyJ1xuaW1wb3J0ICdzd2lwZXIvZGlzdC9jc3Mvc3dpcGVyLm1pbi5jc3MnXG5cbmNsYXNzIFN3aXBlck1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHt9XG4gIGluaXQoKSB7XG4gICAgbGV0IHNlY3Rpb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnN3aXBlci1zZWN0aW9uJylcblxuICAgIHNlY3Rpb25zLmZvckVhY2goKHNlY3Rpb24pID0+IHtcbiAgICAgIGxldCBjb250YWluZXJzID0gc2VjdGlvbi5xdWVyeVNlbGVjdG9yQWxsKCcuc3dpcGVyLWNvbnRhaW5lcicpXG4gICAgICBjb250YWluZXJzLmZvckVhY2goY29udGFpbmVyID0+IHtcbiAgICAgICAgbGV0IG5hdmlnYXRpb24gPSBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItbmF2aWdhdGlvbicpXG5cbiAgICAgICAgbGV0IHNsaWRlc1BlclZpZXcgPSBjb250YWluZXIuZ2V0QXR0cmlidXRlKCdkYXRhLXNsaWRlcy1wZXItdmlldycpID8gY29udGFpbmVyLmdldEF0dHJpYnV0ZSgnZGF0YS1zbGlkZXMtcGVyLXZpZXcnKSA6IDFcbiAgICAgICAgbGV0IHNwYWNlQmV0d2VlbiA9IGNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3BhY2UtYmV0d2VlbicpID8gY29udGFpbmVyLmdldEF0dHJpYnV0ZSgnZGF0YS1zcGFjZS1iZXR3ZWVuJykgKiA0IDogMFxuICAgICAgICBsZXQgZnJlZU1vZGUgPSBjb250YWluZXIuZ2V0QXR0cmlidXRlKCdkYXRhLWZyZWUtbW9kZScpID8gY29udGFpbmVyLmdldEF0dHJpYnV0ZSgnZGF0YS1mcmVlLW1vZGUnKSA9PSAndHJ1ZScgOiBmYWxzZVxuICAgICAgICBsZXQgYXV0b3BsYXkgPSBjb250YWluZXIuZ2V0QXR0cmlidXRlKCdkYXRhLWF1dG9wbGF5JykgPyBjb250YWluZXIuZ2V0QXR0cmlidXRlKCdkYXRhLWF1dG9wbGF5JykgPT0gJ3RydWUnIDogZmFsc2VcblxuICAgICAgICBsZXQgaW5zdGFuY2UgPSBuZXcgU3dpcGVyKGNvbnRhaW5lciwge1xuICAgICAgICAgIGxvb3A6IHRydWUsXG4gICAgICAgICAgYXV0b3BsYXk6IGF1dG9wbGF5LFxuICAgICAgICAgIHNsaWRlc1BlclZpZXc6IHNsaWRlc1BlclZpZXcsXG4gICAgICAgICAgc3BhY2VCZXR3ZWVuOiBzcGFjZUJldHdlZW4sXG4gICAgICAgICAgZnJlZU1vZGU6IGZyZWVNb2RlLFxuICAgICAgICAgIHBhZ2luYXRpb246IHtcbiAgICAgICAgICAgIGVsOiBjb250YWluZXIucXVlcnlTZWxlY3RvcignLnN3aXBlci1wYWdpbmF0aW9uJyksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcblxuICAgICAgICBpZiAobmF2aWdhdGlvbikge1xuICAgICAgICAgIGxldCBuYXZJdGVtcyA9IG5hdmlnYXRpb24ucXVlcnlTZWxlY3RvckFsbCgnLm5hdi1pdGVtJylcblxuICAgICAgICAgIG5hdkl0ZW1zLmZvckVhY2goKGl0ZW0sIGtleSkgPT4ge1xuICAgICAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCk9PiB7XG4gICAgICAgICAgICAgIGluc3RhbmNlLnNsaWRlVG8oa2V5ICsgMSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcblxuICAgICAgICAgIGluc3RhbmNlLm9uKCdzbGlkZUNoYW5nZScsICgpID0+IHtcblxuICAgICAgICAgICAgbmF2SXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBuYXZJdGVtc1tpbnN0YW5jZS5yZWFsSW5kZXhdLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBzd2lwZXJNYW5hZ2VyID0gbmV3IFN3aXBlck1hbmFnZXIoKVxuIiwiZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcbiAgb2Zmc2V0RnJvbVRvcDogMzIsXG4gIGFuaW1hdGlvbjoge1xuICAgIGR1cmF0aW9uOiB7XG4gICAgICBzaG9ydDogMzAwLFxuICAgICAgbWVkaXVtOiA2MDAsXG4gICAgICBsb25nOiA5MDBcbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGNvbnN0IGV2ZW50QnVzID0gbmV3IFZ1ZSgpXG4iLCJleHBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZydcbmV4cG9ydCB7IGV2ZW50QnVzIH0gZnJvbSAnLi9ldmVudC1idXMnXG5leHBvcnQgeyBzY3JvbGxDb250cm9sbGVyIH0gZnJvbSAnLi9zY3JvbGwtY29udHJvbGxlciciLCJpbXBvcnQgU2Nyb2xsTWFnaWMgZnJvbSAnc2Nyb2xsbWFnaWMnXG5cbmV4cG9ydCBjb25zdCBzY3JvbGxDb250cm9sbGVyID0gbmV3IFNjcm9sbE1hZ2ljLkNvbnRyb2xsZXIoe1xuICBnbG9iYWxTY2VuZU9wdGlvbnM6IHtcbiAgICBkdXJhdGlvbjogMFxuICB9XG59KSIsImltcG9ydCB7IGV2ZW50QnVzIH0gZnJvbSAnLi4vY29yZSdcbmltcG9ydCBiYXJiYSBmcm9tICdAYmFyYmEvY29yZSdcbmltcG9ydCBiYXJiYUNzcyBmcm9tICdAYmFyYmEvY3NzJ1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xuXG4vLyB0ZWxsIEJhcmJhIHRvIHVzZSB0aGUgY3NzIG1vZHVsZVxuYmFyYmEudXNlKGJhcmJhQ3NzKVxuXG5jbGFzcyBCYXJiYU1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgaW5pdCgpIHtcbiAgICBiYXJiYS5pbml0KHtcbiAgICAgIHRyYW5zaXRpb25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnYmFyYmEtZmFkZScsXG5cbiAgICAgICAgICBiZWZvcmVMZWF2ZSgpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnYmFyYmEtZW50ZXInKVxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdiYXJiYS1sZWF2ZScpXG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGJlZm9yZUVudGVyKCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdiYXJiYS1lbnRlcicpXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2JhcmJhLWxlYXZlJylcblxuICAgICAgICAgICAgbGV0IG1haW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbicpXG4gICAgICAgICAgICBsZXQgc2NyaXB0cyA9IEFycmF5LmZyb20obWFpbi5xdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHQnKSlcblxuICAgICAgICAgICAgc2NyaXB0cy5mb3JFYWNoKChzY3JpcHQpID0+IHtcbiAgICAgICAgICAgICAgYXhpb3NcbiAgICAgICAgICAgICAgICAuZ2V0KHNjcmlwdC5nZXRBdHRyaWJ1dGUoJ3NyYycpKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICBldmFsKHJlc3BvbnNlLmRhdGEpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBldmVudEJ1cy4kZW1pdCgnYmFyYmEtcGFnZS1jaGFuZ2UnKVxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2JhcmJhLXBhZ2UtY2hhbmdlJylcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgYWZ0ZXJFbnRlcigpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnYmFyYmEtZW50ZXInKVxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdiYXJiYS1sZWF2ZScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgYmFyYmFNYW5hZ2VyID0gbmV3IEJhcmJhTWFuYWdlcigpXG4iLCJpbXBvcnQgYW5pbWUgZnJvbSAnYW5pbWVqcy9saWIvYW5pbWUuZXMnO1xuaW1wb3J0ICogYXMgU2Nyb2xsTWFnaWMgZnJvbSAnc2Nyb2xsbWFnaWMnO1xuaW1wb3J0IHsgZXZlbnRCdXMsIGNvbmZpZyB9IGZyb20gJy4uL2NvcmUnO1xuaW1wb3J0IHsgZG9jdW1lbnRPZmZzZXQgfSBmcm9tICcuLi91dGlsaXRpZXMnO1xuaW1wb3J0IHsgc2Nyb2xsQ29udHJvbGxlciB9IGZyb20gJy4uL2NvcmUvc2Nyb2xsLWNvbnRyb2xsZXIuanMnO1xuXG5jbGFzcyBGb290ZXIge1xuICBlbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgd3JhcHBlcjogSFRNTEVsZW1lbnQ7XG4gIHNjZW5lRm9vdGVyVG91Y2hlc0hlYWRlcjogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBpbml0KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCB3cmFwcGVyOiBIVE1MRWxlbWVudCkge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy53cmFwcGVyID0gd3JhcHBlcjtcblxuICAgIHRoaXMud3JhcHBlci5zdHlsZS5taW5IZWlnaHQgPSB0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0ICsgJ3B4JztcblxuICAgIHRoaXMuYWRkU2NlbmVGb290ZXJUb3VjaGVzSGVhZGVyKCk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgcGluKCkge1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdwaW5uZWQnKTtcbiAgfVxuXG4gIHVucGluKCkge1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdwaW5uZWQnKTtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICB9XG5cbiAgc2xpZGVJbigpIHtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYW5pbWF0aW5nJyk7XG5cbiAgICBsZXQgc2Nyb2xsT2Zmc2V0Qm90dG9tID0gd2luZG93LnNjcm9sbFkgKyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgbGV0IG9mZnNldCA9IE1hdGgubWF4KFxuICAgICAgTWF0aC5taW4oMTIwLCBzY3JvbGxPZmZzZXRCb3R0b20gLSBkb2N1bWVudE9mZnNldCh0aGlzLndyYXBwZXIpLnRvcCksXG4gICAgICAwXG4gICAgKTtcblxuICAgIC8vIGNhbid0IHNsaWRlIGluIGlmIG9mZnNldCBlcXVhbHMgb3duIGhlaWdodFxuICAgIGlmIChvZmZzZXQgPT09IHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQpIHJldHVybjtcblxuICAgIHRoaXMuZWxlbWVudC5zdHlsZS5ib3R0b20gPVxuICAgICAgLTEgKiAodGhpcy5lbGVtZW50LmNsaWVudEhlaWdodCAtIG9mZnNldCkgKyAncHgnO1xuICAgIHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG5cbiAgICBhbmltZSh7XG4gICAgICB0YXJnZXRzOiB0aGlzLmVsZW1lbnQsXG4gICAgICBib3R0b206IFstMSAqIHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQgLSBvZmZzZXQsIDBdLFxuICAgICAgZHVyYXRpb246IGNvbmZpZy5hbmltYXRpb24uZHVyYXRpb24ubWVkaXVtLFxuICAgICAgZWFzaW5nOiAnZWFzZU91dFF1YWQnLFxuICAgICAgY29tcGxldGU6IChhbmltKSA9PiB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRpbmcnKTtcbiAgICAgICAgdGhpcy5waW4oKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNsaWRlT3V0KCkge1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhbmltYXRpbmcnLCAncGlubmVkJyk7XG5cbiAgICBsZXQgc2Nyb2xsT2Zmc2V0Qm90dG9tID0gd2luZG93LnNjcm9sbFkgKyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgbGV0IG9mZnNldCA9IE1hdGgubWF4KFxuICAgICAgTWF0aC5taW4oMTIwLCBzY3JvbGxPZmZzZXRCb3R0b20gLSBkb2N1bWVudE9mZnNldCh0aGlzLndyYXBwZXIpLnRvcCksXG4gICAgICAwXG4gICAgKTtcblxuICAgIGFuaW1lKHtcbiAgICAgIHRhcmdldHM6IHRoaXMuZWxlbWVudCxcbiAgICAgIGJvdHRvbTogWzAsIC0xICogdGhpcy5lbGVtZW50LmNsaWVudEhlaWdodCAtIG9mZnNldF0sXG4gICAgICBkdXJhdGlvbjogY29uZmlnLmFuaW1hdGlvbi5kdXJhdGlvbi5zaG9ydCxcbiAgICAgIGVhc2luZzogJ2Vhc2VPdXRRdWFkJyxcbiAgICAgIGNvbXBsZXRlOiAoYW5pbSkgPT4ge1xuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnYW5pbWF0aW5nJyk7XG4gICAgICAgIHRoaXMudW5waW4oKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFkZFNjZW5lRm9vdGVyVG91Y2hlc0hlYWRlcigpIHtcbiAgICBsZXQgbmF2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hdi1tYWluJyk7XG4gICAgaWYgKG5hdikge1xuICAgICAgdGhpcy5zY2VuZUZvb3RlclRvdWNoZXNIZWFkZXIgPSBuZXcgU2Nyb2xsTWFnaWMuU2NlbmUoe1xuICAgICAgICBvZmZzZXQ6IGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0IC0gdGhpcy5lbGVtZW50LmNsaWVudEhlaWdodCAtIG5hdi5jbGllbnRIZWlnaHRcbiAgICAgIH0pLmFkZFRvKHNjcm9sbENvbnRyb2xsZXIpO1xuXG4gICAgICB0aGlzLnNjZW5lRm9vdGVyVG91Y2hlc0hlYWRlci5vbignZW50ZXInLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnRCdXMuJGVtaXQoJ2Zvb3Rlci10b3VjaGVkLWhlYWRlcicpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuc2NlbmVGb290ZXJUb3VjaGVzSGVhZGVyLm9uKCdsZWF2ZScsIChldmVudCkgPT4ge1xuICAgICAgICBldmVudEJ1cy4kZW1pdCgnZm9vdGVyLXJlbGVhc2VkLWhlYWRlcicpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgZXZlbnRCdXMuJG9uKCd0b2dnbGUtZm9vdGVyJywgKGV2ZW50KSA9PiB7XG4gICAgICAvLyByZXR1cm4gaWYgaXQncyBhbHJlYWR5IGFuaW1hdGluZ1xuICAgICAgLy8gaWYgKHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2FuaW1hdGluZycpKSB7XG4gICAgICAvLyAgIHJldHVybjtcbiAgICAgIC8vIH1cblxuICAgICAgLy8gaWYgKHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3Bpbm5lZCcpKSB7XG4gICAgICAvLyAgIHRoaXMuc2xpZGVPdXQoKTtcbiAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAvLyAgIHRoaXMuc2xpZGVJbigpO1xuICAgICAgLy8gfVxuICAgIH0pO1xuXG4gICAgZXZlbnRCdXMuJG9uKCdzY3JvbGxlZC10by1ib3R0b20nLCAoZXZlbnQpID0+IHtcbiAgICAgIHRoaXMudW5waW4oKTtcbiAgICB9KTtcblxuICAgIGV2ZW50QnVzLiRvbignYmFyYmEtcGFnZS1jaGFuZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgIHNjcm9sbENvbnRyb2xsZXIucmVtb3ZlU2NlbmUodGhpcy5zY2VuZUZvb3RlclRvdWNoZXNIZWFkZXIpXG4gICAgICB0aGlzLmFkZFNjZW5lRm9vdGVyVG91Y2hlc0hlYWRlcigpXG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZm9vdGVyID0gbmV3IEZvb3RlcigpO1xuIiwiaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICcuLi9jb3JlL2V2ZW50LWJ1cyc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb3JlL2NvbmZpZyc7XG5cbmNsYXNzIEhlYWRlciB7XG4gIGVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICBidXJnZXJXcmFwcGVyOiBIVE1MRWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgcHVibGljIGluaXQoZWxlbWVudCkge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5idXJnZXJXcmFwcGVyID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcubmF2LWJ1cmdlci13cmFwcGVyJylcblxuICAgIGlmICh3aW5kb3cuc2Nyb2xsWSA+IGNvbmZpZy5vZmZzZXRGcm9tVG9wKSB7XG4gICAgICB0aGlzLnBpbigpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0Q29sb3IoKVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKVxuICB9XG5cbiAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgZXZlbnRCdXMuJG9uKCdzY3JvbGxlZC1mcm9tLXRvcCcsIChldmVudCkgPT4ge1xuICAgICAgdGhpcy5waW4oKTtcbiAgICB9KTtcblxuICAgIGV2ZW50QnVzLiRvbignc2Nyb2xsZWQtdG8tdG9wJywgKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLnVucGluKCk7XG4gICAgfSk7XG5cbiAgICBldmVudEJ1cy4kb24oJ2JhcmJhLXBhZ2UtY2hhbmdlJywgZXZlbnQgPT4ge1xuICAgICAgdGhpcy5zZXRDb2xvcigpXG4gICAgfSlcbiAgfVxuXG4gIHBpbigpIHtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgncGlubmVkJyk7XG4gIH1cblxuICB1bnBpbigpIHtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgncGlubmVkJyk7XG4gIH1cblxuICBzZXRDb2xvcigpIHtcbiAgICBsZXQgY29sb3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbicpLmdldEF0dHJpYnV0ZSgnZGF0YS1oZWFkZXItY29sb3InKVxuICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCd0ZXh0LWJsdWUnKVxuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndGV4dC1vcmFuZ2UnKVxuICAgICAgICB0aGlzLmJ1cmdlcldyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSgnYmctYmx1ZScpXG4gICAgICAgIHRoaXMuYnVyZ2VyV3JhcHBlci5jbGFzc0xpc3QuYWRkKCdiZy1vcmFuZ2UnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3RleHQtb3JhbmdlLWxpZ2h0JylcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3RleHQtb3JhbmdlJylcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3RleHQtYmx1ZScpXG4gICAgICAgIHRoaXMuYnVyZ2VyV3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKCdiZy1vcmFuZ2UnKVxuICAgICAgICB0aGlzLmJ1cmdlcldyYXBwZXIuY2xhc3NMaXN0LmFkZCgnYmctYmx1ZScpXG4gICAgICB9XG4gIH1cblxuICBzdGlja1RvRm9vdGVyKCkge1xuICAgIHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSdcbiAgICB0aGlzLmVsZW1lbnQuc3R5bGUuYm90dG9tID0gJzAnXG4gIH1cblxuICB1bnN0aWNrRnJvbUZvb3RlcigpIHtcbiAgICB0aGlzLmVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnJ1xuICAgIHRoaXMuZWxlbWVudC5zdHlsZS5ib3R0b20gPSAnJ1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBoZWFkZXIgPSBuZXcgSGVhZGVyKCk7XG4iLCJpbXBvcnQgemVuc2Nyb2xsIGZyb20gJ3plbnNjcm9sbCdcbmltcG9ydCB7IGV2ZW50QnVzIH0gZnJvbSAnQC9qcy9jb3JlJ1xuaW1wb3J0IHsgaGVhZGVyIH0gZnJvbSAnLi9oZWFkZXIudHMnXG5pbXBvcnQgeyBuYXZNZW51IH0gZnJvbSAnLi9uYXYtbWVudS50cydcbmltcG9ydCB7IGZvb3RlciB9IGZyb20gJy4vZm9vdGVyLnRzJ1xuaW1wb3J0IHsgYmFyYmFNYW5hZ2VyIH0gZnJvbSAnLi9iYXJiYS1tYW5hZ2VyJ1xuXG5mdW5jdGlvbiBpbml0SGVhZGVyKCkge1xuICBsZXQgaGVhZGVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXItbWFpbicpXG5cbiAgaWYgKGhlYWRlckVsZW1lbnQpIHtcbiAgICBoZWFkZXIuaW5pdChoZWFkZXJFbGVtZW50KVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXROYXZNZW51KCkge1xuICBsZXQgbmF2RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXYtbWFpbicpXG5cbiAgaWYgKG5hdkVsZW1lbnQpIHtcbiAgICBuYXZNZW51LmluaXQobmF2RWxlbWVudClcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0Rm9vdGVyKCkge1xuICBsZXQgZm9vdGVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb290ZXItbWFpbicpXG4gIGxldCBmb290ZXJXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvb3Rlci13cmFwcGVyJylcblxuICBpZiAoZm9vdGVyRWxlbWVudCkge1xuICAgIGZvb3Rlci5pbml0KGZvb3RlckVsZW1lbnQsIGZvb3RlcldyYXBwZXIpXG4gIH1cbn1cblxuZXZlbnRCdXMuJG9uKCdpbml0JywgKGV2ZW50KSA9PiB7XG4gIGluaXRIZWFkZXIoKVxuICBpbml0TmF2TWVudSgpXG4gIGluaXRGb290ZXIoKVxuXG4gIGJhcmJhTWFuYWdlci5pbml0KClcblxuICBjb25zb2xlLmxvZygnaW5pdCBsYXlvdXQnKVxufSlcblxuZXhwb3J0IHsgaGVhZGVyLCBuYXZNZW51LCBmb290ZXIsIGJhcmJhTWFuYWdlciB9IiwiaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICcuLi9jb3JlL2V2ZW50LWJ1cyc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb3JlL2NvbmZpZyc7XG5cbmNsYXNzIE5hdk1lbnUge1xuICBlbGVtZW50OiBIVE1MRWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgaW5pdChlbGVtZW50KSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICBldmVudEJ1cy4kb24oJ3RvZ2dsZS1tZW51JywgKGV2ZW50KSA9PiB7XG4gICAgICAvLyByZXR1cm4gaWYgaXQncyBhbHJlYWR5IGFuaW1hdGluZ1xuICAgICAgaWYgKHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2FuaW1hdGluZycpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhbmltYXRpbmcnKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2FuaW1hdGluZycpO1xuICAgICAgICB9LCBjb25maWcuYW5pbWF0aW9uLmR1cmF0aW9uLm1lZGl1bSk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhbmltYXRpbmcnKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2FuaW1hdGluZycpO1xuICAgICAgICB9LCBjb25maWcuYW5pbWF0aW9uLmR1cmF0aW9uLm1lZGl1bSk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGV2ZW50QnVzLiRvbignd2luZG93LXJlc2l6ZWQnLCAoZXZlbnQpID0+IHtcbiAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA+PSAxMDI0KSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGV2ZW50QnVzLiRvbignYmFyYmEtcGFnZS1jaGFuZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKSkge1xuICAgICAgICBldmVudEJ1cy4kZW1pdCgndG9nZ2xlLW1lbnUnKVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBuYXZNZW51ID0gbmV3IE5hdk1lbnUoKSIsImltcG9ydCBTY3JvbGxNYWdpYyBmcm9tICdzY3JvbGxtYWdpYydcbmltcG9ydCBkZWJvdW5jZSBmcm9tICdsb2Rhc2gvZGVib3VuY2UnO1xuaW1wb3J0IHsgZXZlbnRCdXMsIHNjcm9sbENvbnRyb2xsZXIsIGNvbmZpZyB9IGZyb20gJy4vY29yZS9pbmRleC5qcyc7XG5cbmNsYXNzIFNpdGVNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zY2VuZVNjcm9sbGVkVG9wXG4gICAgdGhpcy5zY2VuZVNjcm9sbGVkQm90dG9tXG4gIH1cblxuICBpbml0KCkge1xuICAgIGV2ZW50QnVzLiRlbWl0KCdpbml0JywgZXZlbnQpO1xuXG4gICAgdGhpcy5hZGRUb2dnbGVNZW51KCk7XG4gICAgdGhpcy5hZGRUb2dnbGVGb290ZXIoKTtcbiAgICB0aGlzLmFkZFNjZW5lU2Nyb2xsZWRUb3AoKTtcbiAgICB0aGlzLmFkZFNjZW5lU2Nyb2xsZWRCb3R0b20oKTtcblxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIGFkZFRvZ2dsZU1lbnUoKSB7XG4gICAgbGV0IHRvZ2dsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudG9nZ2xlLW1lbnUnKTtcblxuICAgIGNvbnNvbGUubG9nKHRvZ2dsZXMpO1xuICAgIHRvZ2dsZXMuZm9yRWFjaCgodG9nZ2xlKSA9PiB7XG4gICAgICB0b2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnRCdXMuJGVtaXQoJ3RvZ2dsZS1tZW51Jyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFkZFRvZ2dsZUZvb3RlcigpIHtcbiAgICBsZXQgdG9nZ2xlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50b2dnbGUtZm9vdGVyJyk7XG5cbiAgICBjb25zb2xlLmxvZyh0b2dnbGVzKTtcbiAgICB0b2dnbGVzLmZvckVhY2goKHRvZ2dsZSkgPT4ge1xuICAgICAgdG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50QnVzLiRlbWl0KCd0b2dnbGUtZm9vdGVyJyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFkZFNjZW5lU2Nyb2xsZWRUb3AoKSB7XG4gICAgdGhpcy5zY2VuZVNjcm9sbGVkVG9wID0gbmV3IFNjcm9sbE1hZ2ljLlNjZW5lKHtcbiAgICAgIG9mZnNldDogY29uZmlnLm9mZnNldEZyb21Ub3BcbiAgICB9KS5hZGRUbyhzY3JvbGxDb250cm9sbGVyKTtcblxuICAgIHRoaXMuc2NlbmVTY3JvbGxlZFRvcC5vbignZW50ZXInLCAoZXZlbnQpID0+IHtcbiAgICAgIGV2ZW50QnVzLiRlbWl0KCdzY3JvbGxlZC1mcm9tLXRvcCcpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5zY2VuZVNjcm9sbGVkVG9wLm9uKCdsZWF2ZScsIChldmVudCkgPT4ge1xuICAgICAgZXZlbnRCdXMuJGVtaXQoJ3Njcm9sbGVkLXRvLXRvcCcpO1xuICAgIH0pO1xuICB9XG5cbiAgYWRkU2NlbmVTY3JvbGxlZEJvdHRvbSgpIHtcbiAgICB0aGlzLnNjZW5lU2Nyb2xsZWRCb3R0b20gPSBuZXcgU2Nyb2xsTWFnaWMuU2NlbmUoe1xuICAgICAgb2Zmc2V0OiBkb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodFxuICAgIH0pLmFkZFRvKHNjcm9sbENvbnRyb2xsZXIpO1xuXG4gICAgdGhpcy5zY2VuZVNjcm9sbGVkQm90dG9tLm9uKCdlbnRlcicsIChldmVudCkgPT4ge1xuICAgICAgZXZlbnRCdXMuJGVtaXQoJ3Njcm9sbGVkLXRvLWJvdHRvbScpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5zY2VuZVNjcm9sbGVkQm90dG9tLm9uKCdsZWF2ZScsIChldmVudCkgPT4ge1xuICAgICAgZXZlbnRCdXMuJGVtaXQoJ3Njcm9sbGVkLWZyb20tYm90dG9tJyk7XG4gICAgfSk7XG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdyZXNpemUnLFxuICAgICAgZGVib3VuY2UoKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50QnVzLiRlbWl0KCd3aW5kb3ctcmVzaXplZCcsIGV2ZW50KTtcbiAgICAgIH0sIDQwMClcbiAgICApO1xuXG4gICAgZXZlbnRCdXMuJG9uKCdiYXJiYS1wYWdlLWNoYW5nZScsIChldmVudCkgPT4ge1xuICAgICAgaWYgKHRoaXMuc2NlbmVTY3JvbGxlZEJvdHRvbSkge1xuICAgICAgICBzY3JvbGxDb250cm9sbGVyLnJlbW92ZVNjZW5lKHRoaXMuc2NlbmVTY3JvbGxlZEJvdHRvbSk7XG4gICAgICAgIHRoaXMuYWRkU2NlbmVTY3JvbGxlZEJvdHRvbSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBzaXRlTWFuYWdlciA9IG5ldyBTaXRlTWFuYWdlcigpO1xuIiwiZXhwb3J0IGNvbnN0IGRvY3VtZW50T2Zmc2V0ID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICBsZXQgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgc2Nyb2xsTGVmdCA9IHdpbmRvdy5wYWdlWE9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcFxuXG4gIHJldHVybiB7XG4gICAgdG9wOiByZWN0LnRvcCArIHNjcm9sbFRvcCxcbiAgICBsZWZ0OiByZWN0LmxlZnQgKyBzY3JvbGxMZWZ0XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGdldExpbmVIZWlnaHQgPSBmdW5jdGlvbihlbGVtZW50KXtcbiAgbGV0IHRlbXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW1lbnQubm9kZU5hbWUpO1xuICB0ZW1wLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsXCJtYXJnaW46MHB4O3BhZGRpbmc6MHB4O2ZvbnQtZmFtaWx5OlwiK2VsZW1lbnQuc3R5bGUuZm9udEZhbWlseStcIjtmb250LXNpemU6XCIrZWxlbWVudC5zdHlsZS5mb250U2l6ZSk7XG4gIHRlbXAuaW5uZXJIVE1MID0gXCJsb3JlbVwiO1xuICB0ZW1wID0gZWxlbWVudC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRlbXApO1xuICBcbiAgbGV0IGxpbmVIZWlnaHQgPSB0ZW1wLmNsaWVudEhlaWdodDtcbiAgdGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRlbXApO1xuICByZXR1cm4gbGluZUhlaWdodDtcbn0iXSwic291cmNlUm9vdCI6IiJ9